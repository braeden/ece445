
covert.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009138  080000c0  080000c0  000100c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  080091f8  080091f8  000191f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094dc  080094dc  000200f4  2**0
                  CONTENTS
  4 .ARM          00000000  080094dc  080094dc  000200f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080094dc  080094dc  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094dc  080094dc  000194dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094e0  080094e0  000194e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  080094e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00000794  200000f8  080095d8  000200f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000088c  080095d8  0002088c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000149af  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e06  00000000  00000000  00034acb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001278  00000000  00000000  000378d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001110  00000000  00000000  00038b50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b7da  00000000  00000000  00039c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000124a3  00000000  00000000  0005543a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a59ae  00000000  00000000  000678dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000fa  00000000  00000000  0010d28b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b20  00000000  00000000  0010d388  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000f8 	.word	0x200000f8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080091cc 	.word	0x080091cc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000fc 	.word	0x200000fc
 8000104:	080091cc 	.word	0x080091cc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_lmul>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	46ce      	mov	lr, r9
 8000224:	4647      	mov	r7, r8
 8000226:	0415      	lsls	r5, r2, #16
 8000228:	0c2d      	lsrs	r5, r5, #16
 800022a:	002e      	movs	r6, r5
 800022c:	b580      	push	{r7, lr}
 800022e:	0407      	lsls	r7, r0, #16
 8000230:	0c14      	lsrs	r4, r2, #16
 8000232:	0c3f      	lsrs	r7, r7, #16
 8000234:	4699      	mov	r9, r3
 8000236:	0c03      	lsrs	r3, r0, #16
 8000238:	437e      	muls	r6, r7
 800023a:	435d      	muls	r5, r3
 800023c:	4367      	muls	r7, r4
 800023e:	4363      	muls	r3, r4
 8000240:	197f      	adds	r7, r7, r5
 8000242:	0c34      	lsrs	r4, r6, #16
 8000244:	19e4      	adds	r4, r4, r7
 8000246:	469c      	mov	ip, r3
 8000248:	42a5      	cmp	r5, r4
 800024a:	d903      	bls.n	8000254 <__aeabi_lmul+0x34>
 800024c:	2380      	movs	r3, #128	; 0x80
 800024e:	025b      	lsls	r3, r3, #9
 8000250:	4698      	mov	r8, r3
 8000252:	44c4      	add	ip, r8
 8000254:	464b      	mov	r3, r9
 8000256:	4343      	muls	r3, r0
 8000258:	4351      	muls	r1, r2
 800025a:	0c25      	lsrs	r5, r4, #16
 800025c:	0436      	lsls	r6, r6, #16
 800025e:	4465      	add	r5, ip
 8000260:	0c36      	lsrs	r6, r6, #16
 8000262:	0424      	lsls	r4, r4, #16
 8000264:	19a4      	adds	r4, r4, r6
 8000266:	195b      	adds	r3, r3, r5
 8000268:	1859      	adds	r1, r3, r1
 800026a:	0020      	movs	r0, r4
 800026c:	bc0c      	pop	{r2, r3}
 800026e:	4690      	mov	r8, r2
 8000270:	4699      	mov	r9, r3
 8000272:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000274 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000274:	b5b0      	push	{r4, r5, r7, lr}
 8000276:	b0a4      	sub	sp, #144	; 0x90
 8000278:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800027a:	f001 fdf7 	bl	8001e6c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800027e:	f000 fa49 	bl	8000714 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	EraseInitStruct.Banks = FLASH_BANK_1;
 8000282:	4bc7      	ldr	r3, [pc, #796]	; (80005a0 <main+0x32c>)
 8000284:	2204      	movs	r2, #4
 8000286:	605a      	str	r2, [r3, #4]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000288:	4bc5      	ldr	r3, [pc, #788]	; (80005a0 <main+0x32c>)
 800028a:	2202      	movs	r2, #2
 800028c:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Page = (FLASH_PAGE_NB - 1);
 800028e:	4bc4      	ldr	r3, [pc, #784]	; (80005a0 <main+0x32c>)
 8000290:	223f      	movs	r2, #63	; 0x3f
 8000292:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbPages = 1;
 8000294:	4bc2      	ldr	r3, [pc, #776]	; (80005a0 <main+0x32c>)
 8000296:	2201      	movs	r2, #1
 8000298:	60da      	str	r2, [r3, #12]

	recording.enabled = 0;
 800029a:	4bc2      	ldr	r3, [pc, #776]	; (80005a4 <main+0x330>)
 800029c:	2200      	movs	r2, #0
 800029e:	701a      	strb	r2, [r3, #0]
	playback.enabled = 0;
 80002a0:	4bc1      	ldr	r3, [pc, #772]	; (80005a8 <main+0x334>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	701a      	strb	r2, [r3, #0]

	radio.spi_handle = &hspi1;
 80002a6:	4bc1      	ldr	r3, [pc, #772]	; (80005ac <main+0x338>)
 80002a8:	4ac1      	ldr	r2, [pc, #772]	; (80005b0 <main+0x33c>)
 80002aa:	601a      	str	r2, [r3, #0]

	radio.nss_port = RADIO_CS_GPIO_Port;
 80002ac:	4bbf      	ldr	r3, [pc, #764]	; (80005ac <main+0x338>)
 80002ae:	22a0      	movs	r2, #160	; 0xa0
 80002b0:	05d2      	lsls	r2, r2, #23
 80002b2:	605a      	str	r2, [r3, #4]
	radio.nss_pin = RADIO_CS_Pin;
 80002b4:	4bbd      	ldr	r3, [pc, #756]	; (80005ac <main+0x338>)
 80002b6:	2280      	movs	r2, #128	; 0x80
 80002b8:	811a      	strh	r2, [r3, #8]
	radio.nrst_port = RADIO_RESET_GPIO_Port;
 80002ba:	4bbc      	ldr	r3, [pc, #752]	; (80005ac <main+0x338>)
 80002bc:	4abd      	ldr	r2, [pc, #756]	; (80005b4 <main+0x340>)
 80002be:	60da      	str	r2, [r3, #12]
	radio.nrst_pin = RADIO_RESET_Pin;
 80002c0:	4bba      	ldr	r3, [pc, #744]	; (80005ac <main+0x338>)
 80002c2:	2210      	movs	r2, #16
 80002c4:	821a      	strh	r2, [r3, #16]
	radio.irq_port = RADIO_INT_GPIO_Port;
 80002c6:	4bb9      	ldr	r3, [pc, #740]	; (80005ac <main+0x338>)
 80002c8:	22a0      	movs	r2, #160	; 0xa0
 80002ca:	05d2      	lsls	r2, r2, #23
 80002cc:	615a      	str	r2, [r3, #20]
	radio.irq_pin = RADIO_INT_Pin;
 80002ce:	4bb7      	ldr	r3, [pc, #732]	; (80005ac <main+0x338>)
 80002d0:	2201      	movs	r2, #1
 80002d2:	831a      	strh	r2, [r3, #24]

	radio.txDone = true;
 80002d4:	4bb5      	ldr	r3, [pc, #724]	; (80005ac <main+0x338>)
 80002d6:	2222      	movs	r2, #34	; 0x22
 80002d8:	2101      	movs	r1, #1
 80002da:	5499      	strb	r1, [r3, r2]
	radio.rxDoneCallback = readingCallback;
 80002dc:	4bb3      	ldr	r3, [pc, #716]	; (80005ac <main+0x338>)
 80002de:	4ab6      	ldr	r2, [pc, #728]	; (80005b8 <main+0x344>)
 80002e0:	625a      	str	r2, [r3, #36]	; 0x24

	aKeys.gotOther = 0;
 80002e2:	4bb6      	ldr	r3, [pc, #728]	; (80005bc <main+0x348>)
 80002e4:	2280      	movs	r2, #128	; 0x80
 80002e6:	2100      	movs	r1, #0
 80002e8:	5499      	strb	r1, [r3, r2]
	aKeys.pairing = 0;
 80002ea:	4bb4      	ldr	r3, [pc, #720]	; (80005bc <main+0x348>)
 80002ec:	2282      	movs	r2, #130	; 0x82
 80002ee:	2100      	movs	r1, #0
 80002f0:	5499      	strb	r1, [r3, r2]
	aKeys.masterSent = 0;
 80002f2:	4bb2      	ldr	r3, [pc, #712]	; (80005bc <main+0x348>)
 80002f4:	2281      	movs	r2, #129	; 0x81
 80002f6:	2100      	movs	r1, #0
 80002f8:	5499      	strb	r1, [r3, r2]
	aKeys.sharedSecret[0] = 0;
 80002fa:	4bb0      	ldr	r3, [pc, #704]	; (80005bc <main+0x348>)
 80002fc:	2260      	movs	r2, #96	; 0x60
 80002fe:	2100      	movs	r1, #0
 8000300:	5499      	strb	r1, [r3, r2]

	outgoing.data = 0;
 8000302:	4baf      	ldr	r3, [pc, #700]	; (80005c0 <main+0x34c>)
 8000304:	3306      	adds	r3, #6
 8000306:	781a      	ldrb	r2, [r3, #0]
 8000308:	2100      	movs	r1, #0
 800030a:	400a      	ands	r2, r1
 800030c:	701a      	strb	r2, [r3, #0]
 800030e:	785a      	ldrb	r2, [r3, #1]
 8000310:	2100      	movs	r1, #0
 8000312:	400a      	ands	r2, r1
 8000314:	705a      	strb	r2, [r3, #1]
 8000316:	789a      	ldrb	r2, [r3, #2]
 8000318:	2100      	movs	r1, #0
 800031a:	400a      	ands	r2, r1
 800031c:	709a      	strb	r2, [r3, #2]
 800031e:	78da      	ldrb	r2, [r3, #3]
 8000320:	2100      	movs	r1, #0
 8000322:	400a      	ands	r2, r1
 8000324:	70da      	strb	r2, [r3, #3]
 8000326:	791a      	ldrb	r2, [r3, #4]
 8000328:	2100      	movs	r1, #0
 800032a:	400a      	ands	r2, r1
 800032c:	711a      	strb	r2, [r3, #4]
 800032e:	795a      	ldrb	r2, [r3, #5]
 8000330:	2100      	movs	r1, #0
 8000332:	400a      	ands	r2, r1
 8000334:	715a      	strb	r2, [r3, #5]
 8000336:	799a      	ldrb	r2, [r3, #6]
 8000338:	2100      	movs	r1, #0
 800033a:	400a      	ands	r2, r1
 800033c:	719a      	strb	r2, [r3, #6]
 800033e:	79da      	ldrb	r2, [r3, #7]
 8000340:	2100      	movs	r1, #0
 8000342:	400a      	ands	r2, r1
 8000344:	71da      	strb	r2, [r3, #7]

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000346:	f000 fbe7 	bl	8000b18 <MX_GPIO_Init>
	MX_AES_Init();
 800034a:	f000 fa67 	bl	800081c <MX_AES_Init>
	MX_RNG_Init();
 800034e:	f000 fab9 	bl	80008c4 <MX_RNG_Init>
	MX_CRC_Init();
 8000352:	f000 fa93 	bl	800087c <MX_CRC_Init>
	MX_TIM16_Init();
 8000356:	f000 fbb7 	bl	8000ac8 <MX_TIM16_Init>
	MX_TIM1_Init();
 800035a:	f000 fb09 	bl	8000970 <MX_TIM1_Init>
	MX_SPI1_Init();
 800035e:	f000 fac9 	bl	80008f4 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	if (!rfm95_init(&radio)) {
 8000362:	4b92      	ldr	r3, [pc, #584]	; (80005ac <main+0x338>)
 8000364:	0018      	movs	r0, r3
 8000366:	f000 ff91 	bl	800128c <rfm95_init>
 800036a:	0003      	movs	r3, r0
 800036c:	001a      	movs	r2, r3
 800036e:	2301      	movs	r3, #1
 8000370:	4053      	eors	r3, r2
 8000372:	b2db      	uxtb	r3, r3
 8000374:	2b00      	cmp	r3, #0
 8000376:	d007      	beq.n	8000388 <main+0x114>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000378:	2380      	movs	r3, #128	; 0x80
 800037a:	00db      	lsls	r3, r3, #3
 800037c:	488d      	ldr	r0, [pc, #564]	; (80005b4 <main+0x340>)
 800037e:	2201      	movs	r2, #1
 8000380:	0019      	movs	r1, r3
 8000382:	f003 fc92 	bl	8003caa <HAL_GPIO_WritePin>
		while (1) {
 8000386:	e7fe      	b.n	8000386 <main+0x112>

		}
	}

	HAL_TIM_Base_Start_IT(&htim16);
 8000388:	4b8e      	ldr	r3, [pc, #568]	; (80005c4 <main+0x350>)
 800038a:	0018      	movs	r0, r3
 800038c:	f005 fb92 	bl	8005ab4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000390:	4b8d      	ldr	r3, [pc, #564]	; (80005c8 <main+0x354>)
 8000392:	2100      	movs	r1, #0
 8000394:	0018      	movs	r0, r3
 8000396:	f005 fc41 	bl	8005c1c <HAL_TIM_PWM_Start>

	readKeyFromFlash(pKeyAES, &EraseInitStruct);
 800039a:	4a81      	ldr	r2, [pc, #516]	; (80005a0 <main+0x32c>)
 800039c:	4b8b      	ldr	r3, [pc, #556]	; (80005cc <main+0x358>)
 800039e:	0011      	movs	r1, r2
 80003a0:	0018      	movs	r0, r3
 80003a2:	f000 ff13 	bl	80011cc <readKeyFromFlash>
	// We lost our random key or we want a reset?
	if (RESET || pKeyAES[0] == 0 || pKeyAES[0] == UINT32_MAX) {
 80003a6:	4b89      	ldr	r3, [pc, #548]	; (80005cc <main+0x358>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d003      	beq.n	80003b6 <main+0x142>
 80003ae:	4b87      	ldr	r3, [pc, #540]	; (80005cc <main+0x358>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	3301      	adds	r3, #1
 80003b4:	d14d      	bne.n	8000452 <main+0x1de>
		uint64_t tmp[2];
		for (int i = 0; i < 2; i++) {
 80003b6:	2300      	movs	r3, #0
 80003b8:	2280      	movs	r2, #128	; 0x80
 80003ba:	18ba      	adds	r2, r7, r2
 80003bc:	6013      	str	r3, [r2, #0]
 80003be:	e036      	b.n	800042e <main+0x1ba>
			if (HAL_RNG_GenerateRandomNumber(&hrng, &tmp[i]) != HAL_OK)
 80003c0:	2368      	movs	r3, #104	; 0x68
 80003c2:	18fa      	adds	r2, r7, r3
 80003c4:	2380      	movs	r3, #128	; 0x80
 80003c6:	18fb      	adds	r3, r7, r3
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	00db      	lsls	r3, r3, #3
 80003cc:	18d2      	adds	r2, r2, r3
 80003ce:	4b80      	ldr	r3, [pc, #512]	; (80005d0 <main+0x35c>)
 80003d0:	0011      	movs	r1, r2
 80003d2:	0018      	movs	r0, r3
 80003d4:	f004 fbc7 	bl	8004b66 <HAL_RNG_GenerateRandomNumber>
 80003d8:	1e03      	subs	r3, r0, #0
 80003da:	d001      	beq.n	80003e0 <main+0x16c>
				Error_Handler();
 80003dc:	f000 ff51 	bl	8001282 <Error_Handler>
			tmp[i] <<= 32;
 80003e0:	2168      	movs	r1, #104	; 0x68
 80003e2:	187a      	adds	r2, r7, r1
 80003e4:	2080      	movs	r0, #128	; 0x80
 80003e6:	183b      	adds	r3, r7, r0
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	00db      	lsls	r3, r3, #3
 80003ec:	18d3      	adds	r3, r2, r3
 80003ee:	681a      	ldr	r2, [r3, #0]
 80003f0:	685b      	ldr	r3, [r3, #4]
 80003f2:	0015      	movs	r5, r2
 80003f4:	2300      	movs	r3, #0
 80003f6:	001c      	movs	r4, r3
 80003f8:	187a      	adds	r2, r7, r1
 80003fa:	183b      	adds	r3, r7, r0
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	00db      	lsls	r3, r3, #3
 8000400:	18d3      	adds	r3, r2, r3
 8000402:	601c      	str	r4, [r3, #0]
 8000404:	605d      	str	r5, [r3, #4]
			if (HAL_RNG_GenerateRandomNumber(&hrng, &tmp[i]) != HAL_OK)
 8000406:	187a      	adds	r2, r7, r1
 8000408:	183b      	adds	r3, r7, r0
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	00db      	lsls	r3, r3, #3
 800040e:	18d2      	adds	r2, r2, r3
 8000410:	4b6f      	ldr	r3, [pc, #444]	; (80005d0 <main+0x35c>)
 8000412:	0011      	movs	r1, r2
 8000414:	0018      	movs	r0, r3
 8000416:	f004 fba6 	bl	8004b66 <HAL_RNG_GenerateRandomNumber>
 800041a:	1e03      	subs	r3, r0, #0
 800041c:	d001      	beq.n	8000422 <main+0x1ae>
				Error_Handler();
 800041e:	f000 ff30 	bl	8001282 <Error_Handler>
		for (int i = 0; i < 2; i++) {
 8000422:	2280      	movs	r2, #128	; 0x80
 8000424:	18bb      	adds	r3, r7, r2
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	3301      	adds	r3, #1
 800042a:	18ba      	adds	r2, r7, r2
 800042c:	6013      	str	r3, [r2, #0]
 800042e:	2380      	movs	r3, #128	; 0x80
 8000430:	18fb      	adds	r3, r7, r3
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	2b01      	cmp	r3, #1
 8000436:	ddc3      	ble.n	80003c0 <main+0x14c>
		}
		writeKeyToFlash(tmp, &EraseInitStruct);
 8000438:	4a59      	ldr	r2, [pc, #356]	; (80005a0 <main+0x32c>)
 800043a:	2368      	movs	r3, #104	; 0x68
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	0011      	movs	r1, r2
 8000440:	0018      	movs	r0, r3
 8000442:	f000 fee8 	bl	8001216 <writeKeyToFlash>
		readKeyFromFlash(pKeyAES, &EraseInitStruct);
 8000446:	4a56      	ldr	r2, [pc, #344]	; (80005a0 <main+0x32c>)
 8000448:	4b60      	ldr	r3, [pc, #384]	; (80005cc <main+0x358>)
 800044a:	0011      	movs	r1, r2
 800044c:	0018      	movs	r0, r3
 800044e:	f000 febd 	bl	80011cc <readKeyFromFlash>
	}
	MX_AES_Init();
 8000452:	f000 f9e3 	bl	800081c <MX_AES_Init>

	// Generate a random sequence number for packets
	HAL_RNG_GenerateRandomNumber(&hrng, &deviceSeqs[DEVICE_ID]);
 8000456:	4a5f      	ldr	r2, [pc, #380]	; (80005d4 <main+0x360>)
 8000458:	4b5d      	ldr	r3, [pc, #372]	; (80005d0 <main+0x35c>)
 800045a:	0011      	movs	r1, r2
 800045c:	0018      	movs	r0, r3
 800045e:	f004 fb82 	bl	8004b66 <HAL_RNG_GenerateRandomNumber>

	// Might as well generate a public key in advance
	for (int i = 0; i < 8; i++) {
 8000462:	2300      	movs	r3, #0
 8000464:	2284      	movs	r2, #132	; 0x84
 8000466:	18ba      	adds	r2, r7, r2
 8000468:	6013      	str	r3, [r2, #0]
 800046a:	e00f      	b.n	800048c <main+0x218>
		HAL_RNG_GenerateRandomNumber(&hrng, &aKeys.privateKey[i]);
 800046c:	2484      	movs	r4, #132	; 0x84
 800046e:	193b      	adds	r3, r7, r4
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	009a      	lsls	r2, r3, #2
 8000474:	4b51      	ldr	r3, [pc, #324]	; (80005bc <main+0x348>)
 8000476:	18d2      	adds	r2, r2, r3
 8000478:	4b55      	ldr	r3, [pc, #340]	; (80005d0 <main+0x35c>)
 800047a:	0011      	movs	r1, r2
 800047c:	0018      	movs	r0, r3
 800047e:	f004 fb72 	bl	8004b66 <HAL_RNG_GenerateRandomNumber>
	for (int i = 0; i < 8; i++) {
 8000482:	193b      	adds	r3, r7, r4
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	3301      	adds	r3, #1
 8000488:	193a      	adds	r2, r7, r4
 800048a:	6013      	str	r3, [r2, #0]
 800048c:	2384      	movs	r3, #132	; 0x84
 800048e:	18fb      	adds	r3, r7, r3
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	2b07      	cmp	r3, #7
 8000494:	ddea      	ble.n	800046c <main+0x1f8>
	}
	C25519keyGen((uint8_t*) aKeys.privateKey, aKeys.publicKey);
 8000496:	4a50      	ldr	r2, [pc, #320]	; (80005d8 <main+0x364>)
 8000498:	4b48      	ldr	r3, [pc, #288]	; (80005bc <main+0x348>)
 800049a:	0011      	movs	r1, r2
 800049c:	0018      	movs	r0, r3
 800049e:	f007 fe85 	bl	80081ac <C25519keyGen>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (aKeys.pairing && aKeys.pairing++ <= 5) {
 80004a2:	4b46      	ldr	r3, [pc, #280]	; (80005bc <main+0x348>)
 80004a4:	2282      	movs	r2, #130	; 0x82
 80004a6:	5c9b      	ldrb	r3, [r3, r2]
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d023      	beq.n	80004f6 <main+0x282>
 80004ae:	4b43      	ldr	r3, [pc, #268]	; (80005bc <main+0x348>)
 80004b0:	2282      	movs	r2, #130	; 0x82
 80004b2:	5c9b      	ldrb	r3, [r3, r2]
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	1c5a      	adds	r2, r3, #1
 80004b8:	b2d0      	uxtb	r0, r2
 80004ba:	4a40      	ldr	r2, [pc, #256]	; (80005bc <main+0x348>)
 80004bc:	2182      	movs	r1, #130	; 0x82
 80004be:	5450      	strb	r0, [r2, r1]
 80004c0:	2b05      	cmp	r3, #5
 80004c2:	d818      	bhi.n	80004f6 <main+0x282>
			// send our public key in plaintext.
			transmitPackage(aKeys.publicKey, 32);
 80004c4:	4b44      	ldr	r3, [pc, #272]	; (80005d8 <main+0x364>)
 80004c6:	2120      	movs	r1, #32
 80004c8:	0018      	movs	r0, r3
 80004ca:	f001 f8a9 	bl	8001620 <transmitPackage>
			// randomize the delay here todo
			uint32_t randoffset = 0;
 80004ce:	2300      	movs	r3, #0
 80004d0:	667b      	str	r3, [r7, #100]	; 0x64
			HAL_RNG_GenerateRandomNumber(&hrng, &randoffset);
 80004d2:	2364      	movs	r3, #100	; 0x64
 80004d4:	18fa      	adds	r2, r7, r3
 80004d6:	4b3e      	ldr	r3, [pc, #248]	; (80005d0 <main+0x35c>)
 80004d8:	0011      	movs	r1, r2
 80004da:	0018      	movs	r0, r3
 80004dc:	f004 fb43 	bl	8004b66 <HAL_RNG_GenerateRandomNumber>

			HAL_Delay(1000 + (randoffset & 0x7ff));
 80004e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80004e2:	055b      	lsls	r3, r3, #21
 80004e4:	0d5b      	lsrs	r3, r3, #21
 80004e6:	22fa      	movs	r2, #250	; 0xfa
 80004e8:	0092      	lsls	r2, r2, #2
 80004ea:	4694      	mov	ip, r2
 80004ec:	4463      	add	r3, ip
 80004ee:	0018      	movs	r0, r3
 80004f0:	f001 fd42 	bl	8001f78 <HAL_Delay>
 80004f4:	e7d5      	b.n	80004a2 <main+0x22e>
			continue;
		} else {
			aKeys.pairing = 0;
 80004f6:	4b31      	ldr	r3, [pc, #196]	; (80005bc <main+0x348>)
 80004f8:	2282      	movs	r2, #130	; 0x82
 80004fa:	2100      	movs	r1, #0
 80004fc:	5499      	strb	r1, [r3, r2]
		}

		if (aKeys.gotOther) {
 80004fe:	4b2f      	ldr	r3, [pc, #188]	; (80005bc <main+0x348>)
 8000500:	2280      	movs	r2, #128	; 0x80
 8000502:	5c9b      	ldrb	r3, [r3, r2]
 8000504:	b2db      	uxtb	r3, r3
 8000506:	2b00      	cmp	r3, #0
 8000508:	d011      	beq.n	800052e <main+0x2ba>
			C25519keyExchange(aKeys.sharedSecret, (uint8_t*) aKeys.privateKey,
 800050a:	4a34      	ldr	r2, [pc, #208]	; (80005dc <main+0x368>)
 800050c:	492b      	ldr	r1, [pc, #172]	; (80005bc <main+0x348>)
 800050e:	4b34      	ldr	r3, [pc, #208]	; (80005e0 <main+0x36c>)
 8000510:	0018      	movs	r0, r3
 8000512:	f007 fe71 	bl	80081f8 <C25519keyExchange>
					aKeys.otherPublicKey);
			rfm95_init(&radio);
 8000516:	4b25      	ldr	r3, [pc, #148]	; (80005ac <main+0x338>)
 8000518:	0018      	movs	r0, r3
 800051a:	f000 feb7 	bl	800128c <rfm95_init>
			aKeys.gotOther = 0;
 800051e:	4b27      	ldr	r3, [pc, #156]	; (80005bc <main+0x348>)
 8000520:	2280      	movs	r2, #128	; 0x80
 8000522:	2100      	movs	r1, #0
 8000524:	5499      	strb	r1, [r3, r2]
			aKeys.masterSent = 1;
 8000526:	4b25      	ldr	r3, [pc, #148]	; (80005bc <main+0x348>)
 8000528:	2281      	movs	r2, #129	; 0x81
 800052a:	2101      	movs	r1, #1
 800052c:	5499      	strb	r1, [r3, r2]
		}

		if (aKeys.masterSent && aKeys.masterSent++ <= 10) {
 800052e:	4b23      	ldr	r3, [pc, #140]	; (80005bc <main+0x348>)
 8000530:	2281      	movs	r2, #129	; 0x81
 8000532:	5c9b      	ldrb	r3, [r3, r2]
 8000534:	b2db      	uxtb	r3, r3
 8000536:	2b00      	cmp	r3, #0
 8000538:	d056      	beq.n	80005e8 <main+0x374>
 800053a:	4b20      	ldr	r3, [pc, #128]	; (80005bc <main+0x348>)
 800053c:	2281      	movs	r2, #129	; 0x81
 800053e:	5c9b      	ldrb	r3, [r3, r2]
 8000540:	b2db      	uxtb	r3, r3
 8000542:	1c5a      	adds	r2, r3, #1
 8000544:	b2d0      	uxtb	r0, r2
 8000546:	4a1d      	ldr	r2, [pc, #116]	; (80005bc <main+0x348>)
 8000548:	2181      	movs	r1, #129	; 0x81
 800054a:	5450      	strb	r0, [r2, r1]
 800054c:	2b0a      	cmp	r3, #10
 800054e:	d84b      	bhi.n	80005e8 <main+0x374>
				memcpy(pKeyAES, oldPkeys, AESKeySize);
				MX_AES_Init();
			} else {
				//we're a slave device and we can just sit and wait for master count to ++
			}
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000550:	2380      	movs	r3, #128	; 0x80
 8000552:	009b      	lsls	r3, r3, #2
 8000554:	4823      	ldr	r0, [pc, #140]	; (80005e4 <main+0x370>)
 8000556:	2200      	movs	r2, #0
 8000558:	0019      	movs	r1, r3
 800055a:	f003 fba6 	bl	8003caa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800055e:	2380      	movs	r3, #128	; 0x80
 8000560:	00db      	lsls	r3, r3, #3
 8000562:	4814      	ldr	r0, [pc, #80]	; (80005b4 <main+0x340>)
 8000564:	2201      	movs	r2, #1
 8000566:	0019      	movs	r1, r3
 8000568:	f003 fb9f 	bl	8003caa <HAL_GPIO_WritePin>
			HAL_Delay(500);
 800056c:	23fa      	movs	r3, #250	; 0xfa
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	0018      	movs	r0, r3
 8000572:	f001 fd01 	bl	8001f78 <HAL_Delay>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000576:	2380      	movs	r3, #128	; 0x80
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	481a      	ldr	r0, [pc, #104]	; (80005e4 <main+0x370>)
 800057c:	2201      	movs	r2, #1
 800057e:	0019      	movs	r1, r3
 8000580:	f003 fb93 	bl	8003caa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	00db      	lsls	r3, r3, #3
 8000588:	480a      	ldr	r0, [pc, #40]	; (80005b4 <main+0x340>)
 800058a:	2200      	movs	r2, #0
 800058c:	0019      	movs	r1, r3
 800058e:	f003 fb8c 	bl	8003caa <HAL_GPIO_WritePin>
			HAL_Delay(500);
 8000592:	23fa      	movs	r3, #250	; 0xfa
 8000594:	005b      	lsls	r3, r3, #1
 8000596:	0018      	movs	r0, r3
 8000598:	f001 fcee 	bl	8001f78 <HAL_Delay>
			continue;
 800059c:	e0b0      	b.n	8000700 <main+0x48c>
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	20000588 	.word	0x20000588
 80005a4:	20000610 	.word	0x20000610
 80005a8:	20000578 	.word	0x20000578
 80005ac:	20000598 	.word	0x20000598
 80005b0:	20000634 	.word	0x20000634
 80005b4:	50000800 	.word	0x50000800
 80005b8:	08001021 	.word	0x08001021
 80005bc:	20000698 	.word	0x20000698
 80005c0:	20000874 	.word	0x20000874
 80005c4:	2000071c 	.word	0x2000071c
 80005c8:	200005c4 	.word	0x200005c4
 80005cc:	20000114 	.word	0x20000114
 80005d0:	20000620 	.word	0x20000620
 80005d4:	20000130 	.word	0x20000130
 80005d8:	200006b8 	.word	0x200006b8
 80005dc:	200006d8 	.word	0x200006d8
 80005e0:	200006f8 	.word	0x200006f8
 80005e4:	50000400 	.word	0x50000400
		} else {
			aKeys.masterSent = 0;
 80005e8:	4b46      	ldr	r3, [pc, #280]	; (8000704 <main+0x490>)
 80005ea:	2281      	movs	r2, #129	; 0x81
 80005ec:	2100      	movs	r1, #0
 80005ee:	5499      	strb	r1, [r3, r2]
		}

		if (outgoing.data) {
 80005f0:	4b45      	ldr	r3, [pc, #276]	; (8000708 <main+0x494>)
 80005f2:	7998      	ldrb	r0, [r3, #6]
 80005f4:	79dc      	ldrb	r4, [r3, #7]
 80005f6:	0224      	lsls	r4, r4, #8
 80005f8:	4320      	orrs	r0, r4
 80005fa:	7a1c      	ldrb	r4, [r3, #8]
 80005fc:	0424      	lsls	r4, r4, #16
 80005fe:	4320      	orrs	r0, r4
 8000600:	7a5c      	ldrb	r4, [r3, #9]
 8000602:	0624      	lsls	r4, r4, #24
 8000604:	4320      	orrs	r0, r4
 8000606:	0001      	movs	r1, r0
 8000608:	7a98      	ldrb	r0, [r3, #10]
 800060a:	7adc      	ldrb	r4, [r3, #11]
 800060c:	0224      	lsls	r4, r4, #8
 800060e:	4320      	orrs	r0, r4
 8000610:	7b1c      	ldrb	r4, [r3, #12]
 8000612:	0424      	lsls	r4, r4, #16
 8000614:	4320      	orrs	r0, r4
 8000616:	7b5b      	ldrb	r3, [r3, #13]
 8000618:	061b      	lsls	r3, r3, #24
 800061a:	4303      	orrs	r3, r0
 800061c:	001a      	movs	r2, r3
 800061e:	000b      	movs	r3, r1
 8000620:	4313      	orrs	r3, r2
 8000622:	d063      	beq.n	80006ec <main+0x478>
			//encrypt and transmit the outgoing packet
			uint32_t tempin[4] = { 0 };
 8000624:	2444      	movs	r4, #68	; 0x44
 8000626:	193b      	adds	r3, r7, r4
 8000628:	0018      	movs	r0, r3
 800062a:	2310      	movs	r3, #16
 800062c:	001a      	movs	r2, r3
 800062e:	2100      	movs	r1, #0
 8000630:	f007 fe65 	bl	80082fe <memset>
			uint32_t tempout[4] = { 0 };
 8000634:	2534      	movs	r5, #52	; 0x34
 8000636:	197b      	adds	r3, r7, r5
 8000638:	0018      	movs	r0, r3
 800063a:	2310      	movs	r3, #16
 800063c:	001a      	movs	r2, r3
 800063e:	2100      	movs	r1, #0
 8000640:	f007 fe5d 	bl	80082fe <memset>
			memcpy(tempin, &outgoing, sizeof(Packet));
 8000644:	193a      	adds	r2, r7, r4
 8000646:	4b30      	ldr	r3, [pc, #192]	; (8000708 <main+0x494>)
 8000648:	0010      	movs	r0, r2
 800064a:	0019      	movs	r1, r3
 800064c:	230e      	movs	r3, #14
 800064e:	001a      	movs	r2, r3
 8000650:	f007 fe4c 	bl	80082ec <memcpy>
			HAL_CRYP_Encrypt(&hcryp, (uint8_t*) tempin, 16, (uint8_t*) tempout,
 8000654:	197a      	adds	r2, r7, r5
 8000656:	1939      	adds	r1, r7, r4
 8000658:	482c      	ldr	r0, [pc, #176]	; (800070c <main+0x498>)
 800065a:	2301      	movs	r3, #1
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	0013      	movs	r3, r2
 8000660:	2210      	movs	r2, #16
 8000662:	f001 fea9 	bl	80023b8 <HAL_CRYP_Encrypt>
					1);
			outgoing.data = 0;
 8000666:	4b28      	ldr	r3, [pc, #160]	; (8000708 <main+0x494>)
 8000668:	3306      	adds	r3, #6
 800066a:	781a      	ldrb	r2, [r3, #0]
 800066c:	2100      	movs	r1, #0
 800066e:	400a      	ands	r2, r1
 8000670:	701a      	strb	r2, [r3, #0]
 8000672:	785a      	ldrb	r2, [r3, #1]
 8000674:	2100      	movs	r1, #0
 8000676:	400a      	ands	r2, r1
 8000678:	705a      	strb	r2, [r3, #1]
 800067a:	789a      	ldrb	r2, [r3, #2]
 800067c:	2100      	movs	r1, #0
 800067e:	400a      	ands	r2, r1
 8000680:	709a      	strb	r2, [r3, #2]
 8000682:	78da      	ldrb	r2, [r3, #3]
 8000684:	2100      	movs	r1, #0
 8000686:	400a      	ands	r2, r1
 8000688:	70da      	strb	r2, [r3, #3]
 800068a:	791a      	ldrb	r2, [r3, #4]
 800068c:	2100      	movs	r1, #0
 800068e:	400a      	ands	r2, r1
 8000690:	711a      	strb	r2, [r3, #4]
 8000692:	795a      	ldrb	r2, [r3, #5]
 8000694:	2100      	movs	r1, #0
 8000696:	400a      	ands	r2, r1
 8000698:	715a      	strb	r2, [r3, #5]
 800069a:	799a      	ldrb	r2, [r3, #6]
 800069c:	2100      	movs	r1, #0
 800069e:	400a      	ands	r2, r1
 80006a0:	719a      	strb	r2, [r3, #6]
 80006a2:	79da      	ldrb	r2, [r3, #7]
 80006a4:	2100      	movs	r1, #0
 80006a6:	400a      	ands	r2, r1
 80006a8:	71da      	strb	r2, [r3, #7]
			for (uint8_t i = 0; i < 3; i++) {
 80006aa:	237f      	movs	r3, #127	; 0x7f
 80006ac:	18fb      	adds	r3, r7, r3
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
 80006b2:	e015      	b.n	80006e0 <main+0x46c>
				while (!transmitPackage((uint8_t*) tempout, 16)) {
					HAL_Delay(70);
 80006b4:	2046      	movs	r0, #70	; 0x46
 80006b6:	f001 fc5f 	bl	8001f78 <HAL_Delay>
				while (!transmitPackage((uint8_t*) tempout, 16)) {
 80006ba:	2334      	movs	r3, #52	; 0x34
 80006bc:	18fb      	adds	r3, r7, r3
 80006be:	2110      	movs	r1, #16
 80006c0:	0018      	movs	r0, r3
 80006c2:	f000 ffad 	bl	8001620 <transmitPackage>
 80006c6:	0003      	movs	r3, r0
 80006c8:	001a      	movs	r2, r3
 80006ca:	2301      	movs	r3, #1
 80006cc:	4053      	eors	r3, r2
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d1ef      	bne.n	80006b4 <main+0x440>
			for (uint8_t i = 0; i < 3; i++) {
 80006d4:	217f      	movs	r1, #127	; 0x7f
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	781a      	ldrb	r2, [r3, #0]
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	3201      	adds	r2, #1
 80006de:	701a      	strb	r2, [r3, #0]
 80006e0:	237f      	movs	r3, #127	; 0x7f
 80006e2:	18fb      	adds	r3, r7, r3
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b02      	cmp	r3, #2
 80006e8:	d9e7      	bls.n	80006ba <main+0x446>
 80006ea:	e6da      	b.n	80004a2 <main+0x22e>
				}
			}
			continue;
		}

		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80006ec:	2380      	movs	r3, #128	; 0x80
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	4a07      	ldr	r2, [pc, #28]	; (8000710 <main+0x49c>)
 80006f2:	0019      	movs	r1, r3
 80006f4:	0010      	movs	r0, r2
 80006f6:	f003 faf5 	bl	8003ce4 <HAL_GPIO_TogglePin>

//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
		HAL_Delay(10);
 80006fa:	200a      	movs	r0, #10
 80006fc:	f001 fc3c 	bl	8001f78 <HAL_Delay>
		if (aKeys.pairing && aKeys.pairing++ <= 5) {
 8000700:	e6cf      	b.n	80004a2 <main+0x22e>
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	20000698 	.word	0x20000698
 8000708:	20000874 	.word	0x20000874
 800070c:	20000768 	.word	0x20000768
 8000710:	50000400 	.word	0x50000400

08000714 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000714:	b590      	push	{r4, r7, lr}
 8000716:	b0a1      	sub	sp, #132	; 0x84
 8000718:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800071a:	2448      	movs	r4, #72	; 0x48
 800071c:	193b      	adds	r3, r7, r4
 800071e:	0018      	movs	r0, r3
 8000720:	2338      	movs	r3, #56	; 0x38
 8000722:	001a      	movs	r2, r3
 8000724:	2100      	movs	r1, #0
 8000726:	f007 fdea 	bl	80082fe <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800072a:	2338      	movs	r3, #56	; 0x38
 800072c:	18fb      	adds	r3, r7, r3
 800072e:	0018      	movs	r0, r3
 8000730:	2310      	movs	r3, #16
 8000732:	001a      	movs	r2, r3
 8000734:	2100      	movs	r1, #0
 8000736:	f007 fde2 	bl	80082fe <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800073a:	003b      	movs	r3, r7
 800073c:	0018      	movs	r0, r3
 800073e:	2338      	movs	r3, #56	; 0x38
 8000740:	001a      	movs	r2, r3
 8000742:	2100      	movs	r1, #0
 8000744:	f007 fddb 	bl	80082fe <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000748:	2380      	movs	r3, #128	; 0x80
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	0018      	movs	r0, r3
 800074e:	f003 fb0f 	bl	8003d70 <HAL_PWREx_ControlVoltageScaling>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000752:	193b      	adds	r3, r7, r4
 8000754:	2202      	movs	r2, #2
 8000756:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000758:	193b      	adds	r3, r7, r4
 800075a:	2280      	movs	r2, #128	; 0x80
 800075c:	0052      	lsls	r2, r2, #1
 800075e:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000760:	0021      	movs	r1, r4
 8000762:	187b      	adds	r3, r7, r1
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000768:	187b      	adds	r3, r7, r1
 800076a:	2240      	movs	r2, #64	; 0x40
 800076c:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2202      	movs	r2, #2
 8000772:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000774:	187b      	adds	r3, r7, r1
 8000776:	2202      	movs	r2, #2
 8000778:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800077a:	187b      	adds	r3, r7, r1
 800077c:	2200      	movs	r2, #0
 800077e:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLN = 8;
 8000780:	187b      	adds	r3, r7, r1
 8000782:	2208      	movs	r2, #8
 8000784:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000786:	187b      	adds	r3, r7, r1
 8000788:	2280      	movs	r2, #128	; 0x80
 800078a:	0292      	lsls	r2, r2, #10
 800078c:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800078e:	187b      	adds	r3, r7, r1
 8000790:	2280      	movs	r2, #128	; 0x80
 8000792:	0492      	lsls	r2, r2, #18
 8000794:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2280      	movs	r2, #128	; 0x80
 800079a:	0592      	lsls	r2, r2, #22
 800079c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	0018      	movs	r0, r3
 80007a2:	f003 fb25 	bl	8003df0 <HAL_RCC_OscConfig>
 80007a6:	1e03      	subs	r3, r0, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0x9a>
		Error_Handler();
 80007aa:	f000 fd6a 	bl	8001282 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007ae:	2138      	movs	r1, #56	; 0x38
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	2207      	movs	r2, #7
 80007b4:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	2202      	movs	r2, #2
 80007ba:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	2200      	movs	r2, #0
 80007c6:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2102      	movs	r1, #2
 80007cc:	0018      	movs	r0, r3
 80007ce:	f003 fe2f 	bl	8004430 <HAL_RCC_ClockConfig>
 80007d2:	1e03      	subs	r3, r0, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0xc6>
		Error_Handler();
 80007d6:	f000 fd54 	bl	8001282 <Error_Handler>
	}
	/** Initializes the peripherals clocks
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG | RCC_PERIPHCLK_TIM1;
 80007da:	003b      	movs	r3, r7
 80007dc:	2290      	movs	r2, #144	; 0x90
 80007de:	0392      	lsls	r2, r2, #14
 80007e0:	601a      	str	r2, [r3, #0]
	PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI_DIV8;
 80007e2:	003b      	movs	r3, r7
 80007e4:	2280      	movs	r2, #128	; 0x80
 80007e6:	04d2      	lsls	r2, r2, #19
 80007e8:	621a      	str	r2, [r3, #32]
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 80007ea:	003b      	movs	r3, r7
 80007ec:	2200      	movs	r2, #0
 80007ee:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80007f0:	003b      	movs	r3, r7
 80007f2:	0018      	movs	r0, r3
 80007f4:	f003 ffa6 	bl	8004744 <HAL_RCCEx_PeriphCLKConfig>
 80007f8:	1e03      	subs	r3, r0, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0xec>
		Error_Handler();
 80007fc:	f000 fd41 	bl	8001282 <Error_Handler>
	}
	/** Configure the RNG clock.
	 */
	__HAL_RCC_RNGDIV_CONFIG(RCC_RNGCLK_DIV1);
 8000800:	4b04      	ldr	r3, [pc, #16]	; (8000814 <SystemClock_Config+0x100>)
 8000802:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000804:	4b03      	ldr	r3, [pc, #12]	; (8000814 <SystemClock_Config+0x100>)
 8000806:	4904      	ldr	r1, [pc, #16]	; (8000818 <SystemClock_Config+0x104>)
 8000808:	400a      	ands	r2, r1
 800080a:	655a      	str	r2, [r3, #84]	; 0x54
}
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	b021      	add	sp, #132	; 0x84
 8000812:	bd90      	pop	{r4, r7, pc}
 8000814:	40021000 	.word	0x40021000
 8000818:	cfffffff 	.word	0xcfffffff

0800081c <MX_AES_Init>:
/**
 * @brief AES Initialization Function
 * @param None
 * @retval None
 */
static void MX_AES_Init(void) {
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	/* USER CODE END AES_Init 0 */

	/* USER CODE BEGIN AES_Init 1 */

	/* USER CODE END AES_Init 1 */
	hcryp.Instance = AES;
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <MX_AES_Init+0x50>)
 8000822:	4a13      	ldr	r2, [pc, #76]	; (8000870 <MX_AES_Init+0x54>)
 8000824:	601a      	str	r2, [r3, #0]
	hcryp.Init.DataType = CRYP_DATATYPE_8B;
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_AES_Init+0x50>)
 8000828:	2204      	movs	r2, #4
 800082a:	605a      	str	r2, [r3, #4]
	hcryp.Init.KeySize = CRYP_KEYSIZE_128B;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_AES_Init+0x50>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
	hcryp.Init.pKey = (uint32_t*) pKeyAES;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_AES_Init+0x50>)
 8000834:	4a0f      	ldr	r2, [pc, #60]	; (8000874 <MX_AES_Init+0x58>)
 8000836:	60da      	str	r2, [r3, #12]
	hcryp.Init.pInitVect = (uint32_t*) pInitVectAES;
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_AES_Init+0x50>)
 800083a:	4a0f      	ldr	r2, [pc, #60]	; (8000878 <MX_AES_Init+0x5c>)
 800083c:	611a      	str	r2, [r3, #16]
	hcryp.Init.Algorithm = CRYP_AES_CBC;
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <MX_AES_Init+0x50>)
 8000840:	2220      	movs	r2, #32
 8000842:	615a      	str	r2, [r3, #20]
	hcryp.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_AES_Init+0x50>)
 8000846:	2201      	movs	r2, #1
 8000848:	625a      	str	r2, [r3, #36]	; 0x24
	hcryp.Init.HeaderWidthUnit = CRYP_HEADERWIDTHUNIT_BYTE;
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <MX_AES_Init+0x50>)
 800084c:	2201      	movs	r2, #1
 800084e:	629a      	str	r2, [r3, #40]	; 0x28
	hcryp.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ALWAYS;
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_AES_Init+0x50>)
 8000852:	2200      	movs	r2, #0
 8000854:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_CRYP_Init(&hcryp) != HAL_OK) {
 8000856:	4b05      	ldr	r3, [pc, #20]	; (800086c <MX_AES_Init+0x50>)
 8000858:	0018      	movs	r0, r3
 800085a:	f001 fd6f 	bl	800233c <HAL_CRYP_Init>
 800085e:	1e03      	subs	r3, r0, #0
 8000860:	d001      	beq.n	8000866 <MX_AES_Init+0x4a>
		Error_Handler();
 8000862:	f000 fd0e 	bl	8001282 <Error_Handler>
	}
	/* USER CODE BEGIN AES_Init 2 */
	/* USER CODE END AES_Init 2 */

}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000768 	.word	0x20000768
 8000870:	40026000 	.word	0x40026000
 8000874:	20000114 	.word	0x20000114
 8000878:	08009358 	.word	0x08009358

0800087c <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8000880:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <MX_CRC_Init+0x40>)
 8000882:	4a0f      	ldr	r2, [pc, #60]	; (80008c0 <MX_CRC_Init+0x44>)
 8000884:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000886:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <MX_CRC_Init+0x40>)
 8000888:	2200      	movs	r2, #0
 800088a:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800088c:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <MX_CRC_Init+0x40>)
 800088e:	2200      	movs	r2, #0
 8000890:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000892:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <MX_CRC_Init+0x40>)
 8000894:	2200      	movs	r2, #0
 8000896:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <MX_CRC_Init+0x40>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800089e:	4b07      	ldr	r3, [pc, #28]	; (80008bc <MX_CRC_Init+0x40>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <MX_CRC_Init+0x40>)
 80008a6:	0018      	movs	r0, r3
 80008a8:	f001 fc7c 	bl	80021a4 <HAL_CRC_Init>
 80008ac:	1e03      	subs	r3, r0, #0
 80008ae:	d001      	beq.n	80008b4 <MX_CRC_Init+0x38>
		Error_Handler();
 80008b0:	f000 fce7 	bl	8001282 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 80008b4:	46c0      	nop			; (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	20000550 	.word	0x20000550
 80008c0:	40023000 	.word	0x40023000

080008c4 <MX_RNG_Init>:
/**
 * @brief RNG Initialization Function
 * @param None
 * @retval None
 */
static void MX_RNG_Init(void) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	/* USER CODE END RNG_Init 0 */

	/* USER CODE BEGIN RNG_Init 1 */

	/* USER CODE END RNG_Init 1 */
	hrng.Instance = RNG;
 80008c8:	4b08      	ldr	r3, [pc, #32]	; (80008ec <MX_RNG_Init+0x28>)
 80008ca:	4a09      	ldr	r2, [pc, #36]	; (80008f0 <MX_RNG_Init+0x2c>)
 80008cc:	601a      	str	r2, [r3, #0]
	hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80008ce:	4b07      	ldr	r3, [pc, #28]	; (80008ec <MX_RNG_Init+0x28>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	605a      	str	r2, [r3, #4]
	if (HAL_RNG_Init(&hrng) != HAL_OK) {
 80008d4:	4b05      	ldr	r3, [pc, #20]	; (80008ec <MX_RNG_Init+0x28>)
 80008d6:	0018      	movs	r0, r3
 80008d8:	f004 f90e 	bl	8004af8 <HAL_RNG_Init>
 80008dc:	1e03      	subs	r3, r0, #0
 80008de:	d001      	beq.n	80008e4 <MX_RNG_Init+0x20>
		Error_Handler();
 80008e0:	f000 fccf 	bl	8001282 <Error_Handler>
	}
	/* USER CODE BEGIN RNG_Init 2 */

	/* USER CODE END RNG_Init 2 */

}
 80008e4:	46c0      	nop			; (mov r8, r8)
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	20000620 	.word	0x20000620
 80008f0:	40025000 	.word	0x40025000

080008f4 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80008f8:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <MX_SPI1_Init+0x74>)
 80008fa:	4a1c      	ldr	r2, [pc, #112]	; (800096c <MX_SPI1_Init+0x78>)
 80008fc:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80008fe:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <MX_SPI1_Init+0x74>)
 8000900:	2282      	movs	r2, #130	; 0x82
 8000902:	0052      	lsls	r2, r2, #1
 8000904:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000906:	4b18      	ldr	r3, [pc, #96]	; (8000968 <MX_SPI1_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800090c:	4b16      	ldr	r3, [pc, #88]	; (8000968 <MX_SPI1_Init+0x74>)
 800090e:	22e0      	movs	r2, #224	; 0xe0
 8000910:	00d2      	lsls	r2, r2, #3
 8000912:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_SPI1_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <MX_SPI1_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_SPI1_Init+0x74>)
 8000922:	2280      	movs	r2, #128	; 0x80
 8000924:	0092      	lsls	r2, r2, #2
 8000926:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_SPI1_Init+0x74>)
 800092a:	2218      	movs	r2, #24
 800092c:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_SPI1_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_SPI1_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_SPI1_Init+0x74>)
 800093c:	2200      	movs	r2, #0
 800093e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_SPI1_Init+0x74>)
 8000942:	2207      	movs	r2, #7
 8000944:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <MX_SPI1_Init+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_SPI1_Init+0x74>)
 800094e:	2208      	movs	r2, #8
 8000950:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000952:	4b05      	ldr	r3, [pc, #20]	; (8000968 <MX_SPI1_Init+0x74>)
 8000954:	0018      	movs	r0, r3
 8000956:	f004 f95d 	bl	8004c14 <HAL_SPI_Init>
 800095a:	1e03      	subs	r3, r0, #0
 800095c:	d001      	beq.n	8000962 <MX_SPI1_Init+0x6e>
		Error_Handler();
 800095e:	f000 fc90 	bl	8001282 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000634 	.word	0x20000634
 800096c:	40013000 	.word	0x40013000

08000970 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b098      	sub	sp, #96	; 0x60
 8000974:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000976:	2354      	movs	r3, #84	; 0x54
 8000978:	18fb      	adds	r3, r7, r3
 800097a:	0018      	movs	r0, r3
 800097c:	230c      	movs	r3, #12
 800097e:	001a      	movs	r2, r3
 8000980:	2100      	movs	r1, #0
 8000982:	f007 fcbc 	bl	80082fe <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000986:	2338      	movs	r3, #56	; 0x38
 8000988:	18fb      	adds	r3, r7, r3
 800098a:	0018      	movs	r0, r3
 800098c:	231c      	movs	r3, #28
 800098e:	001a      	movs	r2, r3
 8000990:	2100      	movs	r1, #0
 8000992:	f007 fcb4 	bl	80082fe <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	0018      	movs	r0, r3
 800099a:	2334      	movs	r3, #52	; 0x34
 800099c:	001a      	movs	r2, r3
 800099e:	2100      	movs	r1, #0
 80009a0:	f007 fcad 	bl	80082fe <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80009a4:	4b45      	ldr	r3, [pc, #276]	; (8000abc <MX_TIM1_Init+0x14c>)
 80009a6:	4a46      	ldr	r2, [pc, #280]	; (8000ac0 <MX_TIM1_Init+0x150>)
 80009a8:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80009aa:	4b44      	ldr	r3, [pc, #272]	; (8000abc <MX_TIM1_Init+0x14c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b0:	4b42      	ldr	r3, [pc, #264]	; (8000abc <MX_TIM1_Init+0x14c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80009b6:	4b41      	ldr	r3, [pc, #260]	; (8000abc <MX_TIM1_Init+0x14c>)
 80009b8:	4a42      	ldr	r2, [pc, #264]	; (8000ac4 <MX_TIM1_Init+0x154>)
 80009ba:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009bc:	4b3f      	ldr	r3, [pc, #252]	; (8000abc <MX_TIM1_Init+0x14c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80009c2:	4b3e      	ldr	r3, [pc, #248]	; (8000abc <MX_TIM1_Init+0x14c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c8:	4b3c      	ldr	r3, [pc, #240]	; (8000abc <MX_TIM1_Init+0x14c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80009ce:	4b3b      	ldr	r3, [pc, #236]	; (8000abc <MX_TIM1_Init+0x14c>)
 80009d0:	0018      	movs	r0, r3
 80009d2:	f005 f8cb 	bl	8005b6c <HAL_TIM_PWM_Init>
 80009d6:	1e03      	subs	r3, r0, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM1_Init+0x6e>
		Error_Handler();
 80009da:	f000 fc52 	bl	8001282 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009de:	2154      	movs	r1, #84	; 0x54
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2200      	movs	r2, #0
 80009ea:	605a      	str	r2, [r3, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80009f2:	187a      	adds	r2, r7, r1
 80009f4:	4b31      	ldr	r3, [pc, #196]	; (8000abc <MX_TIM1_Init+0x14c>)
 80009f6:	0011      	movs	r1, r2
 80009f8:	0018      	movs	r0, r3
 80009fa:	f005 ffa9 	bl	8006950 <HAL_TIMEx_MasterConfigSynchronization>
 80009fe:	1e03      	subs	r3, r0, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM1_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 8000a02:	f000 fc3e 	bl	8001282 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a06:	2138      	movs	r1, #56	; 0x38
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	2260      	movs	r2, #96	; 0x60
 8000a0c:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2200      	movs	r2, #0
 8000a12:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	2200      	movs	r2, #0
 8000a2a:	615a      	str	r2, [r3, #20]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8000a32:	1879      	adds	r1, r7, r1
 8000a34:	4b21      	ldr	r3, [pc, #132]	; (8000abc <MX_TIM1_Init+0x14c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f005 fb0b 	bl	8006054 <HAL_TIM_PWM_ConfigChannel>
 8000a3e:	1e03      	subs	r3, r0, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM1_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 8000a42:	f000 fc1e 	bl	8001282 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	2200      	movs	r2, #0
 8000a50:	605a      	str	r2, [r3, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	2280      	movs	r2, #128	; 0x80
 8000a68:	0192      	lsls	r2, r2, #6
 8000a6a:	615a      	str	r2, [r3, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2200      	movs	r2, #0
 8000a70:	619a      	str	r2, [r3, #24]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	2200      	movs	r2, #0
 8000a76:	61da      	str	r2, [r3, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	621a      	str	r2, [r3, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	2280      	movs	r2, #128	; 0x80
 8000a82:	0492      	lsls	r2, r2, #18
 8000a84:	625a      	str	r2, [r3, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	2200      	movs	r2, #0
 8000a8a:	629a      	str	r2, [r3, #40]	; 0x28
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	2200      	movs	r2, #0
 8000a90:	62da      	str	r2, [r3, #44]	; 0x2c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	2200      	movs	r2, #0
 8000a96:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000a98:	1d3a      	adds	r2, r7, #4
 8000a9a:	4b08      	ldr	r3, [pc, #32]	; (8000abc <MX_TIM1_Init+0x14c>)
 8000a9c:	0011      	movs	r1, r2
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f005 ffc4 	bl	8006a2c <HAL_TIMEx_ConfigBreakDeadTime>
 8000aa4:	1e03      	subs	r3, r0, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM1_Init+0x13c>
			!= HAL_OK) {
		Error_Handler();
 8000aa8:	f000 fbeb 	bl	8001282 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000aac:	4b03      	ldr	r3, [pc, #12]	; (8000abc <MX_TIM1_Init+0x14c>)
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f001 f870 	bl	8001b94 <HAL_TIM_MspPostInit>

}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b018      	add	sp, #96	; 0x60
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	200005c4 	.word	0x200005c4
 8000ac0:	40012c00 	.word	0x40012c00
 8000ac4:	0000ffff 	.word	0x0000ffff

08000ac8 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <MX_TIM16_Init+0x44>)
 8000ace:	4a10      	ldr	r2, [pc, #64]	; (8000b10 <MX_TIM16_Init+0x48>)
 8000ad0:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 64;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <MX_TIM16_Init+0x44>)
 8000ad4:	2240      	movs	r2, #64	; 0x40
 8000ad6:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <MX_TIM16_Init+0x44>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 25000;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <MX_TIM16_Init+0x44>)
 8000ae0:	4a0c      	ldr	r2, [pc, #48]	; (8000b14 <MX_TIM16_Init+0x4c>)
 8000ae2:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <MX_TIM16_Init+0x44>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <MX_TIM16_Init+0x44>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <MX_TIM16_Init+0x44>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8000af6:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <MX_TIM16_Init+0x44>)
 8000af8:	0018      	movs	r0, r3
 8000afa:	f004 ff83 	bl	8005a04 <HAL_TIM_Base_Init>
 8000afe:	1e03      	subs	r3, r0, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM16_Init+0x3e>
		Error_Handler();
 8000b02:	f000 fbbe 	bl	8001282 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	2000071c 	.word	0x2000071c
 8000b10:	40014400 	.word	0x40014400
 8000b14:	000061a8 	.word	0x000061a8

08000b18 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b18:	b590      	push	{r4, r7, lr}
 8000b1a:	b089      	sub	sp, #36	; 0x24
 8000b1c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b1e:	240c      	movs	r4, #12
 8000b20:	193b      	adds	r3, r7, r4
 8000b22:	0018      	movs	r0, r3
 8000b24:	2314      	movs	r3, #20
 8000b26:	001a      	movs	r2, r3
 8000b28:	2100      	movs	r1, #0
 8000b2a:	f007 fbe8 	bl	80082fe <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	4b56      	ldr	r3, [pc, #344]	; (8000c88 <MX_GPIO_Init+0x170>)
 8000b30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b32:	4b55      	ldr	r3, [pc, #340]	; (8000c88 <MX_GPIO_Init+0x170>)
 8000b34:	2101      	movs	r1, #1
 8000b36:	430a      	orrs	r2, r1
 8000b38:	635a      	str	r2, [r3, #52]	; 0x34
 8000b3a:	4b53      	ldr	r3, [pc, #332]	; (8000c88 <MX_GPIO_Init+0x170>)
 8000b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b3e:	2201      	movs	r2, #1
 8000b40:	4013      	ands	r3, r2
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b46:	4b50      	ldr	r3, [pc, #320]	; (8000c88 <MX_GPIO_Init+0x170>)
 8000b48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b4a:	4b4f      	ldr	r3, [pc, #316]	; (8000c88 <MX_GPIO_Init+0x170>)
 8000b4c:	2104      	movs	r1, #4
 8000b4e:	430a      	orrs	r2, r1
 8000b50:	635a      	str	r2, [r3, #52]	; 0x34
 8000b52:	4b4d      	ldr	r3, [pc, #308]	; (8000c88 <MX_GPIO_Init+0x170>)
 8000b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b56:	2204      	movs	r2, #4
 8000b58:	4013      	ands	r3, r2
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5e:	4b4a      	ldr	r3, [pc, #296]	; (8000c88 <MX_GPIO_Init+0x170>)
 8000b60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b62:	4b49      	ldr	r3, [pc, #292]	; (8000c88 <MX_GPIO_Init+0x170>)
 8000b64:	2102      	movs	r1, #2
 8000b66:	430a      	orrs	r2, r1
 8000b68:	635a      	str	r2, [r3, #52]	; 0x34
 8000b6a:	4b47      	ldr	r3, [pc, #284]	; (8000c88 <MX_GPIO_Init+0x170>)
 8000b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b6e:	2202      	movs	r2, #2
 8000b70:	4013      	ands	r3, r2
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RADIO_CS_GPIO_Port, RADIO_CS_Pin, GPIO_PIN_RESET);
 8000b76:	23a0      	movs	r3, #160	; 0xa0
 8000b78:	05db      	lsls	r3, r3, #23
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2180      	movs	r1, #128	; 0x80
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f003 f893 	bl	8003caa <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, RADIO_RESET_Pin | LED2_Pin, GPIO_PIN_RESET);
 8000b84:	2382      	movs	r3, #130	; 0x82
 8000b86:	00db      	lsls	r3, r3, #3
 8000b88:	4840      	ldr	r0, [pc, #256]	; (8000c8c <MX_GPIO_Init+0x174>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	0019      	movs	r1, r3
 8000b8e:	f003 f88c 	bl	8003caa <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000b92:	2380      	movs	r3, #128	; 0x80
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	483e      	ldr	r0, [pc, #248]	; (8000c90 <MX_GPIO_Init+0x178>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	0019      	movs	r1, r3
 8000b9c:	f003 f885 	bl	8003caa <HAL_GPIO_WritePin>

	/*Configure GPIO pin : RADIO_INT_Pin */
	GPIO_InitStruct.Pin = RADIO_INT_Pin;
 8000ba0:	193b      	adds	r3, r7, r4
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ba6:	193b      	adds	r3, r7, r4
 8000ba8:	4a3a      	ldr	r2, [pc, #232]	; (8000c94 <MX_GPIO_Init+0x17c>)
 8000baa:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bac:	193b      	adds	r3, r7, r4
 8000bae:	2202      	movs	r2, #2
 8000bb0:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(RADIO_INT_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	193a      	adds	r2, r7, r4
 8000bb4:	23a0      	movs	r3, #160	; 0xa0
 8000bb6:	05db      	lsls	r3, r3, #23
 8000bb8:	0011      	movs	r1, r2
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f002 fef4 	bl	80039a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : RADIO_CS_Pin */
	GPIO_InitStruct.Pin = RADIO_CS_Pin;
 8000bc0:	0021      	movs	r1, r4
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	2280      	movs	r2, #128	; 0x80
 8000bc6:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	2201      	movs	r2, #1
 8000bcc:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bce:	187b      	adds	r3, r7, r1
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(RADIO_CS_GPIO_Port, &GPIO_InitStruct);
 8000bda:	000c      	movs	r4, r1
 8000bdc:	187a      	adds	r2, r7, r1
 8000bde:	23a0      	movs	r3, #160	; 0xa0
 8000be0:	05db      	lsls	r3, r3, #23
 8000be2:	0011      	movs	r1, r2
 8000be4:	0018      	movs	r0, r3
 8000be6:	f002 fedf 	bl	80039a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : RADIO_RESET_Pin LED2_Pin */
	GPIO_InitStruct.Pin = RADIO_RESET_Pin | LED2_Pin;
 8000bea:	0021      	movs	r1, r4
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	2282      	movs	r2, #130	; 0x82
 8000bf0:	00d2      	lsls	r2, r2, #3
 8000bf2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c06:	000c      	movs	r4, r1
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	4a20      	ldr	r2, [pc, #128]	; (8000c8c <MX_GPIO_Init+0x174>)
 8000c0c:	0019      	movs	r1, r3
 8000c0e:	0010      	movs	r0, r2
 8000c10:	f002 feca 	bl	80039a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PAIR_Pin VIBE_BUTTON_Pin */
	GPIO_InitStruct.Pin = PAIR_Pin | VIBE_BUTTON_Pin;
 8000c14:	0021      	movs	r1, r4
 8000c16:	187b      	adds	r3, r7, r1
 8000c18:	2284      	movs	r2, #132	; 0x84
 8000c1a:	0192      	lsls	r2, r2, #6
 8000c1c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	4a1d      	ldr	r2, [pc, #116]	; (8000c98 <MX_GPIO_Init+0x180>)
 8000c22:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c24:	187b      	adds	r3, r7, r1
 8000c26:	2201      	movs	r2, #1
 8000c28:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2a:	000c      	movs	r4, r1
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	4a18      	ldr	r2, [pc, #96]	; (8000c90 <MX_GPIO_Init+0x178>)
 8000c30:	0019      	movs	r1, r3
 8000c32:	0010      	movs	r0, r2
 8000c34:	f002 feb8 	bl	80039a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED1_Pin */
	GPIO_InitStruct.Pin = LED1_Pin;
 8000c38:	0021      	movs	r1, r4
 8000c3a:	187b      	adds	r3, r7, r1
 8000c3c:	2280      	movs	r2, #128	; 0x80
 8000c3e:	0092      	lsls	r2, r2, #2
 8000c40:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	187b      	adds	r3, r7, r1
 8000c44:	2201      	movs	r2, #1
 8000c46:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	2200      	movs	r2, #0
 8000c52:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	4a0e      	ldr	r2, [pc, #56]	; (8000c90 <MX_GPIO_Init+0x178>)
 8000c58:	0019      	movs	r1, r3
 8000c5a:	0010      	movs	r0, r2
 8000c5c:	f002 fea4 	bl	80039a8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2101      	movs	r1, #1
 8000c64:	2005      	movs	r0, #5
 8000c66:	f001 fa6b 	bl	8002140 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000c6a:	2005      	movs	r0, #5
 8000c6c:	f001 fa7d 	bl	800216a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2101      	movs	r1, #1
 8000c74:	2007      	movs	r0, #7
 8000c76:	f001 fa63 	bl	8002140 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000c7a:	2007      	movs	r0, #7
 8000c7c:	f001 fa75 	bl	800216a <HAL_NVIC_EnableIRQ>

}
 8000c80:	46c0      	nop			; (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b009      	add	sp, #36	; 0x24
 8000c86:	bd90      	pop	{r4, r7, pc}
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	50000800 	.word	0x50000800
 8000c90:	50000400 	.word	0x50000400
 8000c94:	10110000 	.word	0x10110000
 8000c98:	10210000 	.word	0x10210000

08000c9c <HAL_GPIO_EXTI_Falling_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8000c9c:	b590      	push	{r4, r7, lr}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	0002      	movs	r2, r0
 8000ca4:	1dbb      	adds	r3, r7, #6
 8000ca6:	801a      	strh	r2, [r3, #0]

	if (recording.enabled || aKeys.pairing) {
 8000ca8:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <HAL_GPIO_EXTI_Falling_Callback+0x64>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d122      	bne.n	8000cf8 <HAL_GPIO_EXTI_Falling_Callback+0x5c>
 8000cb2:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <HAL_GPIO_EXTI_Falling_Callback+0x68>)
 8000cb4:	2282      	movs	r2, #130	; 0x82
 8000cb6:	5c9b      	ldrb	r3, [r3, r2]
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d11c      	bne.n	8000cf8 <HAL_GPIO_EXTI_Falling_Callback+0x5c>
		return;
	}
	if (GPIO_Pin == PAIR_Pin) {
 8000cbe:	1dbb      	adds	r3, r7, #6
 8000cc0:	881a      	ldrh	r2, [r3, #0]
 8000cc2:	2380      	movs	r3, #128	; 0x80
 8000cc4:	019b      	lsls	r3, r3, #6
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d104      	bne.n	8000cd4 <HAL_GPIO_EXTI_Falling_Callback+0x38>
		// in actual pairing
		aKeys.pairing = 1;
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <HAL_GPIO_EXTI_Falling_Callback+0x68>)
 8000ccc:	2282      	movs	r2, #130	; 0x82
 8000cce:	2101      	movs	r1, #1
 8000cd0:	5499      	strb	r1, [r3, r2]
 8000cd2:	e012      	b.n	8000cfa <HAL_GPIO_EXTI_Falling_Callback+0x5e>

	} else if (GPIO_Pin == VIBE_BUTTON_Pin) {
 8000cd4:	1dbb      	adds	r3, r7, #6
 8000cd6:	881a      	ldrh	r2, [r3, #0]
 8000cd8:	2380      	movs	r3, #128	; 0x80
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d10c      	bne.n	8000cfa <HAL_GPIO_EXTI_Falling_Callback+0x5e>
		// on vibe button:
		recording.enabled = 1;
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <HAL_GPIO_EXTI_Falling_Callback+0x64>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	701a      	strb	r2, [r3, #0]
		recording.count = 1;
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_GPIO_EXTI_Falling_Callback+0x64>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	705a      	strb	r2, [r3, #1]
		recording.data = 1;
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <HAL_GPIO_EXTI_Falling_Callback+0x64>)
 8000cee:	2301      	movs	r3, #1
 8000cf0:	2400      	movs	r4, #0
 8000cf2:	6093      	str	r3, [r2, #8]
 8000cf4:	60d4      	str	r4, [r2, #12]
 8000cf6:	e000      	b.n	8000cfa <HAL_GPIO_EXTI_Falling_Callback+0x5e>
		return;
 8000cf8:	46c0      	nop			; (mov r8, r8)
	}
}
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	b003      	add	sp, #12
 8000cfe:	bd90      	pop	{r4, r7, pc}
 8000d00:	20000610 	.word	0x20000610
 8000d04:	20000698 	.word	0x20000698

08000d08 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	0002      	movs	r2, r0
 8000d10:	1dbb      	adds	r3, r7, #6
 8000d12:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == RADIO_INT_Pin) {
 8000d14:	1dbb      	adds	r3, r7, #6
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d101      	bne.n	8000d20 <HAL_GPIO_EXTI_Rising_Callback+0x18>
		rfm95_handleInterrupt();
 8000d1c:	f000 fd02 	bl	8001724 <rfm95_handleInterrupt>
	}
}
 8000d20:	46c0      	nop			; (mov r8, r8)
 8000d22:	46bd      	mov	sp, r7
 8000d24:	b002      	add	sp, #8
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d2a:	b08b      	sub	sp, #44	; 0x2c
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
	if (aKeys.pairing) {
 8000d30:	4bb1      	ldr	r3, [pc, #708]	; (8000ff8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000d32:	2282      	movs	r2, #130	; 0x82
 8000d34:	5c9b      	ldrb	r3, [r3, r2]
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d006      	beq.n	8000d4a <HAL_TIM_PeriodElapsedCallback+0x22>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000d3c:	2380      	movs	r3, #128	; 0x80
 8000d3e:	00db      	lsls	r3, r3, #3
 8000d40:	4aae      	ldr	r2, [pc, #696]	; (8000ffc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000d42:	0019      	movs	r1, r3
 8000d44:	0010      	movs	r0, r2
 8000d46:	f002 ffcd 	bl	8003ce4 <HAL_GPIO_TogglePin>
	}
//	if (aKeys.masterSent) {
//		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
//	}

	if (htim == &htim16 && (recording.enabled || playback.enabled)) {
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	4bac      	ldr	r3, [pc, #688]	; (8001000 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d000      	beq.n	8000d54 <HAL_TIM_PeriodElapsedCallback+0x2c>
 8000d52:	e14c      	b.n	8000fee <HAL_TIM_PeriodElapsedCallback+0x2c6>
 8000d54:	4bab      	ldr	r3, [pc, #684]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d105      	bne.n	8000d6a <HAL_TIM_PeriodElapsedCallback+0x42>
 8000d5e:	4baa      	ldr	r3, [pc, #680]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d100      	bne.n	8000d6a <HAL_TIM_PeriodElapsedCallback+0x42>
 8000d68:	e141      	b.n	8000fee <HAL_TIM_PeriodElapsedCallback+0x2c6>

		if (playback.enabled) {
 8000d6a:	4ba7      	ldr	r3, [pc, #668]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d04f      	beq.n	8000e14 <HAL_TIM_PeriodElapsedCallback+0xec>
			uint8_t state = (playback.data >> (playback.count++)) & 1;
 8000d74:	4ba4      	ldr	r3, [pc, #656]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000d76:	68dc      	ldr	r4, [r3, #12]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	4aa3      	ldr	r2, [pc, #652]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000d7c:	7852      	ldrb	r2, [r2, #1]
 8000d7e:	1c51      	adds	r1, r2, #1
 8000d80:	b2c8      	uxtb	r0, r1
 8000d82:	49a1      	ldr	r1, [pc, #644]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000d84:	7048      	strb	r0, [r1, #1]
 8000d86:	0011      	movs	r1, r2
 8000d88:	3920      	subs	r1, #32
 8000d8a:	2900      	cmp	r1, #0
 8000d8c:	db03      	blt.n	8000d96 <HAL_TIM_PeriodElapsedCallback+0x6e>
 8000d8e:	0020      	movs	r0, r4
 8000d90:	40c8      	lsrs	r0, r1
 8000d92:	0005      	movs	r5, r0
 8000d94:	e008      	b.n	8000da8 <HAL_TIM_PeriodElapsedCallback+0x80>
 8000d96:	2120      	movs	r1, #32
 8000d98:	1a89      	subs	r1, r1, r2
 8000d9a:	0020      	movs	r0, r4
 8000d9c:	4088      	lsls	r0, r1
 8000d9e:	0001      	movs	r1, r0
 8000da0:	0018      	movs	r0, r3
 8000da2:	40d0      	lsrs	r0, r2
 8000da4:	0005      	movs	r5, r0
 8000da6:	430d      	orrs	r5, r1
 8000da8:	0023      	movs	r3, r4
 8000daa:	40d3      	lsrs	r3, r2
 8000dac:	001e      	movs	r6, r3
 8000dae:	b2ea      	uxtb	r2, r5
 8000db0:	201f      	movs	r0, #31
 8000db2:	2408      	movs	r4, #8
 8000db4:	193b      	adds	r3, r7, r4
 8000db6:	181b      	adds	r3, r3, r0
 8000db8:	2101      	movs	r1, #1
 8000dba:	400a      	ands	r2, r1
 8000dbc:	701a      	strb	r2, [r3, #0]

			TIM1->CCR1 = state ? (DUTY_CYCLE_ON * UINT16_MAX) / 10 : 0;
 8000dbe:	193b      	adds	r3, r7, r4
 8000dc0:	181b      	adds	r3, r3, r0
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <HAL_TIM_PeriodElapsedCallback+0xa4>
 8000dc8:	4a90      	ldr	r2, [pc, #576]	; (800100c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000dca:	e000      	b.n	8000dce <HAL_TIM_PeriodElapsedCallback+0xa6>
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4b90      	ldr	r3, [pc, #576]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000dd0:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,
 8000dd2:	231f      	movs	r3, #31
 8000dd4:	2208      	movs	r2, #8
 8000dd6:	4694      	mov	ip, r2
 8000dd8:	44bc      	add	ip, r7
 8000dda:	4463      	add	r3, ip
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	1e5a      	subs	r2, r3, #1
 8000de0:	4193      	sbcs	r3, r2
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	001a      	movs	r2, r3
 8000de6:	2380      	movs	r3, #128	; 0x80
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	4884      	ldr	r0, [pc, #528]	; (8000ffc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000dec:	0019      	movs	r1, r3
 8000dee:	f002 ff5c 	bl	8003caa <HAL_GPIO_WritePin>
					(state ? GPIO_PIN_SET : GPIO_PIN_RESET));

			if (playback.count >= sizeof(playback.data) * 8) {
 8000df2:	4b85      	ldr	r3, [pc, #532]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000df4:	785b      	ldrb	r3, [r3, #1]
 8000df6:	2b3f      	cmp	r3, #63	; 0x3f
 8000df8:	d90c      	bls.n	8000e14 <HAL_TIM_PeriodElapsedCallback+0xec>
				playback.enabled = 0;
 8000dfa:	4b83      	ldr	r3, [pc, #524]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000e00:	2380      	movs	r3, #128	; 0x80
 8000e02:	00db      	lsls	r3, r3, #3
 8000e04:	487d      	ldr	r0, [pc, #500]	; (8000ffc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	0019      	movs	r1, r3
 8000e0a:	f002 ff4e 	bl	8003caa <HAL_GPIO_WritePin>
				TIM1->CCR1 = 0;
 8000e0e:	4b80      	ldr	r3, [pc, #512]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	635a      	str	r2, [r3, #52]	; 0x34
			}
		}

		if (recording.enabled) {
 8000e14:	4b7b      	ldr	r3, [pc, #492]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d100      	bne.n	8000e20 <HAL_TIM_PeriodElapsedCallback+0xf8>
 8000e1e:	e0e6      	b.n	8000fee <HAL_TIM_PeriodElapsedCallback+0x2c6>
			uint64_t read = (
					HAL_GPIO_ReadPin(VIBE_BUTTON_GPIO_Port, VIBE_BUTTON_Pin)
 8000e20:	2380      	movs	r3, #128	; 0x80
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	4a7b      	ldr	r2, [pc, #492]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000e26:	0019      	movs	r1, r3
 8000e28:	0010      	movs	r0, r2
 8000e2a:	f002 ff21 	bl	8003c70 <HAL_GPIO_ReadPin>
 8000e2e:	0003      	movs	r3, r0
							== GPIO_PIN_RESET ? 1 : 0);
 8000e30:	425a      	negs	r2, r3
 8000e32:	4153      	adcs	r3, r2
 8000e34:	b2db      	uxtb	r3, r3
			uint64_t read = (
 8000e36:	61bb      	str	r3, [r7, #24]
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61fb      	str	r3, [r7, #28]
			uint64_t state = read << (recording.count++);
 8000e3c:	4b71      	ldr	r3, [pc, #452]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000e3e:	785b      	ldrb	r3, [r3, #1]
 8000e40:	1c5a      	adds	r2, r3, #1
 8000e42:	b2d1      	uxtb	r1, r2
 8000e44:	4a6f      	ldr	r2, [pc, #444]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000e46:	7051      	strb	r1, [r2, #1]
 8000e48:	001a      	movs	r2, r3
 8000e4a:	3a20      	subs	r2, #32
 8000e4c:	2a00      	cmp	r2, #0
 8000e4e:	db04      	blt.n	8000e5a <HAL_TIM_PeriodElapsedCallback+0x132>
 8000e50:	69b9      	ldr	r1, [r7, #24]
 8000e52:	4091      	lsls	r1, r2
 8000e54:	000a      	movs	r2, r1
 8000e56:	617a      	str	r2, [r7, #20]
 8000e58:	e008      	b.n	8000e6c <HAL_TIM_PeriodElapsedCallback+0x144>
 8000e5a:	2220      	movs	r2, #32
 8000e5c:	1ad2      	subs	r2, r2, r3
 8000e5e:	69b9      	ldr	r1, [r7, #24]
 8000e60:	40d1      	lsrs	r1, r2
 8000e62:	000a      	movs	r2, r1
 8000e64:	69f9      	ldr	r1, [r7, #28]
 8000e66:	4099      	lsls	r1, r3
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	617a      	str	r2, [r7, #20]
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	409a      	lsls	r2, r3
 8000e70:	0013      	movs	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
			recording.data |= state;
 8000e74:	4b63      	ldr	r3, [pc, #396]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000e76:	68dc      	ldr	r4, [r3, #12]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	431a      	orrs	r2, r3
 8000e7e:	603a      	str	r2, [r7, #0]
 8000e80:	697a      	ldr	r2, [r7, #20]
 8000e82:	4322      	orrs	r2, r4
 8000e84:	607a      	str	r2, [r7, #4]
 8000e86:	4b5f      	ldr	r3, [pc, #380]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000e88:	6839      	ldr	r1, [r7, #0]
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	6099      	str	r1, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
			if (recording.count >= sizeof(recording.data) * 8) {
 8000e90:	4b5c      	ldr	r3, [pc, #368]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000e92:	785b      	ldrb	r3, [r3, #1]
 8000e94:	2b3f      	cmp	r3, #63	; 0x3f
 8000e96:	d800      	bhi.n	8000e9a <HAL_TIM_PeriodElapsedCallback+0x172>
 8000e98:	e0a9      	b.n	8000fee <HAL_TIM_PeriodElapsedCallback+0x2c6>
				// packet should be formed & sent here

				outgoing.deviceID = DEVICE_ID;
 8000e9a:	4b5f      	ldr	r3, [pc, #380]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	705a      	strb	r2, [r3, #1]
				outgoing.preamble = VIBE_PREAMBLE;
 8000ea0:	4b5d      	ldr	r3, [pc, #372]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000ea2:	22f0      	movs	r2, #240	; 0xf0
 8000ea4:	701a      	strb	r2, [r3, #0]
				outgoing.sequenceNumber = ++deviceSeqs[DEVICE_ID];
 8000ea6:	4b5d      	ldr	r3, [pc, #372]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	1c5a      	adds	r2, r3, #1
 8000eac:	4b5b      	ldr	r3, [pc, #364]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000eae:	60da      	str	r2, [r3, #12]
 8000eb0:	4b5a      	ldr	r3, [pc, #360]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000eb2:	68da      	ldr	r2, [r3, #12]
 8000eb4:	4b58      	ldr	r3, [pc, #352]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000eb6:	3302      	adds	r3, #2
 8000eb8:	21ff      	movs	r1, #255	; 0xff
 8000eba:	4011      	ands	r1, r2
 8000ebc:	000c      	movs	r4, r1
 8000ebe:	7819      	ldrb	r1, [r3, #0]
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	4001      	ands	r1, r0
 8000ec4:	1c08      	adds	r0, r1, #0
 8000ec6:	1c21      	adds	r1, r4, #0
 8000ec8:	4301      	orrs	r1, r0
 8000eca:	7019      	strb	r1, [r3, #0]
 8000ecc:	0a11      	lsrs	r1, r2, #8
 8000ece:	20ff      	movs	r0, #255	; 0xff
 8000ed0:	4001      	ands	r1, r0
 8000ed2:	000c      	movs	r4, r1
 8000ed4:	7859      	ldrb	r1, [r3, #1]
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	4001      	ands	r1, r0
 8000eda:	1c08      	adds	r0, r1, #0
 8000edc:	1c21      	adds	r1, r4, #0
 8000ede:	4301      	orrs	r1, r0
 8000ee0:	7059      	strb	r1, [r3, #1]
 8000ee2:	0c11      	lsrs	r1, r2, #16
 8000ee4:	20ff      	movs	r0, #255	; 0xff
 8000ee6:	4001      	ands	r1, r0
 8000ee8:	000c      	movs	r4, r1
 8000eea:	7899      	ldrb	r1, [r3, #2]
 8000eec:	2000      	movs	r0, #0
 8000eee:	4001      	ands	r1, r0
 8000ef0:	1c08      	adds	r0, r1, #0
 8000ef2:	1c21      	adds	r1, r4, #0
 8000ef4:	4301      	orrs	r1, r0
 8000ef6:	7099      	strb	r1, [r3, #2]
 8000ef8:	0e10      	lsrs	r0, r2, #24
 8000efa:	78da      	ldrb	r2, [r3, #3]
 8000efc:	2100      	movs	r1, #0
 8000efe:	400a      	ands	r2, r1
 8000f00:	1c11      	adds	r1, r2, #0
 8000f02:	1c02      	adds	r2, r0, #0
 8000f04:	430a      	orrs	r2, r1
 8000f06:	70da      	strb	r2, [r3, #3]
				outgoing.data = recording.data;
 8000f08:	4b3e      	ldr	r3, [pc, #248]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000f0a:	6899      	ldr	r1, [r3, #8]
 8000f0c:	68da      	ldr	r2, [r3, #12]
 8000f0e:	4b42      	ldr	r3, [pc, #264]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000f10:	3306      	adds	r3, #6
 8000f12:	20ff      	movs	r0, #255	; 0xff
 8000f14:	4008      	ands	r0, r1
 8000f16:	0005      	movs	r5, r0
 8000f18:	7818      	ldrb	r0, [r3, #0]
 8000f1a:	2400      	movs	r4, #0
 8000f1c:	4020      	ands	r0, r4
 8000f1e:	1c04      	adds	r4, r0, #0
 8000f20:	1c28      	adds	r0, r5, #0
 8000f22:	4320      	orrs	r0, r4
 8000f24:	7018      	strb	r0, [r3, #0]
 8000f26:	0a08      	lsrs	r0, r1, #8
 8000f28:	24ff      	movs	r4, #255	; 0xff
 8000f2a:	4020      	ands	r0, r4
 8000f2c:	0005      	movs	r5, r0
 8000f2e:	7858      	ldrb	r0, [r3, #1]
 8000f30:	2400      	movs	r4, #0
 8000f32:	4020      	ands	r0, r4
 8000f34:	1c04      	adds	r4, r0, #0
 8000f36:	1c28      	adds	r0, r5, #0
 8000f38:	4320      	orrs	r0, r4
 8000f3a:	7058      	strb	r0, [r3, #1]
 8000f3c:	0c08      	lsrs	r0, r1, #16
 8000f3e:	24ff      	movs	r4, #255	; 0xff
 8000f40:	4020      	ands	r0, r4
 8000f42:	0005      	movs	r5, r0
 8000f44:	7898      	ldrb	r0, [r3, #2]
 8000f46:	2400      	movs	r4, #0
 8000f48:	4020      	ands	r0, r4
 8000f4a:	1c04      	adds	r4, r0, #0
 8000f4c:	1c28      	adds	r0, r5, #0
 8000f4e:	4320      	orrs	r0, r4
 8000f50:	7098      	strb	r0, [r3, #2]
 8000f52:	0e0d      	lsrs	r5, r1, #24
 8000f54:	78d8      	ldrb	r0, [r3, #3]
 8000f56:	2400      	movs	r4, #0
 8000f58:	4020      	ands	r0, r4
 8000f5a:	1c04      	adds	r4, r0, #0
 8000f5c:	1c28      	adds	r0, r5, #0
 8000f5e:	4320      	orrs	r0, r4
 8000f60:	70d8      	strb	r0, [r3, #3]
 8000f62:	20ff      	movs	r0, #255	; 0xff
 8000f64:	4010      	ands	r0, r2
 8000f66:	0005      	movs	r5, r0
 8000f68:	7918      	ldrb	r0, [r3, #4]
 8000f6a:	2400      	movs	r4, #0
 8000f6c:	4020      	ands	r0, r4
 8000f6e:	1c04      	adds	r4, r0, #0
 8000f70:	1c28      	adds	r0, r5, #0
 8000f72:	4320      	orrs	r0, r4
 8000f74:	7118      	strb	r0, [r3, #4]
 8000f76:	0a10      	lsrs	r0, r2, #8
 8000f78:	24ff      	movs	r4, #255	; 0xff
 8000f7a:	4020      	ands	r0, r4
 8000f7c:	0005      	movs	r5, r0
 8000f7e:	7958      	ldrb	r0, [r3, #5]
 8000f80:	2400      	movs	r4, #0
 8000f82:	4020      	ands	r0, r4
 8000f84:	1c04      	adds	r4, r0, #0
 8000f86:	1c28      	adds	r0, r5, #0
 8000f88:	4320      	orrs	r0, r4
 8000f8a:	7158      	strb	r0, [r3, #5]
 8000f8c:	0c10      	lsrs	r0, r2, #16
 8000f8e:	24ff      	movs	r4, #255	; 0xff
 8000f90:	4020      	ands	r0, r4
 8000f92:	0005      	movs	r5, r0
 8000f94:	7998      	ldrb	r0, [r3, #6]
 8000f96:	2400      	movs	r4, #0
 8000f98:	4020      	ands	r0, r4
 8000f9a:	1c04      	adds	r4, r0, #0
 8000f9c:	1c28      	adds	r0, r5, #0
 8000f9e:	4320      	orrs	r0, r4
 8000fa0:	7198      	strb	r0, [r3, #6]
 8000fa2:	0e10      	lsrs	r0, r2, #24
 8000fa4:	79da      	ldrb	r2, [r3, #7]
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	400a      	ands	r2, r1
 8000faa:	1c11      	adds	r1, r2, #0
 8000fac:	1c02      	adds	r2, r0, #0
 8000fae:	430a      	orrs	r2, r1
 8000fb0:	71da      	strb	r2, [r3, #7]

				playback.data = recording.data;
 8000fb2:	4b14      	ldr	r3, [pc, #80]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000fb4:	68dc      	ldr	r4, [r3, #12]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	4a13      	ldr	r2, [pc, #76]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000fba:	6093      	str	r3, [r2, #8]
 8000fbc:	60d4      	str	r4, [r2, #12]
				playback.enabled = 1;
 8000fbe:	4b12      	ldr	r3, [pc, #72]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	701a      	strb	r2, [r3, #0]
				playback.count = 0;
 8000fc4:	4b10      	ldr	r3, [pc, #64]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	705a      	strb	r2, [r3, #1]
				recording.enabled = 0;
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]
				if (state) {
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	d00a      	beq.n	8000fee <HAL_TIM_PeriodElapsedCallback+0x2c6>
					recording.enabled = 1;
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	701a      	strb	r2, [r3, #0]
					recording.count = 1;
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	705a      	strb	r2, [r3, #1]
					recording.data = 1;
 8000fe4:	4a07      	ldr	r2, [pc, #28]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	2400      	movs	r4, #0
 8000fea:	6093      	str	r3, [r2, #8]
 8000fec:	60d4      	str	r4, [r2, #12]
				}

			}
		}
	}
}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	b00b      	add	sp, #44	; 0x2c
 8000ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	20000698 	.word	0x20000698
 8000ffc:	50000800 	.word	0x50000800
 8001000:	2000071c 	.word	0x2000071c
 8001004:	20000610 	.word	0x20000610
 8001008:	20000578 	.word	0x20000578
 800100c:	0000ffff 	.word	0x0000ffff
 8001010:	40012c00 	.word	0x40012c00
 8001014:	50000400 	.word	0x50000400
 8001018:	20000874 	.word	0x20000874
 800101c:	20000124 	.word	0x20000124

08001020 <readingCallback>:

static void readingCallback(uint8_t *buffer, uint8_t length) {
 8001020:	b5b0      	push	{r4, r5, r7, lr}
 8001022:	b094      	sub	sp, #80	; 0x50
 8001024:	af02      	add	r7, sp, #8
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	000a      	movs	r2, r1
 800102a:	1cfb      	adds	r3, r7, #3
 800102c:	701a      	strb	r2, [r3, #0]
	if (aKeys.pairing && length == 32) {
 800102e:	4b60      	ldr	r3, [pc, #384]	; (80011b0 <readingCallback+0x190>)
 8001030:	2282      	movs	r2, #130	; 0x82
 8001032:	5c9b      	ldrb	r3, [r3, r2]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00f      	beq.n	800105a <readingCallback+0x3a>
 800103a:	1cfb      	adds	r3, r7, #3
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b20      	cmp	r3, #32
 8001040:	d10b      	bne.n	800105a <readingCallback+0x3a>
		memcpy(aKeys.otherPublicKey, buffer, length);
 8001042:	1cfb      	adds	r3, r7, #3
 8001044:	781a      	ldrb	r2, [r3, #0]
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	4b5a      	ldr	r3, [pc, #360]	; (80011b4 <readingCallback+0x194>)
 800104a:	0018      	movs	r0, r3
 800104c:	f007 f94e 	bl	80082ec <memcpy>
		aKeys.gotOther = 1;
 8001050:	4b57      	ldr	r3, [pc, #348]	; (80011b0 <readingCallback+0x190>)
 8001052:	2280      	movs	r2, #128	; 0x80
 8001054:	2101      	movs	r1, #1
 8001056:	5499      	strb	r1, [r3, r2]
 8001058:	e0a6      	b.n	80011a8 <readingCallback+0x188>
	} else if (!MASTER_DEVICE && length == 16 && aKeys.masterSent) {
 800105a:	1cfb      	adds	r3, r7, #3
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b10      	cmp	r3, #16
 8001060:	d14b      	bne.n	80010fa <readingCallback+0xda>
 8001062:	4b53      	ldr	r3, [pc, #332]	; (80011b0 <readingCallback+0x190>)
 8001064:	2281      	movs	r2, #129	; 0x81
 8001066:	5c9b      	ldrb	r3, [r3, r2]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d045      	beq.n	80010fa <readingCallback+0xda>
		// try to decrypt with shared secret
		uint32_t oldPkeys[4] = { 0 };
 800106e:	2438      	movs	r4, #56	; 0x38
 8001070:	193b      	adds	r3, r7, r4
 8001072:	0018      	movs	r0, r3
 8001074:	2310      	movs	r3, #16
 8001076:	001a      	movs	r2, r3
 8001078:	2100      	movs	r1, #0
 800107a:	f007 f940 	bl	80082fe <memset>
		uint32_t newPkeys[4] = { 0 };
 800107e:	2528      	movs	r5, #40	; 0x28
 8001080:	197b      	adds	r3, r7, r5
 8001082:	0018      	movs	r0, r3
 8001084:	2310      	movs	r3, #16
 8001086:	001a      	movs	r2, r3
 8001088:	2100      	movs	r1, #0
 800108a:	f007 f938 	bl	80082fe <memset>
		memcpy(oldPkeys, pKeyAES, AESKeySize);
 800108e:	193b      	adds	r3, r7, r4
 8001090:	4a49      	ldr	r2, [pc, #292]	; (80011b8 <readingCallback+0x198>)
 8001092:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001094:	c313      	stmia	r3!, {r0, r1, r4}
 8001096:	6812      	ldr	r2, [r2, #0]
 8001098:	601a      	str	r2, [r3, #0]
		memcpy(pKeyAES, aKeys.sharedSecret, AESKeySize);
 800109a:	4a47      	ldr	r2, [pc, #284]	; (80011b8 <readingCallback+0x198>)
 800109c:	4b44      	ldr	r3, [pc, #272]	; (80011b0 <readingCallback+0x190>)
 800109e:	3360      	adds	r3, #96	; 0x60
 80010a0:	cb13      	ldmia	r3!, {r0, r1, r4}
 80010a2:	c213      	stmia	r2!, {r0, r1, r4}
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	6013      	str	r3, [r2, #0]
		MX_AES_Init();
 80010a8:	f7ff fbb8 	bl	800081c <MX_AES_Init>
		if (HAL_CRYP_Decrypt(&hcryp, buffer, 16, (uint8_t*) newPkeys, 1)
 80010ac:	197a      	adds	r2, r7, r5
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	4842      	ldr	r0, [pc, #264]	; (80011bc <readingCallback+0x19c>)
 80010b2:	2301      	movs	r3, #1
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	0013      	movs	r3, r2
 80010b8:	2210      	movs	r2, #16
 80010ba:	f001 fa25 	bl	8002508 <HAL_CRYP_Decrypt>
 80010be:	1e03      	subs	r3, r0, #0
 80010c0:	d111      	bne.n	80010e6 <readingCallback+0xc6>
				== HAL_OK) {
			writeKeyToFlash((uint64_t*) newPkeys, &EraseInitStruct);
 80010c2:	4a3f      	ldr	r2, [pc, #252]	; (80011c0 <readingCallback+0x1a0>)
 80010c4:	2428      	movs	r4, #40	; 0x28
 80010c6:	193b      	adds	r3, r7, r4
 80010c8:	0011      	movs	r1, r2
 80010ca:	0018      	movs	r0, r3
 80010cc:	f000 f8a3 	bl	8001216 <writeKeyToFlash>
			memcpy(pKeyAES, newPkeys, AESKeySize);
 80010d0:	4b39      	ldr	r3, [pc, #228]	; (80011b8 <readingCallback+0x198>)
 80010d2:	193a      	adds	r2, r7, r4
 80010d4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80010d6:	c313      	stmia	r3!, {r0, r1, r4}
 80010d8:	6812      	ldr	r2, [r2, #0]
 80010da:	601a      	str	r2, [r3, #0]
			// We don't necessarily have to have this here -- we can let it keep writing
			aKeys.masterSent = 0;
 80010dc:	4b34      	ldr	r3, [pc, #208]	; (80011b0 <readingCallback+0x190>)
 80010de:	2281      	movs	r2, #129	; 0x81
 80010e0:	2100      	movs	r1, #0
 80010e2:	5499      	strb	r1, [r3, r2]
 80010e4:	e006      	b.n	80010f4 <readingCallback+0xd4>
		} else {
			memcpy(pKeyAES, oldPkeys, AESKeySize);
 80010e6:	4b34      	ldr	r3, [pc, #208]	; (80011b8 <readingCallback+0x198>)
 80010e8:	2238      	movs	r2, #56	; 0x38
 80010ea:	18ba      	adds	r2, r7, r2
 80010ec:	ca13      	ldmia	r2!, {r0, r1, r4}
 80010ee:	c313      	stmia	r3!, {r0, r1, r4}
 80010f0:	6812      	ldr	r2, [r2, #0]
 80010f2:	601a      	str	r2, [r3, #0]
		}
		MX_AES_Init();
 80010f4:	f7ff fb92 	bl	800081c <MX_AES_Init>
	} else if (!MASTER_DEVICE && length == 16 && aKeys.masterSent) {
 80010f8:	e056      	b.n	80011a8 <readingCallback+0x188>
	} else {

		if (length != 16) {
 80010fa:	1cfb      	adds	r3, r7, #3
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b10      	cmp	r3, #16
 8001100:	d151      	bne.n	80011a6 <readingCallback+0x186>
			// something went wrong
			return;
		}
		uint32_t tempout[4] = { 0 };
 8001102:	2418      	movs	r4, #24
 8001104:	193b      	adds	r3, r7, r4
 8001106:	0018      	movs	r0, r3
 8001108:	2310      	movs	r3, #16
 800110a:	001a      	movs	r2, r3
 800110c:	2100      	movs	r1, #0
 800110e:	f007 f8f6 	bl	80082fe <memset>
		Packet tmp;
		if (HAL_CRYP_Decrypt(&hcryp, buffer, 16, (uint8_t*) tempout, 1)
 8001112:	193a      	adds	r2, r7, r4
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	4829      	ldr	r0, [pc, #164]	; (80011bc <readingCallback+0x19c>)
 8001118:	2301      	movs	r3, #1
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	0013      	movs	r3, r2
 800111e:	2210      	movs	r2, #16
 8001120:	f001 f9f2 	bl	8002508 <HAL_CRYP_Decrypt>
 8001124:	1e03      	subs	r3, r0, #0
 8001126:	d13f      	bne.n	80011a8 <readingCallback+0x188>
				== HAL_OK) {
			memcpy(&tmp, tempout, sizeof(Packet));
 8001128:	2408      	movs	r4, #8
 800112a:	193a      	adds	r2, r7, r4
 800112c:	2318      	movs	r3, #24
 800112e:	18fb      	adds	r3, r7, r3
 8001130:	0010      	movs	r0, r2
 8001132:	0019      	movs	r1, r3
 8001134:	230e      	movs	r3, #14
 8001136:	001a      	movs	r2, r3
 8001138:	f007 f8d8 	bl	80082ec <memcpy>
			if (tmp.preamble == VIBE_PREAMBLE
 800113c:	193b      	adds	r3, r7, r4
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2bf0      	cmp	r3, #240	; 0xf0
 8001142:	d131      	bne.n	80011a8 <readingCallback+0x188>
					&& tmp.sequenceNumber > deviceSeqs[tmp.deviceID]) {
 8001144:	2008      	movs	r0, #8
 8001146:	183b      	adds	r3, r7, r0
 8001148:	885a      	ldrh	r2, [r3, #2]
 800114a:	889b      	ldrh	r3, [r3, #4]
 800114c:	041b      	lsls	r3, r3, #16
 800114e:	4313      	orrs	r3, r2
 8001150:	0019      	movs	r1, r3
 8001152:	183b      	adds	r3, r7, r0
 8001154:	785b      	ldrb	r3, [r3, #1]
 8001156:	001a      	movs	r2, r3
 8001158:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <readingCallback+0x1a4>)
 800115a:	0092      	lsls	r2, r2, #2
 800115c:	58d3      	ldr	r3, [r2, r3]
 800115e:	4299      	cmp	r1, r3
 8001160:	d922      	bls.n	80011a8 <readingCallback+0x188>
				playback.data = tmp.data;
 8001162:	2508      	movs	r5, #8
 8001164:	197b      	adds	r3, r7, r5
 8001166:	88d8      	ldrh	r0, [r3, #6]
 8001168:	891c      	ldrh	r4, [r3, #8]
 800116a:	0424      	lsls	r4, r4, #16
 800116c:	4320      	orrs	r0, r4
 800116e:	0001      	movs	r1, r0
 8001170:	8958      	ldrh	r0, [r3, #10]
 8001172:	899b      	ldrh	r3, [r3, #12]
 8001174:	041b      	lsls	r3, r3, #16
 8001176:	4303      	orrs	r3, r0
 8001178:	001a      	movs	r2, r3
 800117a:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <readingCallback+0x1a8>)
 800117c:	6099      	str	r1, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
				playback.enabled = 1;
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <readingCallback+0x1a8>)
 8001182:	2201      	movs	r2, #1
 8001184:	701a      	strb	r2, [r3, #0]
				playback.count = 0;
 8001186:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <readingCallback+0x1a8>)
 8001188:	2200      	movs	r2, #0
 800118a:	705a      	strb	r2, [r3, #1]
				deviceSeqs[tmp.deviceID] = tmp.sequenceNumber;
 800118c:	197b      	adds	r3, r7, r5
 800118e:	785b      	ldrb	r3, [r3, #1]
 8001190:	0018      	movs	r0, r3
 8001192:	197b      	adds	r3, r7, r5
 8001194:	885a      	ldrh	r2, [r3, #2]
 8001196:	889b      	ldrh	r3, [r3, #4]
 8001198:	041b      	lsls	r3, r3, #16
 800119a:	4313      	orrs	r3, r2
 800119c:	0019      	movs	r1, r3
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <readingCallback+0x1a4>)
 80011a0:	0082      	lsls	r2, r0, #2
 80011a2:	50d1      	str	r1, [r2, r3]
 80011a4:	e000      	b.n	80011a8 <readingCallback+0x188>
			return;
 80011a6:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
}
 80011a8:	46bd      	mov	sp, r7
 80011aa:	b012      	add	sp, #72	; 0x48
 80011ac:	bdb0      	pop	{r4, r5, r7, pc}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	20000698 	.word	0x20000698
 80011b4:	200006d8 	.word	0x200006d8
 80011b8:	20000114 	.word	0x20000114
 80011bc:	20000768 	.word	0x20000768
 80011c0:	20000588 	.word	0x20000588
 80011c4:	20000124 	.word	0x20000124
 80011c8:	20000578 	.word	0x20000578

080011cc <readKeyFromFlash>:

static void readKeyFromFlash(uint32_t *ptr, FLASH_EraseInitTypeDef *erase) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]

	uint32_t addr = 0x08000000 + FLASH_PAGE_SIZE * erase->Page;
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	2280      	movs	r2, #128	; 0x80
 80011dc:	0252      	lsls	r2, r2, #9
 80011de:	4694      	mov	ip, r2
 80011e0:	4463      	add	r3, ip
 80011e2:	02db      	lsls	r3, r3, #11
 80011e4:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < AESKeySize / sizeof(uint32_t); i++) {
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	e00d      	b.n	8001208 <readKeyFromFlash+0x3c>
		ptr[i] = ((uint32_t*) addr)[i];
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	009a      	lsls	r2, r3, #2
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	18d3      	adds	r3, r2, r3
 80011f4:	001a      	movs	r2, r3
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	18cb      	adds	r3, r1, r3
 80011fe:	6812      	ldr	r2, [r2, #0]
 8001200:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < AESKeySize / sizeof(uint32_t); i++) {
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	3301      	adds	r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2b03      	cmp	r3, #3
 800120c:	d9ee      	bls.n	80011ec <readKeyFromFlash+0x20>
	}
}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	46bd      	mov	sp, r7
 8001212:	b004      	add	sp, #16
 8001214:	bd80      	pop	{r7, pc}

08001216 <writeKeyToFlash>:

static void writeKeyToFlash(uint64_t *ptr, FLASH_EraseInitTypeDef *erase) {
 8001216:	b590      	push	{r4, r7, lr}
 8001218:	b087      	sub	sp, #28
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
 800121e:	6039      	str	r1, [r7, #0]

	uint32_t addr = 0x08000000 + FLASH_PAGE_SIZE * erase->Page;
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	2280      	movs	r2, #128	; 0x80
 8001226:	0252      	lsls	r2, r2, #9
 8001228:	4694      	mov	ip, r2
 800122a:	4463      	add	r3, ip
 800122c:	02db      	lsls	r3, r3, #11
 800122e:	613b      	str	r3, [r7, #16]

	uint32_t pgerr = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
	HAL_FLASH_Unlock();
 8001234:	f002 fa66 	bl	8003704 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(erase, &pgerr);
 8001238:	230c      	movs	r3, #12
 800123a:	18fa      	adds	r2, r7, r3
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	0011      	movs	r1, r2
 8001240:	0018      	movs	r0, r3
 8001242:	f002 fb0d 	bl	8003860 <HAL_FLASHEx_Erase>
	for (int i = 0; i < AESKeySize / sizeof(uint64_t); i++) {
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
 800124a:	e011      	b.n	8001270 <writeKeyToFlash+0x5a>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
				addr + (sizeof(uint64_t)) * i, ptr[i]);
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	00da      	lsls	r2, r3, #3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	18d1      	adds	r1, r2, r3
				addr + (sizeof(uint64_t)) * i, ptr[i]);
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	18d3      	adds	r3, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 800125c:	685c      	ldr	r4, [r3, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	001a      	movs	r2, r3
 8001262:	0023      	movs	r3, r4
 8001264:	2001      	movs	r0, #1
 8001266:	f002 f9fd 	bl	8003664 <HAL_FLASH_Program>
	for (int i = 0; i < AESKeySize / sizeof(uint64_t); i++) {
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	3301      	adds	r3, #1
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d9ea      	bls.n	800124c <writeKeyToFlash+0x36>
	}
	HAL_FLASH_Lock();
 8001276:	f002 fa69 	bl	800374c <HAL_FLASH_Lock>
}
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	46bd      	mov	sp, r7
 800127e:	b007      	add	sp, #28
 8001280:	bd90      	pop	{r4, r7, pc}

08001282 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001282:	b580      	push	{r7, lr}
 8001284:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001286:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001288:	e7fe      	b.n	8001288 <Error_Handler+0x6>
	...

0800128c <rfm95_init>:
 */

/**
 * Initializes device and sets Handle
 */
bool rfm95_init(rfm95_handle_t *handle_pointer) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	handle = handle_pointer;
 8001294:	4b9c      	ldr	r3, [pc, #624]	; (8001508 <rfm95_init+0x27c>)
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	601a      	str	r2, [r3, #0]

	assert(handle->spi_handle->Init.Mode == SPI_MODE_MASTER);
 800129a:	4b9b      	ldr	r3, [pc, #620]	; (8001508 <rfm95_init+0x27c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	2382      	movs	r3, #130	; 0x82
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d005      	beq.n	80012b6 <rfm95_init+0x2a>
 80012aa:	4b98      	ldr	r3, [pc, #608]	; (800150c <rfm95_init+0x280>)
 80012ac:	4a98      	ldr	r2, [pc, #608]	; (8001510 <rfm95_init+0x284>)
 80012ae:	4899      	ldr	r0, [pc, #612]	; (8001514 <rfm95_init+0x288>)
 80012b0:	211a      	movs	r1, #26
 80012b2:	f006 ffaf 	bl	8008214 <__assert_func>
	assert(handle->spi_handle->Init.Direction == SPI_DIRECTION_2LINES);
 80012b6:	4b94      	ldr	r3, [pc, #592]	; (8001508 <rfm95_init+0x27c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d005      	beq.n	80012ce <rfm95_init+0x42>
 80012c2:	4b95      	ldr	r3, [pc, #596]	; (8001518 <rfm95_init+0x28c>)
 80012c4:	4a92      	ldr	r2, [pc, #584]	; (8001510 <rfm95_init+0x284>)
 80012c6:	4893      	ldr	r0, [pc, #588]	; (8001514 <rfm95_init+0x288>)
 80012c8:	211b      	movs	r1, #27
 80012ca:	f006 ffa3 	bl	8008214 <__assert_func>
	assert(handle->spi_handle->Init.DataSize == SPI_DATASIZE_8BIT);
 80012ce:	4b8e      	ldr	r3, [pc, #568]	; (8001508 <rfm95_init+0x27c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	68da      	ldr	r2, [r3, #12]
 80012d6:	23e0      	movs	r3, #224	; 0xe0
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	429a      	cmp	r2, r3
 80012dc:	d005      	beq.n	80012ea <rfm95_init+0x5e>
 80012de:	4b8f      	ldr	r3, [pc, #572]	; (800151c <rfm95_init+0x290>)
 80012e0:	4a8b      	ldr	r2, [pc, #556]	; (8001510 <rfm95_init+0x284>)
 80012e2:	488c      	ldr	r0, [pc, #560]	; (8001514 <rfm95_init+0x288>)
 80012e4:	211c      	movs	r1, #28
 80012e6:	f006 ff95 	bl	8008214 <__assert_func>
	assert(handle->spi_handle->Init.CLKPolarity == SPI_POLARITY_LOW);
 80012ea:	4b87      	ldr	r3, [pc, #540]	; (8001508 <rfm95_init+0x27c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d005      	beq.n	8001302 <rfm95_init+0x76>
 80012f6:	4b8a      	ldr	r3, [pc, #552]	; (8001520 <rfm95_init+0x294>)
 80012f8:	4a85      	ldr	r2, [pc, #532]	; (8001510 <rfm95_init+0x284>)
 80012fa:	4886      	ldr	r0, [pc, #536]	; (8001514 <rfm95_init+0x288>)
 80012fc:	211d      	movs	r1, #29
 80012fe:	f006 ff89 	bl	8008214 <__assert_func>
	assert(handle->spi_handle->Init.CLKPhase == SPI_PHASE_1EDGE);
 8001302:	4b81      	ldr	r3, [pc, #516]	; (8001508 <rfm95_init+0x27c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d005      	beq.n	800131a <rfm95_init+0x8e>
 800130e:	4b85      	ldr	r3, [pc, #532]	; (8001524 <rfm95_init+0x298>)
 8001310:	4a7f      	ldr	r2, [pc, #508]	; (8001510 <rfm95_init+0x284>)
 8001312:	4880      	ldr	r0, [pc, #512]	; (8001514 <rfm95_init+0x288>)
 8001314:	211e      	movs	r1, #30
 8001316:	f006 ff7d 	bl	8008214 <__assert_func>

	rfm95_reset();
 800131a:	f000 faff 	bl	800191c <rfm95_reset>

	// Check for correct version.
	uint8_t version = 0;
 800131e:	210f      	movs	r1, #15
 8001320:	187b      	adds	r3, r7, r1
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]
	if (!rfm95_read(RFM95_REGISTER_VERSION, &version))
 8001326:	187b      	adds	r3, r7, r1
 8001328:	0019      	movs	r1, r3
 800132a:	2042      	movs	r0, #66	; 0x42
 800132c:	f000 fa76 	bl	800181c <rfm95_read>
 8001330:	0003      	movs	r3, r0
 8001332:	001a      	movs	r2, r3
 8001334:	2301      	movs	r3, #1
 8001336:	4053      	eors	r3, r2
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <rfm95_init+0xb6>
		return false;
 800133e:	2300      	movs	r3, #0
 8001340:	e0dd      	b.n	80014fe <rfm95_init+0x272>
	if (version != RFM9x_VER)
 8001342:	230f      	movs	r3, #15
 8001344:	18fb      	adds	r3, r7, r3
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b12      	cmp	r3, #18
 800134a:	d001      	beq.n	8001350 <rfm95_init+0xc4>
		return false;
 800134c:	2300      	movs	r3, #0
 800134e:	e0d6      	b.n	80014fe <rfm95_init+0x272>

	// Module must be placed in sleep mode before switching to lora.
	if (!rfm95_write(RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_SLEEP))
 8001350:	2100      	movs	r1, #0
 8001352:	2001      	movs	r0, #1
 8001354:	f000 faa4 	bl	80018a0 <rfm95_write>
 8001358:	0003      	movs	r3, r0
 800135a:	001a      	movs	r2, r3
 800135c:	2301      	movs	r3, #1
 800135e:	4053      	eors	r3, r2
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <rfm95_init+0xde>
		return false;
 8001366:	2300      	movs	r3, #0
 8001368:	e0c9      	b.n	80014fe <rfm95_init+0x272>
	if (!rfm95_write(RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA))
 800136a:	2180      	movs	r1, #128	; 0x80
 800136c:	2001      	movs	r0, #1
 800136e:	f000 fa97 	bl	80018a0 <rfm95_write>
 8001372:	0003      	movs	r3, r0
 8001374:	001a      	movs	r2, r3
 8001376:	2301      	movs	r3, #1
 8001378:	4053      	eors	r3, r2
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <rfm95_init+0xf8>
		return false;
 8001380:	2300      	movs	r3, #0
 8001382:	e0bc      	b.n	80014fe <rfm95_init+0x272>

	// Set module power to 17dbm.
	if (!rfm95_setPower(20))
 8001384:	2014      	movs	r0, #20
 8001386:	f000 f8cf 	bl	8001528 <rfm95_setPower>
 800138a:	0003      	movs	r3, r0
 800138c:	001a      	movs	r2, r3
 800138e:	2301      	movs	r3, #1
 8001390:	4053      	eors	r3, r2
 8001392:	b2db      	uxtb	r3, r3
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <rfm95_init+0x110>
		return false;
 8001398:	2300      	movs	r3, #0
 800139a:	e0b0      	b.n	80014fe <rfm95_init+0x272>

	// RX timeout set to 37 symbols.
	if (!rfm95_write(RFM95_REGISTER_SYMB_TIMEOUT_LSB, 255))
 800139c:	21ff      	movs	r1, #255	; 0xff
 800139e:	201f      	movs	r0, #31
 80013a0:	f000 fa7e 	bl	80018a0 <rfm95_write>
 80013a4:	0003      	movs	r3, r0
 80013a6:	001a      	movs	r2, r3
 80013a8:	2301      	movs	r3, #1
 80013aa:	4053      	eors	r3, r2
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <rfm95_init+0x12a>
		return false;
 80013b2:	2300      	movs	r3, #0
 80013b4:	e0a3      	b.n	80014fe <rfm95_init+0x272>

	// Preamble set to 8 + 4.25 = 12.25 symbols.
	if (!rfm95_write(RFM95_REGISTER_PREAMBLE_MSB, 0x00))
 80013b6:	2100      	movs	r1, #0
 80013b8:	2020      	movs	r0, #32
 80013ba:	f000 fa71 	bl	80018a0 <rfm95_write>
 80013be:	0003      	movs	r3, r0
 80013c0:	001a      	movs	r2, r3
 80013c2:	2301      	movs	r3, #1
 80013c4:	4053      	eors	r3, r2
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <rfm95_init+0x144>
		return false;
 80013cc:	2300      	movs	r3, #0
 80013ce:	e096      	b.n	80014fe <rfm95_init+0x272>
	if (!rfm95_write(RFM95_REGISTER_PREAMBLE_LSB, 0x08))
 80013d0:	2108      	movs	r1, #8
 80013d2:	2021      	movs	r0, #33	; 0x21
 80013d4:	f000 fa64 	bl	80018a0 <rfm95_write>
 80013d8:	0003      	movs	r3, r0
 80013da:	001a      	movs	r2, r3
 80013dc:	2301      	movs	r3, #1
 80013de:	4053      	eors	r3, r2
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <rfm95_init+0x15e>
		return false;
 80013e6:	2300      	movs	r3, #0
 80013e8:	e089      	b.n	80014fe <rfm95_init+0x272>

	// Set IQ inversion.
	if (!rfm95_write(RFM95_REGISTER_INVERT_IQ_1,
 80013ea:	2127      	movs	r1, #39	; 0x27
 80013ec:	2033      	movs	r0, #51	; 0x33
 80013ee:	f000 fa57 	bl	80018a0 <rfm95_write>
 80013f2:	0003      	movs	r3, r0
 80013f4:	001a      	movs	r2, r3
 80013f6:	2301      	movs	r3, #1
 80013f8:	4053      	eors	r3, r2
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <rfm95_init+0x178>
	RFM95_REGISTER_INVERT_IQ_1_ON_TXONLY))
		return false;
 8001400:	2300      	movs	r3, #0
 8001402:	e07c      	b.n	80014fe <rfm95_init+0x272>
	if (!rfm95_write(RFM95_REGISTER_INVERT_IQ_2,
 8001404:	211d      	movs	r1, #29
 8001406:	203b      	movs	r0, #59	; 0x3b
 8001408:	f000 fa4a 	bl	80018a0 <rfm95_write>
 800140c:	0003      	movs	r3, r0
 800140e:	001a      	movs	r2, r3
 8001410:	2301      	movs	r3, #1
 8001412:	4053      	eors	r3, r2
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <rfm95_init+0x192>
	RFM95_REGISTER_INVERT_IQ_2_OFF))
		return false;
 800141a:	2300      	movs	r3, #0
 800141c:	e06f      	b.n	80014fe <rfm95_init+0x272>

	// Set up TX and RX FIFO base addresses.
	if (!rfm95_write(RFM95_REGISTER_FIFO_TX_BASE_ADDR, 0x80))
 800141e:	2180      	movs	r1, #128	; 0x80
 8001420:	200e      	movs	r0, #14
 8001422:	f000 fa3d 	bl	80018a0 <rfm95_write>
 8001426:	0003      	movs	r3, r0
 8001428:	001a      	movs	r2, r3
 800142a:	2301      	movs	r3, #1
 800142c:	4053      	eors	r3, r2
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <rfm95_init+0x1ac>
		return false;
 8001434:	2300      	movs	r3, #0
 8001436:	e062      	b.n	80014fe <rfm95_init+0x272>
	if (!rfm95_write(RFM95_REGISTER_FIFO_RX_BASE_ADDR, 0x00))
 8001438:	2100      	movs	r1, #0
 800143a:	200f      	movs	r0, #15
 800143c:	f000 fa30 	bl	80018a0 <rfm95_write>
 8001440:	0003      	movs	r3, r0
 8001442:	001a      	movs	r2, r3
 8001444:	2301      	movs	r3, #1
 8001446:	4053      	eors	r3, r2
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <rfm95_init+0x1c6>
		return false;
 800144e:	2300      	movs	r3, #0
 8001450:	e055      	b.n	80014fe <rfm95_init+0x272>

	if (!rfm95_write(RFM95_REGISTER_FR_MSB, lora_frequency[0]))
 8001452:	23e4      	movs	r3, #228	; 0xe4
 8001454:	0019      	movs	r1, r3
 8001456:	2006      	movs	r0, #6
 8001458:	f000 fa22 	bl	80018a0 <rfm95_write>
 800145c:	0003      	movs	r3, r0
 800145e:	001a      	movs	r2, r3
 8001460:	2301      	movs	r3, #1
 8001462:	4053      	eors	r3, r2
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <rfm95_init+0x1e2>
		return false;
 800146a:	2300      	movs	r3, #0
 800146c:	e047      	b.n	80014fe <rfm95_init+0x272>
	if (!rfm95_write(RFM95_REGISTER_FR_MID, lora_frequency[1]))
 800146e:	23c0      	movs	r3, #192	; 0xc0
 8001470:	0019      	movs	r1, r3
 8001472:	2007      	movs	r0, #7
 8001474:	f000 fa14 	bl	80018a0 <rfm95_write>
 8001478:	0003      	movs	r3, r0
 800147a:	001a      	movs	r2, r3
 800147c:	2301      	movs	r3, #1
 800147e:	4053      	eors	r3, r2
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <rfm95_init+0x1fe>
		return false;
 8001486:	2300      	movs	r3, #0
 8001488:	e039      	b.n	80014fe <rfm95_init+0x272>
	if (!rfm95_write(RFM95_REGISTER_FR_LSB, lora_frequency[2]))
 800148a:	2326      	movs	r3, #38	; 0x26
 800148c:	0019      	movs	r1, r3
 800148e:	2008      	movs	r0, #8
 8001490:	f000 fa06 	bl	80018a0 <rfm95_write>
 8001494:	0003      	movs	r3, r0
 8001496:	001a      	movs	r2, r3
 8001498:	2301      	movs	r3, #1
 800149a:	4053      	eors	r3, r2
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <rfm95_init+0x21a>
		return false;
 80014a2:	2300      	movs	r3, #0
 80014a4:	e02b      	b.n	80014fe <rfm95_init+0x272>
//82
	if (!rfm95_write(RFM95_REGISTER_MODEM_CONFIG_1, 0x82))
 80014a6:	2182      	movs	r1, #130	; 0x82
 80014a8:	201d      	movs	r0, #29
 80014aa:	f000 f9f9 	bl	80018a0 <rfm95_write>
 80014ae:	0003      	movs	r3, r0
 80014b0:	001a      	movs	r2, r3
 80014b2:	2301      	movs	r3, #1
 80014b4:	4053      	eors	r3, r2
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <rfm95_init+0x234>
		return false;
 80014bc:	2300      	movs	r3, #0
 80014be:	e01e      	b.n	80014fe <rfm95_init+0x272>
	if (!rfm95_write(RFM95_REGISTER_MODEM_CONFIG_2, 0x90 | 0b111))
 80014c0:	2197      	movs	r1, #151	; 0x97
 80014c2:	201e      	movs	r0, #30
 80014c4:	f000 f9ec 	bl	80018a0 <rfm95_write>
 80014c8:	0003      	movs	r3, r0
 80014ca:	001a      	movs	r2, r3
 80014cc:	2301      	movs	r3, #1
 80014ce:	4053      	eors	r3, r2
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <rfm95_init+0x24e>
		return false;  //change to 0x94 for enabling CRC
 80014d6:	2300      	movs	r3, #0
 80014d8:	e011      	b.n	80014fe <rfm95_init+0x272>
	if (!rfm95_write(RFM95_REGISTER_MODEM_CONFIG_3, 0x00))
 80014da:	2100      	movs	r1, #0
 80014dc:	2026      	movs	r0, #38	; 0x26
 80014de:	f000 f9df 	bl	80018a0 <rfm95_write>
 80014e2:	0003      	movs	r3, r0
 80014e4:	001a      	movs	r2, r3
 80014e6:	2301      	movs	r3, #1
 80014e8:	4053      	eors	r3, r2
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <rfm95_init+0x268>
		return false;
 80014f0:	2300      	movs	r3, #0
 80014f2:	e004      	b.n	80014fe <rfm95_init+0x272>

	rfm95_write(RFM95_REGISTER_OP_MODE,
 80014f4:	2185      	movs	r1, #133	; 0x85
 80014f6:	2001      	movs	r0, #1
 80014f8:	f000 f9d2 	bl	80018a0 <rfm95_write>
	RFM95_REGISTER_OP_MODE_LORA_RXCONTINUOUS | 0x80);

	return true;
 80014fc:	2301      	movs	r3, #1
}
 80014fe:	0018      	movs	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	b004      	add	sp, #16
 8001504:	bd80      	pop	{r7, pc}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	200005c0 	.word	0x200005c0
 800150c:	080091f8 	.word	0x080091f8
 8001510:	08009368 	.word	0x08009368
 8001514:	0800922c 	.word	0x0800922c
 8001518:	08009240 	.word	0x08009240
 800151c:	0800927c 	.word	0x0800927c
 8001520:	080092b4 	.word	0x080092b4
 8001524:	080092f0 	.word	0x080092f0

08001528 <rfm95_setPower>:

/**
 * Sets power for transmission, 17 by default
 */
bool rfm95_setPower(int8_t power) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	0002      	movs	r2, r0
 8001530:	1dfb      	adds	r3, r7, #7
 8001532:	701a      	strb	r2, [r3, #0]
	rfm95_register_pa_config_t pa_config = { 0 };
 8001534:	230c      	movs	r3, #12
 8001536:	18fb      	adds	r3, r7, r3
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]
	uint8_t pa_dac_config = 0;
 800153c:	230f      	movs	r3, #15
 800153e:	18fb      	adds	r3, r7, r3
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]

	if (power >= 2 && power <= 17) {
 8001544:	1dfb      	adds	r3, r7, #7
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	b25b      	sxtb	r3, r3
 800154a:	2b01      	cmp	r3, #1
 800154c:	dd28      	ble.n	80015a0 <rfm95_setPower+0x78>
 800154e:	1dfb      	adds	r3, r7, #7
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	b25b      	sxtb	r3, r3
 8001554:	2b11      	cmp	r3, #17
 8001556:	dc23      	bgt.n	80015a0 <rfm95_setPower+0x78>
		pa_config.max_power = 7;
 8001558:	200c      	movs	r0, #12
 800155a:	183b      	adds	r3, r7, r0
 800155c:	781a      	ldrb	r2, [r3, #0]
 800155e:	2170      	movs	r1, #112	; 0x70
 8001560:	430a      	orrs	r2, r1
 8001562:	701a      	strb	r2, [r3, #0]
		pa_config.pa_select = 1;
 8001564:	183b      	adds	r3, r7, r0
 8001566:	781a      	ldrb	r2, [r3, #0]
 8001568:	2180      	movs	r1, #128	; 0x80
 800156a:	4249      	negs	r1, r1
 800156c:	430a      	orrs	r2, r1
 800156e:	701a      	strb	r2, [r3, #0]
		pa_config.output_power = (power - 2);
 8001570:	1dfb      	adds	r3, r7, #7
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	3b02      	subs	r3, #2
 8001576:	b2db      	uxtb	r3, r3
 8001578:	1c1a      	adds	r2, r3, #0
 800157a:	230f      	movs	r3, #15
 800157c:	4013      	ands	r3, r2
 800157e:	b2da      	uxtb	r2, r3
 8001580:	183b      	adds	r3, r7, r0
 8001582:	210f      	movs	r1, #15
 8001584:	400a      	ands	r2, r1
 8001586:	0010      	movs	r0, r2
 8001588:	781a      	ldrb	r2, [r3, #0]
 800158a:	210f      	movs	r1, #15
 800158c:	438a      	bics	r2, r1
 800158e:	1c11      	adds	r1, r2, #0
 8001590:	1c02      	adds	r2, r0, #0
 8001592:	430a      	orrs	r2, r1
 8001594:	701a      	strb	r2, [r3, #0]
		pa_dac_config = RFM95_REGISTER_PA_DAC_LOW_POWER;
 8001596:	230f      	movs	r3, #15
 8001598:	18fb      	adds	r3, r7, r3
 800159a:	2284      	movs	r2, #132	; 0x84
 800159c:	701a      	strb	r2, [r3, #0]
 800159e:	e019      	b.n	80015d4 <rfm95_setPower+0xac>

	} else if (power == 20) {
 80015a0:	1dfb      	adds	r3, r7, #7
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	b25b      	sxtb	r3, r3
 80015a6:	2b14      	cmp	r3, #20
 80015a8:	d114      	bne.n	80015d4 <rfm95_setPower+0xac>
		pa_config.max_power = 7;
 80015aa:	200c      	movs	r0, #12
 80015ac:	183b      	adds	r3, r7, r0
 80015ae:	781a      	ldrb	r2, [r3, #0]
 80015b0:	2170      	movs	r1, #112	; 0x70
 80015b2:	430a      	orrs	r2, r1
 80015b4:	701a      	strb	r2, [r3, #0]
		pa_config.pa_select = 1;
 80015b6:	183b      	adds	r3, r7, r0
 80015b8:	781a      	ldrb	r2, [r3, #0]
 80015ba:	2180      	movs	r1, #128	; 0x80
 80015bc:	4249      	negs	r1, r1
 80015be:	430a      	orrs	r2, r1
 80015c0:	701a      	strb	r2, [r3, #0]
		pa_config.output_power = 15;
 80015c2:	183b      	adds	r3, r7, r0
 80015c4:	781a      	ldrb	r2, [r3, #0]
 80015c6:	210f      	movs	r1, #15
 80015c8:	430a      	orrs	r2, r1
 80015ca:	701a      	strb	r2, [r3, #0]
		pa_dac_config = RFM95_REGISTER_PA_DAC_HIGH_POWER;
 80015cc:	230f      	movs	r3, #15
 80015ce:	18fb      	adds	r3, r7, r3
 80015d0:	2287      	movs	r2, #135	; 0x87
 80015d2:	701a      	strb	r2, [r3, #0]
	}

	if (!rfm95_write(RFM95_REGISTER_PA_CONFIG, pa_config.buffer))
 80015d4:	230c      	movs	r3, #12
 80015d6:	18fb      	adds	r3, r7, r3
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	0019      	movs	r1, r3
 80015dc:	2009      	movs	r0, #9
 80015de:	f000 f95f 	bl	80018a0 <rfm95_write>
 80015e2:	0003      	movs	r3, r0
 80015e4:	001a      	movs	r2, r3
 80015e6:	2301      	movs	r3, #1
 80015e8:	4053      	eors	r3, r2
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <rfm95_setPower+0xcc>
		return false;
 80015f0:	2300      	movs	r3, #0
 80015f2:	e010      	b.n	8001616 <rfm95_setPower+0xee>
	if (!rfm95_write(RFM95_REGISTER_PA_DAC, pa_dac_config))
 80015f4:	230f      	movs	r3, #15
 80015f6:	18fb      	adds	r3, r7, r3
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	0019      	movs	r1, r3
 80015fc:	204d      	movs	r0, #77	; 0x4d
 80015fe:	f000 f94f 	bl	80018a0 <rfm95_write>
 8001602:	0003      	movs	r3, r0
 8001604:	001a      	movs	r2, r3
 8001606:	2301      	movs	r3, #1
 8001608:	4053      	eors	r3, r2
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <rfm95_setPower+0xec>
		return false;
 8001610:	2300      	movs	r3, #0
 8001612:	e000      	b.n	8001616 <rfm95_setPower+0xee>

	return true;
 8001614:	2301      	movs	r3, #1
}
 8001616:	0018      	movs	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	b004      	add	sp, #16
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <transmitPackage>:

/**
 * Transmits payload after adding preamble
 */
bool transmitPackage(uint8_t *payload, size_t payloadLength) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]

	if (!handle->txDone) {
 800162a:	4b3d      	ldr	r3, [pc, #244]	; (8001720 <transmitPackage+0x100>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2222      	movs	r2, #34	; 0x22
 8001630:	5c9b      	ldrb	r3, [r3, r2]
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	d101      	bne.n	800163c <transmitPackage+0x1c>
//		rfm95_write(RFM95_REGISTER_OP_MODE,
//							RFM95_REGISTER_OP_MODE_LORA_RXCONTINUOUS | 0x80);
		return false;
 8001638:	2300      	movs	r3, #0
 800163a:	e06c      	b.n	8001716 <transmitPackage+0xf6>
	}
	handle->txDone = false;
 800163c:	4b38      	ldr	r3, [pc, #224]	; (8001720 <transmitPackage+0x100>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2222      	movs	r2, #34	; 0x22
 8001642:	2100      	movs	r1, #0
 8001644:	5499      	strb	r1, [r3, r2]

	uint8_t regopmode = 0;
 8001646:	230b      	movs	r3, #11
 8001648:	18fb      	adds	r3, r7, r3
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]
	do {
		rfm95_read(RFM95_REGISTER_OP_MODE, &regopmode);
 800164e:	230b      	movs	r3, #11
 8001650:	18fb      	adds	r3, r7, r3
 8001652:	0019      	movs	r1, r3
 8001654:	2001      	movs	r0, #1
 8001656:	f000 f8e1 	bl	800181c <rfm95_read>
		if (!rfm95_write(RFM95_REGISTER_OP_MODE,
 800165a:	2181      	movs	r1, #129	; 0x81
 800165c:	2001      	movs	r0, #1
 800165e:	f000 f91f 	bl	80018a0 <rfm95_write>
 8001662:	0003      	movs	r3, r0
 8001664:	001a      	movs	r2, r3
 8001666:	2301      	movs	r3, #1
 8001668:	4053      	eors	r3, r2
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <transmitPackage+0x54>
		RFM95_REGISTER_OP_MODE_LORA_STANDBY))
			return false;
 8001670:	2300      	movs	r3, #0
 8001672:	e050      	b.n	8001716 <transmitPackage+0xf6>
		HAL_Delay(1);
 8001674:	2001      	movs	r0, #1
 8001676:	f000 fc7f 	bl	8001f78 <HAL_Delay>
	} while (regopmode != RFM95_REGISTER_OP_MODE_LORA_STANDBY);
 800167a:	230b      	movs	r3, #11
 800167c:	18fb      	adds	r3, r7, r3
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b81      	cmp	r3, #129	; 0x81
 8001682:	d1e4      	bne.n	800164e <transmitPackage+0x2e>

	if (!rfm95_write(RFM95_REGISTER_PAYLOAD_LENGTH, payloadLength))
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	b2db      	uxtb	r3, r3
 8001688:	0019      	movs	r1, r3
 800168a:	2022      	movs	r0, #34	; 0x22
 800168c:	f000 f908 	bl	80018a0 <rfm95_write>
 8001690:	0003      	movs	r3, r0
 8001692:	001a      	movs	r2, r3
 8001694:	2301      	movs	r3, #1
 8001696:	4053      	eors	r3, r2
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <transmitPackage+0x82>
		return false;
 800169e:	2300      	movs	r3, #0
 80016a0:	e039      	b.n	8001716 <transmitPackage+0xf6>

	// Set SPI pointer to start of TX section in FIFO
	if (!rfm95_write(RFM95_REGISTER_FIFO_ADDR_PTR, 0x80))
 80016a2:	2180      	movs	r1, #128	; 0x80
 80016a4:	200d      	movs	r0, #13
 80016a6:	f000 f8fb 	bl	80018a0 <rfm95_write>
 80016aa:	0003      	movs	r3, r0
 80016ac:	001a      	movs	r2, r3
 80016ae:	2301      	movs	r3, #1
 80016b0:	4053      	eors	r3, r2
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <transmitPackage+0x9c>
		return false;
 80016b8:	2300      	movs	r3, #0
 80016ba:	e02c      	b.n	8001716 <transmitPackage+0xf6>

	// Write payload to FIFO.
	for (size_t i = 0; i < payloadLength; i++) {
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	e00a      	b.n	80016d8 <transmitPackage+0xb8>
		rfm95_write(RFM95_REGISTER_FIFO_ACCESS, payload[i]);
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	18d3      	adds	r3, r2, r3
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	0019      	movs	r1, r3
 80016cc:	2000      	movs	r0, #0
 80016ce:	f000 f8e7 	bl	80018a0 <rfm95_write>
	for (size_t i = 0; i < payloadLength; i++) {
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	3301      	adds	r3, #1
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d3f0      	bcc.n	80016c2 <transmitPackage+0xa2>
	}

	if (!rfm95_write(RFM95_REGISTER_DIO_MAPPING_1,
 80016e0:	2140      	movs	r1, #64	; 0x40
 80016e2:	2040      	movs	r0, #64	; 0x40
 80016e4:	f000 f8dc 	bl	80018a0 <rfm95_write>
 80016e8:	0003      	movs	r3, r0
 80016ea:	001a      	movs	r2, r3
 80016ec:	2301      	movs	r3, #1
 80016ee:	4053      	eors	r3, r2
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <transmitPackage+0xda>
	RFM95_REGISTER_DIO_MAPPING_1_IRQ_TXDONE))
		return false;
 80016f6:	2300      	movs	r3, #0
 80016f8:	e00d      	b.n	8001716 <transmitPackage+0xf6>
	if (!rfm95_write(RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_TX))
 80016fa:	2183      	movs	r1, #131	; 0x83
 80016fc:	2001      	movs	r0, #1
 80016fe:	f000 f8cf 	bl	80018a0 <rfm95_write>
 8001702:	0003      	movs	r3, r0
 8001704:	001a      	movs	r2, r3
 8001706:	2301      	movs	r3, #1
 8001708:	4053      	eors	r3, r2
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <transmitPackage+0xf4>
		return false;
 8001710:	2300      	movs	r3, #0
 8001712:	e000      	b.n	8001716 <transmitPackage+0xf6>
//	if (!rfm95_write(RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_SLEEP)) return false;

//	rfm95_write(RFM95_REGISTER_OP_MODE,
//				RFM95_REGISTER_OP_MODE_LORA_RXCONTINUOUS | 0x80);

	return true;
 8001714:	2301      	movs	r3, #1

}
 8001716:	0018      	movs	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	b004      	add	sp, #16
 800171c:	bd80      	pop	{r7, pc}
 800171e:	46c0      	nop			; (mov r8, r8)
 8001720:	200005c0 	.word	0x200005c0

08001724 <rfm95_handleInterrupt>:
//	return true;
//}
/**
 * Generic function for handling interrupt, for tx and rx
 */
void rfm95_handleInterrupt() {
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
	uint8_t irqFlags;
	rfm95_read(RFM95_REGISTER_IRQ_FLAGS, &irqFlags);
 800172a:	1dfb      	adds	r3, r7, #7
 800172c:	0019      	movs	r1, r3
 800172e:	2012      	movs	r0, #18
 8001730:	f000 f874 	bl	800181c <rfm95_read>
	rfm95_write(RFM95_REGISTER_IRQ_FLAGS, irqFlags);
 8001734:	1dfb      	adds	r3, r7, #7
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	0019      	movs	r1, r3
 800173a:	2012      	movs	r0, #18
 800173c:	f000 f8b0 	bl	80018a0 <rfm95_write>

	if ((irqFlags & 0x20) == 0) {
 8001740:	1dfb      	adds	r3, r7, #7
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	001a      	movs	r2, r3
 8001746:	2320      	movs	r3, #32
 8001748:	4013      	ands	r3, r2
 800174a:	d160      	bne.n	800180e <rfm95_handleInterrupt+0xea>
//		++packetError;
		if ((irqFlags & 0x40) != 0) {
 800174c:	1dfb      	adds	r3, r7, #7
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	001a      	movs	r2, r3
 8001752:	2340      	movs	r3, #64	; 0x40
 8001754:	4013      	ands	r3, r2
 8001756:	d047      	beq.n	80017e8 <rfm95_handleInterrupt+0xc4>
			// read packet length
			uint8_t packetLength;

			// reading from RX_NVBYTES, since implicit header mode is off
			// check line 706 in the arduino library
			rfm95_read(0x13, &packetLength);
 8001758:	1dbb      	adds	r3, r7, #6
 800175a:	0019      	movs	r1, r3
 800175c:	2013      	movs	r0, #19
 800175e:	f000 f85d 	bl	800181c <rfm95_read>

			// set FIFO address to current RX address
			uint8_t currentAddr;

			rfm95_read(0x10, &currentAddr);
 8001762:	1d7b      	adds	r3, r7, #5
 8001764:	0019      	movs	r1, r3
 8001766:	2010      	movs	r0, #16
 8001768:	f000 f858 	bl	800181c <rfm95_read>
			rfm95_write(RFM95_REGISTER_FIFO_ADDR_PTR, currentAddr);
 800176c:	1d7b      	adds	r3, r7, #5
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	0019      	movs	r1, r3
 8001772:	200d      	movs	r0, #13
 8001774:	f000 f894 	bl	80018a0 <rfm95_write>

			uint8_t *buffer = (uint8_t*) calloc(packetLength, sizeof(uint8_t));
 8001778:	1dbb      	adds	r3, r7, #6
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2101      	movs	r1, #1
 800177e:	0018      	movs	r0, r3
 8001780:	f006 fd66 	bl	8008250 <calloc>
 8001784:	0003      	movs	r3, r0
 8001786:	60bb      	str	r3, [r7, #8]

			for (size_t i = 0; i < packetLength; i++) {
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	e009      	b.n	80017a2 <rfm95_handleInterrupt+0x7e>
				rfm95_read(RFM95_REGISTER_FIFO_ACCESS, &buffer[i]);
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	18d3      	adds	r3, r2, r3
 8001794:	0019      	movs	r1, r3
 8001796:	2000      	movs	r0, #0
 8001798:	f000 f840 	bl	800181c <rfm95_read>
			for (size_t i = 0; i < packetLength; i++) {
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	3301      	adds	r3, #1
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	1dbb      	adds	r3, r7, #6
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	001a      	movs	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d3ef      	bcc.n	800178e <rfm95_handleInterrupt+0x6a>
//                receivedPacketLength = packetLength;
//                receivedPacketData = (uint8_t *) calloc(packetLength, sizeof(uint8_t));
//            	memcpy(receivedPacketData, buffer + 4, packetLength);
//            }

			if (handle->rxDoneCallback) {
 80017ae:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <rfm95_handleInterrupt+0xf4>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d007      	beq.n	80017c8 <rfm95_handleInterrupt+0xa4>
				handle->rxDoneCallback(buffer, packetLength);
 80017b8:	4b17      	ldr	r3, [pc, #92]	; (8001818 <rfm95_handleInterrupt+0xf4>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017be:	1dba      	adds	r2, r7, #6
 80017c0:	7811      	ldrb	r1, [r2, #0]
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	0010      	movs	r0, r2
 80017c6:	4798      	blx	r3
//			rfm95_write(RFM95_REGISTER_OP_MODE,
//								RFM95_REGISTER_OP_MODE_LORA_RXCONTINUOUS | 0x80);

			//line 401? receive()
			//writeRegister(REG_DIO_MAPPING_1, 0x00); // DIO0 => RXDONE
			rfm95_write(RFM95_REGISTER_DIO_MAPPING_1, 0x00);
 80017c8:	2100      	movs	r1, #0
 80017ca:	2040      	movs	r0, #64	; 0x40
 80017cc:	f000 f868 	bl	80018a0 <rfm95_write>
			rfm95_write(RFM95_REGISTER_OP_MODE,
 80017d0:	2185      	movs	r1, #133	; 0x85
 80017d2:	2001      	movs	r0, #1
 80017d4:	f000 f864 	bl	80018a0 <rfm95_write>
								RFM95_REGISTER_OP_MODE_LORA_RXCONTINUOUS | 0x80);

			rfm95_write(RFM95_REGISTER_FIFO_RX_BASE_ADDR, 0x00);
 80017d8:	2100      	movs	r1, #0
 80017da:	200f      	movs	r0, #15
 80017dc:	f000 f860 	bl	80018a0 <rfm95_write>
			//RegSeqConfig1?
			free(buffer);
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	0018      	movs	r0, r3
 80017e4:	f006 fd78 	bl	80082d8 <free>

		}
		if ((irqFlags & 0x08) != 0) {
 80017e8:	1dfb      	adds	r3, r7, #7
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	001a      	movs	r2, r3
 80017ee:	2308      	movs	r3, #8
 80017f0:	4013      	ands	r3, r2
 80017f2:	d00c      	beq.n	800180e <rfm95_handleInterrupt+0xea>
			handle->txDone = true;
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <rfm95_handleInterrupt+0xf4>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2222      	movs	r2, #34	; 0x22
 80017fa:	2101      	movs	r1, #1
 80017fc:	5499      	strb	r1, [r3, r2]
			rfm95_write(RFM95_REGISTER_OP_MODE,
 80017fe:	2185      	movs	r1, #133	; 0x85
 8001800:	2001      	movs	r0, #1
 8001802:	f000 f84d 	bl	80018a0 <rfm95_write>
					RFM95_REGISTER_OP_MODE_LORA_RXCONTINUOUS | 0x80);
			rfm95_write(RFM95_REGISTER_DIO_MAPPING_1, 0x00);
 8001806:	2100      	movs	r1, #0
 8001808:	2040      	movs	r0, #64	; 0x40
 800180a:	f000 f849 	bl	80018a0 <rfm95_write>

		}
	}
}
 800180e:	46c0      	nop			; (mov r8, r8)
 8001810:	46bd      	mov	sp, r7
 8001812:	b004      	add	sp, #16
 8001814:	bd80      	pop	{r7, pc}
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	200005c0 	.word	0x200005c0

0800181c <rfm95_read>:
 */

/**
 * Reads from register given by reg and stores value in buffer
 */
bool rfm95_read(rfm95_register_t reg, uint8_t *buffer) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	0002      	movs	r2, r0
 8001824:	6039      	str	r1, [r7, #0]
 8001826:	1dfb      	adds	r3, r7, #7
 8001828:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 800182a:	4b1c      	ldr	r3, [pc, #112]	; (800189c <rfm95_read+0x80>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6858      	ldr	r0, [r3, #4]
 8001830:	4b1a      	ldr	r3, [pc, #104]	; (800189c <rfm95_read+0x80>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	891b      	ldrh	r3, [r3, #8]
 8001836:	2200      	movs	r2, #0
 8001838:	0019      	movs	r1, r3
 800183a:	f002 fa36 	bl	8003caa <HAL_GPIO_WritePin>

	uint8_t transmit_buffer = (uint8_t) reg & 0x7fu;
 800183e:	1dfb      	adds	r3, r7, #7
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	227f      	movs	r2, #127	; 0x7f
 8001844:	4013      	ands	r3, r2
 8001846:	b2da      	uxtb	r2, r3
 8001848:	210f      	movs	r1, #15
 800184a:	187b      	adds	r3, r7, r1
 800184c:	701a      	strb	r2, [r3, #0]

	if (HAL_SPI_Transmit(handle->spi_handle, &transmit_buffer, 1,
 800184e:	4b13      	ldr	r3, [pc, #76]	; (800189c <rfm95_read+0x80>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6818      	ldr	r0, [r3, #0]
 8001854:	1879      	adds	r1, r7, r1
 8001856:	230a      	movs	r3, #10
 8001858:	2201      	movs	r2, #1
 800185a:	f003 fa93 	bl	8004d84 <HAL_SPI_Transmit>
 800185e:	1e03      	subs	r3, r0, #0
 8001860:	d001      	beq.n	8001866 <rfm95_read+0x4a>
	RFM95_SPI_TIMEOUT) != HAL_OK)
		return false;
 8001862:	2300      	movs	r3, #0
 8001864:	e016      	b.n	8001894 <rfm95_read+0x78>
	if (HAL_SPI_Receive(handle->spi_handle, buffer, 1, RFM95_SPI_TIMEOUT)
 8001866:	4b0d      	ldr	r3, [pc, #52]	; (800189c <rfm95_read+0x80>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6818      	ldr	r0, [r3, #0]
 800186c:	6839      	ldr	r1, [r7, #0]
 800186e:	230a      	movs	r3, #10
 8001870:	2201      	movs	r2, #1
 8001872:	f003 fbdf 	bl	8005034 <HAL_SPI_Receive>
 8001876:	1e03      	subs	r3, r0, #0
 8001878:	d001      	beq.n	800187e <rfm95_read+0x62>
			!= HAL_OK)
		return false;
 800187a:	2300      	movs	r3, #0
 800187c:	e00a      	b.n	8001894 <rfm95_read+0x78>

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 800187e:	4b07      	ldr	r3, [pc, #28]	; (800189c <rfm95_read+0x80>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6858      	ldr	r0, [r3, #4]
 8001884:	4b05      	ldr	r3, [pc, #20]	; (800189c <rfm95_read+0x80>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	891b      	ldrh	r3, [r3, #8]
 800188a:	2201      	movs	r2, #1
 800188c:	0019      	movs	r1, r3
 800188e:	f002 fa0c 	bl	8003caa <HAL_GPIO_WritePin>

	return true;
 8001892:	2301      	movs	r3, #1
}
 8001894:	0018      	movs	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	b004      	add	sp, #16
 800189a:	bd80      	pop	{r7, pc}
 800189c:	200005c0 	.word	0x200005c0

080018a0 <rfm95_write>:

/**
 * Writes value to register given by reg
 */
bool rfm95_write(rfm95_register_t reg, uint8_t value) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	0002      	movs	r2, r0
 80018a8:	1dfb      	adds	r3, r7, #7
 80018aa:	701a      	strb	r2, [r3, #0]
 80018ac:	1dbb      	adds	r3, r7, #6
 80018ae:	1c0a      	adds	r2, r1, #0
 80018b0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 80018b2:	4b19      	ldr	r3, [pc, #100]	; (8001918 <rfm95_write+0x78>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6858      	ldr	r0, [r3, #4]
 80018b8:	4b17      	ldr	r3, [pc, #92]	; (8001918 <rfm95_write+0x78>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	891b      	ldrh	r3, [r3, #8]
 80018be:	2200      	movs	r2, #0
 80018c0:	0019      	movs	r1, r3
 80018c2:	f002 f9f2 	bl	8003caa <HAL_GPIO_WritePin>

	uint8_t transmit_buffer[2] = { ((uint8_t) reg | 0x80u), value };
 80018c6:	1dfb      	adds	r3, r7, #7
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2280      	movs	r2, #128	; 0x80
 80018cc:	4252      	negs	r2, r2
 80018ce:	4313      	orrs	r3, r2
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	210c      	movs	r1, #12
 80018d4:	187b      	adds	r3, r7, r1
 80018d6:	701a      	strb	r2, [r3, #0]
 80018d8:	187b      	adds	r3, r7, r1
 80018da:	1dba      	adds	r2, r7, #6
 80018dc:	7812      	ldrb	r2, [r2, #0]
 80018de:	705a      	strb	r2, [r3, #1]

	if (HAL_SPI_Transmit(handle->spi_handle, transmit_buffer, 2,
 80018e0:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <rfm95_write+0x78>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6818      	ldr	r0, [r3, #0]
 80018e6:	1879      	adds	r1, r7, r1
 80018e8:	230a      	movs	r3, #10
 80018ea:	2202      	movs	r2, #2
 80018ec:	f003 fa4a 	bl	8004d84 <HAL_SPI_Transmit>
 80018f0:	1e03      	subs	r3, r0, #0
 80018f2:	d001      	beq.n	80018f8 <rfm95_write+0x58>
	RFM95_SPI_TIMEOUT) != HAL_OK)
		return false;
 80018f4:	2300      	movs	r3, #0
 80018f6:	e00a      	b.n	800190e <rfm95_write+0x6e>

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 80018f8:	4b07      	ldr	r3, [pc, #28]	; (8001918 <rfm95_write+0x78>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6858      	ldr	r0, [r3, #4]
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <rfm95_write+0x78>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	891b      	ldrh	r3, [r3, #8]
 8001904:	2201      	movs	r2, #1
 8001906:	0019      	movs	r1, r3
 8001908:	f002 f9cf 	bl	8003caa <HAL_GPIO_WritePin>

	return true;
 800190c:	2301      	movs	r3, #1
}
 800190e:	0018      	movs	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	b004      	add	sp, #16
 8001914:	bd80      	pop	{r7, pc}
 8001916:	46c0      	nop			; (mov r8, r8)
 8001918:	200005c0 	.word	0x200005c0

0800191c <rfm95_reset>:

/**
 * Resets Device for initialization
 */
void rfm95_reset() {
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_RESET);
 8001920:	4b0e      	ldr	r3, [pc, #56]	; (800195c <rfm95_reset+0x40>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	68d8      	ldr	r0, [r3, #12]
 8001926:	4b0d      	ldr	r3, [pc, #52]	; (800195c <rfm95_reset+0x40>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	8a1b      	ldrh	r3, [r3, #16]
 800192c:	2200      	movs	r2, #0
 800192e:	0019      	movs	r1, r3
 8001930:	f002 f9bb 	bl	8003caa <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001934:	2001      	movs	r0, #1
 8001936:	f000 fb1f 	bl	8001f78 <HAL_Delay>
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_SET);
 800193a:	4b08      	ldr	r3, [pc, #32]	; (800195c <rfm95_reset+0x40>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	68d8      	ldr	r0, [r3, #12]
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <rfm95_reset+0x40>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	8a1b      	ldrh	r3, [r3, #16]
 8001946:	2201      	movs	r2, #1
 8001948:	0019      	movs	r1, r3
 800194a:	f002 f9ae 	bl	8003caa <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800194e:	2005      	movs	r0, #5
 8001950:	f000 fb12 	bl	8001f78 <HAL_Delay>
}
 8001954:	46c0      	nop			; (mov r8, r8)
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	200005c0 	.word	0x200005c0

08001960 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001966:	4b11      	ldr	r3, [pc, #68]	; (80019ac <HAL_MspInit+0x4c>)
 8001968:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <HAL_MspInit+0x4c>)
 800196c:	2101      	movs	r1, #1
 800196e:	430a      	orrs	r2, r1
 8001970:	641a      	str	r2, [r3, #64]	; 0x40
 8001972:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <HAL_MspInit+0x4c>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	2201      	movs	r2, #1
 8001978:	4013      	ands	r3, r2
 800197a:	607b      	str	r3, [r7, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800197e:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <HAL_MspInit+0x4c>)
 8001980:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001982:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <HAL_MspInit+0x4c>)
 8001984:	2180      	movs	r1, #128	; 0x80
 8001986:	0549      	lsls	r1, r1, #21
 8001988:	430a      	orrs	r2, r1
 800198a:	63da      	str	r2, [r3, #60]	; 0x3c
 800198c:	4b07      	ldr	r3, [pc, #28]	; (80019ac <HAL_MspInit+0x4c>)
 800198e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	055b      	lsls	r3, r3, #21
 8001994:	4013      	ands	r3, r2
 8001996:	603b      	str	r3, [r7, #0]
 8001998:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800199a:	23c0      	movs	r3, #192	; 0xc0
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	0018      	movs	r0, r3
 80019a0:	f000 fb0c 	bl	8001fbc <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019a4:	46c0      	nop			; (mov r8, r8)
 80019a6:	46bd      	mov	sp, r7
 80019a8:	b002      	add	sp, #8
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40021000 	.word	0x40021000

080019b0 <HAL_CRYP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcryp: CRYP handle pointer
* @retval None
*/
void HAL_CRYP_MspInit(CRYP_HandleTypeDef* hcryp)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  if(hcryp->Instance==AES)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <HAL_CRYP_MspInit+0x38>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d10d      	bne.n	80019de <HAL_CRYP_MspInit+0x2e>
  {
  /* USER CODE BEGIN AES_MspInit 0 */

  /* USER CODE END AES_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_AES_CLK_ENABLE();
 80019c2:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <HAL_CRYP_MspInit+0x3c>)
 80019c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019c6:	4b09      	ldr	r3, [pc, #36]	; (80019ec <HAL_CRYP_MspInit+0x3c>)
 80019c8:	2180      	movs	r1, #128	; 0x80
 80019ca:	0249      	lsls	r1, r1, #9
 80019cc:	430a      	orrs	r2, r1
 80019ce:	639a      	str	r2, [r3, #56]	; 0x38
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <HAL_CRYP_MspInit+0x3c>)
 80019d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	025b      	lsls	r3, r3, #9
 80019d8:	4013      	ands	r3, r2
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN AES_MspInit 1 */

  /* USER CODE END AES_MspInit 1 */
  }

}
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	46bd      	mov	sp, r7
 80019e2:	b004      	add	sp, #16
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	40026000 	.word	0x40026000
 80019ec:	40021000 	.word	0x40021000

080019f0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <HAL_CRC_MspInit+0x38>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d10d      	bne.n	8001a1e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001a02:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <HAL_CRC_MspInit+0x3c>)
 8001a04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <HAL_CRC_MspInit+0x3c>)
 8001a08:	2180      	movs	r1, #128	; 0x80
 8001a0a:	0149      	lsls	r1, r1, #5
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	639a      	str	r2, [r3, #56]	; 0x38
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <HAL_CRC_MspInit+0x3c>)
 8001a12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a14:	2380      	movs	r3, #128	; 0x80
 8001a16:	015b      	lsls	r3, r3, #5
 8001a18:	4013      	ands	r3, r2
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	46bd      	mov	sp, r7
 8001a22:	b004      	add	sp, #16
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	40023000 	.word	0x40023000
 8001a2c:	40021000 	.word	0x40021000

08001a30 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <HAL_RNG_MspInit+0x38>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d10d      	bne.n	8001a5e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001a42:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <HAL_RNG_MspInit+0x3c>)
 8001a44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a46:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <HAL_RNG_MspInit+0x3c>)
 8001a48:	2180      	movs	r1, #128	; 0x80
 8001a4a:	02c9      	lsls	r1, r1, #11
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	639a      	str	r2, [r3, #56]	; 0x38
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <HAL_RNG_MspInit+0x3c>)
 8001a52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a54:	2380      	movs	r3, #128	; 0x80
 8001a56:	02db      	lsls	r3, r3, #11
 8001a58:	4013      	ands	r3, r2
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001a5e:	46c0      	nop			; (mov r8, r8)
 8001a60:	46bd      	mov	sp, r7
 8001a62:	b004      	add	sp, #16
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	46c0      	nop			; (mov r8, r8)
 8001a68:	40025000 	.word	0x40025000
 8001a6c:	40021000 	.word	0x40021000

08001a70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	; 0x28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	2314      	movs	r3, #20
 8001a7a:	18fb      	adds	r3, r7, r3
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	2314      	movs	r3, #20
 8001a80:	001a      	movs	r2, r3
 8001a82:	2100      	movs	r1, #0
 8001a84:	f006 fc3b 	bl	80082fe <memset>
  if(hspi->Instance==SPI1)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a1b      	ldr	r2, [pc, #108]	; (8001afc <HAL_SPI_MspInit+0x8c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d130      	bne.n	8001af4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a92:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <HAL_SPI_MspInit+0x90>)
 8001a94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a96:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <HAL_SPI_MspInit+0x90>)
 8001a98:	2180      	movs	r1, #128	; 0x80
 8001a9a:	0149      	lsls	r1, r1, #5
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	641a      	str	r2, [r3, #64]	; 0x40
 8001aa0:	4b17      	ldr	r3, [pc, #92]	; (8001b00 <HAL_SPI_MspInit+0x90>)
 8001aa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	015b      	lsls	r3, r3, #5
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aae:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <HAL_SPI_MspInit+0x90>)
 8001ab0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ab2:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <HAL_SPI_MspInit+0x90>)
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	635a      	str	r2, [r3, #52]	; 0x34
 8001aba:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <HAL_SPI_MspInit+0x90>)
 8001abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001abe:	2201      	movs	r2, #1
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6;
 8001ac6:	2114      	movs	r1, #20
 8001ac8:	187b      	adds	r3, r7, r1
 8001aca:	2246      	movs	r2, #70	; 0x46
 8001acc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	187b      	adds	r3, r7, r1
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	187b      	adds	r3, r7, r1
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ada:	187b      	adds	r3, r7, r1
 8001adc:	2200      	movs	r2, #0
 8001ade:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001ae0:	187b      	adds	r3, r7, r1
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae6:	187a      	adds	r2, r7, r1
 8001ae8:	23a0      	movs	r3, #160	; 0xa0
 8001aea:	05db      	lsls	r3, r3, #23
 8001aec:	0011      	movs	r1, r2
 8001aee:	0018      	movs	r0, r3
 8001af0:	f001 ff5a 	bl	80039a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001af4:	46c0      	nop			; (mov r8, r8)
 8001af6:	46bd      	mov	sp, r7
 8001af8:	b00a      	add	sp, #40	; 0x28
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40013000 	.word	0x40013000
 8001b00:	40021000 	.word	0x40021000

08001b04 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a0a      	ldr	r2, [pc, #40]	; (8001b3c <HAL_TIM_PWM_MspInit+0x38>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d10d      	bne.n	8001b32 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b16:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b1c:	2180      	movs	r1, #128	; 0x80
 8001b1e:	0109      	lsls	r1, r1, #4
 8001b20:	430a      	orrs	r2, r1
 8001b22:	641a      	str	r2, [r3, #64]	; 0x40
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b28:	2380      	movs	r3, #128	; 0x80
 8001b2a:	011b      	lsls	r3, r3, #4
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b32:	46c0      	nop			; (mov r8, r8)
 8001b34:	46bd      	mov	sp, r7
 8001b36:	b004      	add	sp, #16
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	40012c00 	.word	0x40012c00
 8001b40:	40021000 	.word	0x40021000

08001b44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a0e      	ldr	r2, [pc, #56]	; (8001b8c <HAL_TIM_Base_MspInit+0x48>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d115      	bne.n	8001b82 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <HAL_TIM_Base_MspInit+0x4c>)
 8001b58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b5a:	4b0d      	ldr	r3, [pc, #52]	; (8001b90 <HAL_TIM_Base_MspInit+0x4c>)
 8001b5c:	2180      	movs	r1, #128	; 0x80
 8001b5e:	0289      	lsls	r1, r1, #10
 8001b60:	430a      	orrs	r2, r1
 8001b62:	641a      	str	r2, [r3, #64]	; 0x40
 8001b64:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <HAL_TIM_Base_MspInit+0x4c>)
 8001b66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	029b      	lsls	r3, r3, #10
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 2, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2102      	movs	r1, #2
 8001b76:	2015      	movs	r0, #21
 8001b78:	f000 fae2 	bl	8002140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001b7c:	2015      	movs	r0, #21
 8001b7e:	f000 faf4 	bl	800216a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	46bd      	mov	sp, r7
 8001b86:	b004      	add	sp, #16
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	40014400 	.word	0x40014400
 8001b90:	40021000 	.word	0x40021000

08001b94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	230c      	movs	r3, #12
 8001b9e:	18fb      	adds	r3, r7, r3
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	2314      	movs	r3, #20
 8001ba4:	001a      	movs	r2, r3
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	f006 fba9 	bl	80082fe <memset>
  if(htim->Instance==TIM1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a15      	ldr	r2, [pc, #84]	; (8001c08 <HAL_TIM_MspPostInit+0x74>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d123      	bne.n	8001bfe <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb6:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <HAL_TIM_MspPostInit+0x78>)
 8001bb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bba:	4b14      	ldr	r3, [pc, #80]	; (8001c0c <HAL_TIM_MspPostInit+0x78>)
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	635a      	str	r2, [r3, #52]	; 0x34
 8001bc2:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <HAL_TIM_MspPostInit+0x78>)
 8001bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = VIBE_PWM_Pin;
 8001bce:	210c      	movs	r1, #12
 8001bd0:	187b      	adds	r3, r7, r1
 8001bd2:	2280      	movs	r2, #128	; 0x80
 8001bd4:	0052      	lsls	r2, r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd8:	187b      	adds	r3, r7, r1
 8001bda:	2202      	movs	r2, #2
 8001bdc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	187b      	adds	r3, r7, r1
 8001be0:	2200      	movs	r2, #0
 8001be2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	187b      	adds	r3, r7, r1
 8001be6:	2200      	movs	r2, #0
 8001be8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001bea:	187b      	adds	r3, r7, r1
 8001bec:	2202      	movs	r2, #2
 8001bee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(VIBE_PWM_GPIO_Port, &GPIO_InitStruct);
 8001bf0:	187a      	adds	r2, r7, r1
 8001bf2:	23a0      	movs	r3, #160	; 0xa0
 8001bf4:	05db      	lsls	r3, r3, #23
 8001bf6:	0011      	movs	r1, r2
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f001 fed5 	bl	80039a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b008      	add	sp, #32
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	46c0      	nop			; (mov r8, r8)
 8001c08:	40012c00 	.word	0x40012c00
 8001c0c:	40021000 	.word	0x40021000

08001c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c14:	e7fe      	b.n	8001c14 <NMI_Handler+0x4>

08001c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c1a:	e7fe      	b.n	8001c1a <HardFault_Handler+0x4>

08001c1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c20:	46c0      	nop			; (mov r8, r8)
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c34:	f000 f984 	bl	8001f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c38:	46c0      	nop			; (mov r8, r8)
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001c42:	2001      	movs	r0, #1
 8001c44:	f002 f86a 	bl	8003d1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001c48:	46c0      	nop			; (mov r8, r8)
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001c52:	2380      	movs	r3, #128	; 0x80
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	0018      	movs	r0, r3
 8001c58:	f002 f860 	bl	8003d1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001c5c:	2380      	movs	r3, #128	; 0x80
 8001c5e:	019b      	lsls	r3, r3, #6
 8001c60:	0018      	movs	r0, r3
 8001c62:	f002 f85b 	bl	8003d1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001c66:	46c0      	nop			; (mov r8, r8)
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001c70:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <TIM16_IRQHandler+0x14>)
 8001c72:	0018      	movs	r0, r3
 8001c74:	f004 f8bc 	bl	8005df0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001c78:	46c0      	nop			; (mov r8, r8)
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	46c0      	nop			; (mov r8, r8)
 8001c80:	2000071c 	.word	0x2000071c

08001c84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
	return 1;
 8001c88:	2301      	movs	r3, #1
}
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <_kill>:

int _kill(int pid, int sig)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c9a:	f006 fae3 	bl	8008264 <__errno>
 8001c9e:	0003      	movs	r3, r0
 8001ca0:	2216      	movs	r2, #22
 8001ca2:	601a      	str	r2, [r3, #0]
	return -1;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	425b      	negs	r3, r3
}
 8001ca8:	0018      	movs	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	b002      	add	sp, #8
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <_exit>:

void _exit (int status)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cb8:	2301      	movs	r3, #1
 8001cba:	425a      	negs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	0011      	movs	r1, r2
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	f7ff ffe5 	bl	8001c90 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001cc6:	e7fe      	b.n	8001cc6 <_exit+0x16>

08001cc8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	e00a      	b.n	8001cf0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cda:	e000      	b.n	8001cde <_read+0x16>
 8001cdc:	bf00      	nop
 8001cde:	0001      	movs	r1, r0
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	1c5a      	adds	r2, r3, #1
 8001ce4:	60ba      	str	r2, [r7, #8]
 8001ce6:	b2ca      	uxtb	r2, r1
 8001ce8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	3301      	adds	r3, #1
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	dbf0      	blt.n	8001cda <_read+0x12>
	}

return len;
 8001cf8:	687b      	ldr	r3, [r7, #4]
}
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	b006      	add	sp, #24
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b086      	sub	sp, #24
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	60f8      	str	r0, [r7, #12]
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	e009      	b.n	8001d28 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	60ba      	str	r2, [r7, #8]
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	e000      	b.n	8001d22 <_write+0x20>
 8001d20:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	3301      	adds	r3, #1
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	dbf1      	blt.n	8001d14 <_write+0x12>
	}
	return len;
 8001d30:	687b      	ldr	r3, [r7, #4]
}
 8001d32:	0018      	movs	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	b006      	add	sp, #24
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <_close>:

int _close(int file)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
	return -1;
 8001d42:	2301      	movs	r3, #1
 8001d44:	425b      	negs	r3, r3
}
 8001d46:	0018      	movs	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	b002      	add	sp, #8
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	2280      	movs	r2, #128	; 0x80
 8001d5c:	0192      	lsls	r2, r2, #6
 8001d5e:	605a      	str	r2, [r3, #4]
	return 0;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	0018      	movs	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	b002      	add	sp, #8
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <_isatty>:

int _isatty(int file)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
	return 1;
 8001d72:	2301      	movs	r3, #1
}
 8001d74:	0018      	movs	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	b002      	add	sp, #8
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
	return 0;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	b004      	add	sp, #16
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d9c:	4a14      	ldr	r2, [pc, #80]	; (8001df0 <_sbrk+0x5c>)
 8001d9e:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <_sbrk+0x60>)
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001da8:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <_sbrk+0x64>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d102      	bne.n	8001db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001db0:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <_sbrk+0x64>)
 8001db2:	4a12      	ldr	r2, [pc, #72]	; (8001dfc <_sbrk+0x68>)
 8001db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001db6:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <_sbrk+0x64>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	18d3      	adds	r3, r2, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d207      	bcs.n	8001dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dc4:	f006 fa4e 	bl	8008264 <__errno>
 8001dc8:	0003      	movs	r3, r0
 8001dca:	220c      	movs	r2, #12
 8001dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	425b      	negs	r3, r3
 8001dd2:	e009      	b.n	8001de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dd4:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <_sbrk+0x64>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dda:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <_sbrk+0x64>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	18d2      	adds	r2, r2, r3
 8001de2:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <_sbrk+0x64>)
 8001de4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001de6:	68fb      	ldr	r3, [r7, #12]
}
 8001de8:	0018      	movs	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	b006      	add	sp, #24
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20009000 	.word	0x20009000
 8001df4:	00000400 	.word	0x00000400
 8001df8:	20000524 	.word	0x20000524
 8001dfc:	20000890 	.word	0x20000890

08001e00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e04:	4b03      	ldr	r3, [pc, #12]	; (8001e14 <SystemInit+0x14>)
 8001e06:	2280      	movs	r2, #128	; 0x80
 8001e08:	0512      	lsls	r2, r2, #20
 8001e0a:	609a      	str	r2, [r3, #8]
#endif
}
 8001e0c:	46c0      	nop			; (mov r8, r8)
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	46c0      	nop			; (mov r8, r8)
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e18:	480d      	ldr	r0, [pc, #52]	; (8001e50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e1a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e1c:	f7ff fff0 	bl	8001e00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e20:	480c      	ldr	r0, [pc, #48]	; (8001e54 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e22:	490d      	ldr	r1, [pc, #52]	; (8001e58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e24:	4a0d      	ldr	r2, [pc, #52]	; (8001e5c <LoopForever+0xe>)
  movs r3, #0
 8001e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e28:	e002      	b.n	8001e30 <LoopCopyDataInit>

08001e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e2e:	3304      	adds	r3, #4

08001e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e34:	d3f9      	bcc.n	8001e2a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e36:	4a0a      	ldr	r2, [pc, #40]	; (8001e60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e38:	4c0a      	ldr	r4, [pc, #40]	; (8001e64 <LoopForever+0x16>)
  movs r3, #0
 8001e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e3c:	e001      	b.n	8001e42 <LoopFillZerobss>

08001e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e40:	3204      	adds	r2, #4

08001e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e44:	d3fb      	bcc.n	8001e3e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e46:	f006 fa23 	bl	8008290 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001e4a:	f7fe fa13 	bl	8000274 <main>

08001e4e <LoopForever>:

LoopForever:
  b LoopForever
 8001e4e:	e7fe      	b.n	8001e4e <LoopForever>
  ldr   r0, =_estack
 8001e50:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e58:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 8001e5c:	080094e4 	.word	0x080094e4
  ldr r2, =_sbss
 8001e60:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8001e64:	2000088c 	.word	0x2000088c

08001e68 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e68:	e7fe      	b.n	8001e68 <ADC1_COMP_IRQHandler>
	...

08001e6c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e72:	1dfb      	adds	r3, r7, #7
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e78:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <HAL_Init+0x3c>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <HAL_Init+0x3c>)
 8001e7e:	2180      	movs	r1, #128	; 0x80
 8001e80:	0049      	lsls	r1, r1, #1
 8001e82:	430a      	orrs	r2, r1
 8001e84:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e86:	2000      	movs	r0, #0
 8001e88:	f000 f810 	bl	8001eac <HAL_InitTick>
 8001e8c:	1e03      	subs	r3, r0, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001e90:	1dfb      	adds	r3, r7, #7
 8001e92:	2201      	movs	r2, #1
 8001e94:	701a      	strb	r2, [r3, #0]
 8001e96:	e001      	b.n	8001e9c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001e98:	f7ff fd62 	bl	8001960 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e9c:	1dfb      	adds	r3, r7, #7
 8001e9e:	781b      	ldrb	r3, [r3, #0]
}
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	b002      	add	sp, #8
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40022000 	.word	0x40022000

08001eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eac:	b590      	push	{r4, r7, lr}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001eb4:	230f      	movs	r3, #15
 8001eb6:	18fb      	adds	r3, r7, r3
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001ebc:	4b1d      	ldr	r3, [pc, #116]	; (8001f34 <HAL_InitTick+0x88>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d02b      	beq.n	8001f1c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001ec4:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <HAL_InitTick+0x8c>)
 8001ec6:	681c      	ldr	r4, [r3, #0]
 8001ec8:	4b1a      	ldr	r3, [pc, #104]	; (8001f34 <HAL_InitTick+0x88>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	0019      	movs	r1, r3
 8001ece:	23fa      	movs	r3, #250	; 0xfa
 8001ed0:	0098      	lsls	r0, r3, #2
 8001ed2:	f7fe f919 	bl	8000108 <__udivsi3>
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	0019      	movs	r1, r3
 8001eda:	0020      	movs	r0, r4
 8001edc:	f7fe f914 	bl	8000108 <__udivsi3>
 8001ee0:	0003      	movs	r3, r0
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f000 f951 	bl	800218a <HAL_SYSTICK_Config>
 8001ee8:	1e03      	subs	r3, r0, #0
 8001eea:	d112      	bne.n	8001f12 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b03      	cmp	r3, #3
 8001ef0:	d80a      	bhi.n	8001f08 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	425b      	negs	r3, r3
 8001ef8:	2200      	movs	r2, #0
 8001efa:	0018      	movs	r0, r3
 8001efc:	f000 f920 	bl	8002140 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f00:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <HAL_InitTick+0x90>)
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	e00d      	b.n	8001f24 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001f08:	230f      	movs	r3, #15
 8001f0a:	18fb      	adds	r3, r7, r3
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	701a      	strb	r2, [r3, #0]
 8001f10:	e008      	b.n	8001f24 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f12:	230f      	movs	r3, #15
 8001f14:	18fb      	adds	r3, r7, r3
 8001f16:	2201      	movs	r2, #1
 8001f18:	701a      	strb	r2, [r3, #0]
 8001f1a:	e003      	b.n	8001f24 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f1c:	230f      	movs	r3, #15
 8001f1e:	18fb      	adds	r3, r7, r3
 8001f20:	2201      	movs	r2, #1
 8001f22:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001f24:	230f      	movs	r3, #15
 8001f26:	18fb      	adds	r3, r7, r3
 8001f28:	781b      	ldrb	r3, [r3, #0]
}
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	b005      	add	sp, #20
 8001f30:	bd90      	pop	{r4, r7, pc}
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	20000008 	.word	0x20000008
 8001f38:	20000000 	.word	0x20000000
 8001f3c:	20000004 	.word	0x20000004

08001f40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f44:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <HAL_IncTick+0x1c>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	001a      	movs	r2, r3
 8001f4a:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <HAL_IncTick+0x20>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	18d2      	adds	r2, r2, r3
 8001f50:	4b03      	ldr	r3, [pc, #12]	; (8001f60 <HAL_IncTick+0x20>)
 8001f52:	601a      	str	r2, [r3, #0]
}
 8001f54:	46c0      	nop			; (mov r8, r8)
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	20000008 	.word	0x20000008
 8001f60:	20000884 	.word	0x20000884

08001f64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  return uwTick;
 8001f68:	4b02      	ldr	r3, [pc, #8]	; (8001f74 <HAL_GetTick+0x10>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
}
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	46c0      	nop			; (mov r8, r8)
 8001f74:	20000884 	.word	0x20000884

08001f78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f80:	f7ff fff0 	bl	8001f64 <HAL_GetTick>
 8001f84:	0003      	movs	r3, r0
 8001f86:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	d005      	beq.n	8001f9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f92:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <HAL_Delay+0x40>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	001a      	movs	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	189b      	adds	r3, r3, r2
 8001f9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	f7ff ffe0 	bl	8001f64 <HAL_GetTick>
 8001fa4:	0002      	movs	r2, r0
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d8f7      	bhi.n	8001fa0 <HAL_Delay+0x28>
  {
  }
}
 8001fb0:	46c0      	nop			; (mov r8, r8)
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	b004      	add	sp, #16
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	20000008 	.word	0x20000008

08001fbc <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a06      	ldr	r2, [pc, #24]	; (8001fe4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001fca:	4013      	ands	r3, r2
 8001fcc:	0019      	movs	r1, r3
 8001fce:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	601a      	str	r2, [r3, #0]
}
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	b002      	add	sp, #8
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	40010000 	.word	0x40010000
 8001fe4:	fffff9ff 	.word	0xfffff9ff

08001fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	0002      	movs	r2, r0
 8001ff0:	1dfb      	adds	r3, r7, #7
 8001ff2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ff4:	1dfb      	adds	r3, r7, #7
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b7f      	cmp	r3, #127	; 0x7f
 8001ffa:	d809      	bhi.n	8002010 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ffc:	1dfb      	adds	r3, r7, #7
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	001a      	movs	r2, r3
 8002002:	231f      	movs	r3, #31
 8002004:	401a      	ands	r2, r3
 8002006:	4b04      	ldr	r3, [pc, #16]	; (8002018 <__NVIC_EnableIRQ+0x30>)
 8002008:	2101      	movs	r1, #1
 800200a:	4091      	lsls	r1, r2
 800200c:	000a      	movs	r2, r1
 800200e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002010:	46c0      	nop			; (mov r8, r8)
 8002012:	46bd      	mov	sp, r7
 8002014:	b002      	add	sp, #8
 8002016:	bd80      	pop	{r7, pc}
 8002018:	e000e100 	.word	0xe000e100

0800201c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800201c:	b590      	push	{r4, r7, lr}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	0002      	movs	r2, r0
 8002024:	6039      	str	r1, [r7, #0]
 8002026:	1dfb      	adds	r3, r7, #7
 8002028:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800202a:	1dfb      	adds	r3, r7, #7
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b7f      	cmp	r3, #127	; 0x7f
 8002030:	d828      	bhi.n	8002084 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002032:	4a2f      	ldr	r2, [pc, #188]	; (80020f0 <__NVIC_SetPriority+0xd4>)
 8002034:	1dfb      	adds	r3, r7, #7
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	b25b      	sxtb	r3, r3
 800203a:	089b      	lsrs	r3, r3, #2
 800203c:	33c0      	adds	r3, #192	; 0xc0
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	589b      	ldr	r3, [r3, r2]
 8002042:	1dfa      	adds	r2, r7, #7
 8002044:	7812      	ldrb	r2, [r2, #0]
 8002046:	0011      	movs	r1, r2
 8002048:	2203      	movs	r2, #3
 800204a:	400a      	ands	r2, r1
 800204c:	00d2      	lsls	r2, r2, #3
 800204e:	21ff      	movs	r1, #255	; 0xff
 8002050:	4091      	lsls	r1, r2
 8002052:	000a      	movs	r2, r1
 8002054:	43d2      	mvns	r2, r2
 8002056:	401a      	ands	r2, r3
 8002058:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	019b      	lsls	r3, r3, #6
 800205e:	22ff      	movs	r2, #255	; 0xff
 8002060:	401a      	ands	r2, r3
 8002062:	1dfb      	adds	r3, r7, #7
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	0018      	movs	r0, r3
 8002068:	2303      	movs	r3, #3
 800206a:	4003      	ands	r3, r0
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002070:	481f      	ldr	r0, [pc, #124]	; (80020f0 <__NVIC_SetPriority+0xd4>)
 8002072:	1dfb      	adds	r3, r7, #7
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	b25b      	sxtb	r3, r3
 8002078:	089b      	lsrs	r3, r3, #2
 800207a:	430a      	orrs	r2, r1
 800207c:	33c0      	adds	r3, #192	; 0xc0
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002082:	e031      	b.n	80020e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002084:	4a1b      	ldr	r2, [pc, #108]	; (80020f4 <__NVIC_SetPriority+0xd8>)
 8002086:	1dfb      	adds	r3, r7, #7
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	0019      	movs	r1, r3
 800208c:	230f      	movs	r3, #15
 800208e:	400b      	ands	r3, r1
 8002090:	3b08      	subs	r3, #8
 8002092:	089b      	lsrs	r3, r3, #2
 8002094:	3306      	adds	r3, #6
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	18d3      	adds	r3, r2, r3
 800209a:	3304      	adds	r3, #4
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	1dfa      	adds	r2, r7, #7
 80020a0:	7812      	ldrb	r2, [r2, #0]
 80020a2:	0011      	movs	r1, r2
 80020a4:	2203      	movs	r2, #3
 80020a6:	400a      	ands	r2, r1
 80020a8:	00d2      	lsls	r2, r2, #3
 80020aa:	21ff      	movs	r1, #255	; 0xff
 80020ac:	4091      	lsls	r1, r2
 80020ae:	000a      	movs	r2, r1
 80020b0:	43d2      	mvns	r2, r2
 80020b2:	401a      	ands	r2, r3
 80020b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	019b      	lsls	r3, r3, #6
 80020ba:	22ff      	movs	r2, #255	; 0xff
 80020bc:	401a      	ands	r2, r3
 80020be:	1dfb      	adds	r3, r7, #7
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	0018      	movs	r0, r3
 80020c4:	2303      	movs	r3, #3
 80020c6:	4003      	ands	r3, r0
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020cc:	4809      	ldr	r0, [pc, #36]	; (80020f4 <__NVIC_SetPriority+0xd8>)
 80020ce:	1dfb      	adds	r3, r7, #7
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	001c      	movs	r4, r3
 80020d4:	230f      	movs	r3, #15
 80020d6:	4023      	ands	r3, r4
 80020d8:	3b08      	subs	r3, #8
 80020da:	089b      	lsrs	r3, r3, #2
 80020dc:	430a      	orrs	r2, r1
 80020de:	3306      	adds	r3, #6
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	18c3      	adds	r3, r0, r3
 80020e4:	3304      	adds	r3, #4
 80020e6:	601a      	str	r2, [r3, #0]
}
 80020e8:	46c0      	nop			; (mov r8, r8)
 80020ea:	46bd      	mov	sp, r7
 80020ec:	b003      	add	sp, #12
 80020ee:	bd90      	pop	{r4, r7, pc}
 80020f0:	e000e100 	.word	0xe000e100
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3b01      	subs	r3, #1
 8002104:	4a0c      	ldr	r2, [pc, #48]	; (8002138 <SysTick_Config+0x40>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d901      	bls.n	800210e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800210a:	2301      	movs	r3, #1
 800210c:	e010      	b.n	8002130 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800210e:	4b0b      	ldr	r3, [pc, #44]	; (800213c <SysTick_Config+0x44>)
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	3a01      	subs	r2, #1
 8002114:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002116:	2301      	movs	r3, #1
 8002118:	425b      	negs	r3, r3
 800211a:	2103      	movs	r1, #3
 800211c:	0018      	movs	r0, r3
 800211e:	f7ff ff7d 	bl	800201c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002122:	4b06      	ldr	r3, [pc, #24]	; (800213c <SysTick_Config+0x44>)
 8002124:	2200      	movs	r2, #0
 8002126:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002128:	4b04      	ldr	r3, [pc, #16]	; (800213c <SysTick_Config+0x44>)
 800212a:	2207      	movs	r2, #7
 800212c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800212e:	2300      	movs	r3, #0
}
 8002130:	0018      	movs	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	b002      	add	sp, #8
 8002136:	bd80      	pop	{r7, pc}
 8002138:	00ffffff 	.word	0x00ffffff
 800213c:	e000e010 	.word	0xe000e010

08002140 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	607a      	str	r2, [r7, #4]
 800214a:	210f      	movs	r1, #15
 800214c:	187b      	adds	r3, r7, r1
 800214e:	1c02      	adds	r2, r0, #0
 8002150:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	187b      	adds	r3, r7, r1
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	b25b      	sxtb	r3, r3
 800215a:	0011      	movs	r1, r2
 800215c:	0018      	movs	r0, r3
 800215e:	f7ff ff5d 	bl	800201c <__NVIC_SetPriority>
}
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	46bd      	mov	sp, r7
 8002166:	b004      	add	sp, #16
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	0002      	movs	r2, r0
 8002172:	1dfb      	adds	r3, r7, #7
 8002174:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002176:	1dfb      	adds	r3, r7, #7
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	b25b      	sxtb	r3, r3
 800217c:	0018      	movs	r0, r3
 800217e:	f7ff ff33 	bl	8001fe8 <__NVIC_EnableIRQ>
}
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	46bd      	mov	sp, r7
 8002186:	b002      	add	sp, #8
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	0018      	movs	r0, r3
 8002196:	f7ff ffaf 	bl	80020f8 <SysTick_Config>
 800219a:	0003      	movs	r3, r0
}
 800219c:	0018      	movs	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	b002      	add	sp, #8
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e056      	b.n	8002264 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	7f5b      	ldrb	r3, [r3, #29]
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d106      	bne.n	80021ce <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	0018      	movs	r0, r3
 80021ca:	f7ff fc11 	bl	80019f0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2202      	movs	r2, #2
 80021d2:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	791b      	ldrb	r3, [r3, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10c      	bne.n	80021f6 <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a22      	ldr	r2, [pc, #136]	; (800226c <HAL_CRC_Init+0xc8>)
 80021e2:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2118      	movs	r1, #24
 80021f0:	438a      	bics	r2, r1
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	e00b      	b.n	800220e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6899      	ldr	r1, [r3, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	0018      	movs	r0, r3
 8002202:	f000 f835 	bl	8002270 <HAL_CRCEx_Polynomial_Set>
 8002206:	1e03      	subs	r3, r0, #0
 8002208:	d001      	beq.n	800220e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e02a      	b.n	8002264 <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	795b      	ldrb	r3, [r3, #5]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d105      	bne.n	8002222 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2201      	movs	r2, #1
 800221c:	4252      	negs	r2, r2
 800221e:	611a      	str	r2, [r3, #16]
 8002220:	e004      	b.n	800222c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6912      	ldr	r2, [r2, #16]
 800222a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	2260      	movs	r2, #96	; 0x60
 8002234:	4393      	bics	r3, r2
 8002236:	0019      	movs	r1, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	695a      	ldr	r2, [r3, #20]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	430a      	orrs	r2, r1
 8002242:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	2280      	movs	r2, #128	; 0x80
 800224c:	4393      	bics	r3, r2
 800224e:	0019      	movs	r1, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	699a      	ldr	r2, [r3, #24]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	0018      	movs	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	b002      	add	sp, #8
 800226a:	bd80      	pop	{r7, pc}
 800226c:	04c11db7 	.word	0x04c11db7

08002270 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800227c:	2317      	movs	r3, #23
 800227e:	18fb      	adds	r3, r7, r3
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002284:	231f      	movs	r3, #31
 8002286:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002288:	46c0      	nop			; (mov r8, r8)
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1e5a      	subs	r2, r3, #1
 800228e:	613a      	str	r2, [r7, #16]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d008      	beq.n	80022a6 <HAL_CRCEx_Polynomial_Set+0x36>
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	221f      	movs	r2, #31
 8002298:	4013      	ands	r3, r2
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	40da      	lsrs	r2, r3
 800229e:	0013      	movs	r3, r2
 80022a0:	2201      	movs	r2, #1
 80022a2:	4013      	ands	r3, r2
 80022a4:	d0f1      	beq.n	800228a <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d017      	beq.n	80022dc <HAL_CRCEx_Polynomial_Set+0x6c>
 80022ac:	d802      	bhi.n	80022b4 <HAL_CRCEx_Polynomial_Set+0x44>
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d021      	beq.n	80022f6 <HAL_CRCEx_Polynomial_Set+0x86>
 80022b2:	e01b      	b.n	80022ec <HAL_CRCEx_Polynomial_Set+0x7c>
 80022b4:	2b10      	cmp	r3, #16
 80022b6:	d009      	beq.n	80022cc <HAL_CRCEx_Polynomial_Set+0x5c>
 80022b8:	2b18      	cmp	r3, #24
 80022ba:	d117      	bne.n	80022ec <HAL_CRCEx_Polynomial_Set+0x7c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	2b06      	cmp	r3, #6
 80022c0:	d91b      	bls.n	80022fa <HAL_CRCEx_Polynomial_Set+0x8a>
      {
        status =   HAL_ERROR;
 80022c2:	2317      	movs	r3, #23
 80022c4:	18fb      	adds	r3, r7, r3
 80022c6:	2201      	movs	r2, #1
 80022c8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80022ca:	e016      	b.n	80022fa <HAL_CRCEx_Polynomial_Set+0x8a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	2b07      	cmp	r3, #7
 80022d0:	d915      	bls.n	80022fe <HAL_CRCEx_Polynomial_Set+0x8e>
      {
        status =   HAL_ERROR;
 80022d2:	2317      	movs	r3, #23
 80022d4:	18fb      	adds	r3, r7, r3
 80022d6:	2201      	movs	r2, #1
 80022d8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80022da:	e010      	b.n	80022fe <HAL_CRCEx_Polynomial_Set+0x8e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	2b0f      	cmp	r3, #15
 80022e0:	d90f      	bls.n	8002302 <HAL_CRCEx_Polynomial_Set+0x92>
      {
        status =   HAL_ERROR;
 80022e2:	2317      	movs	r3, #23
 80022e4:	18fb      	adds	r3, r7, r3
 80022e6:	2201      	movs	r2, #1
 80022e8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80022ea:	e00a      	b.n	8002302 <HAL_CRCEx_Polynomial_Set+0x92>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80022ec:	2317      	movs	r3, #23
 80022ee:	18fb      	adds	r3, r7, r3
 80022f0:	2201      	movs	r2, #1
 80022f2:	701a      	strb	r2, [r3, #0]
      break;
 80022f4:	e006      	b.n	8002304 <HAL_CRCEx_Polynomial_Set+0x94>
      break;
 80022f6:	46c0      	nop			; (mov r8, r8)
 80022f8:	e004      	b.n	8002304 <HAL_CRCEx_Polynomial_Set+0x94>
      break;
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	e002      	b.n	8002304 <HAL_CRCEx_Polynomial_Set+0x94>
      break;
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	e000      	b.n	8002304 <HAL_CRCEx_Polynomial_Set+0x94>
      break;
 8002302:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 8002304:	2317      	movs	r3, #23
 8002306:	18fb      	adds	r3, r7, r3
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10e      	bne.n	800232c <HAL_CRCEx_Polynomial_Set+0xbc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2218      	movs	r2, #24
 800231e:	4393      	bics	r3, r2
 8002320:	0019      	movs	r1, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	430a      	orrs	r2, r1
 800232a:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800232c:	2317      	movs	r3, #23
 800232e:	18fb      	adds	r3, r7, r3
 8002330:	781b      	ldrb	r3, [r3, #0]
}
 8002332:	0018      	movs	r0, r3
 8002334:	46bd      	mov	sp, r7
 8002336:	b006      	add	sp, #24
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <HAL_CRYP_Init>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Init(CRYP_HandleTypeDef *hcryp)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_CRYP_Init+0x12>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e02d      	b.n	80023aa <HAL_CRYP_Init+0x6e>

    /* Init the low level hardware */
    hcryp->MspInitCallback(hcryp);
  }
#else
  if (hcryp->State == HAL_CRYP_STATE_RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2251      	movs	r2, #81	; 0x51
 8002352:	5c9b      	ldrb	r3, [r3, r2]
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d107      	bne.n	800236a <HAL_CRYP_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hcryp->Lock = HAL_UNLOCKED;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2250      	movs	r2, #80	; 0x50
 800235e:	2100      	movs	r1, #0
 8002360:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    HAL_CRYP_MspInit(hcryp);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	0018      	movs	r0, r3
 8002366:	f7ff fb23 	bl	80019b0 <HAL_CRYP_MspInit>
  }
#endif /* (USE_HAL_CRYP_REGISTER_CALLBACKS) */

  /* Set the key size (This bit field is do not care in the DES or TDES modes), data type and Algorithm */
  MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD, hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a10      	ldr	r2, [pc, #64]	; (80023b4 <HAL_CRYP_Init+0x78>)
 8002372:	4013      	ands	r3, r2
 8002374:	0019      	movs	r1, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	431a      	orrs	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	601a      	str	r2, [r3, #0]

  /* Reset Error Code field */
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset peripheral Key and IV configuration flag */
  hcryp->KeyIVConfig = 0U;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	659a      	str	r2, [r3, #88]	; 0x58

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2251      	movs	r2, #81	; 0x51
 800239e:	2101      	movs	r1, #1
 80023a0:	5499      	strb	r1, [r3, r2]

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	0018      	movs	r0, r3
 80023ac:	46bd      	mov	sp, r7
 80023ae:	b002      	add	sp, #8
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	fffaff99 	.word	0xfffaff99

080023b8 <HAL_CRYP_Encrypt>:
  * @param  Output Pointer to the output buffer(ciphertext)
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t *Input, uint16_t Size, uint32_t *Output, uint32_t Timeout)
{
 80023b8:	b590      	push	{r4, r7, lr}
 80023ba:	b087      	sub	sp, #28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	603b      	str	r3, [r7, #0]
 80023c4:	1dbb      	adds	r3, r7, #6
 80023c6:	801a      	strh	r2, [r3, #0]

  /* Check input buffer size */
  assert_param(IS_CRYP_BUFFERSIZE(algo_assert, hcryp->Init.DataWidthUnit, Size));
#endif

  if (hcryp->State == HAL_CRYP_STATE_READY)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2251      	movs	r2, #81	; 0x51
 80023cc:	5c9b      	ldrb	r3, [r3, r2]
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d000      	beq.n	80023d6 <HAL_CRYP_Encrypt+0x1e>
 80023d4:	e084      	b.n	80024e0 <HAL_CRYP_Encrypt+0x128>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2251      	movs	r2, #81	; 0x51
 80023da:	2102      	movs	r1, #2
 80023dc:	5499      	strb	r1, [r3, r2]

    /* Process locked */
    __HAL_LOCK(hcryp);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2250      	movs	r2, #80	; 0x50
 80023e2:	5c9b      	ldrb	r3, [r3, r2]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d101      	bne.n	80023ec <HAL_CRYP_Encrypt+0x34>
 80023e8:	2302      	movs	r3, #2
 80023ea:	e086      	b.n	80024fa <HAL_CRYP_Encrypt+0x142>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2250      	movs	r2, #80	; 0x50
 80023f0:	2101      	movs	r1, #1
 80023f2:	5499      	strb	r1, [r3, r2]

    /*  Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr parameters*/
    hcryp->CrypInCount = 0U;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	87da      	strh	r2, [r3, #62]	; 0x3e
    hcryp->CrypOutCount = 0U;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2240      	movs	r2, #64	; 0x40
 80023fe:	2100      	movs	r1, #0
 8002400:	5299      	strh	r1, [r3, r2]
    hcryp->pCrypInBuffPtr = Input;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	68ba      	ldr	r2, [r7, #8]
 8002406:	635a      	str	r2, [r3, #52]	; 0x34
    hcryp->pCrypOutBuffPtr = Output;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	639a      	str	r2, [r3, #56]	; 0x38

    /*  Calculate Size parameter in Byte*/
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	2b00      	cmp	r3, #0
 8002414:	d107      	bne.n	8002426 <HAL_CRYP_Encrypt+0x6e>
    {
      hcryp->Size = Size * 4U;
 8002416:	1dbb      	adds	r3, r7, #6
 8002418:	881b      	ldrh	r3, [r3, #0]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	b299      	uxth	r1, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2242      	movs	r2, #66	; 0x42
 8002422:	5299      	strh	r1, [r3, r2]
 8002424:	e004      	b.n	8002430 <HAL_CRYP_Encrypt+0x78>
    }
    else
    {
      hcryp->Size = Size;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	1dba      	adds	r2, r7, #6
 800242a:	2142      	movs	r1, #66	; 0x42
 800242c:	8812      	ldrh	r2, [r2, #0]
 800242e:	525a      	strh	r2, [r3, r1]
    }

    /* Set the operating mode*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_ENCRYPT);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2118      	movs	r1, #24
 800243c:	438a      	bics	r2, r1
 800243e:	601a      	str	r2, [r3, #0]

    /* algo get algorithm selected */
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a2f      	ldr	r2, [pc, #188]	; (8002504 <HAL_CRYP_Encrypt+0x14c>)
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]

    switch (algo)
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	2b40      	cmp	r3, #64	; 0x40
 8002450:	d00c      	beq.n	800246c <HAL_CRYP_Encrypt+0xb4>
 8002452:	d804      	bhi.n	800245e <HAL_CRYP_Encrypt+0xa6>
 8002454:	2b00      	cmp	r3, #0
 8002456:	d009      	beq.n	800246c <HAL_CRYP_Encrypt+0xb4>
 8002458:	2b20      	cmp	r3, #32
 800245a:	d007      	beq.n	800246c <HAL_CRYP_Encrypt+0xb4>
 800245c:	e027      	b.n	80024ae <HAL_CRYP_Encrypt+0xf6>
 800245e:	2b60      	cmp	r3, #96	; 0x60
 8002460:	d00f      	beq.n	8002482 <HAL_CRYP_Encrypt+0xca>
 8002462:	2280      	movs	r2, #128	; 0x80
 8002464:	0252      	lsls	r2, r2, #9
 8002466:	4293      	cmp	r3, r2
 8002468:	d016      	beq.n	8002498 <HAL_CRYP_Encrypt+0xe0>
 800246a:	e020      	b.n	80024ae <HAL_CRYP_Encrypt+0xf6>
      case CRYP_AES_ECB:
      case CRYP_AES_CBC:
      case CRYP_AES_CTR:

        /* AES encryption */
        status = CRYP_AES_Encrypt(hcryp, Timeout);
 800246c:	2317      	movs	r3, #23
 800246e:	18fc      	adds	r4, r7, r3
 8002470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	0011      	movs	r1, r2
 8002476:	0018      	movs	r0, r3
 8002478:	f000 f8f8 	bl	800266c <CRYP_AES_Encrypt>
 800247c:	0003      	movs	r3, r0
 800247e:	7023      	strb	r3, [r4, #0]
        break;
 8002480:	e020      	b.n	80024c4 <HAL_CRYP_Encrypt+0x10c>

      case CRYP_AES_GCM_GMAC:

        /* AES GCM encryption */
        status = CRYP_AESGCM_Process(hcryp, Timeout) ;
 8002482:	2317      	movs	r3, #23
 8002484:	18fc      	adds	r4, r7, r3
 8002486:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	0011      	movs	r1, r2
 800248c:	0018      	movs	r0, r3
 800248e:	f000 fb7d 	bl	8002b8c <CRYP_AESGCM_Process>
 8002492:	0003      	movs	r3, r0
 8002494:	7023      	strb	r3, [r4, #0]
        break;
 8002496:	e015      	b.n	80024c4 <HAL_CRYP_Encrypt+0x10c>

      case CRYP_AES_CCM:

        /* AES CCM encryption */
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 8002498:	2317      	movs	r3, #23
 800249a:	18fc      	adds	r4, r7, r3
 800249c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	0011      	movs	r1, r2
 80024a2:	0018      	movs	r0, r3
 80024a4:	f000 fd24 	bl	8002ef0 <CRYP_AESCCM_Process>
 80024a8:	0003      	movs	r3, r0
 80024aa:	7023      	strb	r3, [r4, #0]
        break;
 80024ac:	e00a      	b.n	80024c4 <HAL_CRYP_Encrypt+0x10c>

      default:
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b2:	2220      	movs	r2, #32
 80024b4:	431a      	orrs	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	655a      	str	r2, [r3, #84]	; 0x54
        status = HAL_ERROR;
 80024ba:	2317      	movs	r3, #23
 80024bc:	18fb      	adds	r3, r7, r3
 80024be:	2201      	movs	r2, #1
 80024c0:	701a      	strb	r2, [r3, #0]
        break;
 80024c2:	46c0      	nop			; (mov r8, r8)
    }

    if (status == HAL_OK)
 80024c4:	2317      	movs	r3, #23
 80024c6:	18fb      	adds	r3, r7, r3
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d112      	bne.n	80024f4 <HAL_CRYP_Encrypt+0x13c>
    {
      /* Change the CRYP peripheral state */
      hcryp->State = HAL_CRYP_STATE_READY;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2251      	movs	r2, #81	; 0x51
 80024d2:	2101      	movs	r1, #1
 80024d4:	5499      	strb	r1, [r3, r2]

      /* Process unlocked */
      __HAL_UNLOCK(hcryp);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2250      	movs	r2, #80	; 0x50
 80024da:	2100      	movs	r1, #0
 80024dc:	5499      	strb	r1, [r3, r2]
 80024de:	e009      	b.n	80024f4 <HAL_CRYP_Encrypt+0x13c>
    }
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e4:	2208      	movs	r2, #8
 80024e6:	431a      	orrs	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
 80024ec:	2317      	movs	r3, #23
 80024ee:	18fb      	adds	r3, r7, r3
 80024f0:	2201      	movs	r2, #1
 80024f2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80024f4:	2317      	movs	r3, #23
 80024f6:	18fb      	adds	r3, r7, r3
 80024f8:	781b      	ldrb	r3, [r3, #0]
}
 80024fa:	0018      	movs	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	b007      	add	sp, #28
 8002500:	bd90      	pop	{r4, r7, pc}
 8002502:	46c0      	nop			; (mov r8, r8)
 8002504:	00010060 	.word	0x00010060

08002508 <HAL_CRYP_Decrypt>:
  * @param  Output Pointer to the output buffer(plaintext)
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Decrypt(CRYP_HandleTypeDef *hcryp, uint32_t *Input, uint16_t Size, uint32_t *Output, uint32_t Timeout)
{
 8002508:	b590      	push	{r4, r7, lr}
 800250a:	b087      	sub	sp, #28
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	603b      	str	r3, [r7, #0]
 8002514:	1dbb      	adds	r3, r7, #6
 8002516:	801a      	strh	r2, [r3, #0]

  /* Check input buffer size */
  assert_param(IS_CRYP_BUFFERSIZE(algo_assert, hcryp->Init.DataWidthUnit, Size));
#endif

  if (hcryp->State == HAL_CRYP_STATE_READY)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2251      	movs	r2, #81	; 0x51
 800251c:	5c9b      	ldrb	r3, [r3, r2]
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b01      	cmp	r3, #1
 8002522:	d000      	beq.n	8002526 <HAL_CRYP_Decrypt+0x1e>
 8002524:	e087      	b.n	8002636 <HAL_CRYP_Decrypt+0x12e>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2251      	movs	r2, #81	; 0x51
 800252a:	2102      	movs	r1, #2
 800252c:	5499      	strb	r1, [r3, r2]

    /* Process locked */
    __HAL_LOCK(hcryp);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2250      	movs	r2, #80	; 0x50
 8002532:	5c9b      	ldrb	r3, [r3, r2]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <HAL_CRYP_Decrypt+0x34>
 8002538:	2302      	movs	r3, #2
 800253a:	e089      	b.n	8002650 <HAL_CRYP_Decrypt+0x148>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2250      	movs	r2, #80	; 0x50
 8002540:	2101      	movs	r1, #1
 8002542:	5499      	strb	r1, [r3, r2]

    /*  Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr  parameters*/
    hcryp->CrypInCount = 0U;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	87da      	strh	r2, [r3, #62]	; 0x3e
    hcryp->CrypOutCount = 0U;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2240      	movs	r2, #64	; 0x40
 800254e:	2100      	movs	r1, #0
 8002550:	5299      	strh	r1, [r3, r2]
    hcryp->pCrypInBuffPtr = Input;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	635a      	str	r2, [r3, #52]	; 0x34
    hcryp->pCrypOutBuffPtr = Output;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	639a      	str	r2, [r3, #56]	; 0x38

    /*  Calculate Size parameter in Byte*/
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	2b00      	cmp	r3, #0
 8002564:	d107      	bne.n	8002576 <HAL_CRYP_Decrypt+0x6e>
    {
      hcryp->Size = Size * 4U;
 8002566:	1dbb      	adds	r3, r7, #6
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	b299      	uxth	r1, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2242      	movs	r2, #66	; 0x42
 8002572:	5299      	strh	r1, [r3, r2]
 8002574:	e004      	b.n	8002580 <HAL_CRYP_Decrypt+0x78>
    }
    else
    {
      hcryp->Size = Size;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	1dba      	adds	r2, r7, #6
 800257a:	2142      	movs	r1, #66	; 0x42
 800257c:	8812      	ldrh	r2, [r2, #0]
 800257e:	525a      	strh	r2, [r3, r1]
    }

    /* Set Decryption operating mode*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2218      	movs	r2, #24
 8002588:	4393      	bics	r3, r2
 800258a:	001a      	movs	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2110      	movs	r1, #16
 8002592:	430a      	orrs	r2, r1
 8002594:	601a      	str	r2, [r3, #0]

    /* algo get algorithm selected */
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a2e      	ldr	r2, [pc, #184]	; (8002658 <HAL_CRYP_Decrypt+0x150>)
 800259e:	4013      	ands	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]

    switch (algo)
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	2b40      	cmp	r3, #64	; 0x40
 80025a6:	d00c      	beq.n	80025c2 <HAL_CRYP_Decrypt+0xba>
 80025a8:	d804      	bhi.n	80025b4 <HAL_CRYP_Decrypt+0xac>
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d009      	beq.n	80025c2 <HAL_CRYP_Decrypt+0xba>
 80025ae:	2b20      	cmp	r3, #32
 80025b0:	d007      	beq.n	80025c2 <HAL_CRYP_Decrypt+0xba>
 80025b2:	e027      	b.n	8002604 <HAL_CRYP_Decrypt+0xfc>
 80025b4:	2b60      	cmp	r3, #96	; 0x60
 80025b6:	d00f      	beq.n	80025d8 <HAL_CRYP_Decrypt+0xd0>
 80025b8:	2280      	movs	r2, #128	; 0x80
 80025ba:	0252      	lsls	r2, r2, #9
 80025bc:	4293      	cmp	r3, r2
 80025be:	d016      	beq.n	80025ee <HAL_CRYP_Decrypt+0xe6>
 80025c0:	e020      	b.n	8002604 <HAL_CRYP_Decrypt+0xfc>
      case CRYP_AES_ECB:
      case CRYP_AES_CBC:
      case CRYP_AES_CTR:

        /* AES decryption */
        status = CRYP_AES_Decrypt(hcryp, Timeout);
 80025c2:	2317      	movs	r3, #23
 80025c4:	18fc      	adds	r4, r7, r3
 80025c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	0011      	movs	r1, r2
 80025cc:	0018      	movs	r0, r3
 80025ce:	f000 f8d5 	bl	800277c <CRYP_AES_Decrypt>
 80025d2:	0003      	movs	r3, r0
 80025d4:	7023      	strb	r3, [r4, #0]
        break;
 80025d6:	e020      	b.n	800261a <HAL_CRYP_Decrypt+0x112>

      case CRYP_AES_GCM_GMAC:

        /* AES GCM decryption */
        status = CRYP_AESGCM_Process(hcryp, Timeout) ;
 80025d8:	2317      	movs	r3, #23
 80025da:	18fc      	adds	r4, r7, r3
 80025dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	0011      	movs	r1, r2
 80025e2:	0018      	movs	r0, r3
 80025e4:	f000 fad2 	bl	8002b8c <CRYP_AESGCM_Process>
 80025e8:	0003      	movs	r3, r0
 80025ea:	7023      	strb	r3, [r4, #0]
        break;
 80025ec:	e015      	b.n	800261a <HAL_CRYP_Decrypt+0x112>

      case CRYP_AES_CCM:

        /* AES CCM decryption */
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 80025ee:	2317      	movs	r3, #23
 80025f0:	18fc      	adds	r4, r7, r3
 80025f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	0011      	movs	r1, r2
 80025f8:	0018      	movs	r0, r3
 80025fa:	f000 fc79 	bl	8002ef0 <CRYP_AESCCM_Process>
 80025fe:	0003      	movs	r3, r0
 8002600:	7023      	strb	r3, [r4, #0]
        break;
 8002602:	e00a      	b.n	800261a <HAL_CRYP_Decrypt+0x112>

      default:
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002608:	2220      	movs	r2, #32
 800260a:	431a      	orrs	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	655a      	str	r2, [r3, #84]	; 0x54
        status = HAL_ERROR;
 8002610:	2317      	movs	r3, #23
 8002612:	18fb      	adds	r3, r7, r3
 8002614:	2201      	movs	r2, #1
 8002616:	701a      	strb	r2, [r3, #0]
        break;
 8002618:	46c0      	nop			; (mov r8, r8)
    }

    if (status == HAL_OK)
 800261a:	2317      	movs	r3, #23
 800261c:	18fb      	adds	r3, r7, r3
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d112      	bne.n	800264a <HAL_CRYP_Decrypt+0x142>
    {
      /* Change the CRYP peripheral state */
      hcryp->State = HAL_CRYP_STATE_READY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2251      	movs	r2, #81	; 0x51
 8002628:	2101      	movs	r1, #1
 800262a:	5499      	strb	r1, [r3, r2]

      /* Process unlocked */
      __HAL_UNLOCK(hcryp);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2250      	movs	r2, #80	; 0x50
 8002630:	2100      	movs	r1, #0
 8002632:	5499      	strb	r1, [r3, r2]
 8002634:	e009      	b.n	800264a <HAL_CRYP_Decrypt+0x142>
    }
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263a:	2208      	movs	r2, #8
 800263c:	431a      	orrs	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
 8002642:	2317      	movs	r3, #23
 8002644:	18fb      	adds	r3, r7, r3
 8002646:	2201      	movs	r2, #1
 8002648:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800264a:	2317      	movs	r3, #23
 800264c:	18fb      	adds	r3, r7, r3
 800264e:	781b      	ldrb	r3, [r3, #0]
}
 8002650:	0018      	movs	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	b007      	add	sp, #28
 8002656:	bd90      	pop	{r4, r7, pc}
 8002658:	00010060 	.word	0x00010060

0800265c <HAL_CRYP_ErrorCallback>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module.
  * @retval None
  */
__weak void HAL_CRYP_ErrorCallback(CRYP_HandleTypeDef *hcryp)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  UNUSED(hcryp);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CRYP_ErrorCallback could be implemented in the user file
   */
}
 8002664:	46c0      	nop			; (mov r8, r8)
 8002666:	46bd      	mov	sp, r7
 8002668:	b002      	add	sp, #8
 800266a:	bd80      	pop	{r7, pc}

0800266c <CRYP_AES_Encrypt>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure
  * @param  Timeout specify Timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AES_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint16_t incount;  /* Temporary CrypInCount Value */
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8002676:	2301      	movs	r3, #1
 8002678:	60bb      	str	r3, [r7, #8]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267e:	2b01      	cmp	r3, #1
 8002680:	d109      	bne.n	8002696 <CRYP_AES_Encrypt+0x2a>
  {
    if (hcryp->KeyIVConfig == 1U)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002686:	2b01      	cmp	r3, #1
 8002688:	d102      	bne.n	8002690 <CRYP_AES_Encrypt+0x24>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	e002      	b.n	8002696 <CRYP_AES_Encrypt+0x2a>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (DoKeyIVConfig == 1U)
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d122      	bne.n	80026e2 <CRYP_AES_Encrypt+0x76>
  {
    /*  Set the Key*/
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	0011      	movs	r1, r2
 80026a4:	0018      	movs	r0, r3
 80026a6:	f000 fa11 	bl	8002acc <CRYP_SetKey>

    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d017      	beq.n	80026e2 <CRYP_AES_Encrypt+0x76>
    {
      /* Set the Initialization Vector*/
      hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691a      	ldr	r2, [r3, #16]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	62da      	str	r2, [r3, #44]	; 0x2c
      hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691a      	ldr	r2, [r3, #16]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6852      	ldr	r2, [r2, #4]
 80026c8:	629a      	str	r2, [r3, #40]	; 0x28
      hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691a      	ldr	r2, [r3, #16]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6892      	ldr	r2, [r2, #8]
 80026d4:	625a      	str	r2, [r3, #36]	; 0x24
      hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691a      	ldr	r2, [r3, #16]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68d2      	ldr	r2, [r2, #12]
 80026e0:	621a      	str	r2, [r3, #32]
    }
  } /* if (DoKeyIVConfig == 1U) */

  /* Set the phase */
  hcryp->Phase = CRYP_PHASE_PROCESS;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2202      	movs	r2, #2
 80026e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2101      	movs	r1, #1
 80026f4:	430a      	orrs	r2, r1
 80026f6:	601a      	str	r2, [r3, #0]

  incount = hcryp->CrypInCount;
 80026f8:	230e      	movs	r3, #14
 80026fa:	18fb      	adds	r3, r7, r3
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 8002700:	801a      	strh	r2, [r3, #0]
  outcount = hcryp->CrypOutCount;
 8002702:	230c      	movs	r3, #12
 8002704:	18fb      	adds	r3, r7, r3
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	2140      	movs	r1, #64	; 0x40
 800270a:	5a52      	ldrh	r2, [r2, r1]
 800270c:	801a      	strh	r2, [r3, #0]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 800270e:	e010      	b.n	8002732 <CRYP_AES_Encrypt+0xc6>
  {
    /* Write plain Ddta and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	0011      	movs	r1, r2
 8002716:	0018      	movs	r0, r3
 8002718:	f000 f920 	bl	800295c <CRYP_AES_ProcessData>
    incount = hcryp->CrypInCount;
 800271c:	230e      	movs	r3, #14
 800271e:	18fb      	adds	r3, r7, r3
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 8002724:	801a      	strh	r2, [r3, #0]
    outcount = hcryp->CrypOutCount;
 8002726:	230c      	movs	r3, #12
 8002728:	18fb      	adds	r3, r7, r3
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	2140      	movs	r1, #64	; 0x40
 800272e:	5a52      	ldrh	r2, [r2, r1]
 8002730:	801a      	strh	r2, [r3, #0]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2242      	movs	r2, #66	; 0x42
 8002736:	5a9b      	ldrh	r3, [r3, r2]
 8002738:	089b      	lsrs	r3, r3, #2
 800273a:	b29b      	uxth	r3, r3
 800273c:	220e      	movs	r2, #14
 800273e:	18ba      	adds	r2, r7, r2
 8002740:	8812      	ldrh	r2, [r2, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d209      	bcs.n	800275a <CRYP_AES_Encrypt+0xee>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2242      	movs	r2, #66	; 0x42
 800274a:	5a9b      	ldrh	r3, [r3, r2]
 800274c:	089b      	lsrs	r3, r3, #2
 800274e:	b29b      	uxth	r3, r3
 8002750:	220c      	movs	r2, #12
 8002752:	18ba      	adds	r2, r7, r2
 8002754:	8812      	ldrh	r2, [r2, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d3da      	bcc.n	8002710 <CRYP_AES_Encrypt+0xa4>
  }

  /* Disable CRYP */
  __HAL_CRYP_DISABLE(hcryp);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2101      	movs	r1, #1
 8002766:	438a      	bics	r2, r1
 8002768:	601a      	str	r2, [r3, #0]

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2251      	movs	r2, #81	; 0x51
 800276e:	2101      	movs	r1, #1
 8002770:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	0018      	movs	r0, r3
 8002776:	46bd      	mov	sp, r7
 8002778:	b004      	add	sp, #16
 800277a:	bd80      	pop	{r7, pc}

0800277c <CRYP_AES_Decrypt>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure
  * @param  Timeout Specify Timeout value
  * @retval HAL status
*/
static HAL_StatusTypeDef CRYP_AES_Decrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  uint16_t incount;  /* Temporary CrypInCount Value */
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8002786:	2301      	movs	r3, #1
 8002788:	60bb      	str	r3, [r7, #8]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278e:	2b01      	cmp	r3, #1
 8002790:	d109      	bne.n	80027a6 <CRYP_AES_Decrypt+0x2a>
  {
    if (hcryp->KeyIVConfig == 1U)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002796:	2b01      	cmp	r3, #1
 8002798:	d102      	bne.n	80027a0 <CRYP_AES_Decrypt+0x24>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 800279a:	2300      	movs	r3, #0
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	e002      	b.n	80027a6 <CRYP_AES_Decrypt+0x2a>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (DoKeyIVConfig == 1U)
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d000      	beq.n	80027ae <CRYP_AES_Decrypt+0x32>
 80027ac:	e089      	b.n	80028c2 <CRYP_AES_Decrypt+0x146>
  {
    /*  Key preparation for ECB/CBC */
    if (hcryp->Init.Algorithm != CRYP_AES_CTR)   /*ECB or CBC*/
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	2b40      	cmp	r3, #64	; 0x40
 80027b4:	d062      	beq.n	800287c <CRYP_AES_Decrypt+0x100>
    {
      if (hcryp->AutoKeyDerivation == DISABLE)/*Mode 2 Key preparation*/
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2230      	movs	r2, #48	; 0x30
 80027ba:	5c9b      	ldrb	r3, [r3, r2]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d14d      	bne.n	800285c <CRYP_AES_Decrypt+0xe0>
      {
        /* Set key preparation for decryption operating mode*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2218      	movs	r2, #24
 80027c8:	4393      	bics	r3, r2
 80027ca:	001a      	movs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2108      	movs	r1, #8
 80027d2:	430a      	orrs	r2, r1
 80027d4:	601a      	str	r2, [r3, #0]

        /*  Set the Key*/
        CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689a      	ldr	r2, [r3, #8]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	0011      	movs	r1, r2
 80027de:	0018      	movs	r0, r3
 80027e0:	f000 f974 	bl	8002acc <CRYP_SetKey>

        /* Enable CRYP */
        __HAL_CRYP_ENABLE(hcryp);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2101      	movs	r1, #1
 80027f0:	430a      	orrs	r2, r1
 80027f2:	601a      	str	r2, [r3, #0]

        /* Wait for CCF flag to be raised */
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	0011      	movs	r1, r2
 80027fa:	0018      	movs	r0, r3
 80027fc:	f000 ff0c 	bl	8003618 <CRYP_WaitOnCCFlag>
 8002800:	1e03      	subs	r3, r0, #0
 8002802:	d017      	beq.n	8002834 <CRYP_AES_Decrypt+0xb8>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2101      	movs	r1, #1
 8002810:	438a      	bics	r2, r1
 8002812:	601a      	str	r2, [r3, #0]

          /* Change state & error code*/
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002818:	2210      	movs	r2, #16
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	655a      	str	r2, [r3, #84]	; 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2251      	movs	r2, #81	; 0x51
 8002824:	2101      	movs	r1, #1
 8002826:	5499      	strb	r1, [r3, r2]

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2250      	movs	r2, #80	; 0x50
 800282c:	2100      	movs	r1, #0
 800282e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e08f      	b.n	8002954 <CRYP_AES_Decrypt+0x1d8>
        }
        /* Clear CCF Flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2180      	movs	r1, #128	; 0x80
 8002840:	430a      	orrs	r2, r1
 8002842:	601a      	str	r2, [r3, #0]

        /* Return to decryption operating mode(Mode 3)*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2218      	movs	r2, #24
 800284c:	4393      	bics	r3, r2
 800284e:	001a      	movs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2110      	movs	r1, #16
 8002856:	430a      	orrs	r2, r1
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	e016      	b.n	800288a <CRYP_AES_Decrypt+0x10e>
      }
      else /*Mode 4 : decryption & Key preparation*/
      {
        /*  Set the Key*/
        CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	0011      	movs	r1, r2
 8002864:	0018      	movs	r0, r3
 8002866:	f000 f931 	bl	8002acc <CRYP_SetKey>

        /* Set decryption & Key preparation operating mode*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION_DECRYPT);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2118      	movs	r1, #24
 8002876:	430a      	orrs	r2, r1
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	e006      	b.n	800288a <CRYP_AES_Decrypt+0x10e>
      }
    }
    else  /*Algorithm CTR */
    {
      /*  Set the Key*/
      CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	0011      	movs	r1, r2
 8002884:	0018      	movs	r0, r3
 8002886:	f000 f921 	bl	8002acc <CRYP_SetKey>
    }

    /* Set IV */
    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d017      	beq.n	80028c2 <CRYP_AES_Decrypt+0x146>
    {
      /* Set the Initialization Vector*/
      hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691a      	ldr	r2, [r3, #16]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6812      	ldr	r2, [r2, #0]
 800289c:	62da      	str	r2, [r3, #44]	; 0x2c
      hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691a      	ldr	r2, [r3, #16]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6852      	ldr	r2, [r2, #4]
 80028a8:	629a      	str	r2, [r3, #40]	; 0x28
      hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691a      	ldr	r2, [r3, #16]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6892      	ldr	r2, [r2, #8]
 80028b4:	625a      	str	r2, [r3, #36]	; 0x24
      hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691a      	ldr	r2, [r3, #16]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68d2      	ldr	r2, [r2, #12]
 80028c0:	621a      	str	r2, [r3, #32]
    }
  } /* if (DoKeyIVConfig == 1U) */

  /* Set the phase */
  hcryp->Phase = CRYP_PHASE_PROCESS;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2202      	movs	r2, #2
 80028c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2101      	movs	r1, #1
 80028d4:	430a      	orrs	r2, r1
 80028d6:	601a      	str	r2, [r3, #0]

  incount = hcryp->CrypInCount;
 80028d8:	230e      	movs	r3, #14
 80028da:	18fb      	adds	r3, r7, r3
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 80028e0:	801a      	strh	r2, [r3, #0]
  outcount = hcryp->CrypOutCount;
 80028e2:	230c      	movs	r3, #12
 80028e4:	18fb      	adds	r3, r7, r3
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	2140      	movs	r1, #64	; 0x40
 80028ea:	5a52      	ldrh	r2, [r2, r1]
 80028ec:	801a      	strh	r2, [r3, #0]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 80028ee:	e010      	b.n	8002912 <CRYP_AES_Decrypt+0x196>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	0011      	movs	r1, r2
 80028f6:	0018      	movs	r0, r3
 80028f8:	f000 f830 	bl	800295c <CRYP_AES_ProcessData>
    incount = hcryp->CrypInCount;
 80028fc:	230e      	movs	r3, #14
 80028fe:	18fb      	adds	r3, r7, r3
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 8002904:	801a      	strh	r2, [r3, #0]
    outcount = hcryp->CrypOutCount;
 8002906:	230c      	movs	r3, #12
 8002908:	18fb      	adds	r3, r7, r3
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	2140      	movs	r1, #64	; 0x40
 800290e:	5a52      	ldrh	r2, [r2, r1]
 8002910:	801a      	strh	r2, [r3, #0]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2242      	movs	r2, #66	; 0x42
 8002916:	5a9b      	ldrh	r3, [r3, r2]
 8002918:	089b      	lsrs	r3, r3, #2
 800291a:	b29b      	uxth	r3, r3
 800291c:	220e      	movs	r2, #14
 800291e:	18ba      	adds	r2, r7, r2
 8002920:	8812      	ldrh	r2, [r2, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d209      	bcs.n	800293a <CRYP_AES_Decrypt+0x1be>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2242      	movs	r2, #66	; 0x42
 800292a:	5a9b      	ldrh	r3, [r3, r2]
 800292c:	089b      	lsrs	r3, r3, #2
 800292e:	b29b      	uxth	r3, r3
 8002930:	220c      	movs	r2, #12
 8002932:	18ba      	adds	r2, r7, r2
 8002934:	8812      	ldrh	r2, [r2, #0]
 8002936:	429a      	cmp	r2, r3
 8002938:	d3da      	bcc.n	80028f0 <CRYP_AES_Decrypt+0x174>
  }

  /* Disable CRYP */
  __HAL_CRYP_DISABLE(hcryp);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2101      	movs	r1, #1
 8002946:	438a      	bics	r2, r1
 8002948:	601a      	str	r2, [r3, #0]

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2251      	movs	r2, #81	; 0x51
 800294e:	2101      	movs	r1, #1
 8002950:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	0018      	movs	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	b004      	add	sp, #16
 800295a:	bd80      	pop	{r7, pc}

0800295c <CRYP_AES_ProcessData>:
  *         the configuration information for CRYP module
  * @param  Timeout Specify Timeout value
  * @retval None
  */
static void CRYP_AES_ProcessData(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b088      	sub	sp, #32
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]

  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t i;

  /* Write the input block in the IN FIFO */
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800296e:	b29b      	uxth	r3, r3
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	18d2      	adds	r2, r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6812      	ldr	r2, [r2, #0]
 800297a:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002980:	b29b      	uxth	r3, r3
 8002982:	3301      	adds	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002992:	b29b      	uxth	r3, r3
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	18d2      	adds	r2, r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6812      	ldr	r2, [r2, #0]
 800299e:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	3301      	adds	r3, #1
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	18d2      	adds	r2, r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6812      	ldr	r2, [r2, #0]
 80029c2:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	3301      	adds	r3, #1
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029da:	b29b      	uxth	r3, r3
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	18d2      	adds	r2, r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6812      	ldr	r2, [r2, #0]
 80029e6:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	3301      	adds	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Wait for CCF flag to be raised */
  if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	0011      	movs	r1, r2
 80029fc:	0018      	movs	r0, r3
 80029fe:	f000 fe0b 	bl	8003618 <CRYP_WaitOnCCFlag>
 8002a02:	1e03      	subs	r3, r0, #0
 8002a04:	d019      	beq.n	8002a3a <CRYP_AES_ProcessData+0xde>
  {
    /* Disable the CRYP peripheral clock */
    __HAL_CRYP_DISABLE(hcryp);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2101      	movs	r1, #1
 8002a12:	438a      	bics	r2, r1
 8002a14:	601a      	str	r2, [r3, #0]

    /* Change state */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1a:	2210      	movs	r2, #16
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	655a      	str	r2, [r3, #84]	; 0x54
    hcryp->State = HAL_CRYP_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2251      	movs	r2, #81	; 0x51
 8002a26:	2101      	movs	r1, #1
 8002a28:	5499      	strb	r1, [r3, r2]

    /* Process unlocked */
    __HAL_UNLOCK(hcryp);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2250      	movs	r2, #80	; 0x50
 8002a2e:	2100      	movs	r1, #0
 8002a30:	5499      	strb	r1, [r3, r2]
    /*Call registered error callback*/
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
    hcryp->ErrorCallback(hcryp);
#else
    /*Call legacy weak error callback*/
    HAL_CRYP_ErrorCallback(hcryp);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	0018      	movs	r0, r3
 8002a36:	f7ff fe11 	bl	800265c <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
  }

  /* Clear CCF Flag */
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2180      	movs	r1, #128	; 0x80
 8002a46:	430a      	orrs	r2, r1
 8002a48:	601a      	str	r2, [r3, #0]

  /* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer*/
  for (i = 0U; i < 4U; i++)
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61fb      	str	r3, [r7, #28]
 8002a4e:	e00a      	b.n	8002a66 <CRYP_AES_ProcessData+0x10a>
  {
    temp[i] = hcryp->Instance->DOUTR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68d9      	ldr	r1, [r3, #12]
 8002a56:	230c      	movs	r3, #12
 8002a58:	18fb      	adds	r3, r7, r3
 8002a5a:	69fa      	ldr	r2, [r7, #28]
 8002a5c:	0092      	lsls	r2, r2, #2
 8002a5e:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < 4U; i++)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	3301      	adds	r3, #1
 8002a64:	61fb      	str	r3, [r7, #28]
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	d9f1      	bls.n	8002a50 <CRYP_AES_ProcessData+0xf4>
  }
  i= 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	61fb      	str	r3, [r7, #28]
  while((hcryp->CrypOutCount < ((hcryp->Size + 3U)/4U)) && (i<4U))
 8002a70:	e019      	b.n	8002aa6 <CRYP_AES_ProcessData+0x14a>
  {
    *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[i];
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2140      	movs	r1, #64	; 0x40
 8002a7a:	5a5b      	ldrh	r3, [r3, r1]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	18d3      	adds	r3, r2, r3
 8002a82:	220c      	movs	r2, #12
 8002a84:	18ba      	adds	r2, r7, r2
 8002a86:	69f9      	ldr	r1, [r7, #28]
 8002a88:	0089      	lsls	r1, r1, #2
 8002a8a:	588a      	ldr	r2, [r1, r2]
 8002a8c:	601a      	str	r2, [r3, #0]
    hcryp->CrypOutCount++;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2240      	movs	r2, #64	; 0x40
 8002a92:	5a9b      	ldrh	r3, [r3, r2]
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	3301      	adds	r3, #1
 8002a98:	b299      	uxth	r1, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2240      	movs	r2, #64	; 0x40
 8002a9e:	5299      	strh	r1, [r3, r2]
    i++;
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	61fb      	str	r3, [r7, #28]
  while((hcryp->CrypOutCount < ((hcryp->Size + 3U)/4U)) && (i<4U))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2240      	movs	r2, #64	; 0x40
 8002aaa:	5a9b      	ldrh	r3, [r3, r2]
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	0019      	movs	r1, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2242      	movs	r2, #66	; 0x42
 8002ab4:	5a9b      	ldrh	r3, [r3, r2]
 8002ab6:	3303      	adds	r3, #3
 8002ab8:	089b      	lsrs	r3, r3, #2
 8002aba:	4299      	cmp	r1, r3
 8002abc:	d202      	bcs.n	8002ac4 <CRYP_AES_ProcessData+0x168>
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	2b03      	cmp	r3, #3
 8002ac2:	d9d6      	bls.n	8002a72 <CRYP_AES_ProcessData+0x116>
  }
}
 8002ac4:	46c0      	nop			; (mov r8, r8)
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	b008      	add	sp, #32
 8002aca:	bd80      	pop	{r7, pc}

08002acc <CRYP_SetKey>:
  * @note   If pKey is NULL, the Key registers are not written. This configuration
  *         occurs when the key is written out of HAL scope.
  * @retval None
  */
static void CRYP_SetKey(CRYP_HandleTypeDef *hcryp, uint32_t KeySize)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  if (hcryp->Init.pKey != NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d051      	beq.n	8002b82 <CRYP_SetKey+0xb6>
  {
    switch (KeySize)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d035      	beq.n	8002b50 <CRYP_SetKey+0x84>
 8002ae4:	2280      	movs	r2, #128	; 0x80
 8002ae6:	02d2      	lsls	r2, r2, #11
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d000      	beq.n	8002aee <CRYP_SetKey+0x22>
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 2U);
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 3U);

        break;
      default:
        break;
 8002aec:	e04a      	b.n	8002b84 <CRYP_SetKey+0xb8>
        hcryp->Instance->KEYR7 = *(uint32_t *)(hcryp->Init.pKey);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68da      	ldr	r2, [r3, #12]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6812      	ldr	r2, [r2, #0]
 8002af8:	63da      	str	r2, [r3, #60]	; 0x3c
        hcryp->Instance->KEYR6 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6852      	ldr	r2, [r2, #4]
 8002b04:	639a      	str	r2, [r3, #56]	; 0x38
        hcryp->Instance->KEYR5 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6892      	ldr	r2, [r2, #8]
 8002b10:	635a      	str	r2, [r3, #52]	; 0x34
        hcryp->Instance->KEYR4 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68da      	ldr	r2, [r3, #12]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68d2      	ldr	r2, [r2, #12]
 8002b1c:	631a      	str	r2, [r3, #48]	; 0x30
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey + 4U);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68da      	ldr	r2, [r3, #12]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6912      	ldr	r2, [r2, #16]
 8002b28:	61da      	str	r2, [r3, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 5U);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6952      	ldr	r2, [r2, #20]
 8002b34:	619a      	str	r2, [r3, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 6U);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6992      	ldr	r2, [r2, #24]
 8002b40:	615a      	str	r2, [r3, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 7U);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	69d2      	ldr	r2, [r2, #28]
 8002b4c:	611a      	str	r2, [r3, #16]
        break;
 8002b4e:	e019      	b.n	8002b84 <CRYP_SetKey+0xb8>
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68da      	ldr	r2, [r3, #12]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6812      	ldr	r2, [r2, #0]
 8002b5a:	61da      	str	r2, [r3, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6852      	ldr	r2, [r2, #4]
 8002b66:	619a      	str	r2, [r3, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68da      	ldr	r2, [r3, #12]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6892      	ldr	r2, [r2, #8]
 8002b72:	615a      	str	r2, [r3, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68da      	ldr	r2, [r3, #12]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68d2      	ldr	r2, [r2, #12]
 8002b7e:	611a      	str	r2, [r3, #16]
        break;
 8002b80:	e000      	b.n	8002b84 <CRYP_SetKey+0xb8>
    }
  }
 8002b82:	46c0      	nop			; (mov r8, r8)
}
 8002b84:	46c0      	nop			; (mov r8, r8)
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b002      	add	sp, #8
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <CRYP_AESGCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESGCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08e      	sub	sp, #56	; 0x38
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U) ;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2242      	movs	r2, #66	; 0x42
 8002b9a:	5a9b      	ldrh	r3, [r3, r2]
 8002b9c:	089b      	lsrs	r3, r3, #2
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t index;
  uint32_t lastwordsize;
  uint32_t incount;  /* Temporary CrypInCount Value */
  uint32_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	623b      	str	r3, [r7, #32]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d118      	bne.n	8002be0 <CRYP_AESGCM_Process+0x54>
  {
    if (hcryp->KeyIVConfig == 1U)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d10a      	bne.n	8002bcc <CRYP_AESGCM_Process+0x40>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	623b      	str	r3, [r7, #32]
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	2142      	movs	r1, #66	; 0x42
 8002bc2:	5a52      	ldrh	r2, [r2, r1]
 8002bc4:	189a      	adds	r2, r3, r2
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	65da      	str	r2, [r3, #92]	; 0x5c
 8002bca:	e00f      	b.n	8002bec <CRYP_AESGCM_Process+0x60>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	659a      	str	r2, [r3, #88]	; 0x58
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2242      	movs	r2, #66	; 0x42
 8002bd6:	5a9b      	ldrh	r3, [r3, r2]
 8002bd8:	001a      	movs	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	65da      	str	r2, [r3, #92]	; 0x5c
 8002bde:	e005      	b.n	8002bec <CRYP_AESGCM_Process+0x60>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2242      	movs	r2, #66	; 0x42
 8002be4:	5a9b      	ldrh	r3, [r3, r2]
 8002be6:	001a      	movs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  if (DoKeyIVConfig == 1U)
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d171      	bne.n	8002cd6 <CRYP_AESGCM_Process+0x14a>
  {

    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	879a      	strh	r2, [r3, #60]	; 0x3c

    /****************************** Init phase **********************************/

    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	49b9      	ldr	r1, [pc, #740]	; (8002ee8 <CRYP_AESGCM_Process+0x35c>)
 8002c04:	400a      	ands	r2, r1
 8002c06:	601a      	str	r2, [r3, #0]

    /* Set the key */
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	0011      	movs	r1, r2
 8002c10:	0018      	movs	r0, r3
 8002c12:	f7ff ff5b 	bl	8002acc <CRYP_SetKey>

    /* Set the initialization vector and the counter : Initial Counter Block (ICB)*/
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691a      	ldr	r2, [r3, #16]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6812      	ldr	r2, [r2, #0]
 8002c20:	62da      	str	r2, [r3, #44]	; 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691a      	ldr	r2, [r3, #16]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6852      	ldr	r2, [r2, #4]
 8002c2c:	629a      	str	r2, [r3, #40]	; 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691a      	ldr	r2, [r3, #16]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6892      	ldr	r2, [r2, #8]
 8002c38:	625a      	str	r2, [r3, #36]	; 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691a      	ldr	r2, [r3, #16]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68d2      	ldr	r2, [r2, #12]
 8002c44:	621a      	str	r2, [r3, #32]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2101      	movs	r1, #1
 8002c52:	430a      	orrs	r2, r1
 8002c54:	601a      	str	r2, [r3, #0]

    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	0011      	movs	r1, r2
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f000 fcdb 	bl	8003618 <CRYP_WaitOnCCFlag>
 8002c62:	1e03      	subs	r3, r0, #0
 8002c64:	d00f      	beq.n	8002c86 <CRYP_AESGCM_Process+0xfa>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6a:	2210      	movs	r2, #16
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2251      	movs	r2, #81	; 0x51
 8002c76:	2101      	movs	r1, #1
 8002c78:	5499      	strb	r1, [r3, r2]

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2250      	movs	r2, #80	; 0x50
 8002c7e:	2100      	movs	r1, #0
 8002c80:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e12b      	b.n	8002ede <CRYP_AESGCM_Process+0x352>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2180      	movs	r1, #128	; 0x80
 8002c92:	430a      	orrs	r2, r1
 8002c94:	601a      	str	r2, [r3, #0]

    /************************ Header phase *************************************/

    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	0011      	movs	r1, r2
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f000 fadd 	bl	800325c <CRYP_GCMCCM_SetHeaderPhase>
 8002ca2:	1e03      	subs	r3, r0, #0
 8002ca4:	d001      	beq.n	8002caa <CRYP_AESGCM_Process+0x11e>
    {
      return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e119      	b.n	8002ede <CRYP_AESGCM_Process+0x352>
    }

    /*************************Payload phase ************************************/

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2202      	movs	r2, #2
 8002cae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Select payload phase once the header phase is performed */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_PAYLOAD);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a8c      	ldr	r2, [pc, #560]	; (8002ee8 <CRYP_AESGCM_Process+0x35c>)
 8002cb8:	401a      	ands	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2180      	movs	r1, #128	; 0x80
 8002cc0:	01c9      	lsls	r1, r1, #7
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	601a      	str	r2, [r3, #0]

    /* Set to 0 the number of non-valid bytes using NPBLB register*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4986      	ldr	r1, [pc, #536]	; (8002eec <CRYP_AESGCM_Process+0x360>)
 8002cd2:	400a      	ands	r2, r1
 8002cd4:	601a      	str	r2, [r3, #0]

  } /* if (DoKeyIVConfig == 1U) */

  if ((hcryp->Size % 16U) != 0U)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2242      	movs	r2, #66	; 0x42
 8002cda:	5a9b      	ldrh	r3, [r3, r2]
 8002cdc:	220f      	movs	r2, #15
 8002cde:	4013      	ands	r3, r2
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <CRYP_AESGCM_Process+0x162>
  {
    /* recalculate  wordsize */
    wordsize = ((wordsize / 4U) * 4U) ;
 8002ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce8:	2203      	movs	r2, #3
 8002cea:	4393      	bics	r3, r2
 8002cec:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cee:	f7ff f939 	bl	8001f64 <HAL_GetTick>
 8002cf2:	0003      	movs	r3, r0
 8002cf4:	61fb      	str	r3, [r7, #28]

  /* Write input data and get output Data */
  incount = hcryp->CrypInCount;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  outcount = hcryp->CrypOutCount;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2240      	movs	r2, #64	; 0x40
 8002d02:	5a9b      	ldrh	r3, [r3, r2]
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8002d08:	e034      	b.n	8002d74 <CRYP_AESGCM_Process+0x1e8>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	0011      	movs	r1, r2
 8002d10:	0018      	movs	r0, r3
 8002d12:	f7ff fe23 	bl	800295c <CRYP_AES_ProcessData>

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	d022      	beq.n	8002d62 <CRYP_AESGCM_Process+0x1d6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d1c:	f7ff f922 	bl	8001f64 <HAL_GetTick>
 8002d20:	0002      	movs	r2, r0
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d302      	bcc.n	8002d32 <CRYP_AESGCM_Process+0x1a6>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d117      	bne.n	8002d62 <CRYP_AESGCM_Process+0x1d6>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	438a      	bics	r2, r1
 8002d40:	601a      	str	r2, [r3, #0]

        /* Change state & error code */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d46:	2210      	movs	r2, #16
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	655a      	str	r2, [r3, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2251      	movs	r2, #81	; 0x51
 8002d52:	2101      	movs	r1, #1
 8002d54:	5499      	strb	r1, [r3, r2]

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2250      	movs	r2, #80	; 0x50
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e0bd      	b.n	8002ede <CRYP_AESGCM_Process+0x352>
      }
    }
    incount = hcryp->CrypInCount;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	62bb      	str	r3, [r7, #40]	; 0x28
    outcount = hcryp->CrypOutCount;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2240      	movs	r2, #64	; 0x40
 8002d6e:	5a9b      	ldrh	r3, [r3, r2]
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8002d74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d203      	bcs.n	8002d84 <CRYP_AESGCM_Process+0x1f8>
 8002d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d3c2      	bcc.n	8002d0a <CRYP_AESGCM_Process+0x17e>
  }

  if ((hcryp->Size % 16U) != 0U)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2242      	movs	r2, #66	; 0x42
 8002d88:	5a9b      	ldrh	r3, [r3, r2]
 8002d8a:	220f      	movs	r2, #15
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d100      	bne.n	8002d96 <CRYP_AESGCM_Process+0x20a>
 8002d94:	e0a2      	b.n	8002edc <CRYP_AESGCM_Process+0x350>
  {
    /* Compute the number of padding bytes in last block of payload */
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2242      	movs	r2, #66	; 0x42
 8002d9a:	5a9b      	ldrh	r3, [r3, r2]
 8002d9c:	091b      	lsrs	r3, r3, #4
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	3301      	adds	r3, #1
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	2142      	movs	r1, #66	; 0x42
 8002da8:	5a52      	ldrh	r2, [r2, r1]
 8002daa:	1a9b      	subs	r3, r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]

    /*  Set Npblb in case of AES GCM payload encryption to get right tag*/
    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_ENCRYPT)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2218      	movs	r2, #24
 8002db6:	4013      	ands	r3, r2
 8002db8:	d10b      	bne.n	8002dd2 <CRYP_AESGCM_Process+0x246>
    {
      /* Set to 0 the number of non-valid bytes using NPBLB register*/
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20U);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a4a      	ldr	r2, [pc, #296]	; (8002eec <CRYP_AESGCM_Process+0x360>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	0019      	movs	r1, r3
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	051a      	lsls	r2, r3, #20
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	601a      	str	r2, [r3, #0]
    }
    /* Number of valid words (lastwordsize) in last block */
    if ((npblb % 4U) == 0U)
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	2203      	movs	r2, #3
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	d105      	bne.n	8002de6 <CRYP_AESGCM_Process+0x25a>
    {
      lastwordsize = (16U - npblb) / 4U;
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	2210      	movs	r2, #16
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	089b      	lsrs	r3, r3, #2
 8002de2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002de4:	e005      	b.n	8002df2 <CRYP_AESGCM_Process+0x266>
    }
    else
    {
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	2210      	movs	r2, #16
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	089b      	lsrs	r3, r3, #2
 8002dee:	3301      	adds	r3, #1
 8002df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /*  last block optionally pad the data with zeros*/
    for (index = 0U; index < lastwordsize; index ++)
 8002df2:	2300      	movs	r3, #0
 8002df4:	633b      	str	r3, [r7, #48]	; 0x30
 8002df6:	e014      	b.n	8002e22 <CRYP_AESGCM_Process+0x296>
    {
      /* Write the last Input block in the IN FIFO */
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	18d2      	adds	r2, r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6812      	ldr	r2, [r2, #0]
 8002e0c:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	3301      	adds	r3, #1
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	87da      	strh	r2, [r3, #62]	; 0x3e
    for (index = 0U; index < lastwordsize; index ++)
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1e:	3301      	adds	r3, #1
 8002e20:	633b      	str	r3, [r7, #48]	; 0x30
 8002e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d3e6      	bcc.n	8002df8 <CRYP_AESGCM_Process+0x26c>
    }
    while (index < 4U)
 8002e2a:	e006      	b.n	8002e3a <CRYP_AESGCM_Process+0x2ae>
    {
      /* pad the data with zeros to have a complete block */
      hcryp->Instance->DINR  = 0U;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2200      	movs	r2, #0
 8002e32:	609a      	str	r2, [r3, #8]
      index++;
 8002e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e36:	3301      	adds	r3, #1
 8002e38:	633b      	str	r3, [r7, #48]	; 0x30
    while (index < 4U)
 8002e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3c:	2b03      	cmp	r3, #3
 8002e3e:	d9f5      	bls.n	8002e2c <CRYP_AESGCM_Process+0x2a0>
    }
    /* Wait for CCF flag to be raised */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	0011      	movs	r1, r2
 8002e46:	0018      	movs	r0, r3
 8002e48:	f000 fbe6 	bl	8003618 <CRYP_WaitOnCCFlag>
 8002e4c:	1e03      	subs	r3, r0, #0
 8002e4e:	d00b      	beq.n	8002e68 <CRYP_AESGCM_Process+0x2dc>
    {
      hcryp->State = HAL_CRYP_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2251      	movs	r2, #81	; 0x51
 8002e54:	2101      	movs	r1, #1
 8002e56:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hcryp);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2250      	movs	r2, #80	; 0x50
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
      /*Call registered error callback*/
      hcryp->ErrorCallback(hcryp);
#else
      /*Call legacy weak error callback*/
      HAL_CRYP_ErrorCallback(hcryp);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	0018      	movs	r0, r3
 8002e64:	f7ff fbfa 	bl	800265c <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
    }

    /* Clear CCF Flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2180      	movs	r1, #128	; 0x80
 8002e74:	430a      	orrs	r2, r1
 8002e76:	601a      	str	r2, [r3, #0]

    /*Read the output block from the output FIFO */
    for (index = 0U; index < 4U; index++)
 8002e78:	2300      	movs	r3, #0
 8002e7a:	633b      	str	r3, [r7, #48]	; 0x30
 8002e7c:	e00a      	b.n	8002e94 <CRYP_AESGCM_Process+0x308>
    {
      /* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer */
      temp[index] = hcryp->Instance->DOUTR;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68d9      	ldr	r1, [r3, #12]
 8002e84:	2308      	movs	r3, #8
 8002e86:	18fb      	adds	r3, r7, r3
 8002e88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e8a:	0092      	lsls	r2, r2, #2
 8002e8c:	50d1      	str	r1, [r2, r3]
    for (index = 0U; index < 4U; index++)
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e90:	3301      	adds	r3, #1
 8002e92:	633b      	str	r3, [r7, #48]	; 0x30
 8002e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e96:	2b03      	cmp	r3, #3
 8002e98:	d9f1      	bls.n	8002e7e <CRYP_AESGCM_Process+0x2f2>
    }
    for (index = 0U; index < lastwordsize; index++)
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	633b      	str	r3, [r7, #48]	; 0x30
 8002e9e:	e019      	b.n	8002ed4 <CRYP_AESGCM_Process+0x348>
    {
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + (hcryp->CrypOutCount)) = temp[index];
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2140      	movs	r1, #64	; 0x40
 8002ea8:	5a5b      	ldrh	r3, [r3, r1]
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	18d3      	adds	r3, r2, r3
 8002eb0:	2208      	movs	r2, #8
 8002eb2:	18ba      	adds	r2, r7, r2
 8002eb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002eb6:	0089      	lsls	r1, r1, #2
 8002eb8:	588a      	ldr	r2, [r1, r2]
 8002eba:	601a      	str	r2, [r3, #0]
      hcryp->CrypOutCount++;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2240      	movs	r2, #64	; 0x40
 8002ec0:	5a9b      	ldrh	r3, [r3, r2]
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	b299      	uxth	r1, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2240      	movs	r2, #64	; 0x40
 8002ecc:	5299      	strh	r1, [r3, r2]
    for (index = 0U; index < lastwordsize; index++)
 8002ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	633b      	str	r3, [r7, #48]	; 0x30
 8002ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d3e1      	bcc.n	8002ea0 <CRYP_AESGCM_Process+0x314>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	0018      	movs	r0, r3
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	b00e      	add	sp, #56	; 0x38
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	ffff9fff 	.word	0xffff9fff
 8002eec:	ff0fffff 	.word	0xff0fffff

08002ef0 <CRYP_AESCCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESCCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08e      	sub	sp, #56	; 0x38
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U) ;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2242      	movs	r2, #66	; 0x42
 8002efe:	5a9b      	ldrh	r3, [r3, r2]
 8002f00:	089b      	lsrs	r3, r3, #2
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t npblb;
  uint32_t lastwordsize;
  uint32_t temp[4] ;  /* Temporary CrypOutBuff */
  uint32_t incount;  /* Temporary CrypInCount Value */
  uint32_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8002f06:	2301      	movs	r3, #1
 8002f08:	623b      	str	r3, [r7, #32]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d118      	bne.n	8002f44 <CRYP_AESCCM_Process+0x54>
  {
    if (hcryp->KeyIVConfig == 1U)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d10a      	bne.n	8002f30 <CRYP_AESCCM_Process+0x40>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	623b      	str	r3, [r7, #32]
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	2142      	movs	r1, #66	; 0x42
 8002f26:	5a52      	ldrh	r2, [r2, r1]
 8002f28:	189a      	adds	r2, r3, r2
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f2e:	e00f      	b.n	8002f50 <CRYP_AESCCM_Process+0x60>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	659a      	str	r2, [r3, #88]	; 0x58
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2242      	movs	r2, #66	; 0x42
 8002f3a:	5a9b      	ldrh	r3, [r3, r2]
 8002f3c:	001a      	movs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f42:	e005      	b.n	8002f50 <CRYP_AESCCM_Process+0x60>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2242      	movs	r2, #66	; 0x42
 8002f48:	5a9b      	ldrh	r3, [r3, r2]
 8002f4a:	001a      	movs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  if (DoKeyIVConfig == 1U)
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d171      	bne.n	800303a <CRYP_AESCCM_Process+0x14a>
  {
    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	879a      	strh	r2, [r3, #60]	; 0x3c

    /********************** Init phase ******************************************/

    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	49bb      	ldr	r1, [pc, #748]	; (8003254 <CRYP_AESCCM_Process+0x364>)
 8002f68:	400a      	ands	r2, r1
 8002f6a:	601a      	str	r2, [r3, #0]

    /* Set the key */
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	0011      	movs	r1, r2
 8002f74:	0018      	movs	r0, r3
 8002f76:	f7ff fda9 	bl	8002acc <CRYP_SetKey>

    /* Set the initialization vector (IV) with B0 */
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.B0);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1a      	ldr	r2, [r3, #32]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6812      	ldr	r2, [r2, #0]
 8002f84:	62da      	str	r2, [r3, #44]	; 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.B0 + 1U);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1a      	ldr	r2, [r3, #32]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6852      	ldr	r2, [r2, #4]
 8002f90:	629a      	str	r2, [r3, #40]	; 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.B0 + 2U);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1a      	ldr	r2, [r3, #32]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6892      	ldr	r2, [r2, #8]
 8002f9c:	625a      	str	r2, [r3, #36]	; 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.B0 + 3U);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a1a      	ldr	r2, [r3, #32]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68d2      	ldr	r2, [r2, #12]
 8002fa8:	621a      	str	r2, [r3, #32]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	601a      	str	r2, [r3, #0]

    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	0011      	movs	r1, r2
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	f000 fb29 	bl	8003618 <CRYP_WaitOnCCFlag>
 8002fc6:	1e03      	subs	r3, r0, #0
 8002fc8:	d00f      	beq.n	8002fea <CRYP_AESCCM_Process+0xfa>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fce:	2210      	movs	r2, #16
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2251      	movs	r2, #81	; 0x51
 8002fda:	2101      	movs	r1, #1
 8002fdc:	5499      	strb	r1, [r3, r2]

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2250      	movs	r2, #80	; 0x50
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e130      	b.n	800324c <CRYP_AESCCM_Process+0x35c>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2180      	movs	r1, #128	; 0x80
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	601a      	str	r2, [r3, #0]

    /************************ Header phase *************************************/
    /* Header block(B1) : associated data length expressed in bytes concatenated
    with Associated Data (A)*/
    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	0011      	movs	r1, r2
 8003000:	0018      	movs	r0, r3
 8003002:	f000 f92b 	bl	800325c <CRYP_GCMCCM_SetHeaderPhase>
 8003006:	1e03      	subs	r3, r0, #0
 8003008:	d001      	beq.n	800300e <CRYP_AESCCM_Process+0x11e>
    {
      return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e11e      	b.n	800324c <CRYP_AESCCM_Process+0x35c>
    }

    /*************************Payload phase ************************************/

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2202      	movs	r2, #2
 8003012:	645a      	str	r2, [r3, #68]	; 0x44

    /* Select payload phase once the header phase is performed */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, CRYP_PHASE_PAYLOAD);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a8e      	ldr	r2, [pc, #568]	; (8003254 <CRYP_AESCCM_Process+0x364>)
 800301c:	401a      	ands	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2180      	movs	r1, #128	; 0x80
 8003024:	01c9      	lsls	r1, r1, #7
 8003026:	430a      	orrs	r2, r1
 8003028:	601a      	str	r2, [r3, #0]

    /* Set to 0 the number of non-valid bytes using NPBLB register*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4988      	ldr	r1, [pc, #544]	; (8003258 <CRYP_AESCCM_Process+0x368>)
 8003036:	400a      	ands	r2, r1
 8003038:	601a      	str	r2, [r3, #0]

  } /* if (DoKeyIVConfig == 1U) */

  if ((hcryp->Size % 16U) != 0U)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2242      	movs	r2, #66	; 0x42
 800303e:	5a9b      	ldrh	r3, [r3, r2]
 8003040:	220f      	movs	r2, #15
 8003042:	4013      	ands	r3, r2
 8003044:	b29b      	uxth	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <CRYP_AESCCM_Process+0x162>
  {
    /* recalculate  wordsize */
    wordsize = ((wordsize / 4U) * 4U) ;
 800304a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800304c:	2203      	movs	r2, #3
 800304e:	4393      	bics	r3, r2
 8003050:	637b      	str	r3, [r7, #52]	; 0x34
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8003052:	f7fe ff87 	bl	8001f64 <HAL_GetTick>
 8003056:	0003      	movs	r3, r0
 8003058:	61fb      	str	r3, [r7, #28]

  /* Write input data and get output data */
  incount = hcryp->CrypInCount;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800305e:	b29b      	uxth	r3, r3
 8003060:	62bb      	str	r3, [r7, #40]	; 0x28
  outcount = hcryp->CrypOutCount;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2240      	movs	r2, #64	; 0x40
 8003066:	5a9b      	ldrh	r3, [r3, r2]
 8003068:	b29b      	uxth	r3, r3
 800306a:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 800306c:	e034      	b.n	80030d8 <CRYP_AESCCM_Process+0x1e8>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	0011      	movs	r1, r2
 8003074:	0018      	movs	r0, r3
 8003076:	f7ff fc71 	bl	800295c <CRYP_AES_ProcessData>

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	3301      	adds	r3, #1
 800307e:	d022      	beq.n	80030c6 <CRYP_AESCCM_Process+0x1d6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) ||(Timeout == 0U))
 8003080:	f7fe ff70 	bl	8001f64 <HAL_GetTick>
 8003084:	0002      	movs	r2, r0
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d302      	bcc.n	8003096 <CRYP_AESCCM_Process+0x1a6>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d117      	bne.n	80030c6 <CRYP_AESCCM_Process+0x1d6>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2101      	movs	r1, #1
 80030a2:	438a      	bics	r2, r1
 80030a4:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030aa:	2210      	movs	r2, #16
 80030ac:	431a      	orrs	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	655a      	str	r2, [r3, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2251      	movs	r2, #81	; 0x51
 80030b6:	2101      	movs	r1, #1
 80030b8:	5499      	strb	r1, [r3, r2]

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2250      	movs	r2, #80	; 0x50
 80030be:	2100      	movs	r1, #0
 80030c0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e0c2      	b.n	800324c <CRYP_AESCCM_Process+0x35c>
      }
    }
    incount = hcryp->CrypInCount;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	62bb      	str	r3, [r7, #40]	; 0x28
    outcount = hcryp->CrypOutCount;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2240      	movs	r2, #64	; 0x40
 80030d2:	5a9b      	ldrh	r3, [r3, r2]
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 80030d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030dc:	429a      	cmp	r2, r3
 80030de:	d203      	bcs.n	80030e8 <CRYP_AESCCM_Process+0x1f8>
 80030e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d3c2      	bcc.n	800306e <CRYP_AESCCM_Process+0x17e>
  }

  if ((hcryp->Size % 16U) != 0U)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2242      	movs	r2, #66	; 0x42
 80030ec:	5a9b      	ldrh	r3, [r3, r2]
 80030ee:	220f      	movs	r2, #15
 80030f0:	4013      	ands	r3, r2
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d100      	bne.n	80030fa <CRYP_AESCCM_Process+0x20a>
 80030f8:	e0a7      	b.n	800324a <CRYP_AESCCM_Process+0x35a>
  {
    /* Compute the number of padding bytes in last block of payload */
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2242      	movs	r2, #66	; 0x42
 80030fe:	5a9b      	ldrh	r3, [r3, r2]
 8003100:	091b      	lsrs	r3, r3, #4
 8003102:	b29b      	uxth	r3, r3
 8003104:	3301      	adds	r3, #1
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	2142      	movs	r1, #66	; 0x42
 800310c:	5a52      	ldrh	r2, [r2, r1]
 800310e:	1a9b      	subs	r3, r3, r2
 8003110:	61bb      	str	r3, [r7, #24]

    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_DECRYPT)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2218      	movs	r2, #24
 800311a:	4013      	ands	r3, r2
 800311c:	2b10      	cmp	r3, #16
 800311e:	d10b      	bne.n	8003138 <CRYP_AESCCM_Process+0x248>
    {
      /* Set Npblb in case of AES CCM payload decryption to get right tag  */
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a4c      	ldr	r2, [pc, #304]	; (8003258 <CRYP_AESCCM_Process+0x368>)
 8003128:	4013      	ands	r3, r2
 800312a:	0019      	movs	r1, r3
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	051a      	lsls	r2, r3, #20
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	601a      	str	r2, [r3, #0]

    }
    /* Number of valid words (lastwordsize) in last block */
    if ((npblb % 4U) == 0U)
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	2203      	movs	r2, #3
 800313c:	4013      	ands	r3, r2
 800313e:	d105      	bne.n	800314c <CRYP_AESCCM_Process+0x25c>
    {
      lastwordsize = (16U - npblb) / 4U;
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	2210      	movs	r2, #16
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	089b      	lsrs	r3, r3, #2
 8003148:	62fb      	str	r3, [r7, #44]	; 0x2c
 800314a:	e005      	b.n	8003158 <CRYP_AESCCM_Process+0x268>
    }
    else
    {
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	2210      	movs	r2, #16
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	089b      	lsrs	r3, r3, #2
 8003154:	3301      	adds	r3, #1
 8003156:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Write the last input block in the IN FIFO */
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 8003158:	2300      	movs	r3, #0
 800315a:	633b      	str	r3, [r7, #48]	; 0x30
 800315c:	e014      	b.n	8003188 <CRYP_AESCCM_Process+0x298>
    {
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003166:	b29b      	uxth	r3, r3
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	18d2      	adds	r2, r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6812      	ldr	r2, [r2, #0]
 8003172:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003178:	b29b      	uxth	r3, r3
 800317a:	3301      	adds	r3, #1
 800317c:	b29a      	uxth	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	87da      	strh	r2, [r3, #62]	; 0x3e
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 8003182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003184:	3301      	adds	r3, #1
 8003186:	633b      	str	r3, [r7, #48]	; 0x30
 8003188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800318a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318c:	429a      	cmp	r2, r3
 800318e:	d3e6      	bcc.n	800315e <CRYP_AESCCM_Process+0x26e>
    }

    /* Pad the data with zeros to have a complete block */
    while (loopcounter < 4U)
 8003190:	e006      	b.n	80031a0 <CRYP_AESCCM_Process+0x2b0>
    {
      hcryp->Instance->DINR  = 0U;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2200      	movs	r2, #0
 8003198:	609a      	str	r2, [r3, #8]
      loopcounter++;
 800319a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319c:	3301      	adds	r3, #1
 800319e:	633b      	str	r3, [r7, #48]	; 0x30
    while (loopcounter < 4U)
 80031a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a2:	2b03      	cmp	r3, #3
 80031a4:	d9f5      	bls.n	8003192 <CRYP_AESCCM_Process+0x2a2>
    }
    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	0011      	movs	r1, r2
 80031ac:	0018      	movs	r0, r3
 80031ae:	f000 fa33 	bl	8003618 <CRYP_WaitOnCCFlag>
 80031b2:	1e03      	subs	r3, r0, #0
 80031b4:	d00f      	beq.n	80031d6 <CRYP_AESCCM_Process+0x2e6>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ba:	2210      	movs	r2, #16
 80031bc:	431a      	orrs	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2251      	movs	r2, #81	; 0x51
 80031c6:	2101      	movs	r1, #1
 80031c8:	5499      	strb	r1, [r3, r2]

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2250      	movs	r2, #80	; 0x50
 80031ce:	2100      	movs	r1, #0
 80031d0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e03a      	b.n	800324c <CRYP_AESCCM_Process+0x35c>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2180      	movs	r1, #128	; 0x80
 80031e2:	430a      	orrs	r2, r1
 80031e4:	601a      	str	r2, [r3, #0]

    for (loopcounter = 0U; loopcounter < 4U; loopcounter++)
 80031e6:	2300      	movs	r3, #0
 80031e8:	633b      	str	r3, [r7, #48]	; 0x30
 80031ea:	e00a      	b.n	8003202 <CRYP_AESCCM_Process+0x312>
    {
      /* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer */
      temp[loopcounter] = hcryp->Instance->DOUTR;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68d9      	ldr	r1, [r3, #12]
 80031f2:	2308      	movs	r3, #8
 80031f4:	18fb      	adds	r3, r7, r3
 80031f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031f8:	0092      	lsls	r2, r2, #2
 80031fa:	50d1      	str	r1, [r2, r3]
    for (loopcounter = 0U; loopcounter < 4U; loopcounter++)
 80031fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fe:	3301      	adds	r3, #1
 8003200:	633b      	str	r3, [r7, #48]	; 0x30
 8003202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003204:	2b03      	cmp	r3, #3
 8003206:	d9f1      	bls.n	80031ec <CRYP_AESCCM_Process+0x2fc>
    }
    for (loopcounter = 0U; loopcounter<lastwordsize; loopcounter++)
 8003208:	2300      	movs	r3, #0
 800320a:	633b      	str	r3, [r7, #48]	; 0x30
 800320c:	e019      	b.n	8003242 <CRYP_AESCCM_Process+0x352>
    {
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[loopcounter];
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2140      	movs	r1, #64	; 0x40
 8003216:	5a5b      	ldrh	r3, [r3, r1]
 8003218:	b29b      	uxth	r3, r3
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	18d3      	adds	r3, r2, r3
 800321e:	2208      	movs	r2, #8
 8003220:	18ba      	adds	r2, r7, r2
 8003222:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003224:	0089      	lsls	r1, r1, #2
 8003226:	588a      	ldr	r2, [r1, r2]
 8003228:	601a      	str	r2, [r3, #0]
      hcryp->CrypOutCount++;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2240      	movs	r2, #64	; 0x40
 800322e:	5a9b      	ldrh	r3, [r3, r2]
 8003230:	b29b      	uxth	r3, r3
 8003232:	3301      	adds	r3, #1
 8003234:	b299      	uxth	r1, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2240      	movs	r2, #64	; 0x40
 800323a:	5299      	strh	r1, [r3, r2]
    for (loopcounter = 0U; loopcounter<lastwordsize; loopcounter++)
 800323c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323e:	3301      	adds	r3, #1
 8003240:	633b      	str	r3, [r7, #48]	; 0x30
 8003242:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003246:	429a      	cmp	r2, r3
 8003248:	d3e1      	bcc.n	800320e <CRYP_AESCCM_Process+0x31e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	0018      	movs	r0, r3
 800324e:	46bd      	mov	sp, r7
 8003250:	b00e      	add	sp, #56	; 0x38
 8003252:	bd80      	pop	{r7, pc}
 8003254:	ffff9fff 	.word	0xffff9fff
 8003258:	ff0fffff 	.word	0xff0fffff

0800325c <CRYP_GCMCCM_SetHeaderPhase>:
  *         the configuration information for CRYP module(Header & HeaderSize)
  * @param  Timeout Timeout value
  * @retval state
  */
static HAL_StatusTypeDef CRYP_GCMCCM_SetHeaderPhase(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 800325c:	b590      	push	{r4, r7, lr}
 800325e:	b093      	sub	sp, #76	; 0x4c
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t loopcounter;
  uint32_t size_in_bytes;
  uint32_t tmp;
  uint32_t mask[12] = {0x0U, 0xFF000000U, 0xFFFF0000U, 0xFFFFFF00U,  /* 32-bit data type */
 8003266:	230c      	movs	r3, #12
 8003268:	18fb      	adds	r3, r7, r3
 800326a:	4ad6      	ldr	r2, [pc, #856]	; (80035c4 <CRYP_GCMCCM_SetHeaderPhase+0x368>)
 800326c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800326e:	c313      	stmia	r3!, {r0, r1, r4}
 8003270:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003272:	c313      	stmia	r3!, {r0, r1, r4}
 8003274:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003276:	c313      	stmia	r3!, {r0, r1, r4}
 8003278:	ca13      	ldmia	r2!, {r0, r1, r4}
 800327a:	c313      	stmia	r3!, {r0, r1, r4}
                       0x0U, 0x0000FF00U, 0x0000FFFFU, 0xFF00FFFFU,  /* 16-bit data type */
                       0x0U, 0x000000FFU, 0x0000FFFFU, 0x00FFFFFFU}; /*  8-bit data type */

  /***************************** Header phase for GCM/GMAC or CCM *********************************/
  if (hcryp->Init.HeaderWidthUnit == CRYP_HEADERWIDTHUNIT_WORD)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003280:	2b00      	cmp	r3, #0
 8003282:	d104      	bne.n	800328e <CRYP_GCMCCM_SetHeaderPhase+0x32>
  {
    size_in_bytes = hcryp->Init.HeaderSize * 4U;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	643b      	str	r3, [r7, #64]	; 0x40
 800328c:	e002      	b.n	8003294 <CRYP_GCMCCM_SetHeaderPhase+0x38>
  }
  else
  {
    size_in_bytes = hcryp->Init.HeaderSize;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	643b      	str	r3, [r7, #64]	; 0x40
  }

  if ((size_in_bytes != 0U))
 8003294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003296:	2b00      	cmp	r3, #0
 8003298:	d100      	bne.n	800329c <CRYP_GCMCCM_SetHeaderPhase+0x40>
 800329a:	e197      	b.n	80035cc <CRYP_GCMCCM_SetHeaderPhase+0x370>
  {
    /* Select header phase */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4ac9      	ldr	r2, [pc, #804]	; (80035c8 <CRYP_GCMCCM_SetHeaderPhase+0x36c>)
 80032a4:	401a      	ands	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2180      	movs	r1, #128	; 0x80
 80032ac:	0189      	lsls	r1, r1, #6
 80032ae:	430a      	orrs	r2, r1
 80032b0:	601a      	str	r2, [r3, #0]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2101      	movs	r1, #1
 80032be:	430a      	orrs	r2, r1
 80032c0:	601a      	str	r2, [r3, #0]

    /* If size_in_bytes is a multiple of blocks (a multiple of four 32-bits words ) */
    if ((size_in_bytes % 16U) == 0U)
 80032c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032c4:	220f      	movs	r2, #15
 80032c6:	4013      	ands	r3, r2
 80032c8:	d000      	beq.n	80032cc <CRYP_GCMCCM_SetHeaderPhase+0x70>
 80032ca:	e07c      	b.n	80033c6 <CRYP_GCMCCM_SetHeaderPhase+0x16a>
    {
      /*  No padding */
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 80032cc:	2300      	movs	r3, #0
 80032ce:	647b      	str	r3, [r7, #68]	; 0x44
 80032d0:	e072      	b.n	80033b8 <CRYP_GCMCCM_SetHeaderPhase+0x15c>
      {
        /* Write the input block in the data input register */
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	699a      	ldr	r2, [r3, #24]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80032da:	b29b      	uxth	r3, r3
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	18d2      	adds	r2, r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6812      	ldr	r2, [r2, #0]
 80032e6:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3301      	adds	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	699a      	ldr	r2, [r3, #24]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80032fe:	b29b      	uxth	r3, r3
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	18d2      	adds	r2, r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6812      	ldr	r2, [r2, #0]
 800330a:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003310:	b29b      	uxth	r3, r3
 8003312:	3301      	adds	r3, #1
 8003314:	b29a      	uxth	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699a      	ldr	r2, [r3, #24]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003322:	b29b      	uxth	r3, r3
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	18d2      	adds	r2, r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6812      	ldr	r2, [r2, #0]
 800332e:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003334:	b29b      	uxth	r3, r3
 8003336:	3301      	adds	r3, #1
 8003338:	b29a      	uxth	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699a      	ldr	r2, [r3, #24]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003346:	b29b      	uxth	r3, r3
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	18d2      	adds	r2, r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6812      	ldr	r2, [r2, #0]
 8003352:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003358:	b29b      	uxth	r3, r3
 800335a:	3301      	adds	r3, #1
 800335c:	b29a      	uxth	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	879a      	strh	r2, [r3, #60]	; 0x3c

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	0011      	movs	r1, r2
 8003368:	0018      	movs	r0, r3
 800336a:	f000 f955 	bl	8003618 <CRYP_WaitOnCCFlag>
 800336e:	1e03      	subs	r3, r0, #0
 8003370:	d017      	beq.n	80033a2 <CRYP_GCMCCM_SetHeaderPhase+0x146>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2101      	movs	r1, #1
 800337e:	438a      	bics	r2, r1
 8003380:	601a      	str	r2, [r3, #0]

          /* Change state */
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003386:	2210      	movs	r2, #16
 8003388:	431a      	orrs	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	655a      	str	r2, [r3, #84]	; 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2251      	movs	r2, #81	; 0x51
 8003392:	2101      	movs	r1, #1
 8003394:	5499      	strb	r1, [r3, r2]

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2250      	movs	r2, #80	; 0x50
 800339a:	2100      	movs	r1, #0
 800339c:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e134      	b.n	800360c <CRYP_GCMCCM_SetHeaderPhase+0x3b0>
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2180      	movs	r1, #128	; 0x80
 80033ae:	430a      	orrs	r2, r1
 80033b0:	601a      	str	r2, [r3, #0]
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 80033b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033b4:	3304      	adds	r3, #4
 80033b6:	647b      	str	r3, [r7, #68]	; 0x44
 80033b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033ba:	089b      	lsrs	r3, r3, #2
 80033bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033be:	429a      	cmp	r2, r3
 80033c0:	d200      	bcs.n	80033c4 <CRYP_GCMCCM_SetHeaderPhase+0x168>
 80033c2:	e786      	b.n	80032d2 <CRYP_GCMCCM_SetHeaderPhase+0x76>
 80033c4:	e121      	b.n	800360a <CRYP_GCMCCM_SetHeaderPhase+0x3ae>
      }
    }
    else
    {
      /* Write header block in the IN FIFO without last block */
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 80033c6:	2300      	movs	r3, #0
 80033c8:	647b      	str	r3, [r7, #68]	; 0x44
 80033ca:	e072      	b.n	80034b2 <CRYP_GCMCCM_SetHeaderPhase+0x256>
      {
        /* Write the input block in the data input register */
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	699a      	ldr	r2, [r3, #24]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	18d2      	adds	r2, r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6812      	ldr	r2, [r2, #0]
 80033e0:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	3301      	adds	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	699a      	ldr	r2, [r3, #24]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	18d2      	adds	r2, r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6812      	ldr	r2, [r2, #0]
 8003404:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800340a:	b29b      	uxth	r3, r3
 800340c:	3301      	adds	r3, #1
 800340e:	b29a      	uxth	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	699a      	ldr	r2, [r3, #24]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800341c:	b29b      	uxth	r3, r3
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	18d2      	adds	r2, r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6812      	ldr	r2, [r2, #0]
 8003428:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800342e:	b29b      	uxth	r3, r3
 8003430:	3301      	adds	r3, #1
 8003432:	b29a      	uxth	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	699a      	ldr	r2, [r3, #24]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003440:	b29b      	uxth	r3, r3
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	18d2      	adds	r2, r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6812      	ldr	r2, [r2, #0]
 800344c:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003452:	b29b      	uxth	r3, r3
 8003454:	3301      	adds	r3, #1
 8003456:	b29a      	uxth	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	879a      	strh	r2, [r3, #60]	; 0x3c

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	0011      	movs	r1, r2
 8003462:	0018      	movs	r0, r3
 8003464:	f000 f8d8 	bl	8003618 <CRYP_WaitOnCCFlag>
 8003468:	1e03      	subs	r3, r0, #0
 800346a:	d017      	beq.n	800349c <CRYP_GCMCCM_SetHeaderPhase+0x240>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2101      	movs	r1, #1
 8003478:	438a      	bics	r2, r1
 800347a:	601a      	str	r2, [r3, #0]

          /* Change state */
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003480:	2210      	movs	r2, #16
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	655a      	str	r2, [r3, #84]	; 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2251      	movs	r2, #81	; 0x51
 800348c:	2101      	movs	r1, #1
 800348e:	5499      	strb	r1, [r3, r2]

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2250      	movs	r2, #80	; 0x50
 8003494:	2100      	movs	r1, #0
 8003496:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e0b7      	b.n	800360c <CRYP_GCMCCM_SetHeaderPhase+0x3b0>
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2180      	movs	r1, #128	; 0x80
 80034a8:	430a      	orrs	r2, r1
 80034aa:	601a      	str	r2, [r3, #0]
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 80034ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ae:	3304      	adds	r3, #4
 80034b0:	647b      	str	r3, [r7, #68]	; 0x44
 80034b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034b4:	091b      	lsrs	r3, r3, #4
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d200      	bcs.n	80034c0 <CRYP_GCMCCM_SetHeaderPhase+0x264>
 80034be:	e785      	b.n	80033cc <CRYP_GCMCCM_SetHeaderPhase+0x170>
      }
      /* Write last complete words */
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 80034c0:	2300      	movs	r3, #0
 80034c2:	647b      	str	r3, [r7, #68]	; 0x44
 80034c4:	e014      	b.n	80034f0 <CRYP_GCMCCM_SetHeaderPhase+0x294>
      {
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699a      	ldr	r2, [r3, #24]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	18d2      	adds	r2, r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6812      	ldr	r2, [r2, #0]
 80034da:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	3301      	adds	r3, #1
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	879a      	strh	r2, [r3, #60]	; 0x3c
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 80034ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ec:	3301      	adds	r3, #1
 80034ee:	647b      	str	r3, [r7, #68]	; 0x44
 80034f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034f2:	089b      	lsrs	r3, r3, #2
 80034f4:	2203      	movs	r2, #3
 80034f6:	4013      	ands	r3, r2
 80034f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d3e3      	bcc.n	80034c6 <CRYP_GCMCCM_SetHeaderPhase+0x26a>
      }
      /* If the header size is a multiple of words */
      if ((size_in_bytes % 4U) == 0U)
 80034fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003500:	2203      	movs	r2, #3
 8003502:	4013      	ands	r3, r2
 8003504:	d10b      	bne.n	800351e <CRYP_GCMCCM_SetHeaderPhase+0x2c2>
      {
        /* Pad the data with zeros to have a complete block */
        while (loopcounter < 4U)
 8003506:	e006      	b.n	8003516 <CRYP_GCMCCM_SetHeaderPhase+0x2ba>
        {
          hcryp->Instance->DINR = 0x0U;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2200      	movs	r2, #0
 800350e:	609a      	str	r2, [r3, #8]
          loopcounter++;
 8003510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003512:	3301      	adds	r3, #1
 8003514:	647b      	str	r3, [r7, #68]	; 0x44
        while (loopcounter < 4U)
 8003516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003518:	2b03      	cmp	r3, #3
 800351a:	d9f5      	bls.n	8003508 <CRYP_GCMCCM_SetHeaderPhase+0x2ac>
 800351c:	e028      	b.n	8003570 <CRYP_GCMCCM_SetHeaderPhase+0x314>
        }
      }
      else
      {
         /* Enter last bytes, padded with zeros */
         tmp =  *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699a      	ldr	r2, [r3, #24]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003526:	b29b      	uxth	r3, r3
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	18d3      	adds	r3, r2, r3
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	63fb      	str	r3, [r7, #60]	; 0x3c
         tmp &= mask[(hcryp->Init.DataType * 2U) + (size_in_bytes % 4U)];
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	005a      	lsls	r2, r3, #1
 8003536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003538:	2103      	movs	r1, #3
 800353a:	400b      	ands	r3, r1
 800353c:	18d2      	adds	r2, r2, r3
 800353e:	230c      	movs	r3, #12
 8003540:	18fb      	adds	r3, r7, r3
 8003542:	0092      	lsls	r2, r2, #2
 8003544:	58d2      	ldr	r2, [r2, r3]
 8003546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003548:	4013      	ands	r3, r2
 800354a:	63fb      	str	r3, [r7, #60]	; 0x3c
         hcryp->Instance->DINR = tmp;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003552:	609a      	str	r2, [r3, #8]
         loopcounter++;
 8003554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003556:	3301      	adds	r3, #1
 8003558:	647b      	str	r3, [r7, #68]	; 0x44
         /* Pad the data with zeros to have a complete block */
         while (loopcounter < 4U)
 800355a:	e006      	b.n	800356a <CRYP_GCMCCM_SetHeaderPhase+0x30e>
         {
           hcryp->Instance->DINR = 0x0U;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2200      	movs	r2, #0
 8003562:	609a      	str	r2, [r3, #8]
           loopcounter++;
 8003564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003566:	3301      	adds	r3, #1
 8003568:	647b      	str	r3, [r7, #68]	; 0x44
         while (loopcounter < 4U)
 800356a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800356c:	2b03      	cmp	r3, #3
 800356e:	d9f5      	bls.n	800355c <CRYP_GCMCCM_SetHeaderPhase+0x300>
         }
      }

      if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	0011      	movs	r1, r2
 8003576:	0018      	movs	r0, r3
 8003578:	f000 f84e 	bl	8003618 <CRYP_WaitOnCCFlag>
 800357c:	1e03      	subs	r3, r0, #0
 800357e:	d017      	beq.n	80035b0 <CRYP_GCMCCM_SetHeaderPhase+0x354>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2101      	movs	r1, #1
 800358c:	438a      	bics	r2, r1
 800358e:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003594:	2210      	movs	r2, #16
 8003596:	431a      	orrs	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	655a      	str	r2, [r3, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2251      	movs	r2, #81	; 0x51
 80035a0:	2101      	movs	r1, #1
 80035a2:	5499      	strb	r1, [r3, r2]

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2250      	movs	r2, #80	; 0x50
 80035a8:	2100      	movs	r1, #0
 80035aa:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e02d      	b.n	800360c <CRYP_GCMCCM_SetHeaderPhase+0x3b0>
      }
      /* Clear CCF flag */
      __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2180      	movs	r1, #128	; 0x80
 80035bc:	430a      	orrs	r2, r1
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	e023      	b.n	800360a <CRYP_GCMCCM_SetHeaderPhase+0x3ae>
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	08009328 	.word	0x08009328
 80035c8:	ffff9fff 	.word	0xffff9fff
    }
  }
  else
  {
    /*Workaround 1: only AES, before re-enabling the peripheral, datatype can be configured.*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE, hcryp->Init.DataType);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2206      	movs	r2, #6
 80035d4:	4393      	bics	r3, r2
 80035d6:	0019      	movs	r1, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	601a      	str	r2, [r3, #0]

    /* Select header phase */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a0a      	ldr	r2, [pc, #40]	; (8003614 <CRYP_GCMCCM_SetHeaderPhase+0x3b8>)
 80035ec:	401a      	ands	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2180      	movs	r1, #128	; 0x80
 80035f4:	0189      	lsls	r1, r1, #6
 80035f6:	430a      	orrs	r2, r1
 80035f8:	601a      	str	r2, [r3, #0]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2101      	movs	r1, #1
 8003606:	430a      	orrs	r2, r1
 8003608:	601a      	str	r2, [r3, #0]
  }
  /* Return function status */
  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	0018      	movs	r0, r3
 800360e:	46bd      	mov	sp, r7
 8003610:	b013      	add	sp, #76	; 0x4c
 8003612:	bd90      	pop	{r4, r7, pc}
 8003614:	ffff9fff 	.word	0xffff9fff

08003618 <CRYP_WaitOnCCFlag>:
  * @param  Timeout Timeout duration.
  * @note   This function can only be used in thread mode.
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_WaitOnCCFlag(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8003622:	f7fe fc9f 	bl	8001f64 <HAL_GetTick>
 8003626:	0003      	movs	r3, r0
 8003628:	60fb      	str	r3, [r7, #12]

  while (HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 800362a:	e00f      	b.n	800364c <CRYP_WaitOnCCFlag+0x34>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	3301      	adds	r3, #1
 8003630:	d00c      	beq.n	800364c <CRYP_WaitOnCCFlag+0x34>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003632:	f7fe fc97 	bl	8001f64 <HAL_GetTick>
 8003636:	0002      	movs	r2, r0
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	429a      	cmp	r2, r3
 8003640:	d302      	bcc.n	8003648 <CRYP_WaitOnCCFlag+0x30>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <CRYP_WaitOnCCFlag+0x34>
      {
        return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e006      	b.n	800365a <CRYP_WaitOnCCFlag+0x42>
  while (HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	4013      	ands	r3, r2
 8003656:	d0e9      	beq.n	800362c <CRYP_WaitOnCCFlag+0x14>
      }
    }
  }
  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	0018      	movs	r0, r3
 800365c:	46bd      	mov	sp, r7
 800365e:	b004      	add	sp, #16
 8003660:	bd80      	pop	{r7, pc}
	...

08003664 <HAL_FLASH_Program>:
  *               are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003664:	b5b0      	push	{r4, r5, r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	603a      	str	r2, [r7, #0]
 8003670:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003672:	4b22      	ldr	r3, [pc, #136]	; (80036fc <HAL_FLASH_Program+0x98>)
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d101      	bne.n	800367e <HAL_FLASH_Program+0x1a>
 800367a:	2302      	movs	r3, #2
 800367c:	e03a      	b.n	80036f4 <HAL_FLASH_Program+0x90>
 800367e:	4b1f      	ldr	r3, [pc, #124]	; (80036fc <HAL_FLASH_Program+0x98>)
 8003680:	2201      	movs	r2, #1
 8003682:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003684:	4b1d      	ldr	r3, [pc, #116]	; (80036fc <HAL_FLASH_Program+0x98>)
 8003686:	2200      	movs	r2, #0
 8003688:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800368a:	2517      	movs	r5, #23
 800368c:	197c      	adds	r4, r7, r5
 800368e:	23fa      	movs	r3, #250	; 0xfa
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	0018      	movs	r0, r3
 8003694:	f000 f876 	bl	8003784 <FLASH_WaitForLastOperation>
 8003698:	0003      	movs	r3, r0
 800369a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800369c:	197b      	adds	r3, r7, r5
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d121      	bne.n	80036e8 <HAL_FLASH_Program+0x84>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d108      	bne.n	80036bc <HAL_FLASH_Program+0x58>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	687c      	ldr	r4, [r7, #4]
 80036ae:	68b9      	ldr	r1, [r7, #8]
 80036b0:	001a      	movs	r2, r3
 80036b2:	0023      	movs	r3, r4
 80036b4:	0008      	movs	r0, r1
 80036b6:	f000 f8b3 	bl	8003820 <FLASH_Program_DoubleWord>
 80036ba:	e005      	b.n	80036c8 <HAL_FLASH_Program+0x64>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	0011      	movs	r1, r2
 80036c2:	0018      	movs	r0, r3
 80036c4:	f005 fd90 	bl	80091e8 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80036c8:	2317      	movs	r3, #23
 80036ca:	18fc      	adds	r4, r7, r3
 80036cc:	23fa      	movs	r3, #250	; 0xfa
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	0018      	movs	r0, r3
 80036d2:	f000 f857 	bl	8003784 <FLASH_WaitForLastOperation>
 80036d6:	0003      	movs	r3, r0
 80036d8:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80036da:	4b09      	ldr	r3, [pc, #36]	; (8003700 <HAL_FLASH_Program+0x9c>)
 80036dc:	695a      	ldr	r2, [r3, #20]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	43d9      	mvns	r1, r3
 80036e2:	4b07      	ldr	r3, [pc, #28]	; (8003700 <HAL_FLASH_Program+0x9c>)
 80036e4:	400a      	ands	r2, r1
 80036e6:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80036e8:	4b04      	ldr	r3, [pc, #16]	; (80036fc <HAL_FLASH_Program+0x98>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80036ee:	2317      	movs	r3, #23
 80036f0:	18fb      	adds	r3, r7, r3
 80036f2:	781b      	ldrb	r3, [r3, #0]
}
 80036f4:	0018      	movs	r0, r3
 80036f6:	46bd      	mov	sp, r7
 80036f8:	b006      	add	sp, #24
 80036fa:	bdb0      	pop	{r4, r5, r7, pc}
 80036fc:	20000528 	.word	0x20000528
 8003700:	40022000 	.word	0x40022000

08003704 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800370a:	1dfb      	adds	r3, r7, #7
 800370c:	2200      	movs	r2, #0
 800370e:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8003710:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <HAL_FLASH_Unlock+0x3c>)
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	2b00      	cmp	r3, #0
 8003716:	da0c      	bge.n	8003732 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003718:	4b09      	ldr	r3, [pc, #36]	; (8003740 <HAL_FLASH_Unlock+0x3c>)
 800371a:	4a0a      	ldr	r2, [pc, #40]	; (8003744 <HAL_FLASH_Unlock+0x40>)
 800371c:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800371e:	4b08      	ldr	r3, [pc, #32]	; (8003740 <HAL_FLASH_Unlock+0x3c>)
 8003720:	4a09      	ldr	r2, [pc, #36]	; (8003748 <HAL_FLASH_Unlock+0x44>)
 8003722:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8003724:	4b06      	ldr	r3, [pc, #24]	; (8003740 <HAL_FLASH_Unlock+0x3c>)
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	2b00      	cmp	r3, #0
 800372a:	da02      	bge.n	8003732 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 800372c:	1dfb      	adds	r3, r7, #7
 800372e:	2201      	movs	r2, #1
 8003730:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8003732:	1dfb      	adds	r3, r7, #7
 8003734:	781b      	ldrb	r3, [r3, #0]
}
 8003736:	0018      	movs	r0, r3
 8003738:	46bd      	mov	sp, r7
 800373a:	b002      	add	sp, #8
 800373c:	bd80      	pop	{r7, pc}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	40022000 	.word	0x40022000
 8003744:	45670123 	.word	0x45670123
 8003748:	cdef89ab 	.word	0xcdef89ab

0800374c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8003752:	1dfb      	adds	r3, r7, #7
 8003754:	2201      	movs	r2, #1
 8003756:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003758:	4b09      	ldr	r3, [pc, #36]	; (8003780 <HAL_FLASH_Lock+0x34>)
 800375a:	695a      	ldr	r2, [r3, #20]
 800375c:	4b08      	ldr	r3, [pc, #32]	; (8003780 <HAL_FLASH_Lock+0x34>)
 800375e:	2180      	movs	r1, #128	; 0x80
 8003760:	0609      	lsls	r1, r1, #24
 8003762:	430a      	orrs	r2, r1
 8003764:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8003766:	4b06      	ldr	r3, [pc, #24]	; (8003780 <HAL_FLASH_Lock+0x34>)
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	2b00      	cmp	r3, #0
 800376c:	da02      	bge.n	8003774 <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 800376e:	1dfb      	adds	r3, r7, #7
 8003770:	2200      	movs	r2, #0
 8003772:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003774:	1dfb      	adds	r3, r7, #7
 8003776:	781b      	ldrb	r3, [r3, #0]
}
 8003778:	0018      	movs	r0, r3
 800377a:	46bd      	mov	sp, r7
 800377c:	b002      	add	sp, #8
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40022000 	.word	0x40022000

08003784 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 800378c:	f7fe fbea 	bl	8001f64 <HAL_GetTick>
 8003790:	0002      	movs	r2, r0
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	189b      	adds	r3, r3, r2
 8003796:	60fb      	str	r3, [r7, #12]

  /* Wait if any operation is ongoing */
#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 8003798:	2380      	movs	r3, #128	; 0x80
 800379a:	025b      	lsls	r3, r3, #9
 800379c:	60bb      	str	r3, [r7, #8]
#endif

  while ((FLASH->SR & error) != 0x00U)
 800379e:	e007      	b.n	80037b0 <FLASH_WaitForLastOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
 80037a0:	f7fe fbe0 	bl	8001f64 <HAL_GetTick>
 80037a4:	0002      	movs	r2, r0
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d801      	bhi.n	80037b0 <FLASH_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e02a      	b.n	8003806 <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & error) != 0x00U)
 80037b0:	4b17      	ldr	r3, [pc, #92]	; (8003810 <FLASH_WaitForLastOperation+0x8c>)
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	4013      	ands	r3, r2
 80037b8:	d1f2      	bne.n	80037a0 <FLASH_WaitForLastOperation+0x1c>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 80037ba:	4b15      	ldr	r3, [pc, #84]	; (8003810 <FLASH_WaitForLastOperation+0x8c>)
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	4a15      	ldr	r2, [pc, #84]	; (8003814 <FLASH_WaitForLastOperation+0x90>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 80037c4:	4b12      	ldr	r3, [pc, #72]	; (8003810 <FLASH_WaitForLastOperation+0x8c>)
 80037c6:	4a14      	ldr	r2, [pc, #80]	; (8003818 <FLASH_WaitForLastOperation+0x94>)
 80037c8:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d004      	beq.n	80037da <FLASH_WaitForLastOperation+0x56>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80037d0:	4b12      	ldr	r3, [pc, #72]	; (800381c <FLASH_WaitForLastOperation+0x98>)
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e015      	b.n	8003806 <FLASH_WaitForLastOperation+0x82>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 80037da:	f7fe fbc3 	bl	8001f64 <HAL_GetTick>
 80037de:	0002      	movs	r2, r0
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	189b      	adds	r3, r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]

  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 80037e6:	e007      	b.n	80037f8 <FLASH_WaitForLastOperation+0x74>
  {
    if (HAL_GetTick() >= timeout)
 80037e8:	f7fe fbbc 	bl	8001f64 <HAL_GetTick>
 80037ec:	0002      	movs	r2, r0
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d801      	bhi.n	80037f8 <FLASH_WaitForLastOperation+0x74>
    {
      return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e006      	b.n	8003806 <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 80037f8:	4b05      	ldr	r3, [pc, #20]	; (8003810 <FLASH_WaitForLastOperation+0x8c>)
 80037fa:	691a      	ldr	r2, [r3, #16]
 80037fc:	2380      	movs	r3, #128	; 0x80
 80037fe:	02db      	lsls	r3, r3, #11
 8003800:	4013      	ands	r3, r2
 8003802:	d1f1      	bne.n	80037e8 <FLASH_WaitForLastOperation+0x64>
    }
  }

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	0018      	movs	r0, r3
 8003808:	46bd      	mov	sp, r7
 800380a:	b004      	add	sp, #16
 800380c:	bd80      	pop	{r7, pc}
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	40022000 	.word	0x40022000
 8003814:	0000c3fa 	.word	0x0000c3fa
 8003818:	0000c3fb 	.word	0x0000c3fb
 800381c:	20000528 	.word	0x20000528

08003820 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003820:	b5b0      	push	{r4, r5, r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	603a      	str	r2, [r7, #0]
 800382a:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800382c:	4b0b      	ldr	r3, [pc, #44]	; (800385c <FLASH_Program_DoubleWord+0x3c>)
 800382e:	695a      	ldr	r2, [r3, #20]
 8003830:	4b0a      	ldr	r3, [pc, #40]	; (800385c <FLASH_Program_DoubleWord+0x3c>)
 8003832:	2101      	movs	r1, #1
 8003834:	430a      	orrs	r2, r1
 8003836:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800383e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	001c      	movs	r4, r3
 8003846:	2300      	movs	r3, #0
 8003848:	001d      	movs	r5, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	3304      	adds	r3, #4
 800384e:	0022      	movs	r2, r4
 8003850:	601a      	str	r2, [r3, #0]
}
 8003852:	46c0      	nop			; (mov r8, r8)
 8003854:	46bd      	mov	sp, r7
 8003856:	b004      	add	sp, #16
 8003858:	bdb0      	pop	{r4, r5, r7, pc}
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	40022000 	.word	0x40022000

08003860 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003860:	b5b0      	push	{r4, r5, r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800386a:	4b35      	ldr	r3, [pc, #212]	; (8003940 <HAL_FLASHEx_Erase+0xe0>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d101      	bne.n	8003876 <HAL_FLASHEx_Erase+0x16>
 8003872:	2302      	movs	r3, #2
 8003874:	e05f      	b.n	8003936 <HAL_FLASHEx_Erase+0xd6>
 8003876:	4b32      	ldr	r3, [pc, #200]	; (8003940 <HAL_FLASHEx_Erase+0xe0>)
 8003878:	2201      	movs	r2, #1
 800387a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800387c:	4b30      	ldr	r3, [pc, #192]	; (8003940 <HAL_FLASHEx_Erase+0xe0>)
 800387e:	2200      	movs	r2, #0
 8003880:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003882:	250f      	movs	r5, #15
 8003884:	197c      	adds	r4, r7, r5
 8003886:	23fa      	movs	r3, #250	; 0xfa
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	0018      	movs	r0, r3
 800388c:	f7ff ff7a 	bl	8003784 <FLASH_WaitForLastOperation>
 8003890:	0003      	movs	r3, r0
 8003892:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8003894:	197b      	adds	r3, r7, r5
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d146      	bne.n	800392a <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2204      	movs	r2, #4
 80038a0:	605a      	str	r2, [r3, #4]
#endif

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d10e      	bne.n	80038c8 <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	0018      	movs	r0, r3
 80038b0:	f000 f84a 	bl	8003948 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80038b4:	230f      	movs	r3, #15
 80038b6:	18fc      	adds	r4, r7, r3
 80038b8:	23fa      	movs	r3, #250	; 0xfa
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	0018      	movs	r0, r3
 80038be:	f7ff ff61 	bl	8003784 <FLASH_WaitForLastOperation>
 80038c2:	0003      	movs	r3, r0
 80038c4:	7023      	strb	r3, [r4, #0]
 80038c6:	e030      	b.n	800392a <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	2201      	movs	r2, #1
 80038cc:	4252      	negs	r2, r2
 80038ce:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	60bb      	str	r3, [r7, #8]
 80038d6:	e01a      	b.n	800390e <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	0011      	movs	r1, r2
 80038e0:	0018      	movs	r0, r3
 80038e2:	f000 f845 	bl	8003970 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80038e6:	250f      	movs	r5, #15
 80038e8:	197c      	adds	r4, r7, r5
 80038ea:	23fa      	movs	r3, #250	; 0xfa
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	0018      	movs	r0, r3
 80038f0:	f7ff ff48 	bl	8003784 <FLASH_WaitForLastOperation>
 80038f4:	0003      	movs	r3, r0
 80038f6:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 80038f8:	197b      	adds	r3, r7, r5
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	601a      	str	r2, [r3, #0]
          break;
 8003906:	e00a      	b.n	800391e <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	3301      	adds	r3, #1
 800390c:	60bb      	str	r3, [r7, #8]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	18d3      	adds	r3, r2, r3
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	429a      	cmp	r2, r3
 800391c:	d3dc      	bcc.n	80038d8 <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800391e:	4b09      	ldr	r3, [pc, #36]	; (8003944 <HAL_FLASHEx_Erase+0xe4>)
 8003920:	695a      	ldr	r2, [r3, #20]
 8003922:	4b08      	ldr	r3, [pc, #32]	; (8003944 <HAL_FLASHEx_Erase+0xe4>)
 8003924:	2102      	movs	r1, #2
 8003926:	438a      	bics	r2, r1
 8003928:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800392a:	4b05      	ldr	r3, [pc, #20]	; (8003940 <HAL_FLASHEx_Erase+0xe0>)
 800392c:	2200      	movs	r2, #0
 800392e:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8003930:	230f      	movs	r3, #15
 8003932:	18fb      	adds	r3, r7, r3
 8003934:	781b      	ldrb	r3, [r3, #0]
}
 8003936:	0018      	movs	r0, r3
 8003938:	46bd      	mov	sp, r7
 800393a:	b004      	add	sp, #16
 800393c:	bdb0      	pop	{r4, r5, r7, pc}
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	20000528 	.word	0x20000528
 8003944:	40022000 	.word	0x40022000

08003948 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8003950:	4b06      	ldr	r3, [pc, #24]	; (800396c <FLASH_MassErase+0x24>)
 8003952:	695a      	ldr	r2, [r3, #20]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	431a      	orrs	r2, r3
 8003958:	4b04      	ldr	r3, [pc, #16]	; (800396c <FLASH_MassErase+0x24>)
 800395a:	2180      	movs	r1, #128	; 0x80
 800395c:	0249      	lsls	r1, r1, #9
 800395e:	430a      	orrs	r2, r1
 8003960:	615a      	str	r2, [r3, #20]
}
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	46bd      	mov	sp, r7
 8003966:	b002      	add	sp, #8
 8003968:	bd80      	pop	{r7, pc}
 800396a:	46c0      	nop			; (mov r8, r8)
 800396c:	40022000 	.word	0x40022000

08003970 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 800397a:	4b08      	ldr	r3, [pc, #32]	; (800399c <FLASH_PageErase+0x2c>)
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	4a08      	ldr	r2, [pc, #32]	; (80039a0 <FLASH_PageErase+0x30>)
 8003980:	4013      	ands	r3, r2
 8003982:	60fb      	str	r3, [r7, #12]
    tmp &= ~FLASH_CR_BKER;
  }
#endif

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	00da      	lsls	r2, r3, #3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	431a      	orrs	r2, r3
 800398c:	4b03      	ldr	r3, [pc, #12]	; (800399c <FLASH_PageErase+0x2c>)
 800398e:	4905      	ldr	r1, [pc, #20]	; (80039a4 <FLASH_PageErase+0x34>)
 8003990:	430a      	orrs	r2, r1
 8003992:	615a      	str	r2, [r3, #20]
}
 8003994:	46c0      	nop			; (mov r8, r8)
 8003996:	46bd      	mov	sp, r7
 8003998:	b004      	add	sp, #16
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40022000 	.word	0x40022000
 80039a0:	fffffe07 	.word	0xfffffe07
 80039a4:	00010002 	.word	0x00010002

080039a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039b2:	2300      	movs	r3, #0
 80039b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039b6:	e147      	b.n	8003c48 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2101      	movs	r1, #1
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4091      	lsls	r1, r2
 80039c2:	000a      	movs	r2, r1
 80039c4:	4013      	ands	r3, r2
 80039c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d100      	bne.n	80039d0 <HAL_GPIO_Init+0x28>
 80039ce:	e138      	b.n	8003c42 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d00b      	beq.n	80039f0 <HAL_GPIO_Init+0x48>
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d007      	beq.n	80039f0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039e4:	2b11      	cmp	r3, #17
 80039e6:	d003      	beq.n	80039f0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	2b12      	cmp	r3, #18
 80039ee:	d130      	bne.n	8003a52 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	2203      	movs	r2, #3
 80039fc:	409a      	lsls	r2, r3
 80039fe:	0013      	movs	r3, r2
 8003a00:	43da      	mvns	r2, r3
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	4013      	ands	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	68da      	ldr	r2, [r3, #12]
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	409a      	lsls	r2, r3
 8003a12:	0013      	movs	r3, r2
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a26:	2201      	movs	r2, #1
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	409a      	lsls	r2, r3
 8003a2c:	0013      	movs	r3, r2
 8003a2e:	43da      	mvns	r2, r3
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	4013      	ands	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	091b      	lsrs	r3, r3, #4
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	401a      	ands	r2, r3
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	409a      	lsls	r2, r3
 8003a44:	0013      	movs	r3, r2
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	2203      	movs	r2, #3
 8003a5e:	409a      	lsls	r2, r3
 8003a60:	0013      	movs	r3, r2
 8003a62:	43da      	mvns	r2, r3
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	4013      	ands	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	409a      	lsls	r2, r3
 8003a74:	0013      	movs	r3, r2
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d003      	beq.n	8003a92 <HAL_GPIO_Init+0xea>
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2b12      	cmp	r3, #18
 8003a90:	d123      	bne.n	8003ada <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	08da      	lsrs	r2, r3, #3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3208      	adds	r2, #8
 8003a9a:	0092      	lsls	r2, r2, #2
 8003a9c:	58d3      	ldr	r3, [r2, r3]
 8003a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2207      	movs	r2, #7
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	220f      	movs	r2, #15
 8003aaa:	409a      	lsls	r2, r3
 8003aac:	0013      	movs	r3, r2
 8003aae:	43da      	mvns	r2, r3
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	691a      	ldr	r2, [r3, #16]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2107      	movs	r1, #7
 8003abe:	400b      	ands	r3, r1
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	409a      	lsls	r2, r3
 8003ac4:	0013      	movs	r3, r2
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	08da      	lsrs	r2, r3, #3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3208      	adds	r2, #8
 8003ad4:	0092      	lsls	r2, r2, #2
 8003ad6:	6939      	ldr	r1, [r7, #16]
 8003ad8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	2203      	movs	r2, #3
 8003ae6:	409a      	lsls	r2, r3
 8003ae8:	0013      	movs	r3, r2
 8003aea:	43da      	mvns	r2, r3
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	4013      	ands	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2203      	movs	r2, #3
 8003af8:	401a      	ands	r2, r3
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	409a      	lsls	r2, r3
 8003b00:	0013      	movs	r3, r2
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	2380      	movs	r3, #128	; 0x80
 8003b14:	055b      	lsls	r3, r3, #21
 8003b16:	4013      	ands	r3, r2
 8003b18:	d100      	bne.n	8003b1c <HAL_GPIO_Init+0x174>
 8003b1a:	e092      	b.n	8003c42 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003b1c:	4a50      	ldr	r2, [pc, #320]	; (8003c60 <HAL_GPIO_Init+0x2b8>)
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	089b      	lsrs	r3, r3, #2
 8003b22:	3318      	adds	r3, #24
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	589b      	ldr	r3, [r3, r2]
 8003b28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2203      	movs	r2, #3
 8003b2e:	4013      	ands	r3, r2
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	220f      	movs	r2, #15
 8003b34:	409a      	lsls	r2, r3
 8003b36:	0013      	movs	r3, r2
 8003b38:	43da      	mvns	r2, r3
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	23a0      	movs	r3, #160	; 0xa0
 8003b44:	05db      	lsls	r3, r3, #23
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d013      	beq.n	8003b72 <HAL_GPIO_Init+0x1ca>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a45      	ldr	r2, [pc, #276]	; (8003c64 <HAL_GPIO_Init+0x2bc>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00d      	beq.n	8003b6e <HAL_GPIO_Init+0x1c6>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a44      	ldr	r2, [pc, #272]	; (8003c68 <HAL_GPIO_Init+0x2c0>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d007      	beq.n	8003b6a <HAL_GPIO_Init+0x1c2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a43      	ldr	r2, [pc, #268]	; (8003c6c <HAL_GPIO_Init+0x2c4>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d101      	bne.n	8003b66 <HAL_GPIO_Init+0x1be>
 8003b62:	2303      	movs	r3, #3
 8003b64:	e006      	b.n	8003b74 <HAL_GPIO_Init+0x1cc>
 8003b66:	2305      	movs	r3, #5
 8003b68:	e004      	b.n	8003b74 <HAL_GPIO_Init+0x1cc>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	e002      	b.n	8003b74 <HAL_GPIO_Init+0x1cc>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e000      	b.n	8003b74 <HAL_GPIO_Init+0x1cc>
 8003b72:	2300      	movs	r3, #0
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	2103      	movs	r1, #3
 8003b78:	400a      	ands	r2, r1
 8003b7a:	00d2      	lsls	r2, r2, #3
 8003b7c:	4093      	lsls	r3, r2
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003b84:	4936      	ldr	r1, [pc, #216]	; (8003c60 <HAL_GPIO_Init+0x2b8>)
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	089b      	lsrs	r3, r3, #2
 8003b8a:	3318      	adds	r3, #24
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003b92:	4a33      	ldr	r2, [pc, #204]	; (8003c60 <HAL_GPIO_Init+0x2b8>)
 8003b94:	2380      	movs	r3, #128	; 0x80
 8003b96:	58d3      	ldr	r3, [r2, r3]
 8003b98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	43da      	mvns	r2, r3
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	2380      	movs	r3, #128	; 0x80
 8003baa:	025b      	lsls	r3, r3, #9
 8003bac:	4013      	ands	r3, r2
 8003bae:	d003      	beq.n	8003bb8 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003bb8:	4929      	ldr	r1, [pc, #164]	; (8003c60 <HAL_GPIO_Init+0x2b8>)
 8003bba:	2280      	movs	r2, #128	; 0x80
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8003bc0:	4a27      	ldr	r2, [pc, #156]	; (8003c60 <HAL_GPIO_Init+0x2b8>)
 8003bc2:	2384      	movs	r3, #132	; 0x84
 8003bc4:	58d3      	ldr	r3, [r2, r3]
 8003bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	43da      	mvns	r2, r3
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	2380      	movs	r3, #128	; 0x80
 8003bd8:	029b      	lsls	r3, r3, #10
 8003bda:	4013      	ands	r3, r2
 8003bdc:	d003      	beq.n	8003be6 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003be6:	491e      	ldr	r1, [pc, #120]	; (8003c60 <HAL_GPIO_Init+0x2b8>)
 8003be8:	2284      	movs	r2, #132	; 0x84
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bee:	4b1c      	ldr	r3, [pc, #112]	; (8003c60 <HAL_GPIO_Init+0x2b8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	43da      	mvns	r2, r3
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	2380      	movs	r3, #128	; 0x80
 8003c04:	035b      	lsls	r3, r3, #13
 8003c06:	4013      	ands	r3, r2
 8003c08:	d003      	beq.n	8003c12 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c12:	4b13      	ldr	r3, [pc, #76]	; (8003c60 <HAL_GPIO_Init+0x2b8>)
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003c18:	4b11      	ldr	r3, [pc, #68]	; (8003c60 <HAL_GPIO_Init+0x2b8>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	43da      	mvns	r2, r3
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	4013      	ands	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	2380      	movs	r3, #128	; 0x80
 8003c2e:	039b      	lsls	r3, r3, #14
 8003c30:	4013      	ands	r3, r2
 8003c32:	d003      	beq.n	8003c3c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c3c:	4b08      	ldr	r3, [pc, #32]	; (8003c60 <HAL_GPIO_Init+0x2b8>)
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	3301      	adds	r3, #1
 8003c46:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	40da      	lsrs	r2, r3
 8003c50:	1e13      	subs	r3, r2, #0
 8003c52:	d000      	beq.n	8003c56 <HAL_GPIO_Init+0x2ae>
 8003c54:	e6b0      	b.n	80039b8 <HAL_GPIO_Init+0x10>
  }
}
 8003c56:	46c0      	nop			; (mov r8, r8)
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	b006      	add	sp, #24
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	40021800 	.word	0x40021800
 8003c64:	50000400 	.word	0x50000400
 8003c68:	50000800 	.word	0x50000800
 8003c6c:	50000c00 	.word	0x50000c00

08003c70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	000a      	movs	r2, r1
 8003c7a:	1cbb      	adds	r3, r7, #2
 8003c7c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	1cba      	adds	r2, r7, #2
 8003c84:	8812      	ldrh	r2, [r2, #0]
 8003c86:	4013      	ands	r3, r2
 8003c88:	d004      	beq.n	8003c94 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003c8a:	230f      	movs	r3, #15
 8003c8c:	18fb      	adds	r3, r7, r3
 8003c8e:	2201      	movs	r2, #1
 8003c90:	701a      	strb	r2, [r3, #0]
 8003c92:	e003      	b.n	8003c9c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c94:	230f      	movs	r3, #15
 8003c96:	18fb      	adds	r3, r7, r3
 8003c98:	2200      	movs	r2, #0
 8003c9a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003c9c:	230f      	movs	r3, #15
 8003c9e:	18fb      	adds	r3, r7, r3
 8003ca0:	781b      	ldrb	r3, [r3, #0]
}
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	b004      	add	sp, #16
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b082      	sub	sp, #8
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
 8003cb2:	0008      	movs	r0, r1
 8003cb4:	0011      	movs	r1, r2
 8003cb6:	1cbb      	adds	r3, r7, #2
 8003cb8:	1c02      	adds	r2, r0, #0
 8003cba:	801a      	strh	r2, [r3, #0]
 8003cbc:	1c7b      	adds	r3, r7, #1
 8003cbe:	1c0a      	adds	r2, r1, #0
 8003cc0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cc2:	1c7b      	adds	r3, r7, #1
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d004      	beq.n	8003cd4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cca:	1cbb      	adds	r3, r7, #2
 8003ccc:	881a      	ldrh	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cd2:	e003      	b.n	8003cdc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cd4:	1cbb      	adds	r3, r7, #2
 8003cd6:	881a      	ldrh	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cdc:	46c0      	nop			; (mov r8, r8)
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	b002      	add	sp, #8
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	000a      	movs	r2, r1
 8003cee:	1cbb      	adds	r3, r7, #2
 8003cf0:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003cf8:	1cbb      	adds	r3, r7, #2
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	041a      	lsls	r2, r3, #16
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	43db      	mvns	r3, r3
 8003d06:	1cb9      	adds	r1, r7, #2
 8003d08:	8809      	ldrh	r1, [r1, #0]
 8003d0a:	400b      	ands	r3, r1
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	619a      	str	r2, [r3, #24]
}
 8003d12:	46c0      	nop			; (mov r8, r8)
 8003d14:	46bd      	mov	sp, r7
 8003d16:	b004      	add	sp, #16
 8003d18:	bd80      	pop	{r7, pc}
	...

08003d1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	0002      	movs	r2, r0
 8003d24:	1dbb      	adds	r3, r7, #6
 8003d26:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003d28:	4b10      	ldr	r3, [pc, #64]	; (8003d6c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	1dba      	adds	r2, r7, #6
 8003d2e:	8812      	ldrh	r2, [r2, #0]
 8003d30:	4013      	ands	r3, r2
 8003d32:	d008      	beq.n	8003d46 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003d34:	4b0d      	ldr	r3, [pc, #52]	; (8003d6c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003d36:	1dba      	adds	r2, r7, #6
 8003d38:	8812      	ldrh	r2, [r2, #0]
 8003d3a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003d3c:	1dbb      	adds	r3, r7, #6
 8003d3e:	881b      	ldrh	r3, [r3, #0]
 8003d40:	0018      	movs	r0, r3
 8003d42:	f7fc ffe1 	bl	8000d08 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8003d46:	4b09      	ldr	r3, [pc, #36]	; (8003d6c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	1dba      	adds	r2, r7, #6
 8003d4c:	8812      	ldrh	r2, [r2, #0]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	d008      	beq.n	8003d64 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003d52:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003d54:	1dba      	adds	r2, r7, #6
 8003d56:	8812      	ldrh	r2, [r2, #0]
 8003d58:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003d5a:	1dbb      	adds	r3, r7, #6
 8003d5c:	881b      	ldrh	r3, [r3, #0]
 8003d5e:	0018      	movs	r0, r3
 8003d60:	f7fc ff9c 	bl	8000c9c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003d64:	46c0      	nop			; (mov r8, r8)
 8003d66:	46bd      	mov	sp, r7
 8003d68:	b002      	add	sp, #8
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40021800 	.word	0x40021800

08003d70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003d78:	4b19      	ldr	r3, [pc, #100]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a19      	ldr	r2, [pc, #100]	; (8003de4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	0019      	movs	r1, r3
 8003d82:	4b17      	ldr	r3, [pc, #92]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	2380      	movs	r3, #128	; 0x80
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d11f      	bne.n	8003dd4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8003d94:	4b14      	ldr	r3, [pc, #80]	; (8003de8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	0013      	movs	r3, r2
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	189b      	adds	r3, r3, r2
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	4912      	ldr	r1, [pc, #72]	; (8003dec <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003da2:	0018      	movs	r0, r3
 8003da4:	f7fc f9b0 	bl	8000108 <__udivsi3>
 8003da8:	0003      	movs	r3, r0
 8003daa:	3301      	adds	r3, #1
 8003dac:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dae:	e008      	b.n	8003dc2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	3b01      	subs	r3, #1
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	e001      	b.n	8003dc2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e009      	b.n	8003dd6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dc2:	4b07      	ldr	r3, [pc, #28]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003dc4:	695a      	ldr	r2, [r3, #20]
 8003dc6:	2380      	movs	r3, #128	; 0x80
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	401a      	ands	r2, r3
 8003dcc:	2380      	movs	r3, #128	; 0x80
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d0ed      	beq.n	8003db0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	b004      	add	sp, #16
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	40007000 	.word	0x40007000
 8003de4:	fffff9ff 	.word	0xfffff9ff
 8003de8:	20000000 	.word	0x20000000
 8003dec:	000f4240 	.word	0x000f4240

08003df0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b088      	sub	sp, #32
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e304      	b.n	800440c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2201      	movs	r2, #1
 8003e08:	4013      	ands	r3, r2
 8003e0a:	d100      	bne.n	8003e0e <HAL_RCC_OscConfig+0x1e>
 8003e0c:	e07c      	b.n	8003f08 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e0e:	4bc3      	ldr	r3, [pc, #780]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	2238      	movs	r2, #56	; 0x38
 8003e14:	4013      	ands	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e18:	4bc0      	ldr	r3, [pc, #768]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	2203      	movs	r2, #3
 8003e1e:	4013      	ands	r3, r2
 8003e20:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	2b10      	cmp	r3, #16
 8003e26:	d102      	bne.n	8003e2e <HAL_RCC_OscConfig+0x3e>
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	2b03      	cmp	r3, #3
 8003e2c:	d002      	beq.n	8003e34 <HAL_RCC_OscConfig+0x44>
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d10b      	bne.n	8003e4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e34:	4bb9      	ldr	r3, [pc, #740]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	2380      	movs	r3, #128	; 0x80
 8003e3a:	029b      	lsls	r3, r3, #10
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	d062      	beq.n	8003f06 <HAL_RCC_OscConfig+0x116>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d15e      	bne.n	8003f06 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e2df      	b.n	800440c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	2380      	movs	r3, #128	; 0x80
 8003e52:	025b      	lsls	r3, r3, #9
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d107      	bne.n	8003e68 <HAL_RCC_OscConfig+0x78>
 8003e58:	4bb0      	ldr	r3, [pc, #704]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	4baf      	ldr	r3, [pc, #700]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 8003e5e:	2180      	movs	r1, #128	; 0x80
 8003e60:	0249      	lsls	r1, r1, #9
 8003e62:	430a      	orrs	r2, r1
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	e020      	b.n	8003eaa <HAL_RCC_OscConfig+0xba>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	23a0      	movs	r3, #160	; 0xa0
 8003e6e:	02db      	lsls	r3, r3, #11
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d10e      	bne.n	8003e92 <HAL_RCC_OscConfig+0xa2>
 8003e74:	4ba9      	ldr	r3, [pc, #676]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	4ba8      	ldr	r3, [pc, #672]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 8003e7a:	2180      	movs	r1, #128	; 0x80
 8003e7c:	02c9      	lsls	r1, r1, #11
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	4ba6      	ldr	r3, [pc, #664]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	4ba5      	ldr	r3, [pc, #660]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 8003e88:	2180      	movs	r1, #128	; 0x80
 8003e8a:	0249      	lsls	r1, r1, #9
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	e00b      	b.n	8003eaa <HAL_RCC_OscConfig+0xba>
 8003e92:	4ba2      	ldr	r3, [pc, #648]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	4ba1      	ldr	r3, [pc, #644]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 8003e98:	49a1      	ldr	r1, [pc, #644]	; (8004120 <HAL_RCC_OscConfig+0x330>)
 8003e9a:	400a      	ands	r2, r1
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	4b9f      	ldr	r3, [pc, #636]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	4b9e      	ldr	r3, [pc, #632]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 8003ea4:	499f      	ldr	r1, [pc, #636]	; (8004124 <HAL_RCC_OscConfig+0x334>)
 8003ea6:	400a      	ands	r2, r1
 8003ea8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d014      	beq.n	8003edc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb2:	f7fe f857 	bl	8001f64 <HAL_GetTick>
 8003eb6:	0003      	movs	r3, r0
 8003eb8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ebc:	f7fe f852 	bl	8001f64 <HAL_GetTick>
 8003ec0:	0002      	movs	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b64      	cmp	r3, #100	; 0x64
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e29e      	b.n	800440c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ece:	4b93      	ldr	r3, [pc, #588]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	2380      	movs	r3, #128	; 0x80
 8003ed4:	029b      	lsls	r3, r3, #10
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	d0f0      	beq.n	8003ebc <HAL_RCC_OscConfig+0xcc>
 8003eda:	e015      	b.n	8003f08 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003edc:	f7fe f842 	bl	8001f64 <HAL_GetTick>
 8003ee0:	0003      	movs	r3, r0
 8003ee2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ee6:	f7fe f83d 	bl	8001f64 <HAL_GetTick>
 8003eea:	0002      	movs	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b64      	cmp	r3, #100	; 0x64
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e289      	b.n	800440c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ef8:	4b88      	ldr	r3, [pc, #544]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	2380      	movs	r3, #128	; 0x80
 8003efe:	029b      	lsls	r3, r3, #10
 8003f00:	4013      	ands	r3, r2
 8003f02:	d1f0      	bne.n	8003ee6 <HAL_RCC_OscConfig+0xf6>
 8003f04:	e000      	b.n	8003f08 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f06:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2202      	movs	r2, #2
 8003f0e:	4013      	ands	r3, r2
 8003f10:	d100      	bne.n	8003f14 <HAL_RCC_OscConfig+0x124>
 8003f12:	e099      	b.n	8004048 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f14:	4b81      	ldr	r3, [pc, #516]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	2238      	movs	r2, #56	; 0x38
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f1e:	4b7f      	ldr	r3, [pc, #508]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	2203      	movs	r2, #3
 8003f24:	4013      	ands	r3, r2
 8003f26:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	2b10      	cmp	r3, #16
 8003f2c:	d102      	bne.n	8003f34 <HAL_RCC_OscConfig+0x144>
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d002      	beq.n	8003f3a <HAL_RCC_OscConfig+0x14a>
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d135      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f3a:	4b78      	ldr	r3, [pc, #480]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	2380      	movs	r3, #128	; 0x80
 8003f40:	00db      	lsls	r3, r3, #3
 8003f42:	4013      	ands	r3, r2
 8003f44:	d005      	beq.n	8003f52 <HAL_RCC_OscConfig+0x162>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e25c      	b.n	800440c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f52:	4b72      	ldr	r3, [pc, #456]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	4a74      	ldr	r2, [pc, #464]	; (8004128 <HAL_RCC_OscConfig+0x338>)
 8003f58:	4013      	ands	r3, r2
 8003f5a:	0019      	movs	r1, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	021a      	lsls	r2, r3, #8
 8003f62:	4b6e      	ldr	r3, [pc, #440]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 8003f64:	430a      	orrs	r2, r1
 8003f66:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d112      	bne.n	8003f94 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003f6e:	4b6b      	ldr	r3, [pc, #428]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a6e      	ldr	r2, [pc, #440]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 8003f74:	4013      	ands	r3, r2
 8003f76:	0019      	movs	r1, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691a      	ldr	r2, [r3, #16]
 8003f7c:	4b67      	ldr	r3, [pc, #412]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003f82:	4b66      	ldr	r3, [pc, #408]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	0adb      	lsrs	r3, r3, #11
 8003f88:	2207      	movs	r2, #7
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	4a68      	ldr	r2, [pc, #416]	; (8004130 <HAL_RCC_OscConfig+0x340>)
 8003f8e:	40da      	lsrs	r2, r3
 8003f90:	4b68      	ldr	r3, [pc, #416]	; (8004134 <HAL_RCC_OscConfig+0x344>)
 8003f92:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003f94:	4b68      	ldr	r3, [pc, #416]	; (8004138 <HAL_RCC_OscConfig+0x348>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f7fd ff87 	bl	8001eac <HAL_InitTick>
 8003f9e:	1e03      	subs	r3, r0, #0
 8003fa0:	d051      	beq.n	8004046 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e232      	b.n	800440c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d030      	beq.n	8004010 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003fae:	4b5b      	ldr	r3, [pc, #364]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a5e      	ldr	r2, [pc, #376]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	0019      	movs	r1, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	691a      	ldr	r2, [r3, #16]
 8003fbc:	4b57      	ldr	r3, [pc, #348]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003fc2:	4b56      	ldr	r3, [pc, #344]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	4b55      	ldr	r3, [pc, #340]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 8003fc8:	2180      	movs	r1, #128	; 0x80
 8003fca:	0049      	lsls	r1, r1, #1
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd0:	f7fd ffc8 	bl	8001f64 <HAL_GetTick>
 8003fd4:	0003      	movs	r3, r0
 8003fd6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fd8:	e008      	b.n	8003fec <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fda:	f7fd ffc3 	bl	8001f64 <HAL_GetTick>
 8003fde:	0002      	movs	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e20f      	b.n	800440c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fec:	4b4b      	ldr	r3, [pc, #300]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	2380      	movs	r3, #128	; 0x80
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	d0f0      	beq.n	8003fda <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff8:	4b48      	ldr	r3, [pc, #288]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	4a4a      	ldr	r2, [pc, #296]	; (8004128 <HAL_RCC_OscConfig+0x338>)
 8003ffe:	4013      	ands	r3, r2
 8004000:	0019      	movs	r1, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	021a      	lsls	r2, r3, #8
 8004008:	4b44      	ldr	r3, [pc, #272]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 800400a:	430a      	orrs	r2, r1
 800400c:	605a      	str	r2, [r3, #4]
 800400e:	e01b      	b.n	8004048 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004010:	4b42      	ldr	r3, [pc, #264]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	4b41      	ldr	r3, [pc, #260]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 8004016:	4949      	ldr	r1, [pc, #292]	; (800413c <HAL_RCC_OscConfig+0x34c>)
 8004018:	400a      	ands	r2, r1
 800401a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401c:	f7fd ffa2 	bl	8001f64 <HAL_GetTick>
 8004020:	0003      	movs	r3, r0
 8004022:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004024:	e008      	b.n	8004038 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004026:	f7fd ff9d 	bl	8001f64 <HAL_GetTick>
 800402a:	0002      	movs	r2, r0
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d901      	bls.n	8004038 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e1e9      	b.n	800440c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004038:	4b38      	ldr	r3, [pc, #224]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	2380      	movs	r3, #128	; 0x80
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	4013      	ands	r3, r2
 8004042:	d1f0      	bne.n	8004026 <HAL_RCC_OscConfig+0x236>
 8004044:	e000      	b.n	8004048 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004046:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2208      	movs	r2, #8
 800404e:	4013      	ands	r3, r2
 8004050:	d047      	beq.n	80040e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004052:	4b32      	ldr	r3, [pc, #200]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	2238      	movs	r2, #56	; 0x38
 8004058:	4013      	ands	r3, r2
 800405a:	2b18      	cmp	r3, #24
 800405c:	d10a      	bne.n	8004074 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800405e:	4b2f      	ldr	r3, [pc, #188]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 8004060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004062:	2202      	movs	r2, #2
 8004064:	4013      	ands	r3, r2
 8004066:	d03c      	beq.n	80040e2 <HAL_RCC_OscConfig+0x2f2>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d138      	bne.n	80040e2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e1cb      	b.n	800440c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d019      	beq.n	80040b0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800407c:	4b27      	ldr	r3, [pc, #156]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 800407e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004080:	4b26      	ldr	r3, [pc, #152]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 8004082:	2101      	movs	r1, #1
 8004084:	430a      	orrs	r2, r1
 8004086:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004088:	f7fd ff6c 	bl	8001f64 <HAL_GetTick>
 800408c:	0003      	movs	r3, r0
 800408e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004092:	f7fd ff67 	bl	8001f64 <HAL_GetTick>
 8004096:	0002      	movs	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e1b3      	b.n	800440c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040a4:	4b1d      	ldr	r3, [pc, #116]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 80040a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040a8:	2202      	movs	r2, #2
 80040aa:	4013      	ands	r3, r2
 80040ac:	d0f1      	beq.n	8004092 <HAL_RCC_OscConfig+0x2a2>
 80040ae:	e018      	b.n	80040e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80040b0:	4b1a      	ldr	r3, [pc, #104]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 80040b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040b4:	4b19      	ldr	r3, [pc, #100]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 80040b6:	2101      	movs	r1, #1
 80040b8:	438a      	bics	r2, r1
 80040ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040bc:	f7fd ff52 	bl	8001f64 <HAL_GetTick>
 80040c0:	0003      	movs	r3, r0
 80040c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040c4:	e008      	b.n	80040d8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040c6:	f7fd ff4d 	bl	8001f64 <HAL_GetTick>
 80040ca:	0002      	movs	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d901      	bls.n	80040d8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e199      	b.n	800440c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040d8:	4b10      	ldr	r3, [pc, #64]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 80040da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040dc:	2202      	movs	r2, #2
 80040de:	4013      	ands	r3, r2
 80040e0:	d1f1      	bne.n	80040c6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2204      	movs	r2, #4
 80040e8:	4013      	ands	r3, r2
 80040ea:	d100      	bne.n	80040ee <HAL_RCC_OscConfig+0x2fe>
 80040ec:	e0c6      	b.n	800427c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ee:	231f      	movs	r3, #31
 80040f0:	18fb      	adds	r3, r7, r3
 80040f2:	2200      	movs	r2, #0
 80040f4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80040f6:	4b09      	ldr	r3, [pc, #36]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	2238      	movs	r2, #56	; 0x38
 80040fc:	4013      	ands	r3, r2
 80040fe:	2b20      	cmp	r3, #32
 8004100:	d11e      	bne.n	8004140 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004102:	4b06      	ldr	r3, [pc, #24]	; (800411c <HAL_RCC_OscConfig+0x32c>)
 8004104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004106:	2202      	movs	r2, #2
 8004108:	4013      	ands	r3, r2
 800410a:	d100      	bne.n	800410e <HAL_RCC_OscConfig+0x31e>
 800410c:	e0b6      	b.n	800427c <HAL_RCC_OscConfig+0x48c>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d000      	beq.n	8004118 <HAL_RCC_OscConfig+0x328>
 8004116:	e0b1      	b.n	800427c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e177      	b.n	800440c <HAL_RCC_OscConfig+0x61c>
 800411c:	40021000 	.word	0x40021000
 8004120:	fffeffff 	.word	0xfffeffff
 8004124:	fffbffff 	.word	0xfffbffff
 8004128:	ffff80ff 	.word	0xffff80ff
 800412c:	ffffc7ff 	.word	0xffffc7ff
 8004130:	00f42400 	.word	0x00f42400
 8004134:	20000000 	.word	0x20000000
 8004138:	20000004 	.word	0x20000004
 800413c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004140:	4bb4      	ldr	r3, [pc, #720]	; (8004414 <HAL_RCC_OscConfig+0x624>)
 8004142:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004144:	2380      	movs	r3, #128	; 0x80
 8004146:	055b      	lsls	r3, r3, #21
 8004148:	4013      	ands	r3, r2
 800414a:	d101      	bne.n	8004150 <HAL_RCC_OscConfig+0x360>
 800414c:	2301      	movs	r3, #1
 800414e:	e000      	b.n	8004152 <HAL_RCC_OscConfig+0x362>
 8004150:	2300      	movs	r3, #0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d011      	beq.n	800417a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004156:	4baf      	ldr	r3, [pc, #700]	; (8004414 <HAL_RCC_OscConfig+0x624>)
 8004158:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800415a:	4bae      	ldr	r3, [pc, #696]	; (8004414 <HAL_RCC_OscConfig+0x624>)
 800415c:	2180      	movs	r1, #128	; 0x80
 800415e:	0549      	lsls	r1, r1, #21
 8004160:	430a      	orrs	r2, r1
 8004162:	63da      	str	r2, [r3, #60]	; 0x3c
 8004164:	4bab      	ldr	r3, [pc, #684]	; (8004414 <HAL_RCC_OscConfig+0x624>)
 8004166:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004168:	2380      	movs	r3, #128	; 0x80
 800416a:	055b      	lsls	r3, r3, #21
 800416c:	4013      	ands	r3, r2
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004172:	231f      	movs	r3, #31
 8004174:	18fb      	adds	r3, r7, r3
 8004176:	2201      	movs	r2, #1
 8004178:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800417a:	4ba7      	ldr	r3, [pc, #668]	; (8004418 <HAL_RCC_OscConfig+0x628>)
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	2380      	movs	r3, #128	; 0x80
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	4013      	ands	r3, r2
 8004184:	d11a      	bne.n	80041bc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004186:	4ba4      	ldr	r3, [pc, #656]	; (8004418 <HAL_RCC_OscConfig+0x628>)
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	4ba3      	ldr	r3, [pc, #652]	; (8004418 <HAL_RCC_OscConfig+0x628>)
 800418c:	2180      	movs	r1, #128	; 0x80
 800418e:	0049      	lsls	r1, r1, #1
 8004190:	430a      	orrs	r2, r1
 8004192:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004194:	f7fd fee6 	bl	8001f64 <HAL_GetTick>
 8004198:	0003      	movs	r3, r0
 800419a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800419c:	e008      	b.n	80041b0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800419e:	f7fd fee1 	bl	8001f64 <HAL_GetTick>
 80041a2:	0002      	movs	r2, r0
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d901      	bls.n	80041b0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e12d      	b.n	800440c <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041b0:	4b99      	ldr	r3, [pc, #612]	; (8004418 <HAL_RCC_OscConfig+0x628>)
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	2380      	movs	r3, #128	; 0x80
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	4013      	ands	r3, r2
 80041ba:	d0f0      	beq.n	800419e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d106      	bne.n	80041d2 <HAL_RCC_OscConfig+0x3e2>
 80041c4:	4b93      	ldr	r3, [pc, #588]	; (8004414 <HAL_RCC_OscConfig+0x624>)
 80041c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041c8:	4b92      	ldr	r3, [pc, #584]	; (8004414 <HAL_RCC_OscConfig+0x624>)
 80041ca:	2101      	movs	r1, #1
 80041cc:	430a      	orrs	r2, r1
 80041ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80041d0:	e01c      	b.n	800420c <HAL_RCC_OscConfig+0x41c>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	2b05      	cmp	r3, #5
 80041d8:	d10c      	bne.n	80041f4 <HAL_RCC_OscConfig+0x404>
 80041da:	4b8e      	ldr	r3, [pc, #568]	; (8004414 <HAL_RCC_OscConfig+0x624>)
 80041dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041de:	4b8d      	ldr	r3, [pc, #564]	; (8004414 <HAL_RCC_OscConfig+0x624>)
 80041e0:	2104      	movs	r1, #4
 80041e2:	430a      	orrs	r2, r1
 80041e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80041e6:	4b8b      	ldr	r3, [pc, #556]	; (8004414 <HAL_RCC_OscConfig+0x624>)
 80041e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041ea:	4b8a      	ldr	r3, [pc, #552]	; (8004414 <HAL_RCC_OscConfig+0x624>)
 80041ec:	2101      	movs	r1, #1
 80041ee:	430a      	orrs	r2, r1
 80041f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80041f2:	e00b      	b.n	800420c <HAL_RCC_OscConfig+0x41c>
 80041f4:	4b87      	ldr	r3, [pc, #540]	; (8004414 <HAL_RCC_OscConfig+0x624>)
 80041f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041f8:	4b86      	ldr	r3, [pc, #536]	; (8004414 <HAL_RCC_OscConfig+0x624>)
 80041fa:	2101      	movs	r1, #1
 80041fc:	438a      	bics	r2, r1
 80041fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8004200:	4b84      	ldr	r3, [pc, #528]	; (8004414 <HAL_RCC_OscConfig+0x624>)
 8004202:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004204:	4b83      	ldr	r3, [pc, #524]	; (8004414 <HAL_RCC_OscConfig+0x624>)
 8004206:	2104      	movs	r1, #4
 8004208:	438a      	bics	r2, r1
 800420a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d014      	beq.n	800423e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004214:	f7fd fea6 	bl	8001f64 <HAL_GetTick>
 8004218:	0003      	movs	r3, r0
 800421a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800421c:	e009      	b.n	8004232 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800421e:	f7fd fea1 	bl	8001f64 <HAL_GetTick>
 8004222:	0002      	movs	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	4a7c      	ldr	r2, [pc, #496]	; (800441c <HAL_RCC_OscConfig+0x62c>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e0ec      	b.n	800440c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004232:	4b78      	ldr	r3, [pc, #480]	; (8004414 <HAL_RCC_OscConfig+0x624>)
 8004234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004236:	2202      	movs	r2, #2
 8004238:	4013      	ands	r3, r2
 800423a:	d0f0      	beq.n	800421e <HAL_RCC_OscConfig+0x42e>
 800423c:	e013      	b.n	8004266 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423e:	f7fd fe91 	bl	8001f64 <HAL_GetTick>
 8004242:	0003      	movs	r3, r0
 8004244:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004246:	e009      	b.n	800425c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004248:	f7fd fe8c 	bl	8001f64 <HAL_GetTick>
 800424c:	0002      	movs	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	4a72      	ldr	r2, [pc, #456]	; (800441c <HAL_RCC_OscConfig+0x62c>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d901      	bls.n	800425c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e0d7      	b.n	800440c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800425c:	4b6d      	ldr	r3, [pc, #436]	; (8004414 <HAL_RCC_OscConfig+0x624>)
 800425e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004260:	2202      	movs	r2, #2
 8004262:	4013      	ands	r3, r2
 8004264:	d1f0      	bne.n	8004248 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004266:	231f      	movs	r3, #31
 8004268:	18fb      	adds	r3, r7, r3
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d105      	bne.n	800427c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004270:	4b68      	ldr	r3, [pc, #416]	; (8004414 <HAL_RCC_OscConfig+0x624>)
 8004272:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004274:	4b67      	ldr	r3, [pc, #412]	; (8004414 <HAL_RCC_OscConfig+0x624>)
 8004276:	496a      	ldr	r1, [pc, #424]	; (8004420 <HAL_RCC_OscConfig+0x630>)
 8004278:	400a      	ands	r2, r1
 800427a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	69db      	ldr	r3, [r3, #28]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d100      	bne.n	8004286 <HAL_RCC_OscConfig+0x496>
 8004284:	e0c1      	b.n	800440a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004286:	4b63      	ldr	r3, [pc, #396]	; (8004414 <HAL_RCC_OscConfig+0x624>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	2238      	movs	r2, #56	; 0x38
 800428c:	4013      	ands	r3, r2
 800428e:	2b10      	cmp	r3, #16
 8004290:	d100      	bne.n	8004294 <HAL_RCC_OscConfig+0x4a4>
 8004292:	e081      	b.n	8004398 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	2b02      	cmp	r3, #2
 800429a:	d156      	bne.n	800434a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800429c:	4b5d      	ldr	r3, [pc, #372]	; (8004414 <HAL_RCC_OscConfig+0x624>)
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	4b5c      	ldr	r3, [pc, #368]	; (8004414 <HAL_RCC_OscConfig+0x624>)
 80042a2:	4960      	ldr	r1, [pc, #384]	; (8004424 <HAL_RCC_OscConfig+0x634>)
 80042a4:	400a      	ands	r2, r1
 80042a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a8:	f7fd fe5c 	bl	8001f64 <HAL_GetTick>
 80042ac:	0003      	movs	r3, r0
 80042ae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042b0:	e008      	b.n	80042c4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b2:	f7fd fe57 	bl	8001f64 <HAL_GetTick>
 80042b6:	0002      	movs	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e0a3      	b.n	800440c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042c4:	4b53      	ldr	r3, [pc, #332]	; (8004414 <HAL_RCC_OscConfig+0x624>)
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	2380      	movs	r3, #128	; 0x80
 80042ca:	049b      	lsls	r3, r3, #18
 80042cc:	4013      	ands	r3, r2
 80042ce:	d1f0      	bne.n	80042b2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042d0:	4b50      	ldr	r3, [pc, #320]	; (8004414 <HAL_RCC_OscConfig+0x624>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	4a54      	ldr	r2, [pc, #336]	; (8004428 <HAL_RCC_OscConfig+0x638>)
 80042d6:	4013      	ands	r3, r2
 80042d8:	0019      	movs	r1, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a1a      	ldr	r2, [r3, #32]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e8:	021b      	lsls	r3, r3, #8
 80042ea:	431a      	orrs	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	431a      	orrs	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042fc:	431a      	orrs	r2, r3
 80042fe:	4b45      	ldr	r3, [pc, #276]	; (8004414 <HAL_RCC_OscConfig+0x624>)
 8004300:	430a      	orrs	r2, r1
 8004302:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004304:	4b43      	ldr	r3, [pc, #268]	; (8004414 <HAL_RCC_OscConfig+0x624>)
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	4b42      	ldr	r3, [pc, #264]	; (8004414 <HAL_RCC_OscConfig+0x624>)
 800430a:	2180      	movs	r1, #128	; 0x80
 800430c:	0449      	lsls	r1, r1, #17
 800430e:	430a      	orrs	r2, r1
 8004310:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004312:	4b40      	ldr	r3, [pc, #256]	; (8004414 <HAL_RCC_OscConfig+0x624>)
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	4b3f      	ldr	r3, [pc, #252]	; (8004414 <HAL_RCC_OscConfig+0x624>)
 8004318:	2180      	movs	r1, #128	; 0x80
 800431a:	0549      	lsls	r1, r1, #21
 800431c:	430a      	orrs	r2, r1
 800431e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004320:	f7fd fe20 	bl	8001f64 <HAL_GetTick>
 8004324:	0003      	movs	r3, r0
 8004326:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004328:	e008      	b.n	800433c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800432a:	f7fd fe1b 	bl	8001f64 <HAL_GetTick>
 800432e:	0002      	movs	r2, r0
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	2b02      	cmp	r3, #2
 8004336:	d901      	bls.n	800433c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e067      	b.n	800440c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800433c:	4b35      	ldr	r3, [pc, #212]	; (8004414 <HAL_RCC_OscConfig+0x624>)
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	2380      	movs	r3, #128	; 0x80
 8004342:	049b      	lsls	r3, r3, #18
 8004344:	4013      	ands	r3, r2
 8004346:	d0f0      	beq.n	800432a <HAL_RCC_OscConfig+0x53a>
 8004348:	e05f      	b.n	800440a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800434a:	4b32      	ldr	r3, [pc, #200]	; (8004414 <HAL_RCC_OscConfig+0x624>)
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	4b31      	ldr	r3, [pc, #196]	; (8004414 <HAL_RCC_OscConfig+0x624>)
 8004350:	4934      	ldr	r1, [pc, #208]	; (8004424 <HAL_RCC_OscConfig+0x634>)
 8004352:	400a      	ands	r2, r1
 8004354:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004356:	4b2f      	ldr	r3, [pc, #188]	; (8004414 <HAL_RCC_OscConfig+0x624>)
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	4b2e      	ldr	r3, [pc, #184]	; (8004414 <HAL_RCC_OscConfig+0x624>)
 800435c:	2103      	movs	r1, #3
 800435e:	438a      	bics	r2, r1
 8004360:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004362:	4b2c      	ldr	r3, [pc, #176]	; (8004414 <HAL_RCC_OscConfig+0x624>)
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	4b2b      	ldr	r3, [pc, #172]	; (8004414 <HAL_RCC_OscConfig+0x624>)
 8004368:	4930      	ldr	r1, [pc, #192]	; (800442c <HAL_RCC_OscConfig+0x63c>)
 800436a:	400a      	ands	r2, r1
 800436c:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800436e:	f7fd fdf9 	bl	8001f64 <HAL_GetTick>
 8004372:	0003      	movs	r3, r0
 8004374:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004378:	f7fd fdf4 	bl	8001f64 <HAL_GetTick>
 800437c:	0002      	movs	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e040      	b.n	800440c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800438a:	4b22      	ldr	r3, [pc, #136]	; (8004414 <HAL_RCC_OscConfig+0x624>)
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	2380      	movs	r3, #128	; 0x80
 8004390:	049b      	lsls	r3, r3, #18
 8004392:	4013      	ands	r3, r2
 8004394:	d1f0      	bne.n	8004378 <HAL_RCC_OscConfig+0x588>
 8004396:	e038      	b.n	800440a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d101      	bne.n	80043a4 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e033      	b.n	800440c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80043a4:	4b1b      	ldr	r3, [pc, #108]	; (8004414 <HAL_RCC_OscConfig+0x624>)
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	2203      	movs	r2, #3
 80043ae:	401a      	ands	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d126      	bne.n	8004406 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	2270      	movs	r2, #112	; 0x70
 80043bc:	401a      	ands	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d11f      	bne.n	8004406 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	23fe      	movs	r3, #254	; 0xfe
 80043ca:	01db      	lsls	r3, r3, #7
 80043cc:	401a      	ands	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d116      	bne.n	8004406 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	23f8      	movs	r3, #248	; 0xf8
 80043dc:	039b      	lsls	r3, r3, #14
 80043de:	401a      	ands	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d10e      	bne.n	8004406 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	23e0      	movs	r3, #224	; 0xe0
 80043ec:	051b      	lsls	r3, r3, #20
 80043ee:	401a      	ands	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d106      	bne.n	8004406 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	0f5b      	lsrs	r3, r3, #29
 80043fc:	075a      	lsls	r2, r3, #29
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004402:	429a      	cmp	r2, r3
 8004404:	d001      	beq.n	800440a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e000      	b.n	800440c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	0018      	movs	r0, r3
 800440e:	46bd      	mov	sp, r7
 8004410:	b008      	add	sp, #32
 8004412:	bd80      	pop	{r7, pc}
 8004414:	40021000 	.word	0x40021000
 8004418:	40007000 	.word	0x40007000
 800441c:	00001388 	.word	0x00001388
 8004420:	efffffff 	.word	0xefffffff
 8004424:	feffffff 	.word	0xfeffffff
 8004428:	11c1808c 	.word	0x11c1808c
 800442c:	eefeffff 	.word	0xeefeffff

08004430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e0e9      	b.n	8004618 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004444:	4b76      	ldr	r3, [pc, #472]	; (8004620 <HAL_RCC_ClockConfig+0x1f0>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2207      	movs	r2, #7
 800444a:	4013      	ands	r3, r2
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	429a      	cmp	r2, r3
 8004450:	d91e      	bls.n	8004490 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004452:	4b73      	ldr	r3, [pc, #460]	; (8004620 <HAL_RCC_ClockConfig+0x1f0>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2207      	movs	r2, #7
 8004458:	4393      	bics	r3, r2
 800445a:	0019      	movs	r1, r3
 800445c:	4b70      	ldr	r3, [pc, #448]	; (8004620 <HAL_RCC_ClockConfig+0x1f0>)
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004464:	f7fd fd7e 	bl	8001f64 <HAL_GetTick>
 8004468:	0003      	movs	r3, r0
 800446a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800446c:	e009      	b.n	8004482 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800446e:	f7fd fd79 	bl	8001f64 <HAL_GetTick>
 8004472:	0002      	movs	r2, r0
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	4a6a      	ldr	r2, [pc, #424]	; (8004624 <HAL_RCC_ClockConfig+0x1f4>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d901      	bls.n	8004482 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e0ca      	b.n	8004618 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004482:	4b67      	ldr	r3, [pc, #412]	; (8004620 <HAL_RCC_ClockConfig+0x1f0>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2207      	movs	r2, #7
 8004488:	4013      	ands	r3, r2
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	429a      	cmp	r2, r3
 800448e:	d1ee      	bne.n	800446e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2202      	movs	r2, #2
 8004496:	4013      	ands	r3, r2
 8004498:	d015      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2204      	movs	r2, #4
 80044a0:	4013      	ands	r3, r2
 80044a2:	d006      	beq.n	80044b2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80044a4:	4b60      	ldr	r3, [pc, #384]	; (8004628 <HAL_RCC_ClockConfig+0x1f8>)
 80044a6:	689a      	ldr	r2, [r3, #8]
 80044a8:	4b5f      	ldr	r3, [pc, #380]	; (8004628 <HAL_RCC_ClockConfig+0x1f8>)
 80044aa:	21e0      	movs	r1, #224	; 0xe0
 80044ac:	01c9      	lsls	r1, r1, #7
 80044ae:	430a      	orrs	r2, r1
 80044b0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044b2:	4b5d      	ldr	r3, [pc, #372]	; (8004628 <HAL_RCC_ClockConfig+0x1f8>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	4a5d      	ldr	r2, [pc, #372]	; (800462c <HAL_RCC_ClockConfig+0x1fc>)
 80044b8:	4013      	ands	r3, r2
 80044ba:	0019      	movs	r1, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	4b59      	ldr	r3, [pc, #356]	; (8004628 <HAL_RCC_ClockConfig+0x1f8>)
 80044c2:	430a      	orrs	r2, r1
 80044c4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2201      	movs	r2, #1
 80044cc:	4013      	ands	r3, r2
 80044ce:	d057      	beq.n	8004580 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d107      	bne.n	80044e8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044d8:	4b53      	ldr	r3, [pc, #332]	; (8004628 <HAL_RCC_ClockConfig+0x1f8>)
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	2380      	movs	r3, #128	; 0x80
 80044de:	029b      	lsls	r3, r3, #10
 80044e0:	4013      	ands	r3, r2
 80044e2:	d12b      	bne.n	800453c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e097      	b.n	8004618 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d107      	bne.n	8004500 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044f0:	4b4d      	ldr	r3, [pc, #308]	; (8004628 <HAL_RCC_ClockConfig+0x1f8>)
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	2380      	movs	r3, #128	; 0x80
 80044f6:	049b      	lsls	r3, r3, #18
 80044f8:	4013      	ands	r3, r2
 80044fa:	d11f      	bne.n	800453c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e08b      	b.n	8004618 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d107      	bne.n	8004518 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004508:	4b47      	ldr	r3, [pc, #284]	; (8004628 <HAL_RCC_ClockConfig+0x1f8>)
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	2380      	movs	r3, #128	; 0x80
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	4013      	ands	r3, r2
 8004512:	d113      	bne.n	800453c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e07f      	b.n	8004618 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	2b03      	cmp	r3, #3
 800451e:	d106      	bne.n	800452e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004520:	4b41      	ldr	r3, [pc, #260]	; (8004628 <HAL_RCC_ClockConfig+0x1f8>)
 8004522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004524:	2202      	movs	r2, #2
 8004526:	4013      	ands	r3, r2
 8004528:	d108      	bne.n	800453c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e074      	b.n	8004618 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800452e:	4b3e      	ldr	r3, [pc, #248]	; (8004628 <HAL_RCC_ClockConfig+0x1f8>)
 8004530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004532:	2202      	movs	r2, #2
 8004534:	4013      	ands	r3, r2
 8004536:	d101      	bne.n	800453c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e06d      	b.n	8004618 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800453c:	4b3a      	ldr	r3, [pc, #232]	; (8004628 <HAL_RCC_ClockConfig+0x1f8>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	2207      	movs	r2, #7
 8004542:	4393      	bics	r3, r2
 8004544:	0019      	movs	r1, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	4b37      	ldr	r3, [pc, #220]	; (8004628 <HAL_RCC_ClockConfig+0x1f8>)
 800454c:	430a      	orrs	r2, r1
 800454e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004550:	f7fd fd08 	bl	8001f64 <HAL_GetTick>
 8004554:	0003      	movs	r3, r0
 8004556:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004558:	e009      	b.n	800456e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800455a:	f7fd fd03 	bl	8001f64 <HAL_GetTick>
 800455e:	0002      	movs	r2, r0
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	4a2f      	ldr	r2, [pc, #188]	; (8004624 <HAL_RCC_ClockConfig+0x1f4>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d901      	bls.n	800456e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e054      	b.n	8004618 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800456e:	4b2e      	ldr	r3, [pc, #184]	; (8004628 <HAL_RCC_ClockConfig+0x1f8>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	2238      	movs	r2, #56	; 0x38
 8004574:	401a      	ands	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	429a      	cmp	r2, r3
 800457e:	d1ec      	bne.n	800455a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004580:	4b27      	ldr	r3, [pc, #156]	; (8004620 <HAL_RCC_ClockConfig+0x1f0>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2207      	movs	r2, #7
 8004586:	4013      	ands	r3, r2
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	429a      	cmp	r2, r3
 800458c:	d21e      	bcs.n	80045cc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800458e:	4b24      	ldr	r3, [pc, #144]	; (8004620 <HAL_RCC_ClockConfig+0x1f0>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2207      	movs	r2, #7
 8004594:	4393      	bics	r3, r2
 8004596:	0019      	movs	r1, r3
 8004598:	4b21      	ldr	r3, [pc, #132]	; (8004620 <HAL_RCC_ClockConfig+0x1f0>)
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80045a0:	f7fd fce0 	bl	8001f64 <HAL_GetTick>
 80045a4:	0003      	movs	r3, r0
 80045a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80045a8:	e009      	b.n	80045be <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045aa:	f7fd fcdb 	bl	8001f64 <HAL_GetTick>
 80045ae:	0002      	movs	r2, r0
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	4a1b      	ldr	r2, [pc, #108]	; (8004624 <HAL_RCC_ClockConfig+0x1f4>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e02c      	b.n	8004618 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80045be:	4b18      	ldr	r3, [pc, #96]	; (8004620 <HAL_RCC_ClockConfig+0x1f0>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2207      	movs	r2, #7
 80045c4:	4013      	ands	r3, r2
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d1ee      	bne.n	80045aa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2204      	movs	r2, #4
 80045d2:	4013      	ands	r3, r2
 80045d4:	d009      	beq.n	80045ea <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80045d6:	4b14      	ldr	r3, [pc, #80]	; (8004628 <HAL_RCC_ClockConfig+0x1f8>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	4a15      	ldr	r2, [pc, #84]	; (8004630 <HAL_RCC_ClockConfig+0x200>)
 80045dc:	4013      	ands	r3, r2
 80045de:	0019      	movs	r1, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68da      	ldr	r2, [r3, #12]
 80045e4:	4b10      	ldr	r3, [pc, #64]	; (8004628 <HAL_RCC_ClockConfig+0x1f8>)
 80045e6:	430a      	orrs	r2, r1
 80045e8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80045ea:	f000 f829 	bl	8004640 <HAL_RCC_GetSysClockFreq>
 80045ee:	0001      	movs	r1, r0
 80045f0:	4b0d      	ldr	r3, [pc, #52]	; (8004628 <HAL_RCC_ClockConfig+0x1f8>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	0a1b      	lsrs	r3, r3, #8
 80045f6:	220f      	movs	r2, #15
 80045f8:	401a      	ands	r2, r3
 80045fa:	4b0e      	ldr	r3, [pc, #56]	; (8004634 <HAL_RCC_ClockConfig+0x204>)
 80045fc:	0092      	lsls	r2, r2, #2
 80045fe:	58d3      	ldr	r3, [r2, r3]
 8004600:	221f      	movs	r2, #31
 8004602:	4013      	ands	r3, r2
 8004604:	000a      	movs	r2, r1
 8004606:	40da      	lsrs	r2, r3
 8004608:	4b0b      	ldr	r3, [pc, #44]	; (8004638 <HAL_RCC_ClockConfig+0x208>)
 800460a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800460c:	4b0b      	ldr	r3, [pc, #44]	; (800463c <HAL_RCC_ClockConfig+0x20c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	0018      	movs	r0, r3
 8004612:	f7fd fc4b 	bl	8001eac <HAL_InitTick>
 8004616:	0003      	movs	r3, r0
}
 8004618:	0018      	movs	r0, r3
 800461a:	46bd      	mov	sp, r7
 800461c:	b004      	add	sp, #16
 800461e:	bd80      	pop	{r7, pc}
 8004620:	40022000 	.word	0x40022000
 8004624:	00001388 	.word	0x00001388
 8004628:	40021000 	.word	0x40021000
 800462c:	fffff0ff 	.word	0xfffff0ff
 8004630:	ffff8fff 	.word	0xffff8fff
 8004634:	08009374 	.word	0x08009374
 8004638:	20000000 	.word	0x20000000
 800463c:	20000004 	.word	0x20000004

08004640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004646:	4b3c      	ldr	r3, [pc, #240]	; (8004738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	2238      	movs	r2, #56	; 0x38
 800464c:	4013      	ands	r3, r2
 800464e:	d10f      	bne.n	8004670 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004650:	4b39      	ldr	r3, [pc, #228]	; (8004738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	0adb      	lsrs	r3, r3, #11
 8004656:	2207      	movs	r2, #7
 8004658:	4013      	ands	r3, r2
 800465a:	2201      	movs	r2, #1
 800465c:	409a      	lsls	r2, r3
 800465e:	0013      	movs	r3, r2
 8004660:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004662:	6839      	ldr	r1, [r7, #0]
 8004664:	4835      	ldr	r0, [pc, #212]	; (800473c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004666:	f7fb fd4f 	bl	8000108 <__udivsi3>
 800466a:	0003      	movs	r3, r0
 800466c:	613b      	str	r3, [r7, #16]
 800466e:	e05d      	b.n	800472c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004670:	4b31      	ldr	r3, [pc, #196]	; (8004738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	2238      	movs	r2, #56	; 0x38
 8004676:	4013      	ands	r3, r2
 8004678:	2b08      	cmp	r3, #8
 800467a:	d102      	bne.n	8004682 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800467c:	4b30      	ldr	r3, [pc, #192]	; (8004740 <HAL_RCC_GetSysClockFreq+0x100>)
 800467e:	613b      	str	r3, [r7, #16]
 8004680:	e054      	b.n	800472c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004682:	4b2d      	ldr	r3, [pc, #180]	; (8004738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	2238      	movs	r2, #56	; 0x38
 8004688:	4013      	ands	r3, r2
 800468a:	2b10      	cmp	r3, #16
 800468c:	d138      	bne.n	8004700 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800468e:	4b2a      	ldr	r3, [pc, #168]	; (8004738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	2203      	movs	r2, #3
 8004694:	4013      	ands	r3, r2
 8004696:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004698:	4b27      	ldr	r3, [pc, #156]	; (8004738 <HAL_RCC_GetSysClockFreq+0xf8>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	091b      	lsrs	r3, r3, #4
 800469e:	2207      	movs	r2, #7
 80046a0:	4013      	ands	r3, r2
 80046a2:	3301      	adds	r3, #1
 80046a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2b03      	cmp	r3, #3
 80046aa:	d10d      	bne.n	80046c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046ac:	68b9      	ldr	r1, [r7, #8]
 80046ae:	4824      	ldr	r0, [pc, #144]	; (8004740 <HAL_RCC_GetSysClockFreq+0x100>)
 80046b0:	f7fb fd2a 	bl	8000108 <__udivsi3>
 80046b4:	0003      	movs	r3, r0
 80046b6:	0019      	movs	r1, r3
 80046b8:	4b1f      	ldr	r3, [pc, #124]	; (8004738 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	0a1b      	lsrs	r3, r3, #8
 80046be:	227f      	movs	r2, #127	; 0x7f
 80046c0:	4013      	ands	r3, r2
 80046c2:	434b      	muls	r3, r1
 80046c4:	617b      	str	r3, [r7, #20]
        break;
 80046c6:	e00d      	b.n	80046e4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80046c8:	68b9      	ldr	r1, [r7, #8]
 80046ca:	481c      	ldr	r0, [pc, #112]	; (800473c <HAL_RCC_GetSysClockFreq+0xfc>)
 80046cc:	f7fb fd1c 	bl	8000108 <__udivsi3>
 80046d0:	0003      	movs	r3, r0
 80046d2:	0019      	movs	r1, r3
 80046d4:	4b18      	ldr	r3, [pc, #96]	; (8004738 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	0a1b      	lsrs	r3, r3, #8
 80046da:	227f      	movs	r2, #127	; 0x7f
 80046dc:	4013      	ands	r3, r2
 80046de:	434b      	muls	r3, r1
 80046e0:	617b      	str	r3, [r7, #20]
        break;
 80046e2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80046e4:	4b14      	ldr	r3, [pc, #80]	; (8004738 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	0f5b      	lsrs	r3, r3, #29
 80046ea:	2207      	movs	r2, #7
 80046ec:	4013      	ands	r3, r2
 80046ee:	3301      	adds	r3, #1
 80046f0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80046f2:	6879      	ldr	r1, [r7, #4]
 80046f4:	6978      	ldr	r0, [r7, #20]
 80046f6:	f7fb fd07 	bl	8000108 <__udivsi3>
 80046fa:	0003      	movs	r3, r0
 80046fc:	613b      	str	r3, [r7, #16]
 80046fe:	e015      	b.n	800472c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004700:	4b0d      	ldr	r3, [pc, #52]	; (8004738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	2238      	movs	r2, #56	; 0x38
 8004706:	4013      	ands	r3, r2
 8004708:	2b20      	cmp	r3, #32
 800470a:	d103      	bne.n	8004714 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800470c:	2380      	movs	r3, #128	; 0x80
 800470e:	021b      	lsls	r3, r3, #8
 8004710:	613b      	str	r3, [r7, #16]
 8004712:	e00b      	b.n	800472c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004714:	4b08      	ldr	r3, [pc, #32]	; (8004738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	2238      	movs	r2, #56	; 0x38
 800471a:	4013      	ands	r3, r2
 800471c:	2b18      	cmp	r3, #24
 800471e:	d103      	bne.n	8004728 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004720:	23fa      	movs	r3, #250	; 0xfa
 8004722:	01db      	lsls	r3, r3, #7
 8004724:	613b      	str	r3, [r7, #16]
 8004726:	e001      	b.n	800472c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004728:	2300      	movs	r3, #0
 800472a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800472c:	693b      	ldr	r3, [r7, #16]
}
 800472e:	0018      	movs	r0, r3
 8004730:	46bd      	mov	sp, r7
 8004732:	b006      	add	sp, #24
 8004734:	bd80      	pop	{r7, pc}
 8004736:	46c0      	nop			; (mov r8, r8)
 8004738:	40021000 	.word	0x40021000
 800473c:	00f42400 	.word	0x00f42400
 8004740:	007a1200 	.word	0x007a1200

08004744 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800474c:	2313      	movs	r3, #19
 800474e:	18fb      	adds	r3, r7, r3
 8004750:	2200      	movs	r2, #0
 8004752:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004754:	2312      	movs	r3, #18
 8004756:	18fb      	adds	r3, r7, r3
 8004758:	2200      	movs	r2, #0
 800475a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	2380      	movs	r3, #128	; 0x80
 8004762:	029b      	lsls	r3, r3, #10
 8004764:	4013      	ands	r3, r2
 8004766:	d100      	bne.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004768:	e0af      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    FlagStatus       pwrclkchanged = RESET;
 800476a:	2311      	movs	r3, #17
 800476c:	18fb      	adds	r3, r7, r3
 800476e:	2200      	movs	r2, #0
 8004770:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004772:	4b48      	ldr	r3, [pc, #288]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004774:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004776:	2380      	movs	r3, #128	; 0x80
 8004778:	055b      	lsls	r3, r3, #21
 800477a:	4013      	ands	r3, r2
 800477c:	d111      	bne.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800477e:	4b45      	ldr	r3, [pc, #276]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004780:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004782:	4b44      	ldr	r3, [pc, #272]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004784:	2180      	movs	r1, #128	; 0x80
 8004786:	0549      	lsls	r1, r1, #21
 8004788:	430a      	orrs	r2, r1
 800478a:	63da      	str	r2, [r3, #60]	; 0x3c
 800478c:	4b41      	ldr	r3, [pc, #260]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800478e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004790:	2380      	movs	r3, #128	; 0x80
 8004792:	055b      	lsls	r3, r3, #21
 8004794:	4013      	ands	r3, r2
 8004796:	60bb      	str	r3, [r7, #8]
 8004798:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800479a:	2311      	movs	r3, #17
 800479c:	18fb      	adds	r3, r7, r3
 800479e:	2201      	movs	r2, #1
 80047a0:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047a2:	4b3d      	ldr	r3, [pc, #244]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	4b3c      	ldr	r3, [pc, #240]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80047a8:	2180      	movs	r1, #128	; 0x80
 80047aa:	0049      	lsls	r1, r1, #1
 80047ac:	430a      	orrs	r2, r1
 80047ae:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047b0:	f7fd fbd8 	bl	8001f64 <HAL_GetTick>
 80047b4:	0003      	movs	r3, r0
 80047b6:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047b8:	e00b      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ba:	f7fd fbd3 	bl	8001f64 <HAL_GetTick>
 80047be:	0002      	movs	r2, r0
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d904      	bls.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 80047c8:	2313      	movs	r3, #19
 80047ca:	18fb      	adds	r3, r7, r3
 80047cc:	2203      	movs	r2, #3
 80047ce:	701a      	strb	r2, [r3, #0]
        break;
 80047d0:	e005      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047d2:	4b31      	ldr	r3, [pc, #196]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	2380      	movs	r3, #128	; 0x80
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	4013      	ands	r3, r2
 80047dc:	d0ed      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 80047de:	2313      	movs	r3, #19
 80047e0:	18fb      	adds	r3, r7, r3
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d15f      	bne.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047e8:	4b2a      	ldr	r3, [pc, #168]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80047ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80047ec:	23c0      	movs	r3, #192	; 0xc0
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4013      	ands	r3, r2
 80047f2:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d019      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0xea>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	429a      	cmp	r2, r3
 8004802:	d014      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004804:	4b23      	ldr	r3, [pc, #140]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004808:	4a24      	ldr	r2, [pc, #144]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800480a:	4013      	ands	r3, r2
 800480c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800480e:	4b21      	ldr	r3, [pc, #132]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004810:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004812:	4b20      	ldr	r3, [pc, #128]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004814:	2180      	movs	r1, #128	; 0x80
 8004816:	0249      	lsls	r1, r1, #9
 8004818:	430a      	orrs	r2, r1
 800481a:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800481c:	4b1d      	ldr	r3, [pc, #116]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800481e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004820:	4b1c      	ldr	r3, [pc, #112]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004822:	491f      	ldr	r1, [pc, #124]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004824:	400a      	ands	r2, r1
 8004826:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004828:	4b1a      	ldr	r3, [pc, #104]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2201      	movs	r2, #1
 8004832:	4013      	ands	r3, r2
 8004834:	d016      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004836:	f7fd fb95 	bl	8001f64 <HAL_GetTick>
 800483a:	0003      	movs	r3, r0
 800483c:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800483e:	e00c      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004840:	f7fd fb90 	bl	8001f64 <HAL_GetTick>
 8004844:	0002      	movs	r2, r0
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	4a16      	ldr	r2, [pc, #88]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d904      	bls.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8004850:	2313      	movs	r3, #19
 8004852:	18fb      	adds	r3, r7, r3
 8004854:	2203      	movs	r2, #3
 8004856:	701a      	strb	r2, [r3, #0]
            break;
 8004858:	e004      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800485a:	4b0e      	ldr	r3, [pc, #56]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800485c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800485e:	2202      	movs	r2, #2
 8004860:	4013      	ands	r3, r2
 8004862:	d0ed      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8004864:	2313      	movs	r3, #19
 8004866:	18fb      	adds	r3, r7, r3
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10a      	bne.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800486e:	4b09      	ldr	r3, [pc, #36]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004872:	4a0a      	ldr	r2, [pc, #40]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8004874:	4013      	ands	r3, r2
 8004876:	0019      	movs	r1, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800487c:	4b05      	ldr	r3, [pc, #20]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800487e:	430a      	orrs	r2, r1
 8004880:	65da      	str	r2, [r3, #92]	; 0x5c
 8004882:	e017      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x170>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004884:	2312      	movs	r3, #18
 8004886:	18fb      	adds	r3, r7, r3
 8004888:	2213      	movs	r2, #19
 800488a:	18ba      	adds	r2, r7, r2
 800488c:	7812      	ldrb	r2, [r2, #0]
 800488e:	701a      	strb	r2, [r3, #0]
 8004890:	e010      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8004892:	46c0      	nop			; (mov r8, r8)
 8004894:	40021000 	.word	0x40021000
 8004898:	40007000 	.word	0x40007000
 800489c:	fffffcff 	.word	0xfffffcff
 80048a0:	fffeffff 	.word	0xfffeffff
 80048a4:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a8:	2312      	movs	r3, #18
 80048aa:	18fb      	adds	r3, r7, r3
 80048ac:	2213      	movs	r2, #19
 80048ae:	18ba      	adds	r2, r7, r2
 80048b0:	7812      	ldrb	r2, [r2, #0]
 80048b2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048b4:	2311      	movs	r3, #17
 80048b6:	18fb      	adds	r3, r7, r3
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d105      	bne.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048be:	4b84      	ldr	r3, [pc, #528]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80048c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048c2:	4b83      	ldr	r3, [pc, #524]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80048c4:	4983      	ldr	r1, [pc, #524]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80048c6:	400a      	ands	r2, r1
 80048c8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2201      	movs	r2, #1
 80048d0:	4013      	ands	r3, r2
 80048d2:	d009      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048d4:	4b7e      	ldr	r3, [pc, #504]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80048d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d8:	2203      	movs	r2, #3
 80048da:	4393      	bics	r3, r2
 80048dc:	0019      	movs	r1, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	4b7b      	ldr	r3, [pc, #492]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80048e4:	430a      	orrs	r2, r1
 80048e6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2202      	movs	r2, #2
 80048ee:	4013      	ands	r3, r2
 80048f0:	d009      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048f2:	4b77      	ldr	r3, [pc, #476]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80048f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f6:	220c      	movs	r2, #12
 80048f8:	4393      	bics	r3, r2
 80048fa:	0019      	movs	r1, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	4b73      	ldr	r3, [pc, #460]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004902:	430a      	orrs	r2, r1
 8004904:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2210      	movs	r2, #16
 800490c:	4013      	ands	r3, r2
 800490e:	d009      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004910:	4b6f      	ldr	r3, [pc, #444]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004914:	4a70      	ldr	r2, [pc, #448]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8004916:	4013      	ands	r3, r2
 8004918:	0019      	movs	r1, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68da      	ldr	r2, [r3, #12]
 800491e:	4b6c      	ldr	r3, [pc, #432]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004920:	430a      	orrs	r2, r1
 8004922:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	2380      	movs	r3, #128	; 0x80
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4013      	ands	r3, r2
 800492e:	d009      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004930:	4b67      	ldr	r3, [pc, #412]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004934:	4a69      	ldr	r2, [pc, #420]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8004936:	4013      	ands	r3, r2
 8004938:	0019      	movs	r1, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699a      	ldr	r2, [r3, #24]
 800493e:	4b64      	ldr	r3, [pc, #400]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004940:	430a      	orrs	r2, r1
 8004942:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	2380      	movs	r3, #128	; 0x80
 800494a:	00db      	lsls	r3, r3, #3
 800494c:	4013      	ands	r3, r2
 800494e:	d009      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x220>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004950:	4b5f      	ldr	r3, [pc, #380]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004954:	4a62      	ldr	r2, [pc, #392]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8004956:	4013      	ands	r3, r2
 8004958:	0019      	movs	r1, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	69da      	ldr	r2, [r3, #28]
 800495e:	4b5c      	ldr	r3, [pc, #368]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004960:	430a      	orrs	r2, r1
 8004962:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2220      	movs	r2, #32
 800496a:	4013      	ands	r3, r2
 800496c:	d009      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x23e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800496e:	4b58      	ldr	r3, [pc, #352]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004972:	4a5c      	ldr	r2, [pc, #368]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8004974:	4013      	ands	r3, r2
 8004976:	0019      	movs	r1, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	691a      	ldr	r2, [r3, #16]
 800497c:	4b54      	ldr	r3, [pc, #336]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800497e:	430a      	orrs	r2, r1
 8004980:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* (RCC_CCIPR_I2C2SEL */

#if defined(RNG)
  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	2380      	movs	r3, #128	; 0x80
 8004988:	02db      	lsls	r3, r3, #11
 800498a:	4013      	ands	r3, r2
 800498c:	d016      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800498e:	4b50      	ldr	r3, [pc, #320]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004992:	4a55      	ldr	r2, [pc, #340]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8004994:	4013      	ands	r3, r2
 8004996:	0019      	movs	r1, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a1a      	ldr	r2, [r3, #32]
 800499c:	4b4c      	ldr	r3, [pc, #304]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800499e:	430a      	orrs	r2, r1
 80049a0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1a      	ldr	r2, [r3, #32]
 80049a6:	23c0      	movs	r3, #192	; 0xc0
 80049a8:	051b      	lsls	r3, r3, #20
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d106      	bne.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x278>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80049ae:	4b48      	ldr	r3, [pc, #288]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80049b0:	68da      	ldr	r2, [r3, #12]
 80049b2:	4b47      	ldr	r3, [pc, #284]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80049b4:	2180      	movs	r1, #128	; 0x80
 80049b6:	0449      	lsls	r1, r1, #17
 80049b8:	430a      	orrs	r2, r1
 80049ba:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	2380      	movs	r3, #128	; 0x80
 80049c2:	01db      	lsls	r3, r3, #7
 80049c4:	4013      	ands	r3, r2
 80049c6:	d015      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049c8:	4b41      	ldr	r3, [pc, #260]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80049ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	0899      	lsrs	r1, r3, #2
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049d4:	4b3e      	ldr	r3, [pc, #248]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80049d6:	430a      	orrs	r2, r1
 80049d8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049de:	2380      	movs	r3, #128	; 0x80
 80049e0:	05db      	lsls	r3, r3, #23
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d106      	bne.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80049e6:	4b3a      	ldr	r3, [pc, #232]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	4b39      	ldr	r3, [pc, #228]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80049ec:	2180      	movs	r1, #128	; 0x80
 80049ee:	0249      	lsls	r1, r1, #9
 80049f0:	430a      	orrs	r2, r1
 80049f2:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	2380      	movs	r3, #128	; 0x80
 80049fa:	031b      	lsls	r3, r3, #12
 80049fc:	4013      	ands	r3, r2
 80049fe:	d009      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a00:	4b33      	ldr	r3, [pc, #204]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a04:	2240      	movs	r2, #64	; 0x40
 8004a06:	4393      	bics	r3, r2
 8004a08:	0019      	movs	r1, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a0e:	4b30      	ldr	r3, [pc, #192]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004a10:	430a      	orrs	r2, r1
 8004a12:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	2380      	movs	r3, #128	; 0x80
 8004a1a:	039b      	lsls	r3, r3, #14
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	d016      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x30a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004a20:	4b2b      	ldr	r3, [pc, #172]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a24:	4a31      	ldr	r2, [pc, #196]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8004a26:	4013      	ands	r3, r2
 8004a28:	0019      	movs	r1, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a2e:	4b28      	ldr	r3, [pc, #160]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004a30:	430a      	orrs	r2, r1
 8004a32:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a38:	2380      	movs	r3, #128	; 0x80
 8004a3a:	03db      	lsls	r3, r3, #15
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d106      	bne.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x30a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004a40:	4b23      	ldr	r3, [pc, #140]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004a42:	68da      	ldr	r2, [r3, #12]
 8004a44:	4b22      	ldr	r3, [pc, #136]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004a46:	2180      	movs	r1, #128	; 0x80
 8004a48:	0449      	lsls	r1, r1, #17
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	2380      	movs	r3, #128	; 0x80
 8004a54:	03db      	lsls	r3, r3, #15
 8004a56:	4013      	ands	r3, r2
 8004a58:	d016      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x344>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004a5a:	4b1d      	ldr	r3, [pc, #116]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5e:	4a24      	ldr	r2, [pc, #144]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8004a60:	4013      	ands	r3, r2
 8004a62:	0019      	movs	r1, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a68:	4b19      	ldr	r3, [pc, #100]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a72:	2380      	movs	r3, #128	; 0x80
 8004a74:	045b      	lsls	r3, r3, #17
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d106      	bne.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004a7a:	4b15      	ldr	r3, [pc, #84]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004a7c:	68da      	ldr	r2, [r3, #12]
 8004a7e:	4b14      	ldr	r3, [pc, #80]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004a80:	2180      	movs	r1, #128	; 0x80
 8004a82:	0449      	lsls	r1, r1, #17
 8004a84:	430a      	orrs	r2, r1
 8004a86:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	2380      	movs	r3, #128	; 0x80
 8004a8e:	011b      	lsls	r3, r3, #4
 8004a90:	4013      	ands	r3, r2
 8004a92:	d016      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004a94:	4b0e      	ldr	r3, [pc, #56]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a98:	4a16      	ldr	r2, [pc, #88]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	0019      	movs	r1, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	695a      	ldr	r2, [r3, #20]
 8004aa2:	4b0b      	ldr	r3, [pc, #44]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	695a      	ldr	r2, [r3, #20]
 8004aac:	2380      	movs	r3, #128	; 0x80
 8004aae:	01db      	lsls	r3, r3, #7
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d106      	bne.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004ab4:	4b06      	ldr	r3, [pc, #24]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004ab6:	68da      	ldr	r2, [r3, #12]
 8004ab8:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004aba:	2180      	movs	r1, #128	; 0x80
 8004abc:	0249      	lsls	r1, r1, #9
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004ac2:	2312      	movs	r3, #18
 8004ac4:	18fb      	adds	r3, r7, r3
 8004ac6:	781b      	ldrb	r3, [r3, #0]
}
 8004ac8:	0018      	movs	r0, r3
 8004aca:	46bd      	mov	sp, r7
 8004acc:	b006      	add	sp, #24
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	efffffff 	.word	0xefffffff
 8004ad8:	fffff3ff 	.word	0xfffff3ff
 8004adc:	fff3ffff 	.word	0xfff3ffff
 8004ae0:	ffcfffff 	.word	0xffcfffff
 8004ae4:	ffffcfff 	.word	0xffffcfff
 8004ae8:	f3ffffff 	.word	0xf3ffffff
 8004aec:	ffbfffff 	.word	0xffbfffff
 8004af0:	feffffff 	.word	0xfeffffff
 8004af4:	ffff3fff 	.word	0xffff3fff

08004af8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e029      	b.n	8004b5e <HAL_RNG_Init+0x66>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	7a5b      	ldrb	r3, [r3, #9]
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d106      	bne.n	8004b22 <HAL_RNG_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	0018      	movs	r0, r3
 8004b1e:	f7fc ff87 	bl	8001a30 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2202      	movs	r2, #2
 8004b26:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	4393      	bics	r3, r2
 8004b32:	0019      	movs	r1, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2104      	movs	r1, #4
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	0018      	movs	r0, r3
 8004b60:	46bd      	mov	sp, r7
 8004b62:	b002      	add	sp, #8
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b084      	sub	sp, #16
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b70:	230f      	movs	r3, #15
 8004b72:	18fb      	adds	r3, r7, r3
 8004b74:	2200      	movs	r2, #0
 8004b76:	701a      	strb	r2, [r3, #0]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	7a1b      	ldrb	r3, [r3, #8]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d101      	bne.n	8004b84 <HAL_RNG_GenerateRandomNumber+0x1e>
 8004b80:	2302      	movs	r3, #2
 8004b82:	e042      	b.n	8004c0a <HAL_RNG_GenerateRandomNumber+0xa4>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	7a5b      	ldrb	r3, [r3, #9]
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d12d      	bne.n	8004bf0 <HAL_RNG_GenerateRandomNumber+0x8a>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2202      	movs	r2, #2
 8004b98:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b9a:	f7fd f9e3 	bl	8001f64 <HAL_GetTick>
 8004b9e:	0003      	movs	r3, r0
 8004ba0:	60bb      	str	r3, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004ba2:	e011      	b.n	8004bc8 <HAL_RNG_GenerateRandomNumber+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004ba4:	f7fd f9de 	bl	8001f64 <HAL_GetTick>
 8004ba8:	0002      	movs	r2, r0
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d90a      	bls.n	8004bc8 <HAL_RNG_GenerateRandomNumber+0x62>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	721a      	strb	r2, [r3, #8]
        return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e020      	b.n	8004c0a <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d1e6      	bne.n	8004ba4 <HAL_RNG_GenerateRandomNumber+0x3e>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691a      	ldr	r2, [r3, #16]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	725a      	strb	r2, [r3, #9]
 8004bee:	e006      	b.n	8004bfe <HAL_RNG_GenerateRandomNumber+0x98>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2204      	movs	r2, #4
 8004bf4:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 8004bf6:	230f      	movs	r3, #15
 8004bf8:	18fb      	adds	r3, r7, r3
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	701a      	strb	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	721a      	strb	r2, [r3, #8]

  return status;
 8004c04:	230f      	movs	r3, #15
 8004c06:	18fb      	adds	r3, r7, r3
 8004c08:	781b      	ldrb	r3, [r3, #0]
}
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	b004      	add	sp, #16
 8004c10:	bd80      	pop	{r7, pc}
	...

08004c14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e0a8      	b.n	8004d78 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d109      	bne.n	8004c42 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	2382      	movs	r3, #130	; 0x82
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d009      	beq.n	8004c4e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	61da      	str	r2, [r3, #28]
 8004c40:	e005      	b.n	8004c4e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	225d      	movs	r2, #93	; 0x5d
 8004c58:	5c9b      	ldrb	r3, [r3, r2]
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d107      	bne.n	8004c70 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	225c      	movs	r2, #92	; 0x5c
 8004c64:	2100      	movs	r1, #0
 8004c66:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	0018      	movs	r0, r3
 8004c6c:	f7fc ff00 	bl	8001a70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	225d      	movs	r2, #93	; 0x5d
 8004c74:	2102      	movs	r1, #2
 8004c76:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2140      	movs	r1, #64	; 0x40
 8004c84:	438a      	bics	r2, r1
 8004c86:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	68da      	ldr	r2, [r3, #12]
 8004c8c:	23e0      	movs	r3, #224	; 0xe0
 8004c8e:	00db      	lsls	r3, r3, #3
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d902      	bls.n	8004c9a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c94:	2300      	movs	r3, #0
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	e002      	b.n	8004ca0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c9a:	2380      	movs	r3, #128	; 0x80
 8004c9c:	015b      	lsls	r3, r3, #5
 8004c9e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	23f0      	movs	r3, #240	; 0xf0
 8004ca6:	011b      	lsls	r3, r3, #4
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d008      	beq.n	8004cbe <HAL_SPI_Init+0xaa>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68da      	ldr	r2, [r3, #12]
 8004cb0:	23e0      	movs	r3, #224	; 0xe0
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d002      	beq.n	8004cbe <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685a      	ldr	r2, [r3, #4]
 8004cc2:	2382      	movs	r3, #130	; 0x82
 8004cc4:	005b      	lsls	r3, r3, #1
 8004cc6:	401a      	ands	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6899      	ldr	r1, [r3, #8]
 8004ccc:	2384      	movs	r3, #132	; 0x84
 8004cce:	021b      	lsls	r3, r3, #8
 8004cd0:	400b      	ands	r3, r1
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	2102      	movs	r1, #2
 8004cda:	400b      	ands	r3, r1
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	2101      	movs	r1, #1
 8004ce4:	400b      	ands	r3, r1
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6999      	ldr	r1, [r3, #24]
 8004cec:	2380      	movs	r3, #128	; 0x80
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	400b      	ands	r3, r1
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	2138      	movs	r1, #56	; 0x38
 8004cfa:	400b      	ands	r3, r1
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	2180      	movs	r1, #128	; 0x80
 8004d04:	400b      	ands	r3, r1
 8004d06:	431a      	orrs	r2, r3
 8004d08:	0011      	movs	r1, r2
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d0e:	2380      	movs	r3, #128	; 0x80
 8004d10:	019b      	lsls	r3, r3, #6
 8004d12:	401a      	ands	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	0c1b      	lsrs	r3, r3, #16
 8004d22:	2204      	movs	r2, #4
 8004d24:	401a      	ands	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	2110      	movs	r1, #16
 8004d2c:	400b      	ands	r3, r1
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d34:	2108      	movs	r1, #8
 8004d36:	400b      	ands	r3, r1
 8004d38:	431a      	orrs	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68d9      	ldr	r1, [r3, #12]
 8004d3e:	23f0      	movs	r3, #240	; 0xf0
 8004d40:	011b      	lsls	r3, r3, #4
 8004d42:	400b      	ands	r3, r1
 8004d44:	431a      	orrs	r2, r3
 8004d46:	0011      	movs	r1, r2
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	2380      	movs	r3, #128	; 0x80
 8004d4c:	015b      	lsls	r3, r3, #5
 8004d4e:	401a      	ands	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	69da      	ldr	r2, [r3, #28]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4907      	ldr	r1, [pc, #28]	; (8004d80 <HAL_SPI_Init+0x16c>)
 8004d64:	400a      	ands	r2, r1
 8004d66:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	225d      	movs	r2, #93	; 0x5d
 8004d72:	2101      	movs	r1, #1
 8004d74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	0018      	movs	r0, r3
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	b004      	add	sp, #16
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	fffff7ff 	.word	0xfffff7ff

08004d84 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b088      	sub	sp, #32
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	603b      	str	r3, [r7, #0]
 8004d90:	1dbb      	adds	r3, r7, #6
 8004d92:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d94:	231f      	movs	r3, #31
 8004d96:	18fb      	adds	r3, r7, r3
 8004d98:	2200      	movs	r2, #0
 8004d9a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	225c      	movs	r2, #92	; 0x5c
 8004da0:	5c9b      	ldrb	r3, [r3, r2]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d101      	bne.n	8004daa <HAL_SPI_Transmit+0x26>
 8004da6:	2302      	movs	r3, #2
 8004da8:	e140      	b.n	800502c <HAL_SPI_Transmit+0x2a8>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	225c      	movs	r2, #92	; 0x5c
 8004dae:	2101      	movs	r1, #1
 8004db0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004db2:	f7fd f8d7 	bl	8001f64 <HAL_GetTick>
 8004db6:	0003      	movs	r3, r0
 8004db8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004dba:	2316      	movs	r3, #22
 8004dbc:	18fb      	adds	r3, r7, r3
 8004dbe:	1dba      	adds	r2, r7, #6
 8004dc0:	8812      	ldrh	r2, [r2, #0]
 8004dc2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	225d      	movs	r2, #93	; 0x5d
 8004dc8:	5c9b      	ldrb	r3, [r3, r2]
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d004      	beq.n	8004dda <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004dd0:	231f      	movs	r3, #31
 8004dd2:	18fb      	adds	r3, r7, r3
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	701a      	strb	r2, [r3, #0]
    goto error;
 8004dd8:	e11d      	b.n	8005016 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d003      	beq.n	8004de8 <HAL_SPI_Transmit+0x64>
 8004de0:	1dbb      	adds	r3, r7, #6
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d104      	bne.n	8004df2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004de8:	231f      	movs	r3, #31
 8004dea:	18fb      	adds	r3, r7, r3
 8004dec:	2201      	movs	r2, #1
 8004dee:	701a      	strb	r2, [r3, #0]
    goto error;
 8004df0:	e111      	b.n	8005016 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	225d      	movs	r2, #93	; 0x5d
 8004df6:	2103      	movs	r1, #3
 8004df8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	1dba      	adds	r2, r7, #6
 8004e0a:	8812      	ldrh	r2, [r2, #0]
 8004e0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	1dba      	adds	r2, r7, #6
 8004e12:	8812      	ldrh	r2, [r2, #0]
 8004e14:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2244      	movs	r2, #68	; 0x44
 8004e20:	2100      	movs	r1, #0
 8004e22:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2246      	movs	r2, #70	; 0x46
 8004e28:	2100      	movs	r1, #0
 8004e2a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	2380      	movs	r3, #128	; 0x80
 8004e3e:	021b      	lsls	r3, r3, #8
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d110      	bne.n	8004e66 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2140      	movs	r1, #64	; 0x40
 8004e50:	438a      	bics	r2, r1
 8004e52:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2180      	movs	r1, #128	; 0x80
 8004e60:	01c9      	lsls	r1, r1, #7
 8004e62:	430a      	orrs	r2, r1
 8004e64:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2240      	movs	r2, #64	; 0x40
 8004e6e:	4013      	ands	r3, r2
 8004e70:	2b40      	cmp	r3, #64	; 0x40
 8004e72:	d007      	beq.n	8004e84 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2140      	movs	r1, #64	; 0x40
 8004e80:	430a      	orrs	r2, r1
 8004e82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	68da      	ldr	r2, [r3, #12]
 8004e88:	23e0      	movs	r3, #224	; 0xe0
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d94e      	bls.n	8004f2e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d004      	beq.n	8004ea2 <HAL_SPI_Transmit+0x11e>
 8004e98:	2316      	movs	r3, #22
 8004e9a:	18fb      	adds	r3, r7, r3
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d13f      	bne.n	8004f22 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea6:	881a      	ldrh	r2, [r3, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb2:	1c9a      	adds	r2, r3, #2
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ec6:	e02c      	b.n	8004f22 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d112      	bne.n	8004efc <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eda:	881a      	ldrh	r2, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee6:	1c9a      	adds	r2, r3, #2
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004efa:	e012      	b.n	8004f22 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004efc:	f7fd f832 	bl	8001f64 <HAL_GetTick>
 8004f00:	0002      	movs	r2, r0
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d802      	bhi.n	8004f12 <HAL_SPI_Transmit+0x18e>
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	d102      	bne.n	8004f18 <HAL_SPI_Transmit+0x194>
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d104      	bne.n	8004f22 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8004f18:	231f      	movs	r3, #31
 8004f1a:	18fb      	adds	r3, r7, r3
 8004f1c:	2203      	movs	r2, #3
 8004f1e:	701a      	strb	r2, [r3, #0]
          goto error;
 8004f20:	e079      	b.n	8005016 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1cd      	bne.n	8004ec8 <HAL_SPI_Transmit+0x144>
 8004f2c:	e04f      	b.n	8004fce <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d004      	beq.n	8004f40 <HAL_SPI_Transmit+0x1bc>
 8004f36:	2316      	movs	r3, #22
 8004f38:	18fb      	adds	r3, r7, r3
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d141      	bne.n	8004fc4 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	330c      	adds	r3, #12
 8004f4a:	7812      	ldrb	r2, [r2, #0]
 8004f4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f52:	1c5a      	adds	r2, r3, #1
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8004f66:	e02d      	b.n	8004fc4 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	4013      	ands	r3, r2
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d113      	bne.n	8004f9e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	330c      	adds	r3, #12
 8004f80:	7812      	ldrb	r2, [r2, #0]
 8004f82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f88:	1c5a      	adds	r2, r3, #1
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	3b01      	subs	r3, #1
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f9c:	e012      	b.n	8004fc4 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f9e:	f7fc ffe1 	bl	8001f64 <HAL_GetTick>
 8004fa2:	0002      	movs	r2, r0
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d802      	bhi.n	8004fb4 <HAL_SPI_Transmit+0x230>
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	d102      	bne.n	8004fba <HAL_SPI_Transmit+0x236>
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d104      	bne.n	8004fc4 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8004fba:	231f      	movs	r3, #31
 8004fbc:	18fb      	adds	r3, r7, r3
 8004fbe:	2203      	movs	r2, #3
 8004fc0:	701a      	strb	r2, [r3, #0]
          goto error;
 8004fc2:	e028      	b.n	8005016 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1cc      	bne.n	8004f68 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	6839      	ldr	r1, [r7, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	f000 fccf 	bl	8005978 <SPI_EndRxTxTransaction>
 8004fda:	1e03      	subs	r3, r0, #0
 8004fdc:	d002      	beq.n	8004fe4 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d10a      	bne.n	8005002 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fec:	2300      	movs	r3, #0
 8004fee:	613b      	str	r3, [r7, #16]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	613b      	str	r3, [r7, #16]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	613b      	str	r3, [r7, #16]
 8005000:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005006:	2b00      	cmp	r3, #0
 8005008:	d004      	beq.n	8005014 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800500a:	231f      	movs	r3, #31
 800500c:	18fb      	adds	r3, r7, r3
 800500e:	2201      	movs	r2, #1
 8005010:	701a      	strb	r2, [r3, #0]
 8005012:	e000      	b.n	8005016 <HAL_SPI_Transmit+0x292>
  }

error:
 8005014:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	225d      	movs	r2, #93	; 0x5d
 800501a:	2101      	movs	r1, #1
 800501c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	225c      	movs	r2, #92	; 0x5c
 8005022:	2100      	movs	r1, #0
 8005024:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005026:	231f      	movs	r3, #31
 8005028:	18fb      	adds	r3, r7, r3
 800502a:	781b      	ldrb	r3, [r3, #0]
}
 800502c:	0018      	movs	r0, r3
 800502e:	46bd      	mov	sp, r7
 8005030:	b008      	add	sp, #32
 8005032:	bd80      	pop	{r7, pc}

08005034 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005034:	b590      	push	{r4, r7, lr}
 8005036:	b089      	sub	sp, #36	; 0x24
 8005038:	af02      	add	r7, sp, #8
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	603b      	str	r3, [r7, #0]
 8005040:	1dbb      	adds	r3, r7, #6
 8005042:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005044:	2317      	movs	r3, #23
 8005046:	18fb      	adds	r3, r7, r3
 8005048:	2200      	movs	r2, #0
 800504a:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	2382      	movs	r3, #130	; 0x82
 8005052:	005b      	lsls	r3, r3, #1
 8005054:	429a      	cmp	r2, r3
 8005056:	d113      	bne.n	8005080 <HAL_SPI_Receive+0x4c>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10f      	bne.n	8005080 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	225d      	movs	r2, #93	; 0x5d
 8005064:	2104      	movs	r1, #4
 8005066:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005068:	1dbb      	adds	r3, r7, #6
 800506a:	881c      	ldrh	r4, [r3, #0]
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	68b9      	ldr	r1, [r7, #8]
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	0023      	movs	r3, r4
 8005078:	f000 f928 	bl	80052cc <HAL_SPI_TransmitReceive>
 800507c:	0003      	movs	r3, r0
 800507e:	e11c      	b.n	80052ba <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	225c      	movs	r2, #92	; 0x5c
 8005084:	5c9b      	ldrb	r3, [r3, r2]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d101      	bne.n	800508e <HAL_SPI_Receive+0x5a>
 800508a:	2302      	movs	r3, #2
 800508c:	e115      	b.n	80052ba <HAL_SPI_Receive+0x286>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	225c      	movs	r2, #92	; 0x5c
 8005092:	2101      	movs	r1, #1
 8005094:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005096:	f7fc ff65 	bl	8001f64 <HAL_GetTick>
 800509a:	0003      	movs	r3, r0
 800509c:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	225d      	movs	r2, #93	; 0x5d
 80050a2:	5c9b      	ldrb	r3, [r3, r2]
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d004      	beq.n	80050b4 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80050aa:	2317      	movs	r3, #23
 80050ac:	18fb      	adds	r3, r7, r3
 80050ae:	2202      	movs	r2, #2
 80050b0:	701a      	strb	r2, [r3, #0]
    goto error;
 80050b2:	e0f7      	b.n	80052a4 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <HAL_SPI_Receive+0x8e>
 80050ba:	1dbb      	adds	r3, r7, #6
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d104      	bne.n	80050cc <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80050c2:	2317      	movs	r3, #23
 80050c4:	18fb      	adds	r3, r7, r3
 80050c6:	2201      	movs	r2, #1
 80050c8:	701a      	strb	r2, [r3, #0]
    goto error;
 80050ca:	e0eb      	b.n	80052a4 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	225d      	movs	r2, #93	; 0x5d
 80050d0:	2104      	movs	r1, #4
 80050d2:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	68ba      	ldr	r2, [r7, #8]
 80050de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	1dba      	adds	r2, r7, #6
 80050e4:	2144      	movs	r1, #68	; 0x44
 80050e6:	8812      	ldrh	r2, [r2, #0]
 80050e8:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	1dba      	adds	r2, r7, #6
 80050ee:	2146      	movs	r1, #70	; 0x46
 80050f0:	8812      	ldrh	r2, [r2, #0]
 80050f2:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	68da      	ldr	r2, [r3, #12]
 8005116:	23e0      	movs	r3, #224	; 0xe0
 8005118:	00db      	lsls	r3, r3, #3
 800511a:	429a      	cmp	r2, r3
 800511c:	d908      	bls.n	8005130 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	685a      	ldr	r2, [r3, #4]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4966      	ldr	r1, [pc, #408]	; (80052c4 <HAL_SPI_Receive+0x290>)
 800512a:	400a      	ands	r2, r1
 800512c:	605a      	str	r2, [r3, #4]
 800512e:	e008      	b.n	8005142 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2180      	movs	r1, #128	; 0x80
 800513c:	0149      	lsls	r1, r1, #5
 800513e:	430a      	orrs	r2, r1
 8005140:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	689a      	ldr	r2, [r3, #8]
 8005146:	2380      	movs	r3, #128	; 0x80
 8005148:	021b      	lsls	r3, r3, #8
 800514a:	429a      	cmp	r2, r3
 800514c:	d10f      	bne.n	800516e <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2140      	movs	r1, #64	; 0x40
 800515a:	438a      	bics	r2, r1
 800515c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4957      	ldr	r1, [pc, #348]	; (80052c8 <HAL_SPI_Receive+0x294>)
 800516a:	400a      	ands	r2, r1
 800516c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2240      	movs	r2, #64	; 0x40
 8005176:	4013      	ands	r3, r2
 8005178:	2b40      	cmp	r3, #64	; 0x40
 800517a:	d007      	beq.n	800518c <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2140      	movs	r1, #64	; 0x40
 8005188:	430a      	orrs	r2, r1
 800518a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	68da      	ldr	r2, [r3, #12]
 8005190:	23e0      	movs	r3, #224	; 0xe0
 8005192:	00db      	lsls	r3, r3, #3
 8005194:	429a      	cmp	r2, r3
 8005196:	d900      	bls.n	800519a <HAL_SPI_Receive+0x166>
 8005198:	e069      	b.n	800526e <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800519a:	e031      	b.n	8005200 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	2201      	movs	r2, #1
 80051a4:	4013      	ands	r3, r2
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d117      	bne.n	80051da <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	330c      	adds	r3, #12
 80051b0:	001a      	movs	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b6:	7812      	ldrb	r2, [r2, #0]
 80051b8:	b2d2      	uxtb	r2, r2
 80051ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c0:	1c5a      	adds	r2, r3, #1
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2246      	movs	r2, #70	; 0x46
 80051ca:	5a9b      	ldrh	r3, [r3, r2]
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	3b01      	subs	r3, #1
 80051d0:	b299      	uxth	r1, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2246      	movs	r2, #70	; 0x46
 80051d6:	5299      	strh	r1, [r3, r2]
 80051d8:	e012      	b.n	8005200 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051da:	f7fc fec3 	bl	8001f64 <HAL_GetTick>
 80051de:	0002      	movs	r2, r0
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	683a      	ldr	r2, [r7, #0]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d802      	bhi.n	80051f0 <HAL_SPI_Receive+0x1bc>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	3301      	adds	r3, #1
 80051ee:	d102      	bne.n	80051f6 <HAL_SPI_Receive+0x1c2>
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d104      	bne.n	8005200 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 80051f6:	2317      	movs	r3, #23
 80051f8:	18fb      	adds	r3, r7, r3
 80051fa:	2203      	movs	r2, #3
 80051fc:	701a      	strb	r2, [r3, #0]
          goto error;
 80051fe:	e051      	b.n	80052a4 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2246      	movs	r2, #70	; 0x46
 8005204:	5a9b      	ldrh	r3, [r3, r2]
 8005206:	b29b      	uxth	r3, r3
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1c7      	bne.n	800519c <HAL_SPI_Receive+0x168>
 800520c:	e035      	b.n	800527a <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	2201      	movs	r2, #1
 8005216:	4013      	ands	r3, r2
 8005218:	2b01      	cmp	r3, #1
 800521a:	d115      	bne.n	8005248 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68da      	ldr	r2, [r3, #12]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	b292      	uxth	r2, r2
 8005228:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	1c9a      	adds	r2, r3, #2
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2246      	movs	r2, #70	; 0x46
 8005238:	5a9b      	ldrh	r3, [r3, r2]
 800523a:	b29b      	uxth	r3, r3
 800523c:	3b01      	subs	r3, #1
 800523e:	b299      	uxth	r1, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2246      	movs	r2, #70	; 0x46
 8005244:	5299      	strh	r1, [r3, r2]
 8005246:	e012      	b.n	800526e <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005248:	f7fc fe8c 	bl	8001f64 <HAL_GetTick>
 800524c:	0002      	movs	r2, r0
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	429a      	cmp	r2, r3
 8005256:	d802      	bhi.n	800525e <HAL_SPI_Receive+0x22a>
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	3301      	adds	r3, #1
 800525c:	d102      	bne.n	8005264 <HAL_SPI_Receive+0x230>
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d104      	bne.n	800526e <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8005264:	2317      	movs	r3, #23
 8005266:	18fb      	adds	r3, r7, r3
 8005268:	2203      	movs	r2, #3
 800526a:	701a      	strb	r2, [r3, #0]
          goto error;
 800526c:	e01a      	b.n	80052a4 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2246      	movs	r2, #70	; 0x46
 8005272:	5a9b      	ldrh	r3, [r3, r2]
 8005274:	b29b      	uxth	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1c9      	bne.n	800520e <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	6839      	ldr	r1, [r7, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	0018      	movs	r0, r3
 8005282:	f000 fb1b 	bl	80058bc <SPI_EndRxTransaction>
 8005286:	1e03      	subs	r3, r0, #0
 8005288:	d002      	beq.n	8005290 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2220      	movs	r2, #32
 800528e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005294:	2b00      	cmp	r3, #0
 8005296:	d004      	beq.n	80052a2 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8005298:	2317      	movs	r3, #23
 800529a:	18fb      	adds	r3, r7, r3
 800529c:	2201      	movs	r2, #1
 800529e:	701a      	strb	r2, [r3, #0]
 80052a0:	e000      	b.n	80052a4 <HAL_SPI_Receive+0x270>
  }

error :
 80052a2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	225d      	movs	r2, #93	; 0x5d
 80052a8:	2101      	movs	r1, #1
 80052aa:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	225c      	movs	r2, #92	; 0x5c
 80052b0:	2100      	movs	r1, #0
 80052b2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80052b4:	2317      	movs	r3, #23
 80052b6:	18fb      	adds	r3, r7, r3
 80052b8:	781b      	ldrb	r3, [r3, #0]
}
 80052ba:	0018      	movs	r0, r3
 80052bc:	46bd      	mov	sp, r7
 80052be:	b007      	add	sp, #28
 80052c0:	bd90      	pop	{r4, r7, pc}
 80052c2:	46c0      	nop			; (mov r8, r8)
 80052c4:	ffffefff 	.word	0xffffefff
 80052c8:	ffffbfff 	.word	0xffffbfff

080052cc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b08a      	sub	sp, #40	; 0x28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
 80052d8:	001a      	movs	r2, r3
 80052da:	1cbb      	adds	r3, r7, #2
 80052dc:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80052de:	2301      	movs	r3, #1
 80052e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80052e2:	2323      	movs	r3, #35	; 0x23
 80052e4:	18fb      	adds	r3, r7, r3
 80052e6:	2200      	movs	r2, #0
 80052e8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	225c      	movs	r2, #92	; 0x5c
 80052ee:	5c9b      	ldrb	r3, [r3, r2]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d101      	bne.n	80052f8 <HAL_SPI_TransmitReceive+0x2c>
 80052f4:	2302      	movs	r3, #2
 80052f6:	e1b6      	b.n	8005666 <HAL_SPI_TransmitReceive+0x39a>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	225c      	movs	r2, #92	; 0x5c
 80052fc:	2101      	movs	r1, #1
 80052fe:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005300:	f7fc fe30 	bl	8001f64 <HAL_GetTick>
 8005304:	0003      	movs	r3, r0
 8005306:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005308:	201b      	movs	r0, #27
 800530a:	183b      	adds	r3, r7, r0
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	215d      	movs	r1, #93	; 0x5d
 8005310:	5c52      	ldrb	r2, [r2, r1]
 8005312:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800531a:	2312      	movs	r3, #18
 800531c:	18fb      	adds	r3, r7, r3
 800531e:	1cba      	adds	r2, r7, #2
 8005320:	8812      	ldrh	r2, [r2, #0]
 8005322:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005324:	183b      	adds	r3, r7, r0
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d012      	beq.n	8005352 <HAL_SPI_TransmitReceive+0x86>
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	2382      	movs	r3, #130	; 0x82
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	429a      	cmp	r2, r3
 8005334:	d108      	bne.n	8005348 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d104      	bne.n	8005348 <HAL_SPI_TransmitReceive+0x7c>
 800533e:	231b      	movs	r3, #27
 8005340:	18fb      	adds	r3, r7, r3
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	2b04      	cmp	r3, #4
 8005346:	d004      	beq.n	8005352 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8005348:	2323      	movs	r3, #35	; 0x23
 800534a:	18fb      	adds	r3, r7, r3
 800534c:	2202      	movs	r2, #2
 800534e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005350:	e17e      	b.n	8005650 <HAL_SPI_TransmitReceive+0x384>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d006      	beq.n	8005366 <HAL_SPI_TransmitReceive+0x9a>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <HAL_SPI_TransmitReceive+0x9a>
 800535e:	1cbb      	adds	r3, r7, #2
 8005360:	881b      	ldrh	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d104      	bne.n	8005370 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 8005366:	2323      	movs	r3, #35	; 0x23
 8005368:	18fb      	adds	r3, r7, r3
 800536a:	2201      	movs	r2, #1
 800536c:	701a      	strb	r2, [r3, #0]
    goto error;
 800536e:	e16f      	b.n	8005650 <HAL_SPI_TransmitReceive+0x384>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	225d      	movs	r2, #93	; 0x5d
 8005374:	5c9b      	ldrb	r3, [r3, r2]
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b04      	cmp	r3, #4
 800537a:	d003      	beq.n	8005384 <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	225d      	movs	r2, #93	; 0x5d
 8005380:	2105      	movs	r1, #5
 8005382:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	1cba      	adds	r2, r7, #2
 8005394:	2146      	movs	r1, #70	; 0x46
 8005396:	8812      	ldrh	r2, [r2, #0]
 8005398:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	1cba      	adds	r2, r7, #2
 800539e:	2144      	movs	r1, #68	; 0x44
 80053a0:	8812      	ldrh	r2, [r2, #0]
 80053a2:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	1cba      	adds	r2, r7, #2
 80053ae:	8812      	ldrh	r2, [r2, #0]
 80053b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	1cba      	adds	r2, r7, #2
 80053b6:	8812      	ldrh	r2, [r2, #0]
 80053b8:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	23e0      	movs	r3, #224	; 0xe0
 80053cc:	00db      	lsls	r3, r3, #3
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d908      	bls.n	80053e4 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	49a4      	ldr	r1, [pc, #656]	; (8005670 <HAL_SPI_TransmitReceive+0x3a4>)
 80053de:	400a      	ands	r2, r1
 80053e0:	605a      	str	r2, [r3, #4]
 80053e2:	e008      	b.n	80053f6 <HAL_SPI_TransmitReceive+0x12a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2180      	movs	r1, #128	; 0x80
 80053f0:	0149      	lsls	r1, r1, #5
 80053f2:	430a      	orrs	r2, r1
 80053f4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2240      	movs	r2, #64	; 0x40
 80053fe:	4013      	ands	r3, r2
 8005400:	2b40      	cmp	r3, #64	; 0x40
 8005402:	d007      	beq.n	8005414 <HAL_SPI_TransmitReceive+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2140      	movs	r1, #64	; 0x40
 8005410:	430a      	orrs	r2, r1
 8005412:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	68da      	ldr	r2, [r3, #12]
 8005418:	23e0      	movs	r3, #224	; 0xe0
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	429a      	cmp	r2, r3
 800541e:	d800      	bhi.n	8005422 <HAL_SPI_TransmitReceive+0x156>
 8005420:	e07f      	b.n	8005522 <HAL_SPI_TransmitReceive+0x256>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d005      	beq.n	8005436 <HAL_SPI_TransmitReceive+0x16a>
 800542a:	2312      	movs	r3, #18
 800542c:	18fb      	adds	r3, r7, r3
 800542e:	881b      	ldrh	r3, [r3, #0]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d000      	beq.n	8005436 <HAL_SPI_TransmitReceive+0x16a>
 8005434:	e069      	b.n	800550a <HAL_SPI_TransmitReceive+0x23e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543a:	881a      	ldrh	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005446:	1c9a      	adds	r2, r3, #2
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005450:	b29b      	uxth	r3, r3
 8005452:	3b01      	subs	r3, #1
 8005454:	b29a      	uxth	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800545a:	e056      	b.n	800550a <HAL_SPI_TransmitReceive+0x23e>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	2202      	movs	r2, #2
 8005464:	4013      	ands	r3, r2
 8005466:	2b02      	cmp	r3, #2
 8005468:	d11b      	bne.n	80054a2 <HAL_SPI_TransmitReceive+0x1d6>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800546e:	b29b      	uxth	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	d016      	beq.n	80054a2 <HAL_SPI_TransmitReceive+0x1d6>
 8005474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005476:	2b01      	cmp	r3, #1
 8005478:	d113      	bne.n	80054a2 <HAL_SPI_TransmitReceive+0x1d6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547e:	881a      	ldrh	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548a:	1c9a      	adds	r2, r3, #2
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005494:	b29b      	uxth	r3, r3
 8005496:	3b01      	subs	r3, #1
 8005498:	b29a      	uxth	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800549e:	2300      	movs	r3, #0
 80054a0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	2201      	movs	r2, #1
 80054aa:	4013      	ands	r3, r2
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d11c      	bne.n	80054ea <HAL_SPI_TransmitReceive+0x21e>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2246      	movs	r2, #70	; 0x46
 80054b4:	5a9b      	ldrh	r3, [r3, r2]
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d016      	beq.n	80054ea <HAL_SPI_TransmitReceive+0x21e>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68da      	ldr	r2, [r3, #12]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c6:	b292      	uxth	r2, r2
 80054c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	1c9a      	adds	r2, r3, #2
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2246      	movs	r2, #70	; 0x46
 80054d8:	5a9b      	ldrh	r3, [r3, r2]
 80054da:	b29b      	uxth	r3, r3
 80054dc:	3b01      	subs	r3, #1
 80054de:	b299      	uxth	r1, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2246      	movs	r2, #70	; 0x46
 80054e4:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054e6:	2301      	movs	r3, #1
 80054e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80054ea:	f7fc fd3b 	bl	8001f64 <HAL_GetTick>
 80054ee:	0002      	movs	r2, r0
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d807      	bhi.n	800550a <HAL_SPI_TransmitReceive+0x23e>
 80054fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fc:	3301      	adds	r3, #1
 80054fe:	d004      	beq.n	800550a <HAL_SPI_TransmitReceive+0x23e>
      {
        errorcode = HAL_TIMEOUT;
 8005500:	2323      	movs	r3, #35	; 0x23
 8005502:	18fb      	adds	r3, r7, r3
 8005504:	2203      	movs	r2, #3
 8005506:	701a      	strb	r2, [r3, #0]
        goto error;
 8005508:	e0a2      	b.n	8005650 <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800550e:	b29b      	uxth	r3, r3
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1a3      	bne.n	800545c <HAL_SPI_TransmitReceive+0x190>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2246      	movs	r2, #70	; 0x46
 8005518:	5a9b      	ldrh	r3, [r3, r2]
 800551a:	b29b      	uxth	r3, r3
 800551c:	2b00      	cmp	r3, #0
 800551e:	d19d      	bne.n	800545c <HAL_SPI_TransmitReceive+0x190>
 8005520:	e085      	b.n	800562e <HAL_SPI_TransmitReceive+0x362>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d005      	beq.n	8005536 <HAL_SPI_TransmitReceive+0x26a>
 800552a:	2312      	movs	r3, #18
 800552c:	18fb      	adds	r3, r7, r3
 800552e:	881b      	ldrh	r3, [r3, #0]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d000      	beq.n	8005536 <HAL_SPI_TransmitReceive+0x26a>
 8005534:	e070      	b.n	8005618 <HAL_SPI_TransmitReceive+0x34c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	330c      	adds	r3, #12
 8005540:	7812      	ldrb	r2, [r2, #0]
 8005542:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005548:	1c5a      	adds	r2, r3, #1
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005552:	b29b      	uxth	r3, r3
 8005554:	3b01      	subs	r3, #1
 8005556:	b29a      	uxth	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800555c:	e05c      	b.n	8005618 <HAL_SPI_TransmitReceive+0x34c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	2202      	movs	r2, #2
 8005566:	4013      	ands	r3, r2
 8005568:	2b02      	cmp	r3, #2
 800556a:	d11c      	bne.n	80055a6 <HAL_SPI_TransmitReceive+0x2da>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005570:	b29b      	uxth	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d017      	beq.n	80055a6 <HAL_SPI_TransmitReceive+0x2da>
 8005576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005578:	2b01      	cmp	r3, #1
 800557a:	d114      	bne.n	80055a6 <HAL_SPI_TransmitReceive+0x2da>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	330c      	adds	r3, #12
 8005586:	7812      	ldrb	r2, [r2, #0]
 8005588:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558e:	1c5a      	adds	r2, r3, #1
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005598:	b29b      	uxth	r3, r3
 800559a:	3b01      	subs	r3, #1
 800559c:	b29a      	uxth	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055a2:	2300      	movs	r3, #0
 80055a4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	2201      	movs	r2, #1
 80055ae:	4013      	ands	r3, r2
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d11e      	bne.n	80055f2 <HAL_SPI_TransmitReceive+0x326>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2246      	movs	r2, #70	; 0x46
 80055b8:	5a9b      	ldrh	r3, [r3, r2]
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d018      	beq.n	80055f2 <HAL_SPI_TransmitReceive+0x326>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	330c      	adds	r3, #12
 80055c6:	001a      	movs	r2, r3
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055cc:	7812      	ldrb	r2, [r2, #0]
 80055ce:	b2d2      	uxtb	r2, r2
 80055d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d6:	1c5a      	adds	r2, r3, #1
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2246      	movs	r2, #70	; 0x46
 80055e0:	5a9b      	ldrh	r3, [r3, r2]
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	3b01      	subs	r3, #1
 80055e6:	b299      	uxth	r1, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2246      	movs	r2, #70	; 0x46
 80055ec:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055ee:	2301      	movs	r3, #1
 80055f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80055f2:	f7fc fcb7 	bl	8001f64 <HAL_GetTick>
 80055f6:	0002      	movs	r2, r0
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055fe:	429a      	cmp	r2, r3
 8005600:	d802      	bhi.n	8005608 <HAL_SPI_TransmitReceive+0x33c>
 8005602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005604:	3301      	adds	r3, #1
 8005606:	d102      	bne.n	800560e <HAL_SPI_TransmitReceive+0x342>
 8005608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560a:	2b00      	cmp	r3, #0
 800560c:	d104      	bne.n	8005618 <HAL_SPI_TransmitReceive+0x34c>
      {
        errorcode = HAL_TIMEOUT;
 800560e:	2323      	movs	r3, #35	; 0x23
 8005610:	18fb      	adds	r3, r7, r3
 8005612:	2203      	movs	r2, #3
 8005614:	701a      	strb	r2, [r3, #0]
        goto error;
 8005616:	e01b      	b.n	8005650 <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800561c:	b29b      	uxth	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d19d      	bne.n	800555e <HAL_SPI_TransmitReceive+0x292>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2246      	movs	r2, #70	; 0x46
 8005626:	5a9b      	ldrh	r3, [r3, r2]
 8005628:	b29b      	uxth	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d197      	bne.n	800555e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800562e:	69fa      	ldr	r2, [r7, #28]
 8005630:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	0018      	movs	r0, r3
 8005636:	f000 f99f 	bl	8005978 <SPI_EndRxTxTransaction>
 800563a:	1e03      	subs	r3, r0, #0
 800563c:	d007      	beq.n	800564e <HAL_SPI_TransmitReceive+0x382>
  {
    errorcode = HAL_ERROR;
 800563e:	2323      	movs	r3, #35	; 0x23
 8005640:	18fb      	adds	r3, r7, r3
 8005642:	2201      	movs	r2, #1
 8005644:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2220      	movs	r2, #32
 800564a:	661a      	str	r2, [r3, #96]	; 0x60
 800564c:	e000      	b.n	8005650 <HAL_SPI_TransmitReceive+0x384>
  }

error :
 800564e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	225d      	movs	r2, #93	; 0x5d
 8005654:	2101      	movs	r1, #1
 8005656:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	225c      	movs	r2, #92	; 0x5c
 800565c:	2100      	movs	r1, #0
 800565e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005660:	2323      	movs	r3, #35	; 0x23
 8005662:	18fb      	adds	r3, r7, r3
 8005664:	781b      	ldrb	r3, [r3, #0]
}
 8005666:	0018      	movs	r0, r3
 8005668:	46bd      	mov	sp, r7
 800566a:	b00a      	add	sp, #40	; 0x28
 800566c:	bd80      	pop	{r7, pc}
 800566e:	46c0      	nop			; (mov r8, r8)
 8005670:	ffffefff 	.word	0xffffefff

08005674 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b088      	sub	sp, #32
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	603b      	str	r3, [r7, #0]
 8005680:	1dfb      	adds	r3, r7, #7
 8005682:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005684:	f7fc fc6e 	bl	8001f64 <HAL_GetTick>
 8005688:	0002      	movs	r2, r0
 800568a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568c:	1a9b      	subs	r3, r3, r2
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	18d3      	adds	r3, r2, r3
 8005692:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005694:	f7fc fc66 	bl	8001f64 <HAL_GetTick>
 8005698:	0003      	movs	r3, r0
 800569a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800569c:	4b3a      	ldr	r3, [pc, #232]	; (8005788 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	015b      	lsls	r3, r3, #5
 80056a2:	0d1b      	lsrs	r3, r3, #20
 80056a4:	69fa      	ldr	r2, [r7, #28]
 80056a6:	4353      	muls	r3, r2
 80056a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056aa:	e058      	b.n	800575e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	3301      	adds	r3, #1
 80056b0:	d055      	beq.n	800575e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056b2:	f7fc fc57 	bl	8001f64 <HAL_GetTick>
 80056b6:	0002      	movs	r2, r0
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	69fa      	ldr	r2, [r7, #28]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d902      	bls.n	80056c8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d142      	bne.n	800574e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	21e0      	movs	r1, #224	; 0xe0
 80056d4:	438a      	bics	r2, r1
 80056d6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	2382      	movs	r3, #130	; 0x82
 80056de:	005b      	lsls	r3, r3, #1
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d113      	bne.n	800570c <SPI_WaitFlagStateUntilTimeout+0x98>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	689a      	ldr	r2, [r3, #8]
 80056e8:	2380      	movs	r3, #128	; 0x80
 80056ea:	021b      	lsls	r3, r3, #8
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d005      	beq.n	80056fc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	689a      	ldr	r2, [r3, #8]
 80056f4:	2380      	movs	r3, #128	; 0x80
 80056f6:	00db      	lsls	r3, r3, #3
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d107      	bne.n	800570c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2140      	movs	r1, #64	; 0x40
 8005708:	438a      	bics	r2, r1
 800570a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005710:	2380      	movs	r3, #128	; 0x80
 8005712:	019b      	lsls	r3, r3, #6
 8005714:	429a      	cmp	r2, r3
 8005716:	d110      	bne.n	800573a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	491a      	ldr	r1, [pc, #104]	; (800578c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005724:	400a      	ands	r2, r1
 8005726:	601a      	str	r2, [r3, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2180      	movs	r1, #128	; 0x80
 8005734:	0189      	lsls	r1, r1, #6
 8005736:	430a      	orrs	r2, r1
 8005738:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	225d      	movs	r2, #93	; 0x5d
 800573e:	2101      	movs	r1, #1
 8005740:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	225c      	movs	r2, #92	; 0x5c
 8005746:	2100      	movs	r1, #0
 8005748:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e017      	b.n	800577e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005754:	2300      	movs	r3, #0
 8005756:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	3b01      	subs	r3, #1
 800575c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	4013      	ands	r3, r2
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	425a      	negs	r2, r3
 800576e:	4153      	adcs	r3, r2
 8005770:	b2db      	uxtb	r3, r3
 8005772:	001a      	movs	r2, r3
 8005774:	1dfb      	adds	r3, r7, #7
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	429a      	cmp	r2, r3
 800577a:	d197      	bne.n	80056ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	0018      	movs	r0, r3
 8005780:	46bd      	mov	sp, r7
 8005782:	b008      	add	sp, #32
 8005784:	bd80      	pop	{r7, pc}
 8005786:	46c0      	nop			; (mov r8, r8)
 8005788:	20000000 	.word	0x20000000
 800578c:	ffffdfff 	.word	0xffffdfff

08005790 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b088      	sub	sp, #32
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
 800579c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800579e:	f7fc fbe1 	bl	8001f64 <HAL_GetTick>
 80057a2:	0002      	movs	r2, r0
 80057a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a6:	1a9b      	subs	r3, r3, r2
 80057a8:	683a      	ldr	r2, [r7, #0]
 80057aa:	18d3      	adds	r3, r2, r3
 80057ac:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80057ae:	f7fc fbd9 	bl	8001f64 <HAL_GetTick>
 80057b2:	0003      	movs	r3, r0
 80057b4:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80057b6:	4b3f      	ldr	r3, [pc, #252]	; (80058b4 <SPI_WaitFifoStateUntilTimeout+0x124>)
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	0013      	movs	r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	189b      	adds	r3, r3, r2
 80057c0:	00da      	lsls	r2, r3, #3
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	0d1b      	lsrs	r3, r3, #20
 80057c6:	69fa      	ldr	r2, [r7, #28]
 80057c8:	4353      	muls	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 80057cc:	e064      	b.n	8005898 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	23c0      	movs	r3, #192	; 0xc0
 80057d2:	00db      	lsls	r3, r3, #3
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d106      	bne.n	80057e6 <SPI_WaitFifoStateUntilTimeout+0x56>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d103      	bne.n	80057e6 <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	330c      	adds	r3, #12
 80057e4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	3301      	adds	r3, #1
 80057ea:	d055      	beq.n	8005898 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057ec:	f7fc fbba 	bl	8001f64 <HAL_GetTick>
 80057f0:	0002      	movs	r2, r0
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	69fa      	ldr	r2, [r7, #28]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d902      	bls.n	8005802 <SPI_WaitFifoStateUntilTimeout+0x72>
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d142      	bne.n	8005888 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	685a      	ldr	r2, [r3, #4]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	21e0      	movs	r1, #224	; 0xe0
 800580e:	438a      	bics	r2, r1
 8005810:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	2382      	movs	r3, #130	; 0x82
 8005818:	005b      	lsls	r3, r3, #1
 800581a:	429a      	cmp	r2, r3
 800581c:	d113      	bne.n	8005846 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	689a      	ldr	r2, [r3, #8]
 8005822:	2380      	movs	r3, #128	; 0x80
 8005824:	021b      	lsls	r3, r3, #8
 8005826:	429a      	cmp	r2, r3
 8005828:	d005      	beq.n	8005836 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	689a      	ldr	r2, [r3, #8]
 800582e:	2380      	movs	r3, #128	; 0x80
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	429a      	cmp	r2, r3
 8005834:	d107      	bne.n	8005846 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2140      	movs	r1, #64	; 0x40
 8005842:	438a      	bics	r2, r1
 8005844:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800584a:	2380      	movs	r3, #128	; 0x80
 800584c:	019b      	lsls	r3, r3, #6
 800584e:	429a      	cmp	r2, r3
 8005850:	d110      	bne.n	8005874 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4916      	ldr	r1, [pc, #88]	; (80058b8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800585e:	400a      	ands	r2, r1
 8005860:	601a      	str	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2180      	movs	r1, #128	; 0x80
 800586e:	0189      	lsls	r1, r1, #6
 8005870:	430a      	orrs	r2, r1
 8005872:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	225d      	movs	r2, #93	; 0x5d
 8005878:	2101      	movs	r1, #1
 800587a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	225c      	movs	r2, #92	; 0x5c
 8005880:	2100      	movs	r1, #0
 8005882:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e010      	b.n	80058aa <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 800588e:	2300      	movs	r3, #0
 8005890:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	3b01      	subs	r3, #1
 8005896:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	4013      	ands	r3, r2
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d192      	bne.n	80057ce <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	0018      	movs	r0, r3
 80058ac:	46bd      	mov	sp, r7
 80058ae:	b008      	add	sp, #32
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	46c0      	nop			; (mov r8, r8)
 80058b4:	20000000 	.word	0x20000000
 80058b8:	ffffdfff 	.word	0xffffdfff

080058bc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af02      	add	r7, sp, #8
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	2382      	movs	r3, #130	; 0x82
 80058ce:	005b      	lsls	r3, r3, #1
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d113      	bne.n	80058fc <SPI_EndRxTransaction+0x40>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	689a      	ldr	r2, [r3, #8]
 80058d8:	2380      	movs	r3, #128	; 0x80
 80058da:	021b      	lsls	r3, r3, #8
 80058dc:	429a      	cmp	r2, r3
 80058de:	d005      	beq.n	80058ec <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	689a      	ldr	r2, [r3, #8]
 80058e4:	2380      	movs	r3, #128	; 0x80
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d107      	bne.n	80058fc <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2140      	movs	r1, #64	; 0x40
 80058f8:	438a      	bics	r2, r1
 80058fa:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	9300      	str	r3, [sp, #0]
 8005904:	0013      	movs	r3, r2
 8005906:	2200      	movs	r2, #0
 8005908:	2180      	movs	r1, #128	; 0x80
 800590a:	f7ff feb3 	bl	8005674 <SPI_WaitFlagStateUntilTimeout>
 800590e:	1e03      	subs	r3, r0, #0
 8005910:	d007      	beq.n	8005922 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005916:	2220      	movs	r2, #32
 8005918:	431a      	orrs	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e026      	b.n	8005970 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	2382      	movs	r3, #130	; 0x82
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	429a      	cmp	r2, r3
 800592c:	d11f      	bne.n	800596e <SPI_EndRxTransaction+0xb2>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	689a      	ldr	r2, [r3, #8]
 8005932:	2380      	movs	r3, #128	; 0x80
 8005934:	021b      	lsls	r3, r3, #8
 8005936:	429a      	cmp	r2, r3
 8005938:	d005      	beq.n	8005946 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	689a      	ldr	r2, [r3, #8]
 800593e:	2380      	movs	r3, #128	; 0x80
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	429a      	cmp	r2, r3
 8005944:	d113      	bne.n	800596e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	23c0      	movs	r3, #192	; 0xc0
 800594a:	00d9      	lsls	r1, r3, #3
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	9300      	str	r3, [sp, #0]
 8005952:	0013      	movs	r3, r2
 8005954:	2200      	movs	r2, #0
 8005956:	f7ff ff1b 	bl	8005790 <SPI_WaitFifoStateUntilTimeout>
 800595a:	1e03      	subs	r3, r0, #0
 800595c:	d007      	beq.n	800596e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005962:	2220      	movs	r2, #32
 8005964:	431a      	orrs	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e000      	b.n	8005970 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	0018      	movs	r0, r3
 8005972:	46bd      	mov	sp, r7
 8005974:	b004      	add	sp, #16
 8005976:	bd80      	pop	{r7, pc}

08005978 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af02      	add	r7, sp, #8
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	23c0      	movs	r3, #192	; 0xc0
 8005988:	0159      	lsls	r1, r3, #5
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	9300      	str	r3, [sp, #0]
 8005990:	0013      	movs	r3, r2
 8005992:	2200      	movs	r2, #0
 8005994:	f7ff fefc 	bl	8005790 <SPI_WaitFifoStateUntilTimeout>
 8005998:	1e03      	subs	r3, r0, #0
 800599a:	d007      	beq.n	80059ac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059a0:	2220      	movs	r2, #32
 80059a2:	431a      	orrs	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e027      	b.n	80059fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	0013      	movs	r3, r2
 80059b6:	2200      	movs	r2, #0
 80059b8:	2180      	movs	r1, #128	; 0x80
 80059ba:	f7ff fe5b 	bl	8005674 <SPI_WaitFlagStateUntilTimeout>
 80059be:	1e03      	subs	r3, r0, #0
 80059c0:	d007      	beq.n	80059d2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059c6:	2220      	movs	r2, #32
 80059c8:	431a      	orrs	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e014      	b.n	80059fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	23c0      	movs	r3, #192	; 0xc0
 80059d6:	00d9      	lsls	r1, r3, #3
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	0013      	movs	r3, r2
 80059e0:	2200      	movs	r2, #0
 80059e2:	f7ff fed5 	bl	8005790 <SPI_WaitFifoStateUntilTimeout>
 80059e6:	1e03      	subs	r3, r0, #0
 80059e8:	d007      	beq.n	80059fa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ee:	2220      	movs	r2, #32
 80059f0:	431a      	orrs	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e000      	b.n	80059fc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	0018      	movs	r0, r3
 80059fe:	46bd      	mov	sp, r7
 8005a00:	b004      	add	sp, #16
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e04a      	b.n	8005aac <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	223d      	movs	r2, #61	; 0x3d
 8005a1a:	5c9b      	ldrb	r3, [r3, r2]
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d107      	bne.n	8005a32 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	223c      	movs	r2, #60	; 0x3c
 8005a26:	2100      	movs	r1, #0
 8005a28:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	0018      	movs	r0, r3
 8005a2e:	f7fc f889 	bl	8001b44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	223d      	movs	r2, #61	; 0x3d
 8005a36:	2102      	movs	r1, #2
 8005a38:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	3304      	adds	r3, #4
 8005a42:	0019      	movs	r1, r3
 8005a44:	0010      	movs	r0, r2
 8005a46:	f000 fc1b 	bl	8006280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2248      	movs	r2, #72	; 0x48
 8005a4e:	2101      	movs	r1, #1
 8005a50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	223e      	movs	r2, #62	; 0x3e
 8005a56:	2101      	movs	r1, #1
 8005a58:	5499      	strb	r1, [r3, r2]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	223f      	movs	r2, #63	; 0x3f
 8005a5e:	2101      	movs	r1, #1
 8005a60:	5499      	strb	r1, [r3, r2]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2240      	movs	r2, #64	; 0x40
 8005a66:	2101      	movs	r1, #1
 8005a68:	5499      	strb	r1, [r3, r2]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2241      	movs	r2, #65	; 0x41
 8005a6e:	2101      	movs	r1, #1
 8005a70:	5499      	strb	r1, [r3, r2]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2242      	movs	r2, #66	; 0x42
 8005a76:	2101      	movs	r1, #1
 8005a78:	5499      	strb	r1, [r3, r2]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2243      	movs	r2, #67	; 0x43
 8005a7e:	2101      	movs	r1, #1
 8005a80:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2244      	movs	r2, #68	; 0x44
 8005a86:	2101      	movs	r1, #1
 8005a88:	5499      	strb	r1, [r3, r2]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2245      	movs	r2, #69	; 0x45
 8005a8e:	2101      	movs	r1, #1
 8005a90:	5499      	strb	r1, [r3, r2]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2246      	movs	r2, #70	; 0x46
 8005a96:	2101      	movs	r1, #1
 8005a98:	5499      	strb	r1, [r3, r2]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2247      	movs	r2, #71	; 0x47
 8005a9e:	2101      	movs	r1, #1
 8005aa0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	223d      	movs	r2, #61	; 0x3d
 8005aa6:	2101      	movs	r1, #1
 8005aa8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	0018      	movs	r0, r3
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	b002      	add	sp, #8
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	223d      	movs	r2, #61	; 0x3d
 8005ac0:	5c9b      	ldrb	r3, [r3, r2]
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d001      	beq.n	8005acc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e042      	b.n	8005b52 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	223d      	movs	r2, #61	; 0x3d
 8005ad0:	2102      	movs	r1, #2
 8005ad2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68da      	ldr	r2, [r3, #12]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2101      	movs	r1, #1
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a1c      	ldr	r2, [pc, #112]	; (8005b5c <HAL_TIM_Base_Start_IT+0xa8>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d00f      	beq.n	8005b0e <HAL_TIM_Base_Start_IT+0x5a>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	2380      	movs	r3, #128	; 0x80
 8005af4:	05db      	lsls	r3, r3, #23
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d009      	beq.n	8005b0e <HAL_TIM_Base_Start_IT+0x5a>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a18      	ldr	r2, [pc, #96]	; (8005b60 <HAL_TIM_Base_Start_IT+0xac>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d004      	beq.n	8005b0e <HAL_TIM_Base_Start_IT+0x5a>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a16      	ldr	r2, [pc, #88]	; (8005b64 <HAL_TIM_Base_Start_IT+0xb0>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d116      	bne.n	8005b3c <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	4a14      	ldr	r2, [pc, #80]	; (8005b68 <HAL_TIM_Base_Start_IT+0xb4>)
 8005b16:	4013      	ands	r3, r2
 8005b18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2b06      	cmp	r3, #6
 8005b1e:	d016      	beq.n	8005b4e <HAL_TIM_Base_Start_IT+0x9a>
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	2380      	movs	r3, #128	; 0x80
 8005b24:	025b      	lsls	r3, r3, #9
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d011      	beq.n	8005b4e <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2101      	movs	r1, #1
 8005b36:	430a      	orrs	r2, r1
 8005b38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b3a:	e008      	b.n	8005b4e <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2101      	movs	r1, #1
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	601a      	str	r2, [r3, #0]
 8005b4c:	e000      	b.n	8005b50 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b4e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	0018      	movs	r0, r3
 8005b54:	46bd      	mov	sp, r7
 8005b56:	b004      	add	sp, #16
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	46c0      	nop			; (mov r8, r8)
 8005b5c:	40012c00 	.word	0x40012c00
 8005b60:	40000400 	.word	0x40000400
 8005b64:	40014000 	.word	0x40014000
 8005b68:	00010007 	.word	0x00010007

08005b6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d101      	bne.n	8005b7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e04a      	b.n	8005c14 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	223d      	movs	r2, #61	; 0x3d
 8005b82:	5c9b      	ldrb	r3, [r3, r2]
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d107      	bne.n	8005b9a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	223c      	movs	r2, #60	; 0x3c
 8005b8e:	2100      	movs	r1, #0
 8005b90:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	0018      	movs	r0, r3
 8005b96:	f7fb ffb5 	bl	8001b04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	223d      	movs	r2, #61	; 0x3d
 8005b9e:	2102      	movs	r1, #2
 8005ba0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	3304      	adds	r3, #4
 8005baa:	0019      	movs	r1, r3
 8005bac:	0010      	movs	r0, r2
 8005bae:	f000 fb67 	bl	8006280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2248      	movs	r2, #72	; 0x48
 8005bb6:	2101      	movs	r1, #1
 8005bb8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	223e      	movs	r2, #62	; 0x3e
 8005bbe:	2101      	movs	r1, #1
 8005bc0:	5499      	strb	r1, [r3, r2]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	223f      	movs	r2, #63	; 0x3f
 8005bc6:	2101      	movs	r1, #1
 8005bc8:	5499      	strb	r1, [r3, r2]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2240      	movs	r2, #64	; 0x40
 8005bce:	2101      	movs	r1, #1
 8005bd0:	5499      	strb	r1, [r3, r2]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2241      	movs	r2, #65	; 0x41
 8005bd6:	2101      	movs	r1, #1
 8005bd8:	5499      	strb	r1, [r3, r2]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2242      	movs	r2, #66	; 0x42
 8005bde:	2101      	movs	r1, #1
 8005be0:	5499      	strb	r1, [r3, r2]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2243      	movs	r2, #67	; 0x43
 8005be6:	2101      	movs	r1, #1
 8005be8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2244      	movs	r2, #68	; 0x44
 8005bee:	2101      	movs	r1, #1
 8005bf0:	5499      	strb	r1, [r3, r2]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2245      	movs	r2, #69	; 0x45
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	5499      	strb	r1, [r3, r2]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2246      	movs	r2, #70	; 0x46
 8005bfe:	2101      	movs	r1, #1
 8005c00:	5499      	strb	r1, [r3, r2]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2247      	movs	r2, #71	; 0x47
 8005c06:	2101      	movs	r1, #1
 8005c08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	223d      	movs	r2, #61	; 0x3d
 8005c0e:	2101      	movs	r1, #1
 8005c10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	0018      	movs	r0, r3
 8005c16:	46bd      	mov	sp, r7
 8005c18:	b002      	add	sp, #8
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d108      	bne.n	8005c3e <HAL_TIM_PWM_Start+0x22>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	223e      	movs	r2, #62	; 0x3e
 8005c30:	5c9b      	ldrb	r3, [r3, r2]
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	3b01      	subs	r3, #1
 8005c36:	1e5a      	subs	r2, r3, #1
 8005c38:	4193      	sbcs	r3, r2
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	e037      	b.n	8005cae <HAL_TIM_PWM_Start+0x92>
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	2b04      	cmp	r3, #4
 8005c42:	d108      	bne.n	8005c56 <HAL_TIM_PWM_Start+0x3a>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	223f      	movs	r2, #63	; 0x3f
 8005c48:	5c9b      	ldrb	r3, [r3, r2]
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	1e5a      	subs	r2, r3, #1
 8005c50:	4193      	sbcs	r3, r2
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	e02b      	b.n	8005cae <HAL_TIM_PWM_Start+0x92>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b08      	cmp	r3, #8
 8005c5a:	d108      	bne.n	8005c6e <HAL_TIM_PWM_Start+0x52>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2240      	movs	r2, #64	; 0x40
 8005c60:	5c9b      	ldrb	r3, [r3, r2]
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	3b01      	subs	r3, #1
 8005c66:	1e5a      	subs	r2, r3, #1
 8005c68:	4193      	sbcs	r3, r2
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	e01f      	b.n	8005cae <HAL_TIM_PWM_Start+0x92>
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2b0c      	cmp	r3, #12
 8005c72:	d108      	bne.n	8005c86 <HAL_TIM_PWM_Start+0x6a>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2241      	movs	r2, #65	; 0x41
 8005c78:	5c9b      	ldrb	r3, [r3, r2]
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	1e5a      	subs	r2, r3, #1
 8005c80:	4193      	sbcs	r3, r2
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	e013      	b.n	8005cae <HAL_TIM_PWM_Start+0x92>
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	2b10      	cmp	r3, #16
 8005c8a:	d108      	bne.n	8005c9e <HAL_TIM_PWM_Start+0x82>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2242      	movs	r2, #66	; 0x42
 8005c90:	5c9b      	ldrb	r3, [r3, r2]
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	3b01      	subs	r3, #1
 8005c96:	1e5a      	subs	r2, r3, #1
 8005c98:	4193      	sbcs	r3, r2
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	e007      	b.n	8005cae <HAL_TIM_PWM_Start+0x92>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2243      	movs	r2, #67	; 0x43
 8005ca2:	5c9b      	ldrb	r3, [r3, r2]
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	1e5a      	subs	r2, r3, #1
 8005caa:	4193      	sbcs	r3, r2
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d001      	beq.n	8005cb6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e08b      	b.n	8005dce <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d104      	bne.n	8005cc6 <HAL_TIM_PWM_Start+0xaa>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	223e      	movs	r2, #62	; 0x3e
 8005cc0:	2102      	movs	r1, #2
 8005cc2:	5499      	strb	r1, [r3, r2]
 8005cc4:	e023      	b.n	8005d0e <HAL_TIM_PWM_Start+0xf2>
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2b04      	cmp	r3, #4
 8005cca:	d104      	bne.n	8005cd6 <HAL_TIM_PWM_Start+0xba>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	223f      	movs	r2, #63	; 0x3f
 8005cd0:	2102      	movs	r1, #2
 8005cd2:	5499      	strb	r1, [r3, r2]
 8005cd4:	e01b      	b.n	8005d0e <HAL_TIM_PWM_Start+0xf2>
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b08      	cmp	r3, #8
 8005cda:	d104      	bne.n	8005ce6 <HAL_TIM_PWM_Start+0xca>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2240      	movs	r2, #64	; 0x40
 8005ce0:	2102      	movs	r1, #2
 8005ce2:	5499      	strb	r1, [r3, r2]
 8005ce4:	e013      	b.n	8005d0e <HAL_TIM_PWM_Start+0xf2>
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	2b0c      	cmp	r3, #12
 8005cea:	d104      	bne.n	8005cf6 <HAL_TIM_PWM_Start+0xda>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2241      	movs	r2, #65	; 0x41
 8005cf0:	2102      	movs	r1, #2
 8005cf2:	5499      	strb	r1, [r3, r2]
 8005cf4:	e00b      	b.n	8005d0e <HAL_TIM_PWM_Start+0xf2>
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	2b10      	cmp	r3, #16
 8005cfa:	d104      	bne.n	8005d06 <HAL_TIM_PWM_Start+0xea>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2242      	movs	r2, #66	; 0x42
 8005d00:	2102      	movs	r1, #2
 8005d02:	5499      	strb	r1, [r3, r2]
 8005d04:	e003      	b.n	8005d0e <HAL_TIM_PWM_Start+0xf2>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2243      	movs	r2, #67	; 0x43
 8005d0a:	2102      	movs	r1, #2
 8005d0c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	6839      	ldr	r1, [r7, #0]
 8005d14:	2201      	movs	r2, #1
 8005d16:	0018      	movs	r0, r3
 8005d18:	f000 fdf6 	bl	8006908 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a2d      	ldr	r2, [pc, #180]	; (8005dd8 <HAL_TIM_PWM_Start+0x1bc>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d00e      	beq.n	8005d44 <HAL_TIM_PWM_Start+0x128>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a2c      	ldr	r2, [pc, #176]	; (8005ddc <HAL_TIM_PWM_Start+0x1c0>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d009      	beq.n	8005d44 <HAL_TIM_PWM_Start+0x128>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a2a      	ldr	r2, [pc, #168]	; (8005de0 <HAL_TIM_PWM_Start+0x1c4>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d004      	beq.n	8005d44 <HAL_TIM_PWM_Start+0x128>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a29      	ldr	r2, [pc, #164]	; (8005de4 <HAL_TIM_PWM_Start+0x1c8>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d101      	bne.n	8005d48 <HAL_TIM_PWM_Start+0x12c>
 8005d44:	2301      	movs	r3, #1
 8005d46:	e000      	b.n	8005d4a <HAL_TIM_PWM_Start+0x12e>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d008      	beq.n	8005d60 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2180      	movs	r1, #128	; 0x80
 8005d5a:	0209      	lsls	r1, r1, #8
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a1c      	ldr	r2, [pc, #112]	; (8005dd8 <HAL_TIM_PWM_Start+0x1bc>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d00f      	beq.n	8005d8a <HAL_TIM_PWM_Start+0x16e>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	2380      	movs	r3, #128	; 0x80
 8005d70:	05db      	lsls	r3, r3, #23
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d009      	beq.n	8005d8a <HAL_TIM_PWM_Start+0x16e>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a1b      	ldr	r2, [pc, #108]	; (8005de8 <HAL_TIM_PWM_Start+0x1cc>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d004      	beq.n	8005d8a <HAL_TIM_PWM_Start+0x16e>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a15      	ldr	r2, [pc, #84]	; (8005ddc <HAL_TIM_PWM_Start+0x1c0>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d116      	bne.n	8005db8 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	4a16      	ldr	r2, [pc, #88]	; (8005dec <HAL_TIM_PWM_Start+0x1d0>)
 8005d92:	4013      	ands	r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2b06      	cmp	r3, #6
 8005d9a:	d016      	beq.n	8005dca <HAL_TIM_PWM_Start+0x1ae>
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	2380      	movs	r3, #128	; 0x80
 8005da0:	025b      	lsls	r3, r3, #9
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d011      	beq.n	8005dca <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2101      	movs	r1, #1
 8005db2:	430a      	orrs	r2, r1
 8005db4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db6:	e008      	b.n	8005dca <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2101      	movs	r1, #1
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	601a      	str	r2, [r3, #0]
 8005dc8:	e000      	b.n	8005dcc <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dca:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	0018      	movs	r0, r3
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	b004      	add	sp, #16
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	46c0      	nop			; (mov r8, r8)
 8005dd8:	40012c00 	.word	0x40012c00
 8005ddc:	40014000 	.word	0x40014000
 8005de0:	40014400 	.word	0x40014400
 8005de4:	40014800 	.word	0x40014800
 8005de8:	40000400 	.word	0x40000400
 8005dec:	00010007 	.word	0x00010007

08005df0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	4013      	ands	r3, r2
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d124      	bne.n	8005e50 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	2202      	movs	r2, #2
 8005e0e:	4013      	ands	r3, r2
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d11d      	bne.n	8005e50 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2203      	movs	r2, #3
 8005e1a:	4252      	negs	r2, r2
 8005e1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	2203      	movs	r2, #3
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	d004      	beq.n	8005e3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	0018      	movs	r0, r3
 8005e34:	f000 fa0c 	bl	8006250 <HAL_TIM_IC_CaptureCallback>
 8005e38:	e007      	b.n	8005e4a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	0018      	movs	r0, r3
 8005e3e:	f000 f9ff 	bl	8006240 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	0018      	movs	r0, r3
 8005e46:	f000 fa0b 	bl	8006260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	2204      	movs	r2, #4
 8005e58:	4013      	ands	r3, r2
 8005e5a:	2b04      	cmp	r3, #4
 8005e5c:	d125      	bne.n	8005eaa <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	2204      	movs	r2, #4
 8005e66:	4013      	ands	r3, r2
 8005e68:	2b04      	cmp	r3, #4
 8005e6a:	d11e      	bne.n	8005eaa <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2205      	movs	r2, #5
 8005e72:	4252      	negs	r2, r2
 8005e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2202      	movs	r2, #2
 8005e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	699a      	ldr	r2, [r3, #24]
 8005e82:	23c0      	movs	r3, #192	; 0xc0
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4013      	ands	r3, r2
 8005e88:	d004      	beq.n	8005e94 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	0018      	movs	r0, r3
 8005e8e:	f000 f9df 	bl	8006250 <HAL_TIM_IC_CaptureCallback>
 8005e92:	e007      	b.n	8005ea4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	0018      	movs	r0, r3
 8005e98:	f000 f9d2 	bl	8006240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	0018      	movs	r0, r3
 8005ea0:	f000 f9de 	bl	8006260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	2208      	movs	r2, #8
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	2b08      	cmp	r3, #8
 8005eb6:	d124      	bne.n	8005f02 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	2208      	movs	r2, #8
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	2b08      	cmp	r3, #8
 8005ec4:	d11d      	bne.n	8005f02 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2209      	movs	r2, #9
 8005ecc:	4252      	negs	r2, r2
 8005ece:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2204      	movs	r2, #4
 8005ed4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	69db      	ldr	r3, [r3, #28]
 8005edc:	2203      	movs	r2, #3
 8005ede:	4013      	ands	r3, r2
 8005ee0:	d004      	beq.n	8005eec <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	0018      	movs	r0, r3
 8005ee6:	f000 f9b3 	bl	8006250 <HAL_TIM_IC_CaptureCallback>
 8005eea:	e007      	b.n	8005efc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	0018      	movs	r0, r3
 8005ef0:	f000 f9a6 	bl	8006240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	0018      	movs	r0, r3
 8005ef8:	f000 f9b2 	bl	8006260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	2210      	movs	r2, #16
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	2b10      	cmp	r3, #16
 8005f0e:	d125      	bne.n	8005f5c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	2210      	movs	r2, #16
 8005f18:	4013      	ands	r3, r2
 8005f1a:	2b10      	cmp	r3, #16
 8005f1c:	d11e      	bne.n	8005f5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2211      	movs	r2, #17
 8005f24:	4252      	negs	r2, r2
 8005f26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2208      	movs	r2, #8
 8005f2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	69da      	ldr	r2, [r3, #28]
 8005f34:	23c0      	movs	r3, #192	; 0xc0
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	4013      	ands	r3, r2
 8005f3a:	d004      	beq.n	8005f46 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	0018      	movs	r0, r3
 8005f40:	f000 f986 	bl	8006250 <HAL_TIM_IC_CaptureCallback>
 8005f44:	e007      	b.n	8005f56 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	0018      	movs	r0, r3
 8005f4a:	f000 f979 	bl	8006240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	0018      	movs	r0, r3
 8005f52:	f000 f985 	bl	8006260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	2201      	movs	r2, #1
 8005f64:	4013      	ands	r3, r2
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d10f      	bne.n	8005f8a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	2201      	movs	r2, #1
 8005f72:	4013      	ands	r3, r2
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d108      	bne.n	8005f8a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	4252      	negs	r2, r2
 8005f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	0018      	movs	r0, r3
 8005f86:	f7fa fecf 	bl	8000d28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	2280      	movs	r2, #128	; 0x80
 8005f92:	4013      	ands	r3, r2
 8005f94:	2b80      	cmp	r3, #128	; 0x80
 8005f96:	d10f      	bne.n	8005fb8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	2280      	movs	r2, #128	; 0x80
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	2b80      	cmp	r3, #128	; 0x80
 8005fa4:	d108      	bne.n	8005fb8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2281      	movs	r2, #129	; 0x81
 8005fac:	4252      	negs	r2, r2
 8005fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	0018      	movs	r0, r3
 8005fb4:	f000 fde8 	bl	8006b88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	691a      	ldr	r2, [r3, #16]
 8005fbe:	2380      	movs	r3, #128	; 0x80
 8005fc0:	005b      	lsls	r3, r3, #1
 8005fc2:	401a      	ands	r2, r3
 8005fc4:	2380      	movs	r3, #128	; 0x80
 8005fc6:	005b      	lsls	r3, r3, #1
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d10e      	bne.n	8005fea <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	2280      	movs	r2, #128	; 0x80
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	2b80      	cmp	r3, #128	; 0x80
 8005fd8:	d107      	bne.n	8005fea <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a1c      	ldr	r2, [pc, #112]	; (8006050 <HAL_TIM_IRQHandler+0x260>)
 8005fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	0018      	movs	r0, r3
 8005fe6:	f000 fdd7 	bl	8006b98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	2240      	movs	r2, #64	; 0x40
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	2b40      	cmp	r3, #64	; 0x40
 8005ff6:	d10f      	bne.n	8006018 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	2240      	movs	r2, #64	; 0x40
 8006000:	4013      	ands	r3, r2
 8006002:	2b40      	cmp	r3, #64	; 0x40
 8006004:	d108      	bne.n	8006018 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2241      	movs	r2, #65	; 0x41
 800600c:	4252      	negs	r2, r2
 800600e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	0018      	movs	r0, r3
 8006014:	f000 f92c 	bl	8006270 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	2220      	movs	r2, #32
 8006020:	4013      	ands	r3, r2
 8006022:	2b20      	cmp	r3, #32
 8006024:	d10f      	bne.n	8006046 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	2220      	movs	r2, #32
 800602e:	4013      	ands	r3, r2
 8006030:	2b20      	cmp	r3, #32
 8006032:	d108      	bne.n	8006046 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2221      	movs	r2, #33	; 0x21
 800603a:	4252      	negs	r2, r2
 800603c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	0018      	movs	r0, r3
 8006042:	f000 fd99 	bl	8006b78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006046:	46c0      	nop			; (mov r8, r8)
 8006048:	46bd      	mov	sp, r7
 800604a:	b002      	add	sp, #8
 800604c:	bd80      	pop	{r7, pc}
 800604e:	46c0      	nop			; (mov r8, r8)
 8006050:	fffffeff 	.word	0xfffffeff

08006054 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	223c      	movs	r2, #60	; 0x3c
 8006064:	5c9b      	ldrb	r3, [r3, r2]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d101      	bne.n	800606e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800606a:	2302      	movs	r3, #2
 800606c:	e0df      	b.n	800622e <HAL_TIM_PWM_ConfigChannel+0x1da>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	223c      	movs	r2, #60	; 0x3c
 8006072:	2101      	movs	r1, #1
 8006074:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2b14      	cmp	r3, #20
 800607a:	d900      	bls.n	800607e <HAL_TIM_PWM_ConfigChannel+0x2a>
 800607c:	e0d1      	b.n	8006222 <HAL_TIM_PWM_ConfigChannel+0x1ce>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	009a      	lsls	r2, r3, #2
 8006082:	4b6d      	ldr	r3, [pc, #436]	; (8006238 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8006084:	18d3      	adds	r3, r2, r3
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	0011      	movs	r1, r2
 8006092:	0018      	movs	r0, r3
 8006094:	f000 f974 	bl	8006380 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	699a      	ldr	r2, [r3, #24]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2108      	movs	r1, #8
 80060a4:	430a      	orrs	r2, r1
 80060a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	699a      	ldr	r2, [r3, #24]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2104      	movs	r1, #4
 80060b4:	438a      	bics	r2, r1
 80060b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6999      	ldr	r1, [r3, #24]
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	691a      	ldr	r2, [r3, #16]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	430a      	orrs	r2, r1
 80060c8:	619a      	str	r2, [r3, #24]
      break;
 80060ca:	e0ab      	b.n	8006224 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68ba      	ldr	r2, [r7, #8]
 80060d2:	0011      	movs	r1, r2
 80060d4:	0018      	movs	r0, r3
 80060d6:	f000 f9dd 	bl	8006494 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	699a      	ldr	r2, [r3, #24]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2180      	movs	r1, #128	; 0x80
 80060e6:	0109      	lsls	r1, r1, #4
 80060e8:	430a      	orrs	r2, r1
 80060ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	699a      	ldr	r2, [r3, #24]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4951      	ldr	r1, [pc, #324]	; (800623c <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80060f8:	400a      	ands	r2, r1
 80060fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6999      	ldr	r1, [r3, #24]
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	021a      	lsls	r2, r3, #8
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	430a      	orrs	r2, r1
 800610e:	619a      	str	r2, [r3, #24]
      break;
 8006110:	e088      	b.n	8006224 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	0011      	movs	r1, r2
 800611a:	0018      	movs	r0, r3
 800611c:	f000 fa3e 	bl	800659c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	69da      	ldr	r2, [r3, #28]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2108      	movs	r1, #8
 800612c:	430a      	orrs	r2, r1
 800612e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	69da      	ldr	r2, [r3, #28]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2104      	movs	r1, #4
 800613c:	438a      	bics	r2, r1
 800613e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	69d9      	ldr	r1, [r3, #28]
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	691a      	ldr	r2, [r3, #16]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	430a      	orrs	r2, r1
 8006150:	61da      	str	r2, [r3, #28]
      break;
 8006152:	e067      	b.n	8006224 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	0011      	movs	r1, r2
 800615c:	0018      	movs	r0, r3
 800615e:	f000 faa5 	bl	80066ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	69da      	ldr	r2, [r3, #28]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2180      	movs	r1, #128	; 0x80
 800616e:	0109      	lsls	r1, r1, #4
 8006170:	430a      	orrs	r2, r1
 8006172:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	69da      	ldr	r2, [r3, #28]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	492f      	ldr	r1, [pc, #188]	; (800623c <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8006180:	400a      	ands	r2, r1
 8006182:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	69d9      	ldr	r1, [r3, #28]
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	021a      	lsls	r2, r3, #8
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	430a      	orrs	r2, r1
 8006196:	61da      	str	r2, [r3, #28]
      break;
 8006198:	e044      	b.n	8006224 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	0011      	movs	r1, r2
 80061a2:	0018      	movs	r0, r3
 80061a4:	f000 faec 	bl	8006780 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2108      	movs	r1, #8
 80061b4:	430a      	orrs	r2, r1
 80061b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2104      	movs	r1, #4
 80061c4:	438a      	bics	r2, r1
 80061c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	691a      	ldr	r2, [r3, #16]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	430a      	orrs	r2, r1
 80061d8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80061da:	e023      	b.n	8006224 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	0011      	movs	r1, r2
 80061e4:	0018      	movs	r0, r3
 80061e6:	f000 fb2b 	bl	8006840 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2180      	movs	r1, #128	; 0x80
 80061f6:	0109      	lsls	r1, r1, #4
 80061f8:	430a      	orrs	r2, r1
 80061fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	490d      	ldr	r1, [pc, #52]	; (800623c <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8006208:	400a      	ands	r2, r1
 800620a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	021a      	lsls	r2, r3, #8
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	430a      	orrs	r2, r1
 800621e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006220:	e000      	b.n	8006224 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 8006222:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	223c      	movs	r2, #60	; 0x3c
 8006228:	2100      	movs	r1, #0
 800622a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	0018      	movs	r0, r3
 8006230:	46bd      	mov	sp, r7
 8006232:	b004      	add	sp, #16
 8006234:	bd80      	pop	{r7, pc}
 8006236:	46c0      	nop			; (mov r8, r8)
 8006238:	080093b4 	.word	0x080093b4
 800623c:	fffffbff 	.word	0xfffffbff

08006240 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006248:	46c0      	nop			; (mov r8, r8)
 800624a:	46bd      	mov	sp, r7
 800624c:	b002      	add	sp, #8
 800624e:	bd80      	pop	{r7, pc}

08006250 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006258:	46c0      	nop			; (mov r8, r8)
 800625a:	46bd      	mov	sp, r7
 800625c:	b002      	add	sp, #8
 800625e:	bd80      	pop	{r7, pc}

08006260 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006268:	46c0      	nop			; (mov r8, r8)
 800626a:	46bd      	mov	sp, r7
 800626c:	b002      	add	sp, #8
 800626e:	bd80      	pop	{r7, pc}

08006270 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006278:	46c0      	nop			; (mov r8, r8)
 800627a:	46bd      	mov	sp, r7
 800627c:	b002      	add	sp, #8
 800627e:	bd80      	pop	{r7, pc}

08006280 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a34      	ldr	r2, [pc, #208]	; (8006364 <TIM_Base_SetConfig+0xe4>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d008      	beq.n	80062aa <TIM_Base_SetConfig+0x2a>
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	2380      	movs	r3, #128	; 0x80
 800629c:	05db      	lsls	r3, r3, #23
 800629e:	429a      	cmp	r2, r3
 80062a0:	d003      	beq.n	80062aa <TIM_Base_SetConfig+0x2a>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a30      	ldr	r2, [pc, #192]	; (8006368 <TIM_Base_SetConfig+0xe8>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d108      	bne.n	80062bc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2270      	movs	r2, #112	; 0x70
 80062ae:	4393      	bics	r3, r2
 80062b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a29      	ldr	r2, [pc, #164]	; (8006364 <TIM_Base_SetConfig+0xe4>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d018      	beq.n	80062f6 <TIM_Base_SetConfig+0x76>
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	2380      	movs	r3, #128	; 0x80
 80062c8:	05db      	lsls	r3, r3, #23
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d013      	beq.n	80062f6 <TIM_Base_SetConfig+0x76>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a25      	ldr	r2, [pc, #148]	; (8006368 <TIM_Base_SetConfig+0xe8>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d00f      	beq.n	80062f6 <TIM_Base_SetConfig+0x76>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a24      	ldr	r2, [pc, #144]	; (800636c <TIM_Base_SetConfig+0xec>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d00b      	beq.n	80062f6 <TIM_Base_SetConfig+0x76>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a23      	ldr	r2, [pc, #140]	; (8006370 <TIM_Base_SetConfig+0xf0>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d007      	beq.n	80062f6 <TIM_Base_SetConfig+0x76>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a22      	ldr	r2, [pc, #136]	; (8006374 <TIM_Base_SetConfig+0xf4>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d003      	beq.n	80062f6 <TIM_Base_SetConfig+0x76>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a21      	ldr	r2, [pc, #132]	; (8006378 <TIM_Base_SetConfig+0xf8>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d108      	bne.n	8006308 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	4a20      	ldr	r2, [pc, #128]	; (800637c <TIM_Base_SetConfig+0xfc>)
 80062fa:	4013      	ands	r3, r2
 80062fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	4313      	orrs	r3, r2
 8006306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2280      	movs	r2, #128	; 0x80
 800630c:	4393      	bics	r3, r2
 800630e:	001a      	movs	r2, r3
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	4313      	orrs	r3, r2
 8006316:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	689a      	ldr	r2, [r3, #8]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a0c      	ldr	r2, [pc, #48]	; (8006364 <TIM_Base_SetConfig+0xe4>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d00b      	beq.n	800634e <TIM_Base_SetConfig+0xce>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a0d      	ldr	r2, [pc, #52]	; (8006370 <TIM_Base_SetConfig+0xf0>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d007      	beq.n	800634e <TIM_Base_SetConfig+0xce>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a0c      	ldr	r2, [pc, #48]	; (8006374 <TIM_Base_SetConfig+0xf4>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d003      	beq.n	800634e <TIM_Base_SetConfig+0xce>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a0b      	ldr	r2, [pc, #44]	; (8006378 <TIM_Base_SetConfig+0xf8>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d103      	bne.n	8006356 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	691a      	ldr	r2, [r3, #16]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	615a      	str	r2, [r3, #20]
}
 800635c:	46c0      	nop			; (mov r8, r8)
 800635e:	46bd      	mov	sp, r7
 8006360:	b004      	add	sp, #16
 8006362:	bd80      	pop	{r7, pc}
 8006364:	40012c00 	.word	0x40012c00
 8006368:	40000400 	.word	0x40000400
 800636c:	40002000 	.word	0x40002000
 8006370:	40014000 	.word	0x40014000
 8006374:	40014400 	.word	0x40014400
 8006378:	40014800 	.word	0x40014800
 800637c:	fffffcff 	.word	0xfffffcff

08006380 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	2201      	movs	r2, #1
 8006390:	4393      	bics	r3, r2
 8006392:	001a      	movs	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a1b      	ldr	r3, [r3, #32]
 800639c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	4a32      	ldr	r2, [pc, #200]	; (8006478 <TIM_OC1_SetConfig+0xf8>)
 80063ae:	4013      	ands	r3, r2
 80063b0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2203      	movs	r2, #3
 80063b6:	4393      	bics	r3, r2
 80063b8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	2202      	movs	r2, #2
 80063c8:	4393      	bics	r3, r2
 80063ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a28      	ldr	r2, [pc, #160]	; (800647c <TIM_OC1_SetConfig+0xfc>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d00b      	beq.n	80063f6 <TIM_OC1_SetConfig+0x76>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a27      	ldr	r2, [pc, #156]	; (8006480 <TIM_OC1_SetConfig+0x100>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d007      	beq.n	80063f6 <TIM_OC1_SetConfig+0x76>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a26      	ldr	r2, [pc, #152]	; (8006484 <TIM_OC1_SetConfig+0x104>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d003      	beq.n	80063f6 <TIM_OC1_SetConfig+0x76>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a25      	ldr	r2, [pc, #148]	; (8006488 <TIM_OC1_SetConfig+0x108>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d10c      	bne.n	8006410 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	2208      	movs	r2, #8
 80063fa:	4393      	bics	r3, r2
 80063fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	4313      	orrs	r3, r2
 8006406:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	2204      	movs	r2, #4
 800640c:	4393      	bics	r3, r2
 800640e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a1a      	ldr	r2, [pc, #104]	; (800647c <TIM_OC1_SetConfig+0xfc>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d00b      	beq.n	8006430 <TIM_OC1_SetConfig+0xb0>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a19      	ldr	r2, [pc, #100]	; (8006480 <TIM_OC1_SetConfig+0x100>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d007      	beq.n	8006430 <TIM_OC1_SetConfig+0xb0>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a18      	ldr	r2, [pc, #96]	; (8006484 <TIM_OC1_SetConfig+0x104>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d003      	beq.n	8006430 <TIM_OC1_SetConfig+0xb0>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a17      	ldr	r2, [pc, #92]	; (8006488 <TIM_OC1_SetConfig+0x108>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d111      	bne.n	8006454 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	4a16      	ldr	r2, [pc, #88]	; (800648c <TIM_OC1_SetConfig+0x10c>)
 8006434:	4013      	ands	r3, r2
 8006436:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	4a15      	ldr	r2, [pc, #84]	; (8006490 <TIM_OC1_SetConfig+0x110>)
 800643c:	4013      	ands	r3, r2
 800643e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	4313      	orrs	r3, r2
 8006448:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	4313      	orrs	r3, r2
 8006452:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	685a      	ldr	r2, [r3, #4]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	621a      	str	r2, [r3, #32]
}
 800646e:	46c0      	nop			; (mov r8, r8)
 8006470:	46bd      	mov	sp, r7
 8006472:	b006      	add	sp, #24
 8006474:	bd80      	pop	{r7, pc}
 8006476:	46c0      	nop			; (mov r8, r8)
 8006478:	fffeff8f 	.word	0xfffeff8f
 800647c:	40012c00 	.word	0x40012c00
 8006480:	40014000 	.word	0x40014000
 8006484:	40014400 	.word	0x40014400
 8006488:	40014800 	.word	0x40014800
 800648c:	fffffeff 	.word	0xfffffeff
 8006490:	fffffdff 	.word	0xfffffdff

08006494 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	2210      	movs	r2, #16
 80064a4:	4393      	bics	r3, r2
 80064a6:	001a      	movs	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a1b      	ldr	r3, [r3, #32]
 80064b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	4a2e      	ldr	r2, [pc, #184]	; (800657c <TIM_OC2_SetConfig+0xe8>)
 80064c2:	4013      	ands	r3, r2
 80064c4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	4a2d      	ldr	r2, [pc, #180]	; (8006580 <TIM_OC2_SetConfig+0xec>)
 80064ca:	4013      	ands	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	021b      	lsls	r3, r3, #8
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2220      	movs	r2, #32
 80064de:	4393      	bics	r3, r2
 80064e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	011b      	lsls	r3, r3, #4
 80064e8:	697a      	ldr	r2, [r7, #20]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a24      	ldr	r2, [pc, #144]	; (8006584 <TIM_OC2_SetConfig+0xf0>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d10d      	bne.n	8006512 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	2280      	movs	r2, #128	; 0x80
 80064fa:	4393      	bics	r3, r2
 80064fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	011b      	lsls	r3, r3, #4
 8006504:	697a      	ldr	r2, [r7, #20]
 8006506:	4313      	orrs	r3, r2
 8006508:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	2240      	movs	r2, #64	; 0x40
 800650e:	4393      	bics	r3, r2
 8006510:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a1b      	ldr	r2, [pc, #108]	; (8006584 <TIM_OC2_SetConfig+0xf0>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d00b      	beq.n	8006532 <TIM_OC2_SetConfig+0x9e>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a1a      	ldr	r2, [pc, #104]	; (8006588 <TIM_OC2_SetConfig+0xf4>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d007      	beq.n	8006532 <TIM_OC2_SetConfig+0x9e>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a19      	ldr	r2, [pc, #100]	; (800658c <TIM_OC2_SetConfig+0xf8>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d003      	beq.n	8006532 <TIM_OC2_SetConfig+0x9e>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a18      	ldr	r2, [pc, #96]	; (8006590 <TIM_OC2_SetConfig+0xfc>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d113      	bne.n	800655a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	4a17      	ldr	r2, [pc, #92]	; (8006594 <TIM_OC2_SetConfig+0x100>)
 8006536:	4013      	ands	r3, r2
 8006538:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	4a16      	ldr	r2, [pc, #88]	; (8006598 <TIM_OC2_SetConfig+0x104>)
 800653e:	4013      	ands	r3, r2
 8006540:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	4313      	orrs	r3, r2
 800654c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	4313      	orrs	r3, r2
 8006558:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	621a      	str	r2, [r3, #32]
}
 8006574:	46c0      	nop			; (mov r8, r8)
 8006576:	46bd      	mov	sp, r7
 8006578:	b006      	add	sp, #24
 800657a:	bd80      	pop	{r7, pc}
 800657c:	feff8fff 	.word	0xfeff8fff
 8006580:	fffffcff 	.word	0xfffffcff
 8006584:	40012c00 	.word	0x40012c00
 8006588:	40014000 	.word	0x40014000
 800658c:	40014400 	.word	0x40014400
 8006590:	40014800 	.word	0x40014800
 8006594:	fffffbff 	.word	0xfffffbff
 8006598:	fffff7ff 	.word	0xfffff7ff

0800659c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	4a35      	ldr	r2, [pc, #212]	; (8006680 <TIM_OC3_SetConfig+0xe4>)
 80065ac:	401a      	ands	r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	69db      	ldr	r3, [r3, #28]
 80065c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	4a2f      	ldr	r2, [pc, #188]	; (8006684 <TIM_OC3_SetConfig+0xe8>)
 80065c8:	4013      	ands	r3, r2
 80065ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2203      	movs	r2, #3
 80065d0:	4393      	bics	r3, r2
 80065d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	4313      	orrs	r3, r2
 80065dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	4a29      	ldr	r2, [pc, #164]	; (8006688 <TIM_OC3_SetConfig+0xec>)
 80065e2:	4013      	ands	r3, r2
 80065e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	021b      	lsls	r3, r3, #8
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a25      	ldr	r2, [pc, #148]	; (800668c <TIM_OC3_SetConfig+0xf0>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d10d      	bne.n	8006616 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	4a24      	ldr	r2, [pc, #144]	; (8006690 <TIM_OC3_SetConfig+0xf4>)
 80065fe:	4013      	ands	r3, r2
 8006600:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	021b      	lsls	r3, r3, #8
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	4313      	orrs	r3, r2
 800660c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	4a20      	ldr	r2, [pc, #128]	; (8006694 <TIM_OC3_SetConfig+0xf8>)
 8006612:	4013      	ands	r3, r2
 8006614:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a1c      	ldr	r2, [pc, #112]	; (800668c <TIM_OC3_SetConfig+0xf0>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d00b      	beq.n	8006636 <TIM_OC3_SetConfig+0x9a>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a1d      	ldr	r2, [pc, #116]	; (8006698 <TIM_OC3_SetConfig+0xfc>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d007      	beq.n	8006636 <TIM_OC3_SetConfig+0x9a>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a1c      	ldr	r2, [pc, #112]	; (800669c <TIM_OC3_SetConfig+0x100>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d003      	beq.n	8006636 <TIM_OC3_SetConfig+0x9a>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a1b      	ldr	r2, [pc, #108]	; (80066a0 <TIM_OC3_SetConfig+0x104>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d113      	bne.n	800665e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	4a1a      	ldr	r2, [pc, #104]	; (80066a4 <TIM_OC3_SetConfig+0x108>)
 800663a:	4013      	ands	r3, r2
 800663c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	4a19      	ldr	r2, [pc, #100]	; (80066a8 <TIM_OC3_SetConfig+0x10c>)
 8006642:	4013      	ands	r3, r2
 8006644:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	011b      	lsls	r3, r3, #4
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	4313      	orrs	r3, r2
 8006650:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	011b      	lsls	r3, r3, #4
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	4313      	orrs	r3, r2
 800665c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	621a      	str	r2, [r3, #32]
}
 8006678:	46c0      	nop			; (mov r8, r8)
 800667a:	46bd      	mov	sp, r7
 800667c:	b006      	add	sp, #24
 800667e:	bd80      	pop	{r7, pc}
 8006680:	fffffeff 	.word	0xfffffeff
 8006684:	fffeff8f 	.word	0xfffeff8f
 8006688:	fffffdff 	.word	0xfffffdff
 800668c:	40012c00 	.word	0x40012c00
 8006690:	fffff7ff 	.word	0xfffff7ff
 8006694:	fffffbff 	.word	0xfffffbff
 8006698:	40014000 	.word	0x40014000
 800669c:	40014400 	.word	0x40014400
 80066a0:	40014800 	.word	0x40014800
 80066a4:	ffffefff 	.word	0xffffefff
 80066a8:	ffffdfff 	.word	0xffffdfff

080066ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b086      	sub	sp, #24
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	4a28      	ldr	r2, [pc, #160]	; (800675c <TIM_OC4_SetConfig+0xb0>)
 80066bc:	401a      	ands	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	69db      	ldr	r3, [r3, #28]
 80066d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	4a22      	ldr	r2, [pc, #136]	; (8006760 <TIM_OC4_SetConfig+0xb4>)
 80066d8:	4013      	ands	r3, r2
 80066da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	4a21      	ldr	r2, [pc, #132]	; (8006764 <TIM_OC4_SetConfig+0xb8>)
 80066e0:	4013      	ands	r3, r2
 80066e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	021b      	lsls	r3, r3, #8
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	4a1d      	ldr	r2, [pc, #116]	; (8006768 <TIM_OC4_SetConfig+0xbc>)
 80066f4:	4013      	ands	r3, r2
 80066f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	031b      	lsls	r3, r3, #12
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	4313      	orrs	r3, r2
 8006702:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a19      	ldr	r2, [pc, #100]	; (800676c <TIM_OC4_SetConfig+0xc0>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d00b      	beq.n	8006724 <TIM_OC4_SetConfig+0x78>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a18      	ldr	r2, [pc, #96]	; (8006770 <TIM_OC4_SetConfig+0xc4>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d007      	beq.n	8006724 <TIM_OC4_SetConfig+0x78>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a17      	ldr	r2, [pc, #92]	; (8006774 <TIM_OC4_SetConfig+0xc8>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d003      	beq.n	8006724 <TIM_OC4_SetConfig+0x78>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a16      	ldr	r2, [pc, #88]	; (8006778 <TIM_OC4_SetConfig+0xcc>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d109      	bne.n	8006738 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	4a15      	ldr	r2, [pc, #84]	; (800677c <TIM_OC4_SetConfig+0xd0>)
 8006728:	4013      	ands	r3, r2
 800672a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	695b      	ldr	r3, [r3, #20]
 8006730:	019b      	lsls	r3, r3, #6
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	4313      	orrs	r3, r2
 8006736:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	697a      	ldr	r2, [r7, #20]
 800673c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	685a      	ldr	r2, [r3, #4]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	621a      	str	r2, [r3, #32]
}
 8006752:	46c0      	nop			; (mov r8, r8)
 8006754:	46bd      	mov	sp, r7
 8006756:	b006      	add	sp, #24
 8006758:	bd80      	pop	{r7, pc}
 800675a:	46c0      	nop			; (mov r8, r8)
 800675c:	ffffefff 	.word	0xffffefff
 8006760:	feff8fff 	.word	0xfeff8fff
 8006764:	fffffcff 	.word	0xfffffcff
 8006768:	ffffdfff 	.word	0xffffdfff
 800676c:	40012c00 	.word	0x40012c00
 8006770:	40014000 	.word	0x40014000
 8006774:	40014400 	.word	0x40014400
 8006778:	40014800 	.word	0x40014800
 800677c:	ffffbfff 	.word	0xffffbfff

08006780 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	4a25      	ldr	r2, [pc, #148]	; (8006824 <TIM_OC5_SetConfig+0xa4>)
 8006790:	401a      	ands	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	4a1f      	ldr	r2, [pc, #124]	; (8006828 <TIM_OC5_SetConfig+0xa8>)
 80067ac:	4013      	ands	r3, r2
 80067ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	4a1b      	ldr	r2, [pc, #108]	; (800682c <TIM_OC5_SetConfig+0xac>)
 80067be:	4013      	ands	r3, r2
 80067c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	041b      	lsls	r3, r3, #16
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a17      	ldr	r2, [pc, #92]	; (8006830 <TIM_OC5_SetConfig+0xb0>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d00b      	beq.n	80067ee <TIM_OC5_SetConfig+0x6e>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a16      	ldr	r2, [pc, #88]	; (8006834 <TIM_OC5_SetConfig+0xb4>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d007      	beq.n	80067ee <TIM_OC5_SetConfig+0x6e>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a15      	ldr	r2, [pc, #84]	; (8006838 <TIM_OC5_SetConfig+0xb8>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d003      	beq.n	80067ee <TIM_OC5_SetConfig+0x6e>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a14      	ldr	r2, [pc, #80]	; (800683c <TIM_OC5_SetConfig+0xbc>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d109      	bne.n	8006802 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	4a0c      	ldr	r2, [pc, #48]	; (8006824 <TIM_OC5_SetConfig+0xa4>)
 80067f2:	4013      	ands	r3, r2
 80067f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	021b      	lsls	r3, r3, #8
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	4313      	orrs	r3, r2
 8006800:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	685a      	ldr	r2, [r3, #4]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	621a      	str	r2, [r3, #32]
}
 800681c:	46c0      	nop			; (mov r8, r8)
 800681e:	46bd      	mov	sp, r7
 8006820:	b006      	add	sp, #24
 8006822:	bd80      	pop	{r7, pc}
 8006824:	fffeffff 	.word	0xfffeffff
 8006828:	fffeff8f 	.word	0xfffeff8f
 800682c:	fffdffff 	.word	0xfffdffff
 8006830:	40012c00 	.word	0x40012c00
 8006834:	40014000 	.word	0x40014000
 8006838:	40014400 	.word	0x40014400
 800683c:	40014800 	.word	0x40014800

08006840 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	4a26      	ldr	r2, [pc, #152]	; (80068e8 <TIM_OC6_SetConfig+0xa8>)
 8006850:	401a      	ands	r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a1b      	ldr	r3, [r3, #32]
 800685a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4a20      	ldr	r2, [pc, #128]	; (80068ec <TIM_OC6_SetConfig+0xac>)
 800686c:	4013      	ands	r3, r2
 800686e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	021b      	lsls	r3, r3, #8
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	4313      	orrs	r3, r2
 800687a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	4a1c      	ldr	r2, [pc, #112]	; (80068f0 <TIM_OC6_SetConfig+0xb0>)
 8006880:	4013      	ands	r3, r2
 8006882:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	051b      	lsls	r3, r3, #20
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	4313      	orrs	r3, r2
 800688e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a18      	ldr	r2, [pc, #96]	; (80068f4 <TIM_OC6_SetConfig+0xb4>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d00b      	beq.n	80068b0 <TIM_OC6_SetConfig+0x70>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a17      	ldr	r2, [pc, #92]	; (80068f8 <TIM_OC6_SetConfig+0xb8>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d007      	beq.n	80068b0 <TIM_OC6_SetConfig+0x70>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a16      	ldr	r2, [pc, #88]	; (80068fc <TIM_OC6_SetConfig+0xbc>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d003      	beq.n	80068b0 <TIM_OC6_SetConfig+0x70>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a15      	ldr	r2, [pc, #84]	; (8006900 <TIM_OC6_SetConfig+0xc0>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d109      	bne.n	80068c4 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	4a14      	ldr	r2, [pc, #80]	; (8006904 <TIM_OC6_SetConfig+0xc4>)
 80068b4:	4013      	ands	r3, r2
 80068b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	695b      	ldr	r3, [r3, #20]
 80068bc:	029b      	lsls	r3, r3, #10
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	621a      	str	r2, [r3, #32]
}
 80068de:	46c0      	nop			; (mov r8, r8)
 80068e0:	46bd      	mov	sp, r7
 80068e2:	b006      	add	sp, #24
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	46c0      	nop			; (mov r8, r8)
 80068e8:	ffefffff 	.word	0xffefffff
 80068ec:	feff8fff 	.word	0xfeff8fff
 80068f0:	ffdfffff 	.word	0xffdfffff
 80068f4:	40012c00 	.word	0x40012c00
 80068f8:	40014000 	.word	0x40014000
 80068fc:	40014400 	.word	0x40014400
 8006900:	40014800 	.word	0x40014800
 8006904:	fffbffff 	.word	0xfffbffff

08006908 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b086      	sub	sp, #24
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	221f      	movs	r2, #31
 8006918:	4013      	ands	r3, r2
 800691a:	2201      	movs	r2, #1
 800691c:	409a      	lsls	r2, r3
 800691e:	0013      	movs	r3, r2
 8006920:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	43d2      	mvns	r2, r2
 800692a:	401a      	ands	r2, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6a1a      	ldr	r2, [r3, #32]
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	211f      	movs	r1, #31
 8006938:	400b      	ands	r3, r1
 800693a:	6879      	ldr	r1, [r7, #4]
 800693c:	4099      	lsls	r1, r3
 800693e:	000b      	movs	r3, r1
 8006940:	431a      	orrs	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	621a      	str	r2, [r3, #32]
}
 8006946:	46c0      	nop			; (mov r8, r8)
 8006948:	46bd      	mov	sp, r7
 800694a:	b006      	add	sp, #24
 800694c:	bd80      	pop	{r7, pc}
	...

08006950 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	223c      	movs	r2, #60	; 0x3c
 800695e:	5c9b      	ldrb	r3, [r3, r2]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d101      	bne.n	8006968 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006964:	2302      	movs	r3, #2
 8006966:	e055      	b.n	8006a14 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	223c      	movs	r2, #60	; 0x3c
 800696c:	2101      	movs	r1, #1
 800696e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	223d      	movs	r2, #61	; 0x3d
 8006974:	2102      	movs	r1, #2
 8006976:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a23      	ldr	r2, [pc, #140]	; (8006a1c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d108      	bne.n	80069a4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	4a22      	ldr	r2, [pc, #136]	; (8006a20 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006996:	4013      	ands	r3, r2
 8006998:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2270      	movs	r2, #112	; 0x70
 80069a8:	4393      	bics	r3, r2
 80069aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a16      	ldr	r2, [pc, #88]	; (8006a1c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d00f      	beq.n	80069e8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	2380      	movs	r3, #128	; 0x80
 80069ce:	05db      	lsls	r3, r3, #23
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d009      	beq.n	80069e8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a12      	ldr	r2, [pc, #72]	; (8006a24 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d004      	beq.n	80069e8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a11      	ldr	r2, [pc, #68]	; (8006a28 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d10c      	bne.n	8006a02 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	2280      	movs	r2, #128	; 0x80
 80069ec:	4393      	bics	r3, r2
 80069ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	68ba      	ldr	r2, [r7, #8]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68ba      	ldr	r2, [r7, #8]
 8006a00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	223d      	movs	r2, #61	; 0x3d
 8006a06:	2101      	movs	r1, #1
 8006a08:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	223c      	movs	r2, #60	; 0x3c
 8006a0e:	2100      	movs	r1, #0
 8006a10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	0018      	movs	r0, r3
 8006a16:	46bd      	mov	sp, r7
 8006a18:	b004      	add	sp, #16
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	40012c00 	.word	0x40012c00
 8006a20:	ff0fffff 	.word	0xff0fffff
 8006a24:	40000400 	.word	0x40000400
 8006a28:	40014000 	.word	0x40014000

08006a2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a36:	2300      	movs	r3, #0
 8006a38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	223c      	movs	r2, #60	; 0x3c
 8006a3e:	5c9b      	ldrb	r3, [r3, r2]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d101      	bne.n	8006a48 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a44:	2302      	movs	r3, #2
 8006a46:	e079      	b.n	8006b3c <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	223c      	movs	r2, #60	; 0x3c
 8006a4c:	2101      	movs	r1, #1
 8006a4e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	22ff      	movs	r2, #255	; 0xff
 8006a54:	4393      	bics	r3, r2
 8006a56:	001a      	movs	r2, r3
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	4a38      	ldr	r2, [pc, #224]	; (8006b44 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8006a64:	401a      	ands	r2, r3
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	4a35      	ldr	r2, [pc, #212]	; (8006b48 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006a72:	401a      	ands	r2, r3
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	4a33      	ldr	r2, [pc, #204]	; (8006b4c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006a80:	401a      	ands	r2, r3
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	4a30      	ldr	r2, [pc, #192]	; (8006b50 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006a8e:	401a      	ands	r2, r3
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	4a2e      	ldr	r2, [pc, #184]	; (8006b54 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8006a9c:	401a      	ands	r2, r3
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	695b      	ldr	r3, [r3, #20]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	4a2b      	ldr	r2, [pc, #172]	; (8006b58 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8006aaa:	401a      	ands	r2, r3
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	4a29      	ldr	r2, [pc, #164]	; (8006b5c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8006ab8:	401a      	ands	r2, r3
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	041b      	lsls	r3, r3, #16
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a25      	ldr	r2, [pc, #148]	; (8006b60 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d106      	bne.n	8006adc <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	4a24      	ldr	r2, [pc, #144]	; (8006b64 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006ad2:	401a      	ands	r2, r3
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	69db      	ldr	r3, [r3, #28]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a1f      	ldr	r2, [pc, #124]	; (8006b60 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d121      	bne.n	8006b2a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	4a1f      	ldr	r2, [pc, #124]	; (8006b68 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006aea:	401a      	ands	r2, r3
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af0:	051b      	lsls	r3, r3, #20
 8006af2:	4313      	orrs	r3, r2
 8006af4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	4a1c      	ldr	r2, [pc, #112]	; (8006b6c <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8006afa:	401a      	ands	r2, r3
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	6a1b      	ldr	r3, [r3, #32]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	4a1a      	ldr	r2, [pc, #104]	; (8006b70 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8006b08:	401a      	ands	r2, r3
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a12      	ldr	r2, [pc, #72]	; (8006b60 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d106      	bne.n	8006b2a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	4a15      	ldr	r2, [pc, #84]	; (8006b74 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8006b20:	401a      	ands	r2, r3
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b26:	4313      	orrs	r3, r2
 8006b28:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	223c      	movs	r2, #60	; 0x3c
 8006b36:	2100      	movs	r1, #0
 8006b38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	0018      	movs	r0, r3
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	b004      	add	sp, #16
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	fffffcff 	.word	0xfffffcff
 8006b48:	fffffbff 	.word	0xfffffbff
 8006b4c:	fffff7ff 	.word	0xfffff7ff
 8006b50:	ffffefff 	.word	0xffffefff
 8006b54:	ffffdfff 	.word	0xffffdfff
 8006b58:	ffffbfff 	.word	0xffffbfff
 8006b5c:	fff0ffff 	.word	0xfff0ffff
 8006b60:	40012c00 	.word	0x40012c00
 8006b64:	efffffff 	.word	0xefffffff
 8006b68:	ff0fffff 	.word	0xff0fffff
 8006b6c:	feffffff 	.word	0xfeffffff
 8006b70:	fdffffff 	.word	0xfdffffff
 8006b74:	dfffffff 	.word	0xdfffffff

08006b78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b80:	46c0      	nop			; (mov r8, r8)
 8006b82:	46bd      	mov	sp, r7
 8006b84:	b002      	add	sp, #8
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b90:	46c0      	nop			; (mov r8, r8)
 8006b92:	46bd      	mov	sp, r7
 8006b94:	b002      	add	sp, #8
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ba0:	46c0      	nop			; (mov r8, r8)
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	b002      	add	sp, #8
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <fe25519_unpack>:
 8006ba8:	788b      	ldrb	r3, [r1, #2]
 8006baa:	78ca      	ldrb	r2, [r1, #3]
 8006bac:	041b      	lsls	r3, r3, #16
 8006bae:	0612      	lsls	r2, r2, #24
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	780a      	ldrb	r2, [r1, #0]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	784a      	ldrb	r2, [r1, #1]
 8006bb8:	0212      	lsls	r2, r2, #8
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	6003      	str	r3, [r0, #0]
 8006bbe:	79cb      	ldrb	r3, [r1, #7]
 8006bc0:	798a      	ldrb	r2, [r1, #6]
 8006bc2:	061b      	lsls	r3, r3, #24
 8006bc4:	0412      	lsls	r2, r2, #16
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	790a      	ldrb	r2, [r1, #4]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	794a      	ldrb	r2, [r1, #5]
 8006bce:	0212      	lsls	r2, r2, #8
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	6043      	str	r3, [r0, #4]
 8006bd4:	7acb      	ldrb	r3, [r1, #11]
 8006bd6:	7a8a      	ldrb	r2, [r1, #10]
 8006bd8:	061b      	lsls	r3, r3, #24
 8006bda:	0412      	lsls	r2, r2, #16
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	7a0a      	ldrb	r2, [r1, #8]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	7a4a      	ldrb	r2, [r1, #9]
 8006be4:	0212      	lsls	r2, r2, #8
 8006be6:	4313      	orrs	r3, r2
 8006be8:	6083      	str	r3, [r0, #8]
 8006bea:	7bcb      	ldrb	r3, [r1, #15]
 8006bec:	7b8a      	ldrb	r2, [r1, #14]
 8006bee:	061b      	lsls	r3, r3, #24
 8006bf0:	0412      	lsls	r2, r2, #16
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	7b0a      	ldrb	r2, [r1, #12]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	7b4a      	ldrb	r2, [r1, #13]
 8006bfa:	0212      	lsls	r2, r2, #8
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	60c3      	str	r3, [r0, #12]
 8006c00:	7ccb      	ldrb	r3, [r1, #19]
 8006c02:	7c8a      	ldrb	r2, [r1, #18]
 8006c04:	061b      	lsls	r3, r3, #24
 8006c06:	0412      	lsls	r2, r2, #16
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	7c0a      	ldrb	r2, [r1, #16]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	7c4a      	ldrb	r2, [r1, #17]
 8006c10:	0212      	lsls	r2, r2, #8
 8006c12:	4313      	orrs	r3, r2
 8006c14:	6103      	str	r3, [r0, #16]
 8006c16:	7dcb      	ldrb	r3, [r1, #23]
 8006c18:	7d8a      	ldrb	r2, [r1, #22]
 8006c1a:	061b      	lsls	r3, r3, #24
 8006c1c:	0412      	lsls	r2, r2, #16
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	7d0a      	ldrb	r2, [r1, #20]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	7d4a      	ldrb	r2, [r1, #21]
 8006c26:	0212      	lsls	r2, r2, #8
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	6143      	str	r3, [r0, #20]
 8006c2c:	7ecb      	ldrb	r3, [r1, #27]
 8006c2e:	7e8a      	ldrb	r2, [r1, #26]
 8006c30:	061b      	lsls	r3, r3, #24
 8006c32:	0412      	lsls	r2, r2, #16
 8006c34:	4313      	orrs	r3, r2
 8006c36:	7e0a      	ldrb	r2, [r1, #24]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	7e4a      	ldrb	r2, [r1, #25]
 8006c3c:	0212      	lsls	r2, r2, #8
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	6183      	str	r3, [r0, #24]
 8006c42:	7fcb      	ldrb	r3, [r1, #31]
 8006c44:	7f8a      	ldrb	r2, [r1, #30]
 8006c46:	061b      	lsls	r3, r3, #24
 8006c48:	0412      	lsls	r2, r2, #16
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	7f0a      	ldrb	r2, [r1, #28]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	7f4a      	ldrb	r2, [r1, #29]
 8006c52:	0212      	lsls	r2, r2, #8
 8006c54:	4313      	orrs	r3, r2
 8006c56:	005b      	lsls	r3, r3, #1
 8006c58:	085b      	lsrs	r3, r3, #1
 8006c5a:	61c3      	str	r3, [r0, #28]
 8006c5c:	4770      	bx	lr
 8006c5e:	46c0      	nop			; (mov r8, r8)

08006c60 <fe25519_cmov>:
 8006c60:	680b      	ldr	r3, [r1, #0]
 8006c62:	b510      	push	{r4, lr}
 8006c64:	6804      	ldr	r4, [r0, #0]
 8006c66:	4252      	negs	r2, r2
 8006c68:	4063      	eors	r3, r4
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	4063      	eors	r3, r4
 8006c6e:	6003      	str	r3, [r0, #0]
 8006c70:	684b      	ldr	r3, [r1, #4]
 8006c72:	6844      	ldr	r4, [r0, #4]
 8006c74:	4063      	eors	r3, r4
 8006c76:	4013      	ands	r3, r2
 8006c78:	4063      	eors	r3, r4
 8006c7a:	6043      	str	r3, [r0, #4]
 8006c7c:	688b      	ldr	r3, [r1, #8]
 8006c7e:	6884      	ldr	r4, [r0, #8]
 8006c80:	4063      	eors	r3, r4
 8006c82:	4013      	ands	r3, r2
 8006c84:	4063      	eors	r3, r4
 8006c86:	6083      	str	r3, [r0, #8]
 8006c88:	68cb      	ldr	r3, [r1, #12]
 8006c8a:	68c4      	ldr	r4, [r0, #12]
 8006c8c:	4063      	eors	r3, r4
 8006c8e:	4013      	ands	r3, r2
 8006c90:	4063      	eors	r3, r4
 8006c92:	60c3      	str	r3, [r0, #12]
 8006c94:	690b      	ldr	r3, [r1, #16]
 8006c96:	6904      	ldr	r4, [r0, #16]
 8006c98:	4063      	eors	r3, r4
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	4063      	eors	r3, r4
 8006c9e:	6103      	str	r3, [r0, #16]
 8006ca0:	6944      	ldr	r4, [r0, #20]
 8006ca2:	694b      	ldr	r3, [r1, #20]
 8006ca4:	4063      	eors	r3, r4
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	4063      	eors	r3, r4
 8006caa:	6143      	str	r3, [r0, #20]
 8006cac:	6984      	ldr	r4, [r0, #24]
 8006cae:	698b      	ldr	r3, [r1, #24]
 8006cb0:	4063      	eors	r3, r4
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	4063      	eors	r3, r4
 8006cb6:	6183      	str	r3, [r0, #24]
 8006cb8:	69c4      	ldr	r4, [r0, #28]
 8006cba:	69cb      	ldr	r3, [r1, #28]
 8006cbc:	4063      	eors	r3, r4
 8006cbe:	401a      	ands	r2, r3
 8006cc0:	4062      	eors	r2, r4
 8006cc2:	61c2      	str	r2, [r0, #28]
 8006cc4:	bd10      	pop	{r4, pc}
 8006cc6:	46c0      	nop			; (mov r8, r8)

08006cc8 <fe25519_copy>:
 8006cc8:	680b      	ldr	r3, [r1, #0]
 8006cca:	6003      	str	r3, [r0, #0]
 8006ccc:	684b      	ldr	r3, [r1, #4]
 8006cce:	6043      	str	r3, [r0, #4]
 8006cd0:	688b      	ldr	r3, [r1, #8]
 8006cd2:	6083      	str	r3, [r0, #8]
 8006cd4:	68cb      	ldr	r3, [r1, #12]
 8006cd6:	60c3      	str	r3, [r0, #12]
 8006cd8:	690b      	ldr	r3, [r1, #16]
 8006cda:	6103      	str	r3, [r0, #16]
 8006cdc:	694b      	ldr	r3, [r1, #20]
 8006cde:	6143      	str	r3, [r0, #20]
 8006ce0:	698b      	ldr	r3, [r1, #24]
 8006ce2:	6183      	str	r3, [r0, #24]
 8006ce4:	69cb      	ldr	r3, [r1, #28]
 8006ce6:	61c3      	str	r3, [r0, #28]
 8006ce8:	4770      	bx	lr
 8006cea:	46c0      	nop			; (mov r8, r8)

08006cec <fe25519_setone>:
 8006cec:	2301      	movs	r3, #1
 8006cee:	6003      	str	r3, [r0, #0]
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	6043      	str	r3, [r0, #4]
 8006cf4:	6083      	str	r3, [r0, #8]
 8006cf6:	60c3      	str	r3, [r0, #12]
 8006cf8:	6103      	str	r3, [r0, #16]
 8006cfa:	6143      	str	r3, [r0, #20]
 8006cfc:	6183      	str	r3, [r0, #24]
 8006cfe:	61c3      	str	r3, [r0, #28]
 8006d00:	4770      	bx	lr
 8006d02:	46c0      	nop			; (mov r8, r8)

08006d04 <fe25519_setzero>:
 8006d04:	b510      	push	{r4, lr}
 8006d06:	2220      	movs	r2, #32
 8006d08:	2100      	movs	r1, #0
 8006d0a:	f001 faf8 	bl	80082fe <memset>
 8006d0e:	bd10      	pop	{r4, pc}

08006d10 <fe25519_add>:
 8006d10:	000b      	movs	r3, r1
 8006d12:	6809      	ldr	r1, [r1, #0]
 8006d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d16:	464f      	mov	r7, r9
 8006d18:	4689      	mov	r9, r1
 8006d1a:	6811      	ldr	r1, [r2, #0]
 8006d1c:	46d6      	mov	lr, sl
 8006d1e:	4646      	mov	r6, r8
 8006d20:	000c      	movs	r4, r1
 8006d22:	4680      	mov	r8, r0
 8006d24:	468a      	mov	sl, r1
 8006d26:	2500      	movs	r5, #0
 8006d28:	4648      	mov	r0, r9
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	1900      	adds	r0, r0, r4
 8006d2e:	4169      	adcs	r1, r5
 8006d30:	b5c0      	push	{r6, r7, lr}
 8006d32:	000c      	movs	r4, r1
 8006d34:	2700      	movs	r7, #0
 8006d36:	2100      	movs	r1, #0
 8006d38:	6850      	ldr	r0, [r2, #4]
 8006d3a:	685e      	ldr	r6, [r3, #4]
 8006d3c:	2500      	movs	r5, #0
 8006d3e:	1980      	adds	r0, r0, r6
 8006d40:	4179      	adcs	r1, r7
 8006d42:	1900      	adds	r0, r0, r4
 8006d44:	4169      	adcs	r1, r5
 8006d46:	b08c      	sub	sp, #48	; 0x30
 8006d48:	9000      	str	r0, [sp, #0]
 8006d4a:	9101      	str	r1, [sp, #4]
 8006d4c:	000c      	movs	r4, r1
 8006d4e:	2700      	movs	r7, #0
 8006d50:	2100      	movs	r1, #0
 8006d52:	6890      	ldr	r0, [r2, #8]
 8006d54:	689e      	ldr	r6, [r3, #8]
 8006d56:	2500      	movs	r5, #0
 8006d58:	1980      	adds	r0, r0, r6
 8006d5a:	4179      	adcs	r1, r7
 8006d5c:	0006      	movs	r6, r0
 8006d5e:	000f      	movs	r7, r1
 8006d60:	1936      	adds	r6, r6, r4
 8006d62:	416f      	adcs	r7, r5
 8006d64:	2100      	movs	r1, #0
 8006d66:	9602      	str	r6, [sp, #8]
 8006d68:	9703      	str	r7, [sp, #12]
 8006d6a:	003c      	movs	r4, r7
 8006d6c:	2700      	movs	r7, #0
 8006d6e:	68d6      	ldr	r6, [r2, #12]
 8006d70:	68d8      	ldr	r0, [r3, #12]
 8006d72:	2500      	movs	r5, #0
 8006d74:	1980      	adds	r0, r0, r6
 8006d76:	4179      	adcs	r1, r7
 8006d78:	1900      	adds	r0, r0, r4
 8006d7a:	4169      	adcs	r1, r5
 8006d7c:	2700      	movs	r7, #0
 8006d7e:	9004      	str	r0, [sp, #16]
 8006d80:	9105      	str	r1, [sp, #20]
 8006d82:	000c      	movs	r4, r1
 8006d84:	2100      	movs	r1, #0
 8006d86:	6916      	ldr	r6, [r2, #16]
 8006d88:	6918      	ldr	r0, [r3, #16]
 8006d8a:	2500      	movs	r5, #0
 8006d8c:	1980      	adds	r0, r0, r6
 8006d8e:	4179      	adcs	r1, r7
 8006d90:	0006      	movs	r6, r0
 8006d92:	000f      	movs	r7, r1
 8006d94:	1936      	adds	r6, r6, r4
 8006d96:	416f      	adcs	r7, r5
 8006d98:	2100      	movs	r1, #0
 8006d9a:	9606      	str	r6, [sp, #24]
 8006d9c:	9707      	str	r7, [sp, #28]
 8006d9e:	003c      	movs	r4, r7
 8006da0:	2700      	movs	r7, #0
 8006da2:	6956      	ldr	r6, [r2, #20]
 8006da4:	6958      	ldr	r0, [r3, #20]
 8006da6:	2500      	movs	r5, #0
 8006da8:	1980      	adds	r0, r0, r6
 8006daa:	4179      	adcs	r1, r7
 8006dac:	1900      	adds	r0, r0, r4
 8006dae:	4169      	adcs	r1, r5
 8006db0:	2700      	movs	r7, #0
 8006db2:	9008      	str	r0, [sp, #32]
 8006db4:	9109      	str	r1, [sp, #36]	; 0x24
 8006db6:	000c      	movs	r4, r1
 8006db8:	2100      	movs	r1, #0
 8006dba:	6996      	ldr	r6, [r2, #24]
 8006dbc:	6998      	ldr	r0, [r3, #24]
 8006dbe:	2500      	movs	r5, #0
 8006dc0:	1980      	adds	r0, r0, r6
 8006dc2:	4179      	adcs	r1, r7
 8006dc4:	0006      	movs	r6, r0
 8006dc6:	000f      	movs	r7, r1
 8006dc8:	1936      	adds	r6, r6, r4
 8006dca:	416f      	adcs	r7, r5
 8006dcc:	003d      	movs	r5, r7
 8006dce:	0034      	movs	r4, r6
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	940a      	str	r4, [sp, #40]	; 0x28
 8006dd4:	950b      	str	r5, [sp, #44]	; 0x2c
 8006dd6:	002e      	movs	r6, r5
 8006dd8:	2500      	movs	r5, #0
 8006dda:	69d4      	ldr	r4, [r2, #28]
 8006ddc:	69d8      	ldr	r0, [r3, #28]
 8006dde:	2700      	movs	r7, #0
 8006de0:	1900      	adds	r0, r0, r4
 8006de2:	4169      	adcs	r1, r5
 8006de4:	1836      	adds	r6, r6, r0
 8006de6:	414f      	adcs	r7, r1
 8006de8:	2226      	movs	r2, #38	; 0x26
 8006dea:	2300      	movs	r3, #0
 8006dec:	0038      	movs	r0, r7
 8006dee:	44ca      	add	sl, r9
 8006df0:	2100      	movs	r1, #0
 8006df2:	f7f9 fa15 	bl	8000220 <__aeabi_lmul>
 8006df6:	4652      	mov	r2, sl
 8006df8:	2300      	movs	r3, #0
 8006dfa:	1880      	adds	r0, r0, r2
 8006dfc:	4159      	adcs	r1, r3
 8006dfe:	2500      	movs	r5, #0
 8006e00:	000c      	movs	r4, r1
 8006e02:	2300      	movs	r3, #0
 8006e04:	9a00      	ldr	r2, [sp, #0]
 8006e06:	1912      	adds	r2, r2, r4
 8006e08:	416b      	adcs	r3, r5
 8006e0a:	4645      	mov	r5, r8
 8006e0c:	001c      	movs	r4, r3
 8006e0e:	606a      	str	r2, [r5, #4]
 8006e10:	2300      	movs	r3, #0
 8006e12:	2500      	movs	r5, #0
 8006e14:	9a02      	ldr	r2, [sp, #8]
 8006e16:	1912      	adds	r2, r2, r4
 8006e18:	416b      	adcs	r3, r5
 8006e1a:	4645      	mov	r5, r8
 8006e1c:	001c      	movs	r4, r3
 8006e1e:	60aa      	str	r2, [r5, #8]
 8006e20:	2300      	movs	r3, #0
 8006e22:	2500      	movs	r5, #0
 8006e24:	9a04      	ldr	r2, [sp, #16]
 8006e26:	1912      	adds	r2, r2, r4
 8006e28:	416b      	adcs	r3, r5
 8006e2a:	4645      	mov	r5, r8
 8006e2c:	001c      	movs	r4, r3
 8006e2e:	60ea      	str	r2, [r5, #12]
 8006e30:	2300      	movs	r3, #0
 8006e32:	2500      	movs	r5, #0
 8006e34:	9a06      	ldr	r2, [sp, #24]
 8006e36:	1912      	adds	r2, r2, r4
 8006e38:	416b      	adcs	r3, r5
 8006e3a:	4645      	mov	r5, r8
 8006e3c:	001c      	movs	r4, r3
 8006e3e:	612a      	str	r2, [r5, #16]
 8006e40:	2300      	movs	r3, #0
 8006e42:	2500      	movs	r5, #0
 8006e44:	9a08      	ldr	r2, [sp, #32]
 8006e46:	1912      	adds	r2, r2, r4
 8006e48:	416b      	adcs	r3, r5
 8006e4a:	4645      	mov	r5, r8
 8006e4c:	001c      	movs	r4, r3
 8006e4e:	616a      	str	r2, [r5, #20]
 8006e50:	2300      	movs	r3, #0
 8006e52:	2500      	movs	r5, #0
 8006e54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e56:	1912      	adds	r2, r2, r4
 8006e58:	416b      	adcs	r3, r5
 8006e5a:	4644      	mov	r4, r8
 8006e5c:	2500      	movs	r5, #0
 8006e5e:	61a2      	str	r2, [r4, #24]
 8006e60:	0032      	movs	r2, r6
 8006e62:	001c      	movs	r4, r3
 8006e64:	2300      	movs	r3, #0
 8006e66:	18a4      	adds	r4, r4, r2
 8006e68:	415d      	adcs	r5, r3
 8006e6a:	2226      	movs	r2, #38	; 0x26
 8006e6c:	4643      	mov	r3, r8
 8006e6e:	436a      	muls	r2, r5
 8006e70:	1810      	adds	r0, r2, r0
 8006e72:	61dc      	str	r4, [r3, #28]
 8006e74:	6018      	str	r0, [r3, #0]
 8006e76:	b00c      	add	sp, #48	; 0x30
 8006e78:	bc1c      	pop	{r2, r3, r4}
 8006e7a:	4690      	mov	r8, r2
 8006e7c:	4699      	mov	r9, r3
 8006e7e:	46a2      	mov	sl, r4
 8006e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e82:	46c0      	nop			; (mov r8, r8)

08006e84 <fe25519_sub>:
 8006e84:	000b      	movs	r3, r1
 8006e86:	6809      	ldr	r1, [r1, #0]
 8006e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e8a:	46d6      	mov	lr, sl
 8006e8c:	468a      	mov	sl, r1
 8006e8e:	6811      	ldr	r1, [r2, #0]
 8006e90:	464f      	mov	r7, r9
 8006e92:	4689      	mov	r9, r1
 8006e94:	4646      	mov	r6, r8
 8006e96:	464c      	mov	r4, r9
 8006e98:	4680      	mov	r8, r0
 8006e9a:	2500      	movs	r5, #0
 8006e9c:	4650      	mov	r0, sl
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	1b00      	subs	r0, r0, r4
 8006ea2:	41a9      	sbcs	r1, r5
 8006ea4:	b5c0      	push	{r6, r7, lr}
 8006ea6:	000c      	movs	r4, r1
 8006ea8:	17cd      	asrs	r5, r1, #31
 8006eaa:	2700      	movs	r7, #0
 8006eac:	2100      	movs	r1, #0
 8006eae:	6856      	ldr	r6, [r2, #4]
 8006eb0:	6858      	ldr	r0, [r3, #4]
 8006eb2:	b08c      	sub	sp, #48	; 0x30
 8006eb4:	1b80      	subs	r0, r0, r6
 8006eb6:	41b9      	sbcs	r1, r7
 8006eb8:	1900      	adds	r0, r0, r4
 8006eba:	4169      	adcs	r1, r5
 8006ebc:	2700      	movs	r7, #0
 8006ebe:	9000      	str	r0, [sp, #0]
 8006ec0:	9101      	str	r1, [sp, #4]
 8006ec2:	000c      	movs	r4, r1
 8006ec4:	17cd      	asrs	r5, r1, #31
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	6896      	ldr	r6, [r2, #8]
 8006eca:	6898      	ldr	r0, [r3, #8]
 8006ecc:	1b80      	subs	r0, r0, r6
 8006ece:	41b9      	sbcs	r1, r7
 8006ed0:	0006      	movs	r6, r0
 8006ed2:	000f      	movs	r7, r1
 8006ed4:	1936      	adds	r6, r6, r4
 8006ed6:	416f      	adcs	r7, r5
 8006ed8:	2100      	movs	r1, #0
 8006eda:	9602      	str	r6, [sp, #8]
 8006edc:	9703      	str	r7, [sp, #12]
 8006ede:	003c      	movs	r4, r7
 8006ee0:	17fd      	asrs	r5, r7, #31
 8006ee2:	2700      	movs	r7, #0
 8006ee4:	68d6      	ldr	r6, [r2, #12]
 8006ee6:	68d8      	ldr	r0, [r3, #12]
 8006ee8:	1b80      	subs	r0, r0, r6
 8006eea:	41b9      	sbcs	r1, r7
 8006eec:	1900      	adds	r0, r0, r4
 8006eee:	4169      	adcs	r1, r5
 8006ef0:	2700      	movs	r7, #0
 8006ef2:	9004      	str	r0, [sp, #16]
 8006ef4:	9105      	str	r1, [sp, #20]
 8006ef6:	000c      	movs	r4, r1
 8006ef8:	17cd      	asrs	r5, r1, #31
 8006efa:	2100      	movs	r1, #0
 8006efc:	6916      	ldr	r6, [r2, #16]
 8006efe:	6918      	ldr	r0, [r3, #16]
 8006f00:	1b80      	subs	r0, r0, r6
 8006f02:	41b9      	sbcs	r1, r7
 8006f04:	0006      	movs	r6, r0
 8006f06:	000f      	movs	r7, r1
 8006f08:	1936      	adds	r6, r6, r4
 8006f0a:	416f      	adcs	r7, r5
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	9606      	str	r6, [sp, #24]
 8006f10:	9707      	str	r7, [sp, #28]
 8006f12:	003c      	movs	r4, r7
 8006f14:	17fd      	asrs	r5, r7, #31
 8006f16:	2700      	movs	r7, #0
 8006f18:	6956      	ldr	r6, [r2, #20]
 8006f1a:	6958      	ldr	r0, [r3, #20]
 8006f1c:	1b80      	subs	r0, r0, r6
 8006f1e:	41b9      	sbcs	r1, r7
 8006f20:	1900      	adds	r0, r0, r4
 8006f22:	4169      	adcs	r1, r5
 8006f24:	2700      	movs	r7, #0
 8006f26:	9008      	str	r0, [sp, #32]
 8006f28:	9109      	str	r1, [sp, #36]	; 0x24
 8006f2a:	000c      	movs	r4, r1
 8006f2c:	17cd      	asrs	r5, r1, #31
 8006f2e:	2100      	movs	r1, #0
 8006f30:	6996      	ldr	r6, [r2, #24]
 8006f32:	6998      	ldr	r0, [r3, #24]
 8006f34:	1b80      	subs	r0, r0, r6
 8006f36:	41b9      	sbcs	r1, r7
 8006f38:	0006      	movs	r6, r0
 8006f3a:	000f      	movs	r7, r1
 8006f3c:	1936      	adds	r6, r6, r4
 8006f3e:	416f      	adcs	r7, r5
 8006f40:	0034      	movs	r4, r6
 8006f42:	003d      	movs	r5, r7
 8006f44:	0038      	movs	r0, r7
 8006f46:	940a      	str	r4, [sp, #40]	; 0x28
 8006f48:	950b      	str	r5, [sp, #44]	; 0x2c
 8006f4a:	17f9      	asrs	r1, r7, #31
 8006f4c:	2500      	movs	r5, #0
 8006f4e:	2700      	movs	r7, #0
 8006f50:	69d4      	ldr	r4, [r2, #28]
 8006f52:	69de      	ldr	r6, [r3, #28]
 8006f54:	2226      	movs	r2, #38	; 0x26
 8006f56:	1b36      	subs	r6, r6, r4
 8006f58:	41af      	sbcs	r7, r5
 8006f5a:	1836      	adds	r6, r6, r0
 8006f5c:	414f      	adcs	r7, r1
 8006f5e:	4655      	mov	r5, sl
 8006f60:	464c      	mov	r4, r9
 8006f62:	17f9      	asrs	r1, r7, #31
 8006f64:	2300      	movs	r3, #0
 8006f66:	0038      	movs	r0, r7
 8006f68:	f7f9 f95a 	bl	8000220 <__aeabi_lmul>
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	1b2a      	subs	r2, r5, r4
 8006f70:	1880      	adds	r0, r0, r2
 8006f72:	4159      	adcs	r1, r3
 8006f74:	2500      	movs	r5, #0
 8006f76:	000a      	movs	r2, r1
 8006f78:	9c00      	ldr	r4, [sp, #0]
 8006f7a:	17cb      	asrs	r3, r1, #31
 8006f7c:	1912      	adds	r2, r2, r4
 8006f7e:	416b      	adcs	r3, r5
 8006f80:	4645      	mov	r5, r8
 8006f82:	001c      	movs	r4, r3
 8006f84:	606a      	str	r2, [r5, #4]
 8006f86:	17dd      	asrs	r5, r3, #31
 8006f88:	2300      	movs	r3, #0
 8006f8a:	9a02      	ldr	r2, [sp, #8]
 8006f8c:	18a4      	adds	r4, r4, r2
 8006f8e:	415d      	adcs	r5, r3
 8006f90:	4643      	mov	r3, r8
 8006f92:	002a      	movs	r2, r5
 8006f94:	609c      	str	r4, [r3, #8]
 8006f96:	17eb      	asrs	r3, r5, #31
 8006f98:	2500      	movs	r5, #0
 8006f9a:	9c04      	ldr	r4, [sp, #16]
 8006f9c:	18a4      	adds	r4, r4, r2
 8006f9e:	415d      	adcs	r5, r3
 8006fa0:	4643      	mov	r3, r8
 8006fa2:	002a      	movs	r2, r5
 8006fa4:	60dc      	str	r4, [r3, #12]
 8006fa6:	17eb      	asrs	r3, r5, #31
 8006fa8:	2500      	movs	r5, #0
 8006faa:	9c06      	ldr	r4, [sp, #24]
 8006fac:	1912      	adds	r2, r2, r4
 8006fae:	416b      	adcs	r3, r5
 8006fb0:	4645      	mov	r5, r8
 8006fb2:	001c      	movs	r4, r3
 8006fb4:	612a      	str	r2, [r5, #16]
 8006fb6:	17dd      	asrs	r5, r3, #31
 8006fb8:	2300      	movs	r3, #0
 8006fba:	9a08      	ldr	r2, [sp, #32]
 8006fbc:	1912      	adds	r2, r2, r4
 8006fbe:	416b      	adcs	r3, r5
 8006fc0:	4645      	mov	r5, r8
 8006fc2:	001c      	movs	r4, r3
 8006fc4:	616a      	str	r2, [r5, #20]
 8006fc6:	17dd      	asrs	r5, r3, #31
 8006fc8:	2300      	movs	r3, #0
 8006fca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fcc:	1912      	adds	r2, r2, r4
 8006fce:	416b      	adcs	r3, r5
 8006fd0:	4644      	mov	r4, r8
 8006fd2:	17dd      	asrs	r5, r3, #31
 8006fd4:	61a2      	str	r2, [r4, #24]
 8006fd6:	0032      	movs	r2, r6
 8006fd8:	001c      	movs	r4, r3
 8006fda:	2300      	movs	r3, #0
 8006fdc:	18a4      	adds	r4, r4, r2
 8006fde:	415d      	adcs	r5, r3
 8006fe0:	2226      	movs	r2, #38	; 0x26
 8006fe2:	4643      	mov	r3, r8
 8006fe4:	436a      	muls	r2, r5
 8006fe6:	1810      	adds	r0, r2, r0
 8006fe8:	61dc      	str	r4, [r3, #28]
 8006fea:	6018      	str	r0, [r3, #0]
 8006fec:	b00c      	add	sp, #48	; 0x30
 8006fee:	bc1c      	pop	{r2, r3, r4}
 8006ff0:	4690      	mov	r8, r2
 8006ff2:	4699      	mov	r9, r3
 8006ff4:	46a2      	mov	sl, r4
 8006ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006ff8 <fe25519_freeze>:
 8006ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ffa:	4684      	mov	ip, r0
 8006ffc:	2413      	movs	r4, #19
 8006ffe:	69c3      	ldr	r3, [r0, #28]
 8007000:	2100      	movs	r1, #0
 8007002:	17db      	asrs	r3, r3, #31
 8007004:	401c      	ands	r4, r3
 8007006:	4663      	mov	r3, ip
 8007008:	0022      	movs	r2, r4
 800700a:	6818      	ldr	r0, [r3, #0]
 800700c:	2300      	movs	r3, #0
 800700e:	1880      	adds	r0, r0, r2
 8007010:	4159      	adcs	r1, r3
 8007012:	4663      	mov	r3, ip
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4647      	mov	r7, r8
 8007018:	4698      	mov	r8, r3
 800701a:	44a0      	add	r8, r4
 800701c:	46ce      	mov	lr, r9
 800701e:	4663      	mov	r3, ip
 8007020:	4642      	mov	r2, r8
 8007022:	b580      	push	{r7, lr}
 8007024:	601a      	str	r2, [r3, #0]
 8007026:	000a      	movs	r2, r1
 8007028:	4661      	mov	r1, ip
 800702a:	2300      	movs	r3, #0
 800702c:	2500      	movs	r5, #0
 800702e:	684c      	ldr	r4, [r1, #4]
 8007030:	2700      	movs	r7, #0
 8007032:	18a4      	adds	r4, r4, r2
 8007034:	415d      	adcs	r5, r3
 8007036:	2300      	movs	r3, #0
 8007038:	002a      	movs	r2, r5
 800703a:	688e      	ldr	r6, [r1, #8]
 800703c:	b093      	sub	sp, #76	; 0x4c
 800703e:	18b6      	adds	r6, r6, r2
 8007040:	415f      	adcs	r7, r3
 8007042:	4663      	mov	r3, ip
 8007044:	604c      	str	r4, [r1, #4]
 8007046:	9600      	str	r6, [sp, #0]
 8007048:	9701      	str	r7, [sp, #4]
 800704a:	0038      	movs	r0, r7
 800704c:	2100      	movs	r1, #0
 800704e:	2700      	movs	r7, #0
 8007050:	609e      	str	r6, [r3, #8]
 8007052:	68de      	ldr	r6, [r3, #12]
 8007054:	2500      	movs	r5, #0
 8007056:	1980      	adds	r0, r0, r6
 8007058:	4179      	adcs	r1, r7
 800705a:	9002      	str	r0, [sp, #8]
 800705c:	9103      	str	r1, [sp, #12]
 800705e:	000a      	movs	r2, r1
 8007060:	4661      	mov	r1, ip
 8007062:	60d8      	str	r0, [r3, #12]
 8007064:	2700      	movs	r7, #0
 8007066:	2300      	movs	r3, #0
 8007068:	690e      	ldr	r6, [r1, #16]
 800706a:	18b6      	adds	r6, r6, r2
 800706c:	415f      	adcs	r7, r3
 800706e:	0030      	movs	r0, r6
 8007070:	0039      	movs	r1, r7
 8007072:	4663      	mov	r3, ip
 8007074:	9004      	str	r0, [sp, #16]
 8007076:	9105      	str	r1, [sp, #20]
 8007078:	4661      	mov	r1, ip
 800707a:	611e      	str	r6, [r3, #16]
 800707c:	003a      	movs	r2, r7
 800707e:	2300      	movs	r3, #0
 8007080:	2700      	movs	r7, #0
 8007082:	694e      	ldr	r6, [r1, #20]
 8007084:	4660      	mov	r0, ip
 8007086:	18b6      	adds	r6, r6, r2
 8007088:	415f      	adcs	r7, r3
 800708a:	4663      	mov	r3, ip
 800708c:	9606      	str	r6, [sp, #24]
 800708e:	9707      	str	r7, [sp, #28]
 8007090:	615e      	str	r6, [r3, #20]
 8007092:	003a      	movs	r2, r7
 8007094:	2300      	movs	r3, #0
 8007096:	2700      	movs	r7, #0
 8007098:	698e      	ldr	r6, [r1, #24]
 800709a:	18b6      	adds	r6, r6, r2
 800709c:	415f      	adcs	r7, r3
 800709e:	003b      	movs	r3, r7
 80070a0:	0032      	movs	r2, r6
 80070a2:	618e      	str	r6, [r1, #24]
 80070a4:	9208      	str	r2, [sp, #32]
 80070a6:	9309      	str	r3, [sp, #36]	; 0x24
 80070a8:	001e      	movs	r6, r3
 80070aa:	2700      	movs	r7, #0
 80070ac:	2300      	movs	r3, #0
 80070ae:	69ca      	ldr	r2, [r1, #28]
 80070b0:	1992      	adds	r2, r2, r6
 80070b2:	417b      	adcs	r3, r7
 80070b4:	0052      	lsls	r2, r2, #1
 80070b6:	0853      	lsrs	r3, r2, #1
 80070b8:	4699      	mov	r9, r3
 80070ba:	4663      	mov	r3, ip
 80070bc:	4649      	mov	r1, r9
 80070be:	4646      	mov	r6, r8
 80070c0:	61d9      	str	r1, [r3, #28]
 80070c2:	2700      	movs	r7, #0
 80070c4:	2113      	movs	r1, #19
 80070c6:	2200      	movs	r2, #0
 80070c8:	4643      	mov	r3, r8
 80070ca:	1989      	adds	r1, r1, r6
 80070cc:	417a      	adcs	r2, r7
 80070ce:	3313      	adds	r3, #19
 80070d0:	930a      	str	r3, [sp, #40]	; 0x28
 80070d2:	0016      	movs	r6, r2
 80070d4:	2700      	movs	r7, #0
 80070d6:	0022      	movs	r2, r4
 80070d8:	2300      	movs	r3, #0
 80070da:	1992      	adds	r2, r2, r6
 80070dc:	417b      	adcs	r3, r7
 80070de:	2700      	movs	r7, #0
 80070e0:	001e      	movs	r6, r3
 80070e2:	2300      	movs	r3, #0
 80070e4:	920b      	str	r2, [sp, #44]	; 0x2c
 80070e6:	9a00      	ldr	r2, [sp, #0]
 80070e8:	18b6      	adds	r6, r6, r2
 80070ea:	415f      	adcs	r7, r3
 80070ec:	2300      	movs	r3, #0
 80070ee:	003c      	movs	r4, r7
 80070f0:	9a02      	ldr	r2, [sp, #8]
 80070f2:	960c      	str	r6, [sp, #48]	; 0x30
 80070f4:	18a4      	adds	r4, r4, r2
 80070f6:	415d      	adcs	r5, r3
 80070f8:	2300      	movs	r3, #0
 80070fa:	002a      	movs	r2, r5
 80070fc:	2500      	movs	r5, #0
 80070fe:	940d      	str	r4, [sp, #52]	; 0x34
 8007100:	9c04      	ldr	r4, [sp, #16]
 8007102:	18a4      	adds	r4, r4, r2
 8007104:	415d      	adcs	r5, r3
 8007106:	2300      	movs	r3, #0
 8007108:	002a      	movs	r2, r5
 800710a:	2500      	movs	r5, #0
 800710c:	940e      	str	r4, [sp, #56]	; 0x38
 800710e:	9c06      	ldr	r4, [sp, #24]
 8007110:	18a4      	adds	r4, r4, r2
 8007112:	415d      	adcs	r5, r3
 8007114:	2300      	movs	r3, #0
 8007116:	002a      	movs	r2, r5
 8007118:	2500      	movs	r5, #0
 800711a:	940f      	str	r4, [sp, #60]	; 0x3c
 800711c:	9c08      	ldr	r4, [sp, #32]
 800711e:	1912      	adds	r2, r2, r4
 8007120:	416b      	adcs	r3, r5
 8007122:	2500      	movs	r5, #0
 8007124:	9210      	str	r2, [sp, #64]	; 0x40
 8007126:	001c      	movs	r4, r3
 8007128:	464a      	mov	r2, r9
 800712a:	2300      	movs	r3, #0
 800712c:	18a4      	adds	r4, r4, r2
 800712e:	415d      	adcs	r5, r3
 8007130:	006b      	lsls	r3, r5, #1
 8007132:	0061      	lsls	r1, r4, #1
 8007134:	0fe2      	lsrs	r2, r4, #31
 8007136:	431a      	orrs	r2, r3
 8007138:	0849      	lsrs	r1, r1, #1
 800713a:	9111      	str	r1, [sp, #68]	; 0x44
 800713c:	b2d2      	uxtb	r2, r2
 800713e:	a90a      	add	r1, sp, #40	; 0x28
 8007140:	f7ff fd8e 	bl	8006c60 <fe25519_cmov>
 8007144:	b013      	add	sp, #76	; 0x4c
 8007146:	bc0c      	pop	{r2, r3}
 8007148:	4690      	mov	r8, r2
 800714a:	4699      	mov	r9, r3
 800714c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800714e:	46c0      	nop			; (mov r8, r8)

08007150 <fe25519_pack>:
 8007150:	b570      	push	{r4, r5, r6, lr}
 8007152:	b088      	sub	sp, #32
 8007154:	466d      	mov	r5, sp
 8007156:	002b      	movs	r3, r5
 8007158:	0004      	movs	r4, r0
 800715a:	c945      	ldmia	r1!, {r0, r2, r6}
 800715c:	c345      	stmia	r3!, {r0, r2, r6}
 800715e:	c945      	ldmia	r1!, {r0, r2, r6}
 8007160:	c345      	stmia	r3!, {r0, r2, r6}
 8007162:	c905      	ldmia	r1!, {r0, r2}
 8007164:	c305      	stmia	r3!, {r0, r2}
 8007166:	0028      	movs	r0, r5
 8007168:	f7ff ff46 	bl	8006ff8 <fe25519_freeze>
 800716c:	9b00      	ldr	r3, [sp, #0]
 800716e:	0a1a      	lsrs	r2, r3, #8
 8007170:	7023      	strb	r3, [r4, #0]
 8007172:	7062      	strb	r2, [r4, #1]
 8007174:	0c1a      	lsrs	r2, r3, #16
 8007176:	0e1b      	lsrs	r3, r3, #24
 8007178:	70e3      	strb	r3, [r4, #3]
 800717a:	686b      	ldr	r3, [r5, #4]
 800717c:	70a2      	strb	r2, [r4, #2]
 800717e:	0a1a      	lsrs	r2, r3, #8
 8007180:	7123      	strb	r3, [r4, #4]
 8007182:	7162      	strb	r2, [r4, #5]
 8007184:	0c1a      	lsrs	r2, r3, #16
 8007186:	0e1b      	lsrs	r3, r3, #24
 8007188:	71e3      	strb	r3, [r4, #7]
 800718a:	68ab      	ldr	r3, [r5, #8]
 800718c:	71a2      	strb	r2, [r4, #6]
 800718e:	0a1a      	lsrs	r2, r3, #8
 8007190:	7223      	strb	r3, [r4, #8]
 8007192:	7262      	strb	r2, [r4, #9]
 8007194:	0c1a      	lsrs	r2, r3, #16
 8007196:	0e1b      	lsrs	r3, r3, #24
 8007198:	72e3      	strb	r3, [r4, #11]
 800719a:	68eb      	ldr	r3, [r5, #12]
 800719c:	72a2      	strb	r2, [r4, #10]
 800719e:	0a1a      	lsrs	r2, r3, #8
 80071a0:	7323      	strb	r3, [r4, #12]
 80071a2:	7362      	strb	r2, [r4, #13]
 80071a4:	0c1a      	lsrs	r2, r3, #16
 80071a6:	0e1b      	lsrs	r3, r3, #24
 80071a8:	73e3      	strb	r3, [r4, #15]
 80071aa:	692b      	ldr	r3, [r5, #16]
 80071ac:	73a2      	strb	r2, [r4, #14]
 80071ae:	0a1a      	lsrs	r2, r3, #8
 80071b0:	7423      	strb	r3, [r4, #16]
 80071b2:	7462      	strb	r2, [r4, #17]
 80071b4:	0c1a      	lsrs	r2, r3, #16
 80071b6:	0e1b      	lsrs	r3, r3, #24
 80071b8:	74e3      	strb	r3, [r4, #19]
 80071ba:	696b      	ldr	r3, [r5, #20]
 80071bc:	74a2      	strb	r2, [r4, #18]
 80071be:	0a1a      	lsrs	r2, r3, #8
 80071c0:	7523      	strb	r3, [r4, #20]
 80071c2:	7562      	strb	r2, [r4, #21]
 80071c4:	0c1a      	lsrs	r2, r3, #16
 80071c6:	0e1b      	lsrs	r3, r3, #24
 80071c8:	75e3      	strb	r3, [r4, #23]
 80071ca:	69ab      	ldr	r3, [r5, #24]
 80071cc:	75a2      	strb	r2, [r4, #22]
 80071ce:	0a1a      	lsrs	r2, r3, #8
 80071d0:	7623      	strb	r3, [r4, #24]
 80071d2:	7662      	strb	r2, [r4, #25]
 80071d4:	0c1a      	lsrs	r2, r3, #16
 80071d6:	0e1b      	lsrs	r3, r3, #24
 80071d8:	76e3      	strb	r3, [r4, #27]
 80071da:	69eb      	ldr	r3, [r5, #28]
 80071dc:	76a2      	strb	r2, [r4, #26]
 80071de:	0a1a      	lsrs	r2, r3, #8
 80071e0:	7723      	strb	r3, [r4, #28]
 80071e2:	7762      	strb	r2, [r4, #29]
 80071e4:	0c1a      	lsrs	r2, r3, #16
 80071e6:	0e1b      	lsrs	r3, r3, #24
 80071e8:	77a2      	strb	r2, [r4, #30]
 80071ea:	77e3      	strb	r3, [r4, #31]
 80071ec:	b008      	add	sp, #32
 80071ee:	bd70      	pop	{r4, r5, r6, pc}

080071f0 <fe25519_mul>:
 80071f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071f2:	46de      	mov	lr, fp
 80071f4:	4657      	mov	r7, sl
 80071f6:	464e      	mov	r6, r9
 80071f8:	4645      	mov	r5, r8
 80071fa:	b5e0      	push	{r5, r6, r7, lr}
 80071fc:	0015      	movs	r5, r2
 80071fe:	b0bd      	sub	sp, #244	; 0xf4
 8007200:	4680      	mov	r8, r0
 8007202:	000e      	movs	r6, r1
 8007204:	2240      	movs	r2, #64	; 0x40
 8007206:	2100      	movs	r1, #0
 8007208:	a82c      	add	r0, sp, #176	; 0xb0
 800720a:	f001 f878 	bl	80082fe <memset>
 800720e:	682b      	ldr	r3, [r5, #0]
 8007210:	2200      	movs	r2, #0
 8007212:	9323      	str	r3, [sp, #140]	; 0x8c
 8007214:	686b      	ldr	r3, [r5, #4]
 8007216:	2700      	movs	r7, #0
 8007218:	9324      	str	r3, [sp, #144]	; 0x90
 800721a:	68ab      	ldr	r3, [r5, #8]
 800721c:	9220      	str	r2, [sp, #128]	; 0x80
 800721e:	9325      	str	r3, [sp, #148]	; 0x94
 8007220:	68eb      	ldr	r3, [r5, #12]
 8007222:	4642      	mov	r2, r8
 8007224:	9326      	str	r3, [sp, #152]	; 0x98
 8007226:	692b      	ldr	r3, [r5, #16]
 8007228:	46b0      	mov	r8, r6
 800722a:	9327      	str	r3, [sp, #156]	; 0x9c
 800722c:	696b      	ldr	r3, [r5, #20]
 800722e:	ac2c      	add	r4, sp, #176	; 0xb0
 8007230:	9328      	str	r3, [sp, #160]	; 0xa0
 8007232:	69ab      	ldr	r3, [r5, #24]
 8007234:	9721      	str	r7, [sp, #132]	; 0x84
 8007236:	9329      	str	r3, [sp, #164]	; 0xa4
 8007238:	69eb      	ldr	r3, [r5, #28]
 800723a:	922b      	str	r2, [sp, #172]	; 0xac
 800723c:	932a      	str	r3, [sp, #168]	; 0xa8
 800723e:	2300      	movs	r3, #0
 8007240:	469a      	mov	sl, r3
 8007242:	469b      	mov	fp, r3
 8007244:	4699      	mov	r9, r3
 8007246:	931f      	str	r3, [sp, #124]	; 0x7c
 8007248:	931e      	str	r3, [sp, #120]	; 0x78
 800724a:	9322      	str	r3, [sp, #136]	; 0x88
 800724c:	4643      	mov	r3, r8
 800724e:	cb20      	ldmia	r3!, {r5}
 8007250:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007252:	4698      	mov	r8, r3
 8007254:	0028      	movs	r0, r5
 8007256:	2300      	movs	r3, #0
 8007258:	2100      	movs	r1, #0
 800725a:	f7f8 ffe1 	bl	8000220 <__aeabi_lmul>
 800725e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007260:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007262:	930e      	str	r3, [sp, #56]	; 0x38
 8007264:	2300      	movs	r3, #0
 8007266:	930f      	str	r3, [sp, #60]	; 0x3c
 8007268:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800726a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800726c:	1980      	adds	r0, r0, r6
 800726e:	4179      	adcs	r1, r7
 8007270:	6020      	str	r0, [r4, #0]
 8007272:	9100      	str	r1, [sp, #0]
 8007274:	0028      	movs	r0, r5
 8007276:	2100      	movs	r1, #0
 8007278:	001e      	movs	r6, r3
 800727a:	9301      	str	r3, [sp, #4]
 800727c:	f7f8 ffd0 	bl	8000220 <__aeabi_lmul>
 8007280:	464a      	mov	r2, r9
 8007282:	9611      	str	r6, [sp, #68]	; 0x44
 8007284:	9210      	str	r2, [sp, #64]	; 0x40
 8007286:	0033      	movs	r3, r6
 8007288:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800728a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800728c:	1980      	adds	r0, r0, r6
 800728e:	4179      	adcs	r1, r7
 8007290:	9e00      	ldr	r6, [sp, #0]
 8007292:	9f01      	ldr	r7, [sp, #4]
 8007294:	1980      	adds	r0, r0, r6
 8007296:	4179      	adcs	r1, r7
 8007298:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800729a:	001e      	movs	r6, r3
 800729c:	6060      	str	r0, [r4, #4]
 800729e:	9020      	str	r0, [sp, #128]	; 0x80
 80072a0:	9102      	str	r1, [sp, #8]
 80072a2:	0028      	movs	r0, r5
 80072a4:	2100      	movs	r1, #0
 80072a6:	9303      	str	r3, [sp, #12]
 80072a8:	f7f8 ffba 	bl	8000220 <__aeabi_lmul>
 80072ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072ae:	9613      	str	r6, [sp, #76]	; 0x4c
 80072b0:	9312      	str	r3, [sp, #72]	; 0x48
 80072b2:	0033      	movs	r3, r6
 80072b4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80072b6:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80072b8:	1980      	adds	r0, r0, r6
 80072ba:	4179      	adcs	r1, r7
 80072bc:	9e02      	ldr	r6, [sp, #8]
 80072be:	9f03      	ldr	r7, [sp, #12]
 80072c0:	1980      	adds	r0, r0, r6
 80072c2:	4179      	adcs	r1, r7
 80072c4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80072c6:	001f      	movs	r7, r3
 80072c8:	60a0      	str	r0, [r4, #8]
 80072ca:	9104      	str	r1, [sp, #16]
 80072cc:	4681      	mov	r9, r0
 80072ce:	2100      	movs	r1, #0
 80072d0:	0028      	movs	r0, r5
 80072d2:	9305      	str	r3, [sp, #20]
 80072d4:	f7f8 ffa4 	bl	8000220 <__aeabi_lmul>
 80072d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80072da:	9715      	str	r7, [sp, #84]	; 0x54
 80072dc:	9314      	str	r3, [sp, #80]	; 0x50
 80072de:	003b      	movs	r3, r7
 80072e0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80072e2:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80072e4:	1980      	adds	r0, r0, r6
 80072e6:	4179      	adcs	r1, r7
 80072e8:	9e04      	ldr	r6, [sp, #16]
 80072ea:	9f05      	ldr	r7, [sp, #20]
 80072ec:	1980      	adds	r0, r0, r6
 80072ee:	4179      	adcs	r1, r7
 80072f0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80072f2:	60e0      	str	r0, [r4, #12]
 80072f4:	9021      	str	r0, [sp, #132]	; 0x84
 80072f6:	9106      	str	r1, [sp, #24]
 80072f8:	0028      	movs	r0, r5
 80072fa:	2100      	movs	r1, #0
 80072fc:	001e      	movs	r6, r3
 80072fe:	9307      	str	r3, [sp, #28]
 8007300:	f7f8 ff8e 	bl	8000220 <__aeabi_lmul>
 8007304:	465b      	mov	r3, fp
 8007306:	9617      	str	r6, [sp, #92]	; 0x5c
 8007308:	9316      	str	r3, [sp, #88]	; 0x58
 800730a:	0033      	movs	r3, r6
 800730c:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800730e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8007310:	1980      	adds	r0, r0, r6
 8007312:	4179      	adcs	r1, r7
 8007314:	9e06      	ldr	r6, [sp, #24]
 8007316:	9f07      	ldr	r7, [sp, #28]
 8007318:	1980      	adds	r0, r0, r6
 800731a:	4179      	adcs	r1, r7
 800731c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800731e:	6120      	str	r0, [r4, #16]
 8007320:	9022      	str	r0, [sp, #136]	; 0x88
 8007322:	9108      	str	r1, [sp, #32]
 8007324:	0028      	movs	r0, r5
 8007326:	2100      	movs	r1, #0
 8007328:	001e      	movs	r6, r3
 800732a:	9309      	str	r3, [sp, #36]	; 0x24
 800732c:	f7f8 ff78 	bl	8000220 <__aeabi_lmul>
 8007330:	4652      	mov	r2, sl
 8007332:	9619      	str	r6, [sp, #100]	; 0x64
 8007334:	9218      	str	r2, [sp, #96]	; 0x60
 8007336:	0033      	movs	r3, r6
 8007338:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800733a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800733c:	1980      	adds	r0, r0, r6
 800733e:	4179      	adcs	r1, r7
 8007340:	9e08      	ldr	r6, [sp, #32]
 8007342:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007344:	1980      	adds	r0, r0, r6
 8007346:	4179      	adcs	r1, r7
 8007348:	930b      	str	r3, [sp, #44]	; 0x2c
 800734a:	001e      	movs	r6, r3
 800734c:	6160      	str	r0, [r4, #20]
 800734e:	910a      	str	r1, [sp, #40]	; 0x28
 8007350:	4683      	mov	fp, r0
 8007352:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8007354:	0028      	movs	r0, r5
 8007356:	2100      	movs	r1, #0
 8007358:	f7f8 ff62 	bl	8000220 <__aeabi_lmul>
 800735c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800735e:	961b      	str	r6, [sp, #108]	; 0x6c
 8007360:	921a      	str	r2, [sp, #104]	; 0x68
 8007362:	0033      	movs	r3, r6
 8007364:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8007366:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8007368:	1980      	adds	r0, r0, r6
 800736a:	4179      	adcs	r1, r7
 800736c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800736e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8007370:	1980      	adds	r0, r0, r6
 8007372:	4179      	adcs	r1, r7
 8007374:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007376:	61a0      	str	r0, [r4, #24]
 8007378:	001e      	movs	r6, r3
 800737a:	910c      	str	r1, [sp, #48]	; 0x30
 800737c:	4682      	mov	sl, r0
 800737e:	2100      	movs	r1, #0
 8007380:	0028      	movs	r0, r5
 8007382:	930d      	str	r3, [sp, #52]	; 0x34
 8007384:	f7f8 ff4c 	bl	8000220 <__aeabi_lmul>
 8007388:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800738a:	961d      	str	r6, [sp, #116]	; 0x74
 800738c:	921c      	str	r2, [sp, #112]	; 0x70
 800738e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007390:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007392:	1880      	adds	r0, r0, r2
 8007394:	4159      	adcs	r1, r3
 8007396:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007398:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800739a:	1880      	adds	r0, r0, r2
 800739c:	4159      	adcs	r1, r3
 800739e:	3404      	adds	r4, #4
 80073a0:	61a0      	str	r0, [r4, #24]
 80073a2:	61e1      	str	r1, [r4, #28]
 80073a4:	ab34      	add	r3, sp, #208	; 0xd0
 80073a6:	901e      	str	r0, [sp, #120]	; 0x78
 80073a8:	911f      	str	r1, [sp, #124]	; 0x7c
 80073aa:	429c      	cmp	r4, r3
 80073ac:	d000      	beq.n	80073b0 <fe25519_mul+0x1c0>
 80073ae:	e74d      	b.n	800724c <fe25519_mul+0x5c>
 80073b0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80073b2:	9834      	ldr	r0, [sp, #208]	; 0xd0
 80073b4:	4698      	mov	r8, r3
 80073b6:	2226      	movs	r2, #38	; 0x26
 80073b8:	2300      	movs	r3, #0
 80073ba:	2100      	movs	r1, #0
 80073bc:	f7f8 ff30 	bl	8000220 <__aeabi_lmul>
 80073c0:	2300      	movs	r3, #0
 80073c2:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80073c4:	2500      	movs	r5, #0
 80073c6:	1880      	adds	r0, r0, r2
 80073c8:	4159      	adcs	r1, r3
 80073ca:	2226      	movs	r2, #38	; 0x26
 80073cc:	9000      	str	r0, [sp, #0]
 80073ce:	9101      	str	r1, [sp, #4]
 80073d0:	000c      	movs	r4, r1
 80073d2:	9835      	ldr	r0, [sp, #212]	; 0xd4
 80073d4:	2300      	movs	r3, #0
 80073d6:	2100      	movs	r1, #0
 80073d8:	f7f8 ff22 	bl	8000220 <__aeabi_lmul>
 80073dc:	2300      	movs	r3, #0
 80073de:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80073e0:	1880      	adds	r0, r0, r2
 80073e2:	4159      	adcs	r1, r3
 80073e4:	0002      	movs	r2, r0
 80073e6:	000b      	movs	r3, r1
 80073e8:	1912      	adds	r2, r2, r4
 80073ea:	416b      	adcs	r3, r5
 80073ec:	9836      	ldr	r0, [sp, #216]	; 0xd8
 80073ee:	9202      	str	r2, [sp, #8]
 80073f0:	9303      	str	r3, [sp, #12]
 80073f2:	001c      	movs	r4, r3
 80073f4:	2226      	movs	r2, #38	; 0x26
 80073f6:	2300      	movs	r3, #0
 80073f8:	2100      	movs	r1, #0
 80073fa:	f7f8 ff11 	bl	8000220 <__aeabi_lmul>
 80073fe:	2300      	movs	r3, #0
 8007400:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8007402:	2500      	movs	r5, #0
 8007404:	1880      	adds	r0, r0, r2
 8007406:	4159      	adcs	r1, r3
 8007408:	000a      	movs	r2, r1
 800740a:	0001      	movs	r1, r0
 800740c:	1909      	adds	r1, r1, r4
 800740e:	416a      	adcs	r2, r5
 8007410:	9837      	ldr	r0, [sp, #220]	; 0xdc
 8007412:	9104      	str	r1, [sp, #16]
 8007414:	9205      	str	r2, [sp, #20]
 8007416:	0014      	movs	r4, r2
 8007418:	2300      	movs	r3, #0
 800741a:	2226      	movs	r2, #38	; 0x26
 800741c:	2100      	movs	r1, #0
 800741e:	f7f8 feff 	bl	8000220 <__aeabi_lmul>
 8007422:	2300      	movs	r3, #0
 8007424:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8007426:	2500      	movs	r5, #0
 8007428:	1880      	adds	r0, r0, r2
 800742a:	4159      	adcs	r1, r3
 800742c:	0006      	movs	r6, r0
 800742e:	000f      	movs	r7, r1
 8007430:	1936      	adds	r6, r6, r4
 8007432:	416f      	adcs	r7, r5
 8007434:	9838      	ldr	r0, [sp, #224]	; 0xe0
 8007436:	2226      	movs	r2, #38	; 0x26
 8007438:	2300      	movs	r3, #0
 800743a:	2100      	movs	r1, #0
 800743c:	9606      	str	r6, [sp, #24]
 800743e:	9707      	str	r7, [sp, #28]
 8007440:	f7f8 feee 	bl	8000220 <__aeabi_lmul>
 8007444:	2300      	movs	r3, #0
 8007446:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8007448:	003c      	movs	r4, r7
 800744a:	1880      	adds	r0, r0, r2
 800744c:	4159      	adcs	r1, r3
 800744e:	2500      	movs	r5, #0
 8007450:	1900      	adds	r0, r0, r4
 8007452:	4169      	adcs	r1, r5
 8007454:	2226      	movs	r2, #38	; 0x26
 8007456:	9008      	str	r0, [sp, #32]
 8007458:	9109      	str	r1, [sp, #36]	; 0x24
 800745a:	000c      	movs	r4, r1
 800745c:	9839      	ldr	r0, [sp, #228]	; 0xe4
 800745e:	2300      	movs	r3, #0
 8007460:	2100      	movs	r1, #0
 8007462:	f7f8 fedd 	bl	8000220 <__aeabi_lmul>
 8007466:	2300      	movs	r3, #0
 8007468:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800746a:	2500      	movs	r5, #0
 800746c:	1880      	adds	r0, r0, r2
 800746e:	4159      	adcs	r1, r3
 8007470:	0002      	movs	r2, r0
 8007472:	000b      	movs	r3, r1
 8007474:	1912      	adds	r2, r2, r4
 8007476:	416b      	adcs	r3, r5
 8007478:	983a      	ldr	r0, [sp, #232]	; 0xe8
 800747a:	920a      	str	r2, [sp, #40]	; 0x28
 800747c:	930b      	str	r3, [sp, #44]	; 0x2c
 800747e:	001c      	movs	r4, r3
 8007480:	2226      	movs	r2, #38	; 0x26
 8007482:	2300      	movs	r3, #0
 8007484:	2100      	movs	r1, #0
 8007486:	f7f8 fecb 	bl	8000220 <__aeabi_lmul>
 800748a:	2300      	movs	r3, #0
 800748c:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800748e:	2500      	movs	r5, #0
 8007490:	1880      	adds	r0, r0, r2
 8007492:	4159      	adcs	r1, r3
 8007494:	000a      	movs	r2, r1
 8007496:	0001      	movs	r1, r0
 8007498:	1909      	adds	r1, r1, r4
 800749a:	416a      	adcs	r2, r5
 800749c:	983b      	ldr	r0, [sp, #236]	; 0xec
 800749e:	910c      	str	r1, [sp, #48]	; 0x30
 80074a0:	920d      	str	r2, [sp, #52]	; 0x34
 80074a2:	0014      	movs	r4, r2
 80074a4:	2300      	movs	r3, #0
 80074a6:	2226      	movs	r2, #38	; 0x26
 80074a8:	2100      	movs	r1, #0
 80074aa:	f7f8 feb9 	bl	8000220 <__aeabi_lmul>
 80074ae:	2700      	movs	r7, #0
 80074b0:	9e33      	ldr	r6, [sp, #204]	; 0xcc
 80074b2:	2500      	movs	r5, #0
 80074b4:	1836      	adds	r6, r6, r0
 80074b6:	414f      	adcs	r7, r1
 80074b8:	1936      	adds	r6, r6, r4
 80074ba:	416f      	adcs	r7, r5
 80074bc:	2226      	movs	r2, #38	; 0x26
 80074be:	2300      	movs	r3, #0
 80074c0:	0038      	movs	r0, r7
 80074c2:	2100      	movs	r1, #0
 80074c4:	f7f8 feac 	bl	8000220 <__aeabi_lmul>
 80074c8:	2300      	movs	r3, #0
 80074ca:	9a00      	ldr	r2, [sp, #0]
 80074cc:	2500      	movs	r5, #0
 80074ce:	1880      	adds	r0, r0, r2
 80074d0:	4159      	adcs	r1, r3
 80074d2:	2300      	movs	r3, #0
 80074d4:	000c      	movs	r4, r1
 80074d6:	9a02      	ldr	r2, [sp, #8]
 80074d8:	1912      	adds	r2, r2, r4
 80074da:	416b      	adcs	r3, r5
 80074dc:	4644      	mov	r4, r8
 80074de:	2500      	movs	r5, #0
 80074e0:	6062      	str	r2, [r4, #4]
 80074e2:	001c      	movs	r4, r3
 80074e4:	2300      	movs	r3, #0
 80074e6:	9a04      	ldr	r2, [sp, #16]
 80074e8:	1912      	adds	r2, r2, r4
 80074ea:	416b      	adcs	r3, r5
 80074ec:	4644      	mov	r4, r8
 80074ee:	2500      	movs	r5, #0
 80074f0:	60a2      	str	r2, [r4, #8]
 80074f2:	001c      	movs	r4, r3
 80074f4:	2300      	movs	r3, #0
 80074f6:	9a06      	ldr	r2, [sp, #24]
 80074f8:	1912      	adds	r2, r2, r4
 80074fa:	416b      	adcs	r3, r5
 80074fc:	4644      	mov	r4, r8
 80074fe:	2500      	movs	r5, #0
 8007500:	60e2      	str	r2, [r4, #12]
 8007502:	001c      	movs	r4, r3
 8007504:	2300      	movs	r3, #0
 8007506:	9a08      	ldr	r2, [sp, #32]
 8007508:	1912      	adds	r2, r2, r4
 800750a:	416b      	adcs	r3, r5
 800750c:	4644      	mov	r4, r8
 800750e:	2500      	movs	r5, #0
 8007510:	6122      	str	r2, [r4, #16]
 8007512:	001c      	movs	r4, r3
 8007514:	2300      	movs	r3, #0
 8007516:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007518:	1912      	adds	r2, r2, r4
 800751a:	416b      	adcs	r3, r5
 800751c:	4644      	mov	r4, r8
 800751e:	2500      	movs	r5, #0
 8007520:	6162      	str	r2, [r4, #20]
 8007522:	001c      	movs	r4, r3
 8007524:	2300      	movs	r3, #0
 8007526:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007528:	1912      	adds	r2, r2, r4
 800752a:	416b      	adcs	r3, r5
 800752c:	4644      	mov	r4, r8
 800752e:	2500      	movs	r5, #0
 8007530:	61a2      	str	r2, [r4, #24]
 8007532:	0032      	movs	r2, r6
 8007534:	001c      	movs	r4, r3
 8007536:	2300      	movs	r3, #0
 8007538:	18a4      	adds	r4, r4, r2
 800753a:	415d      	adcs	r5, r3
 800753c:	2226      	movs	r2, #38	; 0x26
 800753e:	4643      	mov	r3, r8
 8007540:	436a      	muls	r2, r5
 8007542:	1810      	adds	r0, r2, r0
 8007544:	61dc      	str	r4, [r3, #28]
 8007546:	6018      	str	r0, [r3, #0]
 8007548:	b03d      	add	sp, #244	; 0xf4
 800754a:	bc3c      	pop	{r2, r3, r4, r5}
 800754c:	4690      	mov	r8, r2
 800754e:	4699      	mov	r9, r3
 8007550:	46a2      	mov	sl, r4
 8007552:	46ab      	mov	fp, r5
 8007554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007556:	46c0      	nop			; (mov r8, r8)

08007558 <fe25519_square>:
 8007558:	b510      	push	{r4, lr}
 800755a:	000a      	movs	r2, r1
 800755c:	f7ff fe48 	bl	80071f0 <fe25519_mul>
 8007560:	bd10      	pop	{r4, pc}
 8007562:	46c0      	nop			; (mov r8, r8)

08007564 <fe25519_invert>:
 8007564:	b530      	push	{r4, r5, lr}
 8007566:	000c      	movs	r4, r1
 8007568:	b0d1      	sub	sp, #324	; 0x144
 800756a:	0005      	movs	r5, r0
 800756c:	4668      	mov	r0, sp
 800756e:	f7ff fff3 	bl	8007558 <fe25519_square>
 8007572:	4669      	mov	r1, sp
 8007574:	a848      	add	r0, sp, #288	; 0x120
 8007576:	f7ff ffef 	bl	8007558 <fe25519_square>
 800757a:	a948      	add	r1, sp, #288	; 0x120
 800757c:	a840      	add	r0, sp, #256	; 0x100
 800757e:	f7ff ffeb 	bl	8007558 <fe25519_square>
 8007582:	0022      	movs	r2, r4
 8007584:	a940      	add	r1, sp, #256	; 0x100
 8007586:	a808      	add	r0, sp, #32
 8007588:	f7ff fe32 	bl	80071f0 <fe25519_mul>
 800758c:	466a      	mov	r2, sp
 800758e:	a908      	add	r1, sp, #32
 8007590:	a810      	add	r0, sp, #64	; 0x40
 8007592:	f7ff fe2d 	bl	80071f0 <fe25519_mul>
 8007596:	a910      	add	r1, sp, #64	; 0x40
 8007598:	a840      	add	r0, sp, #256	; 0x100
 800759a:	f7ff ffdd 	bl	8007558 <fe25519_square>
 800759e:	aa08      	add	r2, sp, #32
 80075a0:	a940      	add	r1, sp, #256	; 0x100
 80075a2:	a818      	add	r0, sp, #96	; 0x60
 80075a4:	f7ff fe24 	bl	80071f0 <fe25519_mul>
 80075a8:	a918      	add	r1, sp, #96	; 0x60
 80075aa:	a840      	add	r0, sp, #256	; 0x100
 80075ac:	f7ff ffd4 	bl	8007558 <fe25519_square>
 80075b0:	a940      	add	r1, sp, #256	; 0x100
 80075b2:	a848      	add	r0, sp, #288	; 0x120
 80075b4:	f7ff ffd0 	bl	8007558 <fe25519_square>
 80075b8:	a948      	add	r1, sp, #288	; 0x120
 80075ba:	a840      	add	r0, sp, #256	; 0x100
 80075bc:	f7ff ffcc 	bl	8007558 <fe25519_square>
 80075c0:	a940      	add	r1, sp, #256	; 0x100
 80075c2:	a848      	add	r0, sp, #288	; 0x120
 80075c4:	f7ff ffc8 	bl	8007558 <fe25519_square>
 80075c8:	a948      	add	r1, sp, #288	; 0x120
 80075ca:	a840      	add	r0, sp, #256	; 0x100
 80075cc:	f7ff ffc4 	bl	8007558 <fe25519_square>
 80075d0:	aa18      	add	r2, sp, #96	; 0x60
 80075d2:	a940      	add	r1, sp, #256	; 0x100
 80075d4:	a820      	add	r0, sp, #128	; 0x80
 80075d6:	f7ff fe0b 	bl	80071f0 <fe25519_mul>
 80075da:	a920      	add	r1, sp, #128	; 0x80
 80075dc:	a840      	add	r0, sp, #256	; 0x100
 80075de:	f7ff ffbb 	bl	8007558 <fe25519_square>
 80075e2:	a940      	add	r1, sp, #256	; 0x100
 80075e4:	a848      	add	r0, sp, #288	; 0x120
 80075e6:	f7ff ffb7 	bl	8007558 <fe25519_square>
 80075ea:	2404      	movs	r4, #4
 80075ec:	a948      	add	r1, sp, #288	; 0x120
 80075ee:	a840      	add	r0, sp, #256	; 0x100
 80075f0:	f7ff ffb2 	bl	8007558 <fe25519_square>
 80075f4:	3c01      	subs	r4, #1
 80075f6:	a940      	add	r1, sp, #256	; 0x100
 80075f8:	a848      	add	r0, sp, #288	; 0x120
 80075fa:	f7ff ffad 	bl	8007558 <fe25519_square>
 80075fe:	2c00      	cmp	r4, #0
 8007600:	d1f4      	bne.n	80075ec <fe25519_invert+0x88>
 8007602:	aa20      	add	r2, sp, #128	; 0x80
 8007604:	a948      	add	r1, sp, #288	; 0x120
 8007606:	a828      	add	r0, sp, #160	; 0xa0
 8007608:	f7ff fdf2 	bl	80071f0 <fe25519_mul>
 800760c:	a928      	add	r1, sp, #160	; 0xa0
 800760e:	a840      	add	r0, sp, #256	; 0x100
 8007610:	f7ff ffa2 	bl	8007558 <fe25519_square>
 8007614:	a940      	add	r1, sp, #256	; 0x100
 8007616:	a848      	add	r0, sp, #288	; 0x120
 8007618:	f7ff ff9e 	bl	8007558 <fe25519_square>
 800761c:	3409      	adds	r4, #9
 800761e:	a948      	add	r1, sp, #288	; 0x120
 8007620:	a840      	add	r0, sp, #256	; 0x100
 8007622:	f7ff ff99 	bl	8007558 <fe25519_square>
 8007626:	3c01      	subs	r4, #1
 8007628:	a940      	add	r1, sp, #256	; 0x100
 800762a:	a848      	add	r0, sp, #288	; 0x120
 800762c:	f7ff ff94 	bl	8007558 <fe25519_square>
 8007630:	2c00      	cmp	r4, #0
 8007632:	d1f4      	bne.n	800761e <fe25519_invert+0xba>
 8007634:	aa28      	add	r2, sp, #160	; 0xa0
 8007636:	a948      	add	r1, sp, #288	; 0x120
 8007638:	a840      	add	r0, sp, #256	; 0x100
 800763a:	f7ff fdd9 	bl	80071f0 <fe25519_mul>
 800763e:	a940      	add	r1, sp, #256	; 0x100
 8007640:	a848      	add	r0, sp, #288	; 0x120
 8007642:	f7ff ff89 	bl	8007558 <fe25519_square>
 8007646:	a948      	add	r1, sp, #288	; 0x120
 8007648:	a840      	add	r0, sp, #256	; 0x100
 800764a:	f7ff ff85 	bl	8007558 <fe25519_square>
 800764e:	3404      	adds	r4, #4
 8007650:	a940      	add	r1, sp, #256	; 0x100
 8007652:	a848      	add	r0, sp, #288	; 0x120
 8007654:	f7ff ff80 	bl	8007558 <fe25519_square>
 8007658:	3c01      	subs	r4, #1
 800765a:	a948      	add	r1, sp, #288	; 0x120
 800765c:	a840      	add	r0, sp, #256	; 0x100
 800765e:	f7ff ff7b 	bl	8007558 <fe25519_square>
 8007662:	2c00      	cmp	r4, #0
 8007664:	d1f4      	bne.n	8007650 <fe25519_invert+0xec>
 8007666:	aa20      	add	r2, sp, #128	; 0x80
 8007668:	a940      	add	r1, sp, #256	; 0x100
 800766a:	a830      	add	r0, sp, #192	; 0xc0
 800766c:	f7ff fdc0 	bl	80071f0 <fe25519_mul>
 8007670:	a930      	add	r1, sp, #192	; 0xc0
 8007672:	a840      	add	r0, sp, #256	; 0x100
 8007674:	f7ff ff70 	bl	8007558 <fe25519_square>
 8007678:	a940      	add	r1, sp, #256	; 0x100
 800767a:	a848      	add	r0, sp, #288	; 0x120
 800767c:	f7ff ff6c 	bl	8007558 <fe25519_square>
 8007680:	3418      	adds	r4, #24
 8007682:	a948      	add	r1, sp, #288	; 0x120
 8007684:	a840      	add	r0, sp, #256	; 0x100
 8007686:	f7ff ff67 	bl	8007558 <fe25519_square>
 800768a:	3c01      	subs	r4, #1
 800768c:	a940      	add	r1, sp, #256	; 0x100
 800768e:	a848      	add	r0, sp, #288	; 0x120
 8007690:	f7ff ff62 	bl	8007558 <fe25519_square>
 8007694:	2c00      	cmp	r4, #0
 8007696:	d1f4      	bne.n	8007682 <fe25519_invert+0x11e>
 8007698:	aa30      	add	r2, sp, #192	; 0xc0
 800769a:	a948      	add	r1, sp, #288	; 0x120
 800769c:	a838      	add	r0, sp, #224	; 0xe0
 800769e:	f7ff fda7 	bl	80071f0 <fe25519_mul>
 80076a2:	a938      	add	r1, sp, #224	; 0xe0
 80076a4:	a848      	add	r0, sp, #288	; 0x120
 80076a6:	f7ff ff57 	bl	8007558 <fe25519_square>
 80076aa:	a948      	add	r1, sp, #288	; 0x120
 80076ac:	a840      	add	r0, sp, #256	; 0x100
 80076ae:	f7ff ff53 	bl	8007558 <fe25519_square>
 80076b2:	3431      	adds	r4, #49	; 0x31
 80076b4:	a940      	add	r1, sp, #256	; 0x100
 80076b6:	a848      	add	r0, sp, #288	; 0x120
 80076b8:	f7ff ff4e 	bl	8007558 <fe25519_square>
 80076bc:	3c01      	subs	r4, #1
 80076be:	a948      	add	r1, sp, #288	; 0x120
 80076c0:	a840      	add	r0, sp, #256	; 0x100
 80076c2:	f7ff ff49 	bl	8007558 <fe25519_square>
 80076c6:	2c00      	cmp	r4, #0
 80076c8:	d1f4      	bne.n	80076b4 <fe25519_invert+0x150>
 80076ca:	aa38      	add	r2, sp, #224	; 0xe0
 80076cc:	a940      	add	r1, sp, #256	; 0x100
 80076ce:	a848      	add	r0, sp, #288	; 0x120
 80076d0:	f7ff fd8e 	bl	80071f0 <fe25519_mul>
 80076d4:	a948      	add	r1, sp, #288	; 0x120
 80076d6:	a840      	add	r0, sp, #256	; 0x100
 80076d8:	f7ff ff3e 	bl	8007558 <fe25519_square>
 80076dc:	a940      	add	r1, sp, #256	; 0x100
 80076de:	a848      	add	r0, sp, #288	; 0x120
 80076e0:	f7ff ff3a 	bl	8007558 <fe25519_square>
 80076e4:	3418      	adds	r4, #24
 80076e6:	a948      	add	r1, sp, #288	; 0x120
 80076e8:	a840      	add	r0, sp, #256	; 0x100
 80076ea:	f7ff ff35 	bl	8007558 <fe25519_square>
 80076ee:	3c01      	subs	r4, #1
 80076f0:	a940      	add	r1, sp, #256	; 0x100
 80076f2:	a848      	add	r0, sp, #288	; 0x120
 80076f4:	f7ff ff30 	bl	8007558 <fe25519_square>
 80076f8:	2c00      	cmp	r4, #0
 80076fa:	d1f4      	bne.n	80076e6 <fe25519_invert+0x182>
 80076fc:	aa30      	add	r2, sp, #192	; 0xc0
 80076fe:	a948      	add	r1, sp, #288	; 0x120
 8007700:	a840      	add	r0, sp, #256	; 0x100
 8007702:	f7ff fd75 	bl	80071f0 <fe25519_mul>
 8007706:	a940      	add	r1, sp, #256	; 0x100
 8007708:	a848      	add	r0, sp, #288	; 0x120
 800770a:	f7ff ff25 	bl	8007558 <fe25519_square>
 800770e:	a948      	add	r1, sp, #288	; 0x120
 8007710:	a840      	add	r0, sp, #256	; 0x100
 8007712:	f7ff ff21 	bl	8007558 <fe25519_square>
 8007716:	a940      	add	r1, sp, #256	; 0x100
 8007718:	a848      	add	r0, sp, #288	; 0x120
 800771a:	f7ff ff1d 	bl	8007558 <fe25519_square>
 800771e:	a948      	add	r1, sp, #288	; 0x120
 8007720:	a840      	add	r0, sp, #256	; 0x100
 8007722:	f7ff ff19 	bl	8007558 <fe25519_square>
 8007726:	a940      	add	r1, sp, #256	; 0x100
 8007728:	a848      	add	r0, sp, #288	; 0x120
 800772a:	f7ff ff15 	bl	8007558 <fe25519_square>
 800772e:	aa10      	add	r2, sp, #64	; 0x40
 8007730:	a948      	add	r1, sp, #288	; 0x120
 8007732:	0028      	movs	r0, r5
 8007734:	f7ff fd5c 	bl	80071f0 <fe25519_mul>
 8007738:	b051      	add	sp, #324	; 0x144
 800773a:	bd30      	pop	{r4, r5, pc}

0800773c <fe25519_mult121665>:
 800773c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800773e:	468c      	mov	ip, r1
 8007740:	4647      	mov	r7, r8
 8007742:	4680      	mov	r8, r0
 8007744:	6808      	ldr	r0, [r1, #0]
 8007746:	2100      	movs	r1, #0
 8007748:	0e45      	lsrs	r5, r0, #25
 800774a:	01c4      	lsls	r4, r0, #7
 800774c:	1a24      	subs	r4, r4, r0
 800774e:	418d      	sbcs	r5, r1
 8007750:	0fa6      	lsrs	r6, r4, #30
 8007752:	00ab      	lsls	r3, r5, #2
 8007754:	4333      	orrs	r3, r6
 8007756:	00a2      	lsls	r2, r4, #2
 8007758:	1a12      	subs	r2, r2, r0
 800775a:	418b      	sbcs	r3, r1
 800775c:	0014      	movs	r4, r2
 800775e:	0f16      	lsrs	r6, r2, #28
 8007760:	011b      	lsls	r3, r3, #4
 8007762:	4333      	orrs	r3, r6
 8007764:	0122      	lsls	r2, r4, #4
 8007766:	1a12      	subs	r2, r2, r0
 8007768:	418b      	sbcs	r3, r1
 800776a:	0f14      	lsrs	r4, r2, #28
 800776c:	0119      	lsls	r1, r3, #4
 800776e:	4321      	orrs	r1, r4
 8007770:	0110      	lsls	r0, r2, #4
 8007772:	46ce      	mov	lr, r9
 8007774:	1a80      	subs	r0, r0, r2
 8007776:	4199      	sbcs	r1, r3
 8007778:	4642      	mov	r2, r8
 800777a:	b580      	push	{r7, lr}
 800777c:	6010      	str	r0, [r2, #0]
 800777e:	4662      	mov	r2, ip
 8007780:	000c      	movs	r4, r1
 8007782:	0003      	movs	r3, r0
 8007784:	2100      	movs	r1, #0
 8007786:	6850      	ldr	r0, [r2, #4]
 8007788:	b091      	sub	sp, #68	; 0x44
 800778a:	9400      	str	r4, [sp, #0]
 800778c:	930e      	str	r3, [sp, #56]	; 0x38
 800778e:	940f      	str	r4, [sp, #60]	; 0x3c
 8007790:	0e45      	lsrs	r5, r0, #25
 8007792:	01c4      	lsls	r4, r0, #7
 8007794:	1a24      	subs	r4, r4, r0
 8007796:	418d      	sbcs	r5, r1
 8007798:	0fa2      	lsrs	r2, r4, #30
 800779a:	00ab      	lsls	r3, r5, #2
 800779c:	4313      	orrs	r3, r2
 800779e:	00a2      	lsls	r2, r4, #2
 80077a0:	1a12      	subs	r2, r2, r0
 80077a2:	418b      	sbcs	r3, r1
 80077a4:	0014      	movs	r4, r2
 80077a6:	011b      	lsls	r3, r3, #4
 80077a8:	0f12      	lsrs	r2, r2, #28
 80077aa:	4313      	orrs	r3, r2
 80077ac:	0122      	lsls	r2, r4, #4
 80077ae:	1a12      	subs	r2, r2, r0
 80077b0:	418b      	sbcs	r3, r1
 80077b2:	0f14      	lsrs	r4, r2, #28
 80077b4:	0119      	lsls	r1, r3, #4
 80077b6:	2700      	movs	r7, #0
 80077b8:	4321      	orrs	r1, r4
 80077ba:	0110      	lsls	r0, r2, #4
 80077bc:	1a80      	subs	r0, r0, r2
 80077be:	4199      	sbcs	r1, r3
 80077c0:	9701      	str	r7, [sp, #4]
 80077c2:	9b00      	ldr	r3, [sp, #0]
 80077c4:	9c01      	ldr	r4, [sp, #4]
 80077c6:	18c0      	adds	r0, r0, r3
 80077c8:	4161      	adcs	r1, r4
 80077ca:	0002      	movs	r2, r0
 80077cc:	000b      	movs	r3, r1
 80077ce:	4641      	mov	r1, r8
 80077d0:	4664      	mov	r4, ip
 80077d2:	604a      	str	r2, [r1, #4]
 80077d4:	2100      	movs	r1, #0
 80077d6:	68a0      	ldr	r0, [r4, #8]
 80077d8:	9300      	str	r3, [sp, #0]
 80077da:	0e45      	lsrs	r5, r0, #25
 80077dc:	01c4      	lsls	r4, r0, #7
 80077de:	1a24      	subs	r4, r4, r0
 80077e0:	418d      	sbcs	r5, r1
 80077e2:	9202      	str	r2, [sp, #8]
 80077e4:	9303      	str	r3, [sp, #12]
 80077e6:	0fa3      	lsrs	r3, r4, #30
 80077e8:	4699      	mov	r9, r3
 80077ea:	464e      	mov	r6, r9
 80077ec:	00ab      	lsls	r3, r5, #2
 80077ee:	4333      	orrs	r3, r6
 80077f0:	00a2      	lsls	r2, r4, #2
 80077f2:	0014      	movs	r4, r2
 80077f4:	001d      	movs	r5, r3
 80077f6:	1a24      	subs	r4, r4, r0
 80077f8:	418d      	sbcs	r5, r1
 80077fa:	0f26      	lsrs	r6, r4, #28
 80077fc:	012b      	lsls	r3, r5, #4
 80077fe:	4333      	orrs	r3, r6
 8007800:	0122      	lsls	r2, r4, #4
 8007802:	1a12      	subs	r2, r2, r0
 8007804:	418b      	sbcs	r3, r1
 8007806:	0f14      	lsrs	r4, r2, #28
 8007808:	0119      	lsls	r1, r3, #4
 800780a:	4321      	orrs	r1, r4
 800780c:	0110      	lsls	r0, r2, #4
 800780e:	1a80      	subs	r0, r0, r2
 8007810:	4199      	sbcs	r1, r3
 8007812:	9701      	str	r7, [sp, #4]
 8007814:	9b00      	ldr	r3, [sp, #0]
 8007816:	9c01      	ldr	r4, [sp, #4]
 8007818:	18c0      	adds	r0, r0, r3
 800781a:	4161      	adcs	r1, r4
 800781c:	000a      	movs	r2, r1
 800781e:	0001      	movs	r1, r0
 8007820:	4640      	mov	r0, r8
 8007822:	4664      	mov	r4, ip
 8007824:	6081      	str	r1, [r0, #8]
 8007826:	9104      	str	r1, [sp, #16]
 8007828:	9205      	str	r2, [sp, #20]
 800782a:	2100      	movs	r1, #0
 800782c:	68e0      	ldr	r0, [r4, #12]
 800782e:	9200      	str	r2, [sp, #0]
 8007830:	0e45      	lsrs	r5, r0, #25
 8007832:	01c4      	lsls	r4, r0, #7
 8007834:	1a24      	subs	r4, r4, r0
 8007836:	418d      	sbcs	r5, r1
 8007838:	0fa3      	lsrs	r3, r4, #30
 800783a:	4699      	mov	r9, r3
 800783c:	464e      	mov	r6, r9
 800783e:	00ab      	lsls	r3, r5, #2
 8007840:	4333      	orrs	r3, r6
 8007842:	00a2      	lsls	r2, r4, #2
 8007844:	0014      	movs	r4, r2
 8007846:	001d      	movs	r5, r3
 8007848:	1a24      	subs	r4, r4, r0
 800784a:	418d      	sbcs	r5, r1
 800784c:	0f26      	lsrs	r6, r4, #28
 800784e:	012b      	lsls	r3, r5, #4
 8007850:	4333      	orrs	r3, r6
 8007852:	0122      	lsls	r2, r4, #4
 8007854:	1a12      	subs	r2, r2, r0
 8007856:	418b      	sbcs	r3, r1
 8007858:	0f14      	lsrs	r4, r2, #28
 800785a:	0119      	lsls	r1, r3, #4
 800785c:	4321      	orrs	r1, r4
 800785e:	0110      	lsls	r0, r2, #4
 8007860:	1a80      	subs	r0, r0, r2
 8007862:	4199      	sbcs	r1, r3
 8007864:	9701      	str	r7, [sp, #4]
 8007866:	9b00      	ldr	r3, [sp, #0]
 8007868:	9c01      	ldr	r4, [sp, #4]
 800786a:	18c0      	adds	r0, r0, r3
 800786c:	4161      	adcs	r1, r4
 800786e:	4644      	mov	r4, r8
 8007870:	60e0      	str	r0, [r4, #12]
 8007872:	4664      	mov	r4, ip
 8007874:	9100      	str	r1, [sp, #0]
 8007876:	9006      	str	r0, [sp, #24]
 8007878:	9107      	str	r1, [sp, #28]
 800787a:	2100      	movs	r1, #0
 800787c:	6920      	ldr	r0, [r4, #16]
 800787e:	9701      	str	r7, [sp, #4]
 8007880:	0e45      	lsrs	r5, r0, #25
 8007882:	01c4      	lsls	r4, r0, #7
 8007884:	1a24      	subs	r4, r4, r0
 8007886:	418d      	sbcs	r5, r1
 8007888:	0fa3      	lsrs	r3, r4, #30
 800788a:	4699      	mov	r9, r3
 800788c:	464e      	mov	r6, r9
 800788e:	00ab      	lsls	r3, r5, #2
 8007890:	4333      	orrs	r3, r6
 8007892:	00a2      	lsls	r2, r4, #2
 8007894:	0014      	movs	r4, r2
 8007896:	001d      	movs	r5, r3
 8007898:	1a24      	subs	r4, r4, r0
 800789a:	418d      	sbcs	r5, r1
 800789c:	0f26      	lsrs	r6, r4, #28
 800789e:	012b      	lsls	r3, r5, #4
 80078a0:	4333      	orrs	r3, r6
 80078a2:	0122      	lsls	r2, r4, #4
 80078a4:	1a12      	subs	r2, r2, r0
 80078a6:	418b      	sbcs	r3, r1
 80078a8:	0f14      	lsrs	r4, r2, #28
 80078aa:	0119      	lsls	r1, r3, #4
 80078ac:	4321      	orrs	r1, r4
 80078ae:	0110      	lsls	r0, r2, #4
 80078b0:	1a80      	subs	r0, r0, r2
 80078b2:	4199      	sbcs	r1, r3
 80078b4:	9a00      	ldr	r2, [sp, #0]
 80078b6:	9b01      	ldr	r3, [sp, #4]
 80078b8:	0004      	movs	r4, r0
 80078ba:	000d      	movs	r5, r1
 80078bc:	18a4      	adds	r4, r4, r2
 80078be:	415d      	adcs	r5, r3
 80078c0:	4646      	mov	r6, r8
 80078c2:	9408      	str	r4, [sp, #32]
 80078c4:	9509      	str	r5, [sp, #36]	; 0x24
 80078c6:	9500      	str	r5, [sp, #0]
 80078c8:	4665      	mov	r5, ip
 80078ca:	2100      	movs	r1, #0
 80078cc:	6134      	str	r4, [r6, #16]
 80078ce:	6968      	ldr	r0, [r5, #20]
 80078d0:	2700      	movs	r7, #0
 80078d2:	0e45      	lsrs	r5, r0, #25
 80078d4:	01c4      	lsls	r4, r0, #7
 80078d6:	1a24      	subs	r4, r4, r0
 80078d8:	418d      	sbcs	r5, r1
 80078da:	0fa3      	lsrs	r3, r4, #30
 80078dc:	4699      	mov	r9, r3
 80078de:	464e      	mov	r6, r9
 80078e0:	00ab      	lsls	r3, r5, #2
 80078e2:	4333      	orrs	r3, r6
 80078e4:	00a2      	lsls	r2, r4, #2
 80078e6:	1a12      	subs	r2, r2, r0
 80078e8:	418b      	sbcs	r3, r1
 80078ea:	0014      	movs	r4, r2
 80078ec:	0f16      	lsrs	r6, r2, #28
 80078ee:	011b      	lsls	r3, r3, #4
 80078f0:	4333      	orrs	r3, r6
 80078f2:	0122      	lsls	r2, r4, #4
 80078f4:	1a12      	subs	r2, r2, r0
 80078f6:	418b      	sbcs	r3, r1
 80078f8:	0f14      	lsrs	r4, r2, #28
 80078fa:	0119      	lsls	r1, r3, #4
 80078fc:	4321      	orrs	r1, r4
 80078fe:	0110      	lsls	r0, r2, #4
 8007900:	1a80      	subs	r0, r0, r2
 8007902:	4199      	sbcs	r1, r3
 8007904:	9701      	str	r7, [sp, #4]
 8007906:	9b00      	ldr	r3, [sp, #0]
 8007908:	9c01      	ldr	r4, [sp, #4]
 800790a:	4645      	mov	r5, r8
 800790c:	18c0      	adds	r0, r0, r3
 800790e:	4161      	adcs	r1, r4
 8007910:	6168      	str	r0, [r5, #20]
 8007912:	4665      	mov	r5, ip
 8007914:	0003      	movs	r3, r0
 8007916:	000c      	movs	r4, r1
 8007918:	9100      	str	r1, [sp, #0]
 800791a:	2100      	movs	r1, #0
 800791c:	69a8      	ldr	r0, [r5, #24]
 800791e:	930a      	str	r3, [sp, #40]	; 0x28
 8007920:	940b      	str	r4, [sp, #44]	; 0x2c
 8007922:	0e45      	lsrs	r5, r0, #25
 8007924:	01c4      	lsls	r4, r0, #7
 8007926:	1a24      	subs	r4, r4, r0
 8007928:	418d      	sbcs	r5, r1
 800792a:	0fa2      	lsrs	r2, r4, #30
 800792c:	00ab      	lsls	r3, r5, #2
 800792e:	4313      	orrs	r3, r2
 8007930:	00a2      	lsls	r2, r4, #2
 8007932:	1a12      	subs	r2, r2, r0
 8007934:	418b      	sbcs	r3, r1
 8007936:	0014      	movs	r4, r2
 8007938:	0f16      	lsrs	r6, r2, #28
 800793a:	011b      	lsls	r3, r3, #4
 800793c:	4333      	orrs	r3, r6
 800793e:	0122      	lsls	r2, r4, #4
 8007940:	1a12      	subs	r2, r2, r0
 8007942:	418b      	sbcs	r3, r1
 8007944:	0f14      	lsrs	r4, r2, #28
 8007946:	0119      	lsls	r1, r3, #4
 8007948:	4321      	orrs	r1, r4
 800794a:	0110      	lsls	r0, r2, #4
 800794c:	1a80      	subs	r0, r0, r2
 800794e:	4199      	sbcs	r1, r3
 8007950:	9701      	str	r7, [sp, #4]
 8007952:	9b00      	ldr	r3, [sp, #0]
 8007954:	9c01      	ldr	r4, [sp, #4]
 8007956:	18c0      	adds	r0, r0, r3
 8007958:	4161      	adcs	r1, r4
 800795a:	0005      	movs	r5, r0
 800795c:	000e      	movs	r6, r1
 800795e:	950c      	str	r5, [sp, #48]	; 0x30
 8007960:	960d      	str	r6, [sp, #52]	; 0x34
 8007962:	2600      	movs	r6, #0
 8007964:	4647      	mov	r7, r8
 8007966:	9601      	str	r6, [sp, #4]
 8007968:	4666      	mov	r6, ip
 800796a:	9100      	str	r1, [sp, #0]
 800796c:	2100      	movs	r1, #0
 800796e:	61b8      	str	r0, [r7, #24]
 8007970:	69f0      	ldr	r0, [r6, #28]
 8007972:	0e45      	lsrs	r5, r0, #25
 8007974:	01c4      	lsls	r4, r0, #7
 8007976:	1a24      	subs	r4, r4, r0
 8007978:	418d      	sbcs	r5, r1
 800797a:	0fa6      	lsrs	r6, r4, #30
 800797c:	00ab      	lsls	r3, r5, #2
 800797e:	4333      	orrs	r3, r6
 8007980:	00a2      	lsls	r2, r4, #2
 8007982:	1a12      	subs	r2, r2, r0
 8007984:	418b      	sbcs	r3, r1
 8007986:	0014      	movs	r4, r2
 8007988:	0f16      	lsrs	r6, r2, #28
 800798a:	011b      	lsls	r3, r3, #4
 800798c:	4333      	orrs	r3, r6
 800798e:	0122      	lsls	r2, r4, #4
 8007990:	1a12      	subs	r2, r2, r0
 8007992:	418b      	sbcs	r3, r1
 8007994:	0f11      	lsrs	r1, r2, #28
 8007996:	011f      	lsls	r7, r3, #4
 8007998:	430f      	orrs	r7, r1
 800799a:	0116      	lsls	r6, r2, #4
 800799c:	1ab6      	subs	r6, r6, r2
 800799e:	419f      	sbcs	r7, r3
 80079a0:	9a00      	ldr	r2, [sp, #0]
 80079a2:	9b01      	ldr	r3, [sp, #4]
 80079a4:	18b6      	adds	r6, r6, r2
 80079a6:	415f      	adcs	r7, r3
 80079a8:	4642      	mov	r2, r8
 80079aa:	2300      	movs	r3, #0
 80079ac:	61d6      	str	r6, [r2, #28]
 80079ae:	0038      	movs	r0, r7
 80079b0:	2226      	movs	r2, #38	; 0x26
 80079b2:	2100      	movs	r1, #0
 80079b4:	f7f8 fc34 	bl	8000220 <__aeabi_lmul>
 80079b8:	2300      	movs	r3, #0
 80079ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079bc:	2500      	movs	r5, #0
 80079be:	1880      	adds	r0, r0, r2
 80079c0:	4159      	adcs	r1, r3
 80079c2:	2300      	movs	r3, #0
 80079c4:	000c      	movs	r4, r1
 80079c6:	9a02      	ldr	r2, [sp, #8]
 80079c8:	1912      	adds	r2, r2, r4
 80079ca:	416b      	adcs	r3, r5
 80079cc:	4644      	mov	r4, r8
 80079ce:	2500      	movs	r5, #0
 80079d0:	6062      	str	r2, [r4, #4]
 80079d2:	001c      	movs	r4, r3
 80079d4:	2300      	movs	r3, #0
 80079d6:	9a04      	ldr	r2, [sp, #16]
 80079d8:	1912      	adds	r2, r2, r4
 80079da:	416b      	adcs	r3, r5
 80079dc:	4644      	mov	r4, r8
 80079de:	2500      	movs	r5, #0
 80079e0:	60a2      	str	r2, [r4, #8]
 80079e2:	001c      	movs	r4, r3
 80079e4:	2300      	movs	r3, #0
 80079e6:	9a06      	ldr	r2, [sp, #24]
 80079e8:	1912      	adds	r2, r2, r4
 80079ea:	416b      	adcs	r3, r5
 80079ec:	4644      	mov	r4, r8
 80079ee:	2500      	movs	r5, #0
 80079f0:	60e2      	str	r2, [r4, #12]
 80079f2:	001c      	movs	r4, r3
 80079f4:	2300      	movs	r3, #0
 80079f6:	9a08      	ldr	r2, [sp, #32]
 80079f8:	1912      	adds	r2, r2, r4
 80079fa:	416b      	adcs	r3, r5
 80079fc:	4644      	mov	r4, r8
 80079fe:	2500      	movs	r5, #0
 8007a00:	6122      	str	r2, [r4, #16]
 8007a02:	001c      	movs	r4, r3
 8007a04:	2300      	movs	r3, #0
 8007a06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a08:	1912      	adds	r2, r2, r4
 8007a0a:	416b      	adcs	r3, r5
 8007a0c:	4644      	mov	r4, r8
 8007a0e:	2500      	movs	r5, #0
 8007a10:	6162      	str	r2, [r4, #20]
 8007a12:	001c      	movs	r4, r3
 8007a14:	2300      	movs	r3, #0
 8007a16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a18:	1912      	adds	r2, r2, r4
 8007a1a:	416b      	adcs	r3, r5
 8007a1c:	4644      	mov	r4, r8
 8007a1e:	2500      	movs	r5, #0
 8007a20:	61a2      	str	r2, [r4, #24]
 8007a22:	0032      	movs	r2, r6
 8007a24:	001c      	movs	r4, r3
 8007a26:	2300      	movs	r3, #0
 8007a28:	18a4      	adds	r4, r4, r2
 8007a2a:	415d      	adcs	r5, r3
 8007a2c:	2226      	movs	r2, #38	; 0x26
 8007a2e:	4643      	mov	r3, r8
 8007a30:	436a      	muls	r2, r5
 8007a32:	1810      	adds	r0, r2, r0
 8007a34:	61dc      	str	r4, [r3, #28]
 8007a36:	6018      	str	r0, [r3, #0]
 8007a38:	b011      	add	sp, #68	; 0x44
 8007a3a:	bc0c      	pop	{r2, r3}
 8007a3c:	4690      	mov	r8, r2
 8007a3e:	4699      	mov	r9, r3
 8007a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a42:	46c0      	nop			; (mov r8, r8)

08007a44 <C25519keyExchange.part.50>:
 8007a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a46:	46ce      	mov	lr, r9
 8007a48:	4647      	mov	r7, r8
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	4c17      	ldr	r4, [pc, #92]	; (8007aac <C25519keyExchange.part.50+0x68>)
 8007a4e:	0015      	movs	r5, r2
 8007a50:	44a5      	add	sp, r4
 8007a52:	ac04      	add	r4, sp, #16
 8007a54:	2220      	movs	r2, #32
 8007a56:	4681      	mov	r9, r0
 8007a58:	0020      	movs	r0, r4
 8007a5a:	f000 fc47 	bl	80082ec <memcpy>
 8007a5e:	2207      	movs	r2, #7
 8007a60:	7823      	ldrb	r3, [r4, #0]
 8007a62:	0029      	movs	r1, r5
 8007a64:	4393      	bics	r3, r2
 8007a66:	7023      	strb	r3, [r4, #0]
 8007a68:	237f      	movs	r3, #127	; 0x7f
 8007a6a:	7fe2      	ldrb	r2, [r4, #31]
 8007a6c:	a8dc      	add	r0, sp, #880	; 0x370
 8007a6e:	4013      	ands	r3, r2
 8007a70:	2240      	movs	r2, #64	; 0x40
 8007a72:	4313      	orrs	r3, r2
 8007a74:	77e3      	strb	r3, [r4, #31]
 8007a76:	f7ff f897 	bl	8006ba8 <fe25519_unpack>
 8007a7a:	9be3      	ldr	r3, [sp, #908]	; 0x38c
 8007a7c:	a9dc      	add	r1, sp, #880	; 0x370
 8007a7e:	9301      	str	r3, [sp, #4]
 8007a80:	005b      	lsls	r3, r3, #1
 8007a82:	085b      	lsrs	r3, r3, #1
 8007a84:	a82c      	add	r0, sp, #176	; 0xb0
 8007a86:	93e3      	str	r3, [sp, #908]	; 0x38c
 8007a88:	f7ff f91e 	bl	8006cc8 <fe25519_copy>
 8007a8c:	a834      	add	r0, sp, #208	; 0xd0
 8007a8e:	f7ff f92d 	bl	8006cec <fe25519_setone>
 8007a92:	a83c      	add	r0, sp, #240	; 0xf0
 8007a94:	f7ff f92a 	bl	8006cec <fe25519_setone>
 8007a98:	a844      	add	r0, sp, #272	; 0x110
 8007a9a:	f7ff f933 	bl	8006d04 <fe25519_setzero>
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	25fe      	movs	r5, #254	; 0xfe
 8007aa2:	2701      	movs	r7, #1
 8007aa4:	4e02      	ldr	r6, [pc, #8]	; (8007ab0 <C25519keyExchange.part.50+0x6c>)
 8007aa6:	4698      	mov	r8, r3
 8007aa8:	e188      	b.n	8007dbc <C25519keyExchange.part.50+0x378>
 8007aaa:	46c0      	nop			; (mov r8, r8)
 8007aac:	fffffc2c 	.word	0xfffffc2c
 8007ab0:	40023008 	.word	0x40023008
 8007ab4:	993c      	ldr	r1, [sp, #240]	; 0xf0
 8007ab6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8007ab8:	000b      	movs	r3, r1
 8007aba:	4053      	eors	r3, r2
 8007abc:	4023      	ands	r3, r4
 8007abe:	401a      	ands	r2, r3
 8007ac0:	400b      	ands	r3, r1
 8007ac2:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8007ac4:	935c      	str	r3, [sp, #368]	; 0x170
 8007ac6:	000b      	movs	r3, r1
 8007ac8:	924c      	str	r2, [sp, #304]	; 0x130
 8007aca:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8007acc:	4053      	eors	r3, r2
 8007ace:	4023      	ands	r3, r4
 8007ad0:	401a      	ands	r2, r3
 8007ad2:	400b      	ands	r3, r1
 8007ad4:	993e      	ldr	r1, [sp, #248]	; 0xf8
 8007ad6:	935d      	str	r3, [sp, #372]	; 0x174
 8007ad8:	000b      	movs	r3, r1
 8007ada:	924d      	str	r2, [sp, #308]	; 0x134
 8007adc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8007ade:	4053      	eors	r3, r2
 8007ae0:	4023      	ands	r3, r4
 8007ae2:	401a      	ands	r2, r3
 8007ae4:	400b      	ands	r3, r1
 8007ae6:	993f      	ldr	r1, [sp, #252]	; 0xfc
 8007ae8:	935e      	str	r3, [sp, #376]	; 0x178
 8007aea:	000b      	movs	r3, r1
 8007aec:	924e      	str	r2, [sp, #312]	; 0x138
 8007aee:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8007af0:	4053      	eors	r3, r2
 8007af2:	4023      	ands	r3, r4
 8007af4:	401a      	ands	r2, r3
 8007af6:	400b      	ands	r3, r1
 8007af8:	9940      	ldr	r1, [sp, #256]	; 0x100
 8007afa:	935f      	str	r3, [sp, #380]	; 0x17c
 8007afc:	000b      	movs	r3, r1
 8007afe:	924f      	str	r2, [sp, #316]	; 0x13c
 8007b00:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8007b02:	4053      	eors	r3, r2
 8007b04:	4023      	ands	r3, r4
 8007b06:	401a      	ands	r2, r3
 8007b08:	400b      	ands	r3, r1
 8007b0a:	9941      	ldr	r1, [sp, #260]	; 0x104
 8007b0c:	9360      	str	r3, [sp, #384]	; 0x180
 8007b0e:	000b      	movs	r3, r1
 8007b10:	9250      	str	r2, [sp, #320]	; 0x140
 8007b12:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8007b14:	4053      	eors	r3, r2
 8007b16:	4023      	ands	r3, r4
 8007b18:	401a      	ands	r2, r3
 8007b1a:	400b      	ands	r3, r1
 8007b1c:	9942      	ldr	r1, [sp, #264]	; 0x108
 8007b1e:	9361      	str	r3, [sp, #388]	; 0x184
 8007b20:	000b      	movs	r3, r1
 8007b22:	9251      	str	r2, [sp, #324]	; 0x144
 8007b24:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8007b26:	4053      	eors	r3, r2
 8007b28:	4023      	ands	r3, r4
 8007b2a:	401a      	ands	r2, r3
 8007b2c:	400b      	ands	r3, r1
 8007b2e:	9943      	ldr	r1, [sp, #268]	; 0x10c
 8007b30:	9362      	str	r3, [sp, #392]	; 0x188
 8007b32:	000b      	movs	r3, r1
 8007b34:	9252      	str	r2, [sp, #328]	; 0x148
 8007b36:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8007b38:	4053      	eors	r3, r2
 8007b3a:	4023      	ands	r3, r4
 8007b3c:	401a      	ands	r2, r3
 8007b3e:	400b      	ands	r3, r1
 8007b40:	9944      	ldr	r1, [sp, #272]	; 0x110
 8007b42:	9363      	str	r3, [sp, #396]	; 0x18c
 8007b44:	000b      	movs	r3, r1
 8007b46:	9253      	str	r2, [sp, #332]	; 0x14c
 8007b48:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8007b4a:	4053      	eors	r3, r2
 8007b4c:	4063      	eors	r3, r4
 8007b4e:	401a      	ands	r2, r3
 8007b50:	400b      	ands	r3, r1
 8007b52:	9945      	ldr	r1, [sp, #276]	; 0x114
 8007b54:	9364      	str	r3, [sp, #400]	; 0x190
 8007b56:	000b      	movs	r3, r1
 8007b58:	9254      	str	r2, [sp, #336]	; 0x150
 8007b5a:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8007b5c:	4053      	eors	r3, r2
 8007b5e:	4063      	eors	r3, r4
 8007b60:	401a      	ands	r2, r3
 8007b62:	400b      	ands	r3, r1
 8007b64:	9946      	ldr	r1, [sp, #280]	; 0x118
 8007b66:	9365      	str	r3, [sp, #404]	; 0x194
 8007b68:	000b      	movs	r3, r1
 8007b6a:	9255      	str	r2, [sp, #340]	; 0x154
 8007b6c:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8007b6e:	4053      	eors	r3, r2
 8007b70:	4063      	eors	r3, r4
 8007b72:	401a      	ands	r2, r3
 8007b74:	400b      	ands	r3, r1
 8007b76:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8007b78:	9366      	str	r3, [sp, #408]	; 0x198
 8007b7a:	000b      	movs	r3, r1
 8007b7c:	9256      	str	r2, [sp, #344]	; 0x158
 8007b7e:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8007b80:	4053      	eors	r3, r2
 8007b82:	4063      	eors	r3, r4
 8007b84:	401a      	ands	r2, r3
 8007b86:	400b      	ands	r3, r1
 8007b88:	9948      	ldr	r1, [sp, #288]	; 0x120
 8007b8a:	9367      	str	r3, [sp, #412]	; 0x19c
 8007b8c:	000b      	movs	r3, r1
 8007b8e:	9257      	str	r2, [sp, #348]	; 0x15c
 8007b90:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8007b92:	4053      	eors	r3, r2
 8007b94:	4063      	eors	r3, r4
 8007b96:	401a      	ands	r2, r3
 8007b98:	400b      	ands	r3, r1
 8007b9a:	9949      	ldr	r1, [sp, #292]	; 0x124
 8007b9c:	9368      	str	r3, [sp, #416]	; 0x1a0
 8007b9e:	000b      	movs	r3, r1
 8007ba0:	9258      	str	r2, [sp, #352]	; 0x160
 8007ba2:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8007ba4:	4053      	eors	r3, r2
 8007ba6:	4063      	eors	r3, r4
 8007ba8:	401a      	ands	r2, r3
 8007baa:	400b      	ands	r3, r1
 8007bac:	994a      	ldr	r1, [sp, #296]	; 0x128
 8007bae:	9369      	str	r3, [sp, #420]	; 0x1a4
 8007bb0:	000b      	movs	r3, r1
 8007bb2:	9259      	str	r2, [sp, #356]	; 0x164
 8007bb4:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 8007bb6:	4053      	eors	r3, r2
 8007bb8:	4063      	eors	r3, r4
 8007bba:	401a      	ands	r2, r3
 8007bbc:	400b      	ands	r3, r1
 8007bbe:	994b      	ldr	r1, [sp, #300]	; 0x12c
 8007bc0:	936a      	str	r3, [sp, #424]	; 0x1a8
 8007bc2:	000b      	movs	r3, r1
 8007bc4:	925a      	str	r2, [sp, #360]	; 0x168
 8007bc6:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 8007bc8:	4053      	eors	r3, r2
 8007bca:	4063      	eors	r3, r4
 8007bcc:	401a      	ands	r2, r3
 8007bce:	400b      	ands	r3, r1
 8007bd0:	925b      	str	r2, [sp, #364]	; 0x16c
 8007bd2:	936b      	str	r3, [sp, #428]	; 0x1ac
 8007bd4:	aa54      	add	r2, sp, #336	; 0x150
 8007bd6:	a94c      	add	r1, sp, #304	; 0x130
 8007bd8:	a88c      	add	r0, sp, #560	; 0x230
 8007bda:	f7ff f899 	bl	8006d10 <fe25519_add>
 8007bde:	aa54      	add	r2, sp, #336	; 0x150
 8007be0:	a94c      	add	r1, sp, #304	; 0x130
 8007be2:	a894      	add	r0, sp, #592	; 0x250
 8007be4:	f7ff f94e 	bl	8006e84 <fe25519_sub>
 8007be8:	aa64      	add	r2, sp, #400	; 0x190
 8007bea:	a95c      	add	r1, sp, #368	; 0x170
 8007bec:	a89c      	add	r0, sp, #624	; 0x270
 8007bee:	f7ff f88f 	bl	8006d10 <fe25519_add>
 8007bf2:	aa64      	add	r2, sp, #400	; 0x190
 8007bf4:	a95c      	add	r1, sp, #368	; 0x170
 8007bf6:	a8a4      	add	r0, sp, #656	; 0x290
 8007bf8:	f7ff f944 	bl	8006e84 <fe25519_sub>
 8007bfc:	a98c      	add	r1, sp, #560	; 0x230
 8007bfe:	a8ac      	add	r0, sp, #688	; 0x2b0
 8007c00:	f7ff fcaa 	bl	8007558 <fe25519_square>
 8007c04:	a994      	add	r1, sp, #592	; 0x250
 8007c06:	a8b4      	add	r0, sp, #720	; 0x2d0
 8007c08:	f7ff fca6 	bl	8007558 <fe25519_square>
 8007c0c:	aa94      	add	r2, sp, #592	; 0x250
 8007c0e:	a99c      	add	r1, sp, #624	; 0x270
 8007c10:	a8bc      	add	r0, sp, #752	; 0x2f0
 8007c12:	f7ff faed 	bl	80071f0 <fe25519_mul>
 8007c16:	aa8c      	add	r2, sp, #560	; 0x230
 8007c18:	a9a4      	add	r1, sp, #656	; 0x290
 8007c1a:	a8c4      	add	r0, sp, #784	; 0x310
 8007c1c:	f7ff fae8 	bl	80071f0 <fe25519_mul>
 8007c20:	aac4      	add	r2, sp, #784	; 0x310
 8007c22:	a9bc      	add	r1, sp, #752	; 0x2f0
 8007c24:	a8cc      	add	r0, sp, #816	; 0x330
 8007c26:	f7ff f873 	bl	8006d10 <fe25519_add>
 8007c2a:	aac4      	add	r2, sp, #784	; 0x310
 8007c2c:	a9bc      	add	r1, sp, #752	; 0x2f0
 8007c2e:	a8d4      	add	r0, sp, #848	; 0x350
 8007c30:	f7ff f928 	bl	8006e84 <fe25519_sub>
 8007c34:	a9d4      	add	r1, sp, #848	; 0x350
 8007c36:	a80c      	add	r0, sp, #48	; 0x30
 8007c38:	f7ff fc8e 	bl	8007558 <fe25519_square>
 8007c3c:	aab4      	add	r2, sp, #720	; 0x2d0
 8007c3e:	a9ac      	add	r1, sp, #688	; 0x2b0
 8007c40:	a814      	add	r0, sp, #80	; 0x50
 8007c42:	f7ff f91f 	bl	8006e84 <fe25519_sub>
 8007c46:	a914      	add	r1, sp, #80	; 0x50
 8007c48:	a81c      	add	r0, sp, #112	; 0x70
 8007c4a:	f7ff fd77 	bl	800773c <fe25519_mult121665>
 8007c4e:	aaac      	add	r2, sp, #688	; 0x2b0
 8007c50:	a91c      	add	r1, sp, #112	; 0x70
 8007c52:	a824      	add	r0, sp, #144	; 0x90
 8007c54:	f7ff f85c 	bl	8006d10 <fe25519_add>
 8007c58:	aab4      	add	r2, sp, #720	; 0x2d0
 8007c5a:	a9ac      	add	r1, sp, #688	; 0x2b0
 8007c5c:	a86c      	add	r0, sp, #432	; 0x1b0
 8007c5e:	f7ff fac7 	bl	80071f0 <fe25519_mul>
 8007c62:	aa24      	add	r2, sp, #144	; 0x90
 8007c64:	a914      	add	r1, sp, #80	; 0x50
 8007c66:	a874      	add	r0, sp, #464	; 0x1d0
 8007c68:	f7ff fac2 	bl	80071f0 <fe25519_mul>
 8007c6c:	a9cc      	add	r1, sp, #816	; 0x330
 8007c6e:	a87c      	add	r0, sp, #496	; 0x1f0
 8007c70:	f7ff fc72 	bl	8007558 <fe25519_square>
 8007c74:	aadc      	add	r2, sp, #880	; 0x370
 8007c76:	a90c      	add	r1, sp, #48	; 0x30
 8007c78:	a884      	add	r0, sp, #528	; 0x210
 8007c7a:	f7ff fab9 	bl	80071f0 <fe25519_mul>
 8007c7e:	2300      	movs	r3, #0
 8007c80:	9302      	str	r3, [sp, #8]
 8007c82:	6037      	str	r7, [r6, #0]
 8007c84:	6833      	ldr	r3, [r6, #0]
 8007c86:	9302      	str	r3, [sp, #8]
 8007c88:	4bee      	ldr	r3, [pc, #952]	; (8008044 <C25519keyExchange.part.50+0x600>)
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	9202      	str	r2, [sp, #8]
 8007c8e:	9a02      	ldr	r2, [sp, #8]
 8007c90:	3201      	adds	r2, #1
 8007c92:	d100      	bne.n	8007c96 <C25519keyExchange.part.50+0x252>
 8007c94:	e0f8      	b.n	8007e88 <C25519keyExchange.part.50+0x444>
 8007c96:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8007c98:	9a7c      	ldr	r2, [sp, #496]	; 0x1f0
 8007c9a:	000b      	movs	r3, r1
 8007c9c:	4053      	eors	r3, r2
 8007c9e:	4023      	ands	r3, r4
 8007ca0:	401a      	ands	r2, r3
 8007ca2:	400b      	ands	r3, r1
 8007ca4:	996d      	ldr	r1, [sp, #436]	; 0x1b4
 8007ca6:	932c      	str	r3, [sp, #176]	; 0xb0
 8007ca8:	000b      	movs	r3, r1
 8007caa:	923c      	str	r2, [sp, #240]	; 0xf0
 8007cac:	9a7d      	ldr	r2, [sp, #500]	; 0x1f4
 8007cae:	4053      	eors	r3, r2
 8007cb0:	4023      	ands	r3, r4
 8007cb2:	401a      	ands	r2, r3
 8007cb4:	400b      	ands	r3, r1
 8007cb6:	996e      	ldr	r1, [sp, #440]	; 0x1b8
 8007cb8:	932d      	str	r3, [sp, #180]	; 0xb4
 8007cba:	000b      	movs	r3, r1
 8007cbc:	923d      	str	r2, [sp, #244]	; 0xf4
 8007cbe:	9a7e      	ldr	r2, [sp, #504]	; 0x1f8
 8007cc0:	4053      	eors	r3, r2
 8007cc2:	4023      	ands	r3, r4
 8007cc4:	401a      	ands	r2, r3
 8007cc6:	400b      	ands	r3, r1
 8007cc8:	996f      	ldr	r1, [sp, #444]	; 0x1bc
 8007cca:	932e      	str	r3, [sp, #184]	; 0xb8
 8007ccc:	000b      	movs	r3, r1
 8007cce:	923e      	str	r2, [sp, #248]	; 0xf8
 8007cd0:	9a7f      	ldr	r2, [sp, #508]	; 0x1fc
 8007cd2:	4053      	eors	r3, r2
 8007cd4:	4023      	ands	r3, r4
 8007cd6:	401a      	ands	r2, r3
 8007cd8:	400b      	ands	r3, r1
 8007cda:	9970      	ldr	r1, [sp, #448]	; 0x1c0
 8007cdc:	932f      	str	r3, [sp, #188]	; 0xbc
 8007cde:	000b      	movs	r3, r1
 8007ce0:	923f      	str	r2, [sp, #252]	; 0xfc
 8007ce2:	9a80      	ldr	r2, [sp, #512]	; 0x200
 8007ce4:	4053      	eors	r3, r2
 8007ce6:	4023      	ands	r3, r4
 8007ce8:	401a      	ands	r2, r3
 8007cea:	400b      	ands	r3, r1
 8007cec:	9971      	ldr	r1, [sp, #452]	; 0x1c4
 8007cee:	9330      	str	r3, [sp, #192]	; 0xc0
 8007cf0:	000b      	movs	r3, r1
 8007cf2:	9240      	str	r2, [sp, #256]	; 0x100
 8007cf4:	9a81      	ldr	r2, [sp, #516]	; 0x204
 8007cf6:	4053      	eors	r3, r2
 8007cf8:	4023      	ands	r3, r4
 8007cfa:	401a      	ands	r2, r3
 8007cfc:	400b      	ands	r3, r1
 8007cfe:	9972      	ldr	r1, [sp, #456]	; 0x1c8
 8007d00:	9331      	str	r3, [sp, #196]	; 0xc4
 8007d02:	000b      	movs	r3, r1
 8007d04:	9241      	str	r2, [sp, #260]	; 0x104
 8007d06:	9a82      	ldr	r2, [sp, #520]	; 0x208
 8007d08:	4053      	eors	r3, r2
 8007d0a:	4023      	ands	r3, r4
 8007d0c:	401a      	ands	r2, r3
 8007d0e:	400b      	ands	r3, r1
 8007d10:	9973      	ldr	r1, [sp, #460]	; 0x1cc
 8007d12:	9332      	str	r3, [sp, #200]	; 0xc8
 8007d14:	000b      	movs	r3, r1
 8007d16:	9242      	str	r2, [sp, #264]	; 0x108
 8007d18:	9a83      	ldr	r2, [sp, #524]	; 0x20c
 8007d1a:	4053      	eors	r3, r2
 8007d1c:	4023      	ands	r3, r4
 8007d1e:	401a      	ands	r2, r3
 8007d20:	400b      	ands	r3, r1
 8007d22:	9974      	ldr	r1, [sp, #464]	; 0x1d0
 8007d24:	9333      	str	r3, [sp, #204]	; 0xcc
 8007d26:	000b      	movs	r3, r1
 8007d28:	9243      	str	r2, [sp, #268]	; 0x10c
 8007d2a:	9a84      	ldr	r2, [sp, #528]	; 0x210
 8007d2c:	4053      	eors	r3, r2
 8007d2e:	4063      	eors	r3, r4
 8007d30:	401a      	ands	r2, r3
 8007d32:	400b      	ands	r3, r1
 8007d34:	9975      	ldr	r1, [sp, #468]	; 0x1d4
 8007d36:	9334      	str	r3, [sp, #208]	; 0xd0
 8007d38:	000b      	movs	r3, r1
 8007d3a:	9244      	str	r2, [sp, #272]	; 0x110
 8007d3c:	9a85      	ldr	r2, [sp, #532]	; 0x214
 8007d3e:	4053      	eors	r3, r2
 8007d40:	4063      	eors	r3, r4
 8007d42:	401a      	ands	r2, r3
 8007d44:	400b      	ands	r3, r1
 8007d46:	9976      	ldr	r1, [sp, #472]	; 0x1d8
 8007d48:	9335      	str	r3, [sp, #212]	; 0xd4
 8007d4a:	000b      	movs	r3, r1
 8007d4c:	9245      	str	r2, [sp, #276]	; 0x114
 8007d4e:	9a86      	ldr	r2, [sp, #536]	; 0x218
 8007d50:	4053      	eors	r3, r2
 8007d52:	4063      	eors	r3, r4
 8007d54:	401a      	ands	r2, r3
 8007d56:	400b      	ands	r3, r1
 8007d58:	9977      	ldr	r1, [sp, #476]	; 0x1dc
 8007d5a:	9336      	str	r3, [sp, #216]	; 0xd8
 8007d5c:	000b      	movs	r3, r1
 8007d5e:	9246      	str	r2, [sp, #280]	; 0x118
 8007d60:	9a87      	ldr	r2, [sp, #540]	; 0x21c
 8007d62:	4053      	eors	r3, r2
 8007d64:	4063      	eors	r3, r4
 8007d66:	401a      	ands	r2, r3
 8007d68:	400b      	ands	r3, r1
 8007d6a:	9978      	ldr	r1, [sp, #480]	; 0x1e0
 8007d6c:	9337      	str	r3, [sp, #220]	; 0xdc
 8007d6e:	000b      	movs	r3, r1
 8007d70:	9247      	str	r2, [sp, #284]	; 0x11c
 8007d72:	9a88      	ldr	r2, [sp, #544]	; 0x220
 8007d74:	4053      	eors	r3, r2
 8007d76:	4063      	eors	r3, r4
 8007d78:	401a      	ands	r2, r3
 8007d7a:	400b      	ands	r3, r1
 8007d7c:	9979      	ldr	r1, [sp, #484]	; 0x1e4
 8007d7e:	9338      	str	r3, [sp, #224]	; 0xe0
 8007d80:	000b      	movs	r3, r1
 8007d82:	9248      	str	r2, [sp, #288]	; 0x120
 8007d84:	9a89      	ldr	r2, [sp, #548]	; 0x224
 8007d86:	4053      	eors	r3, r2
 8007d88:	4063      	eors	r3, r4
 8007d8a:	401a      	ands	r2, r3
 8007d8c:	400b      	ands	r3, r1
 8007d8e:	997a      	ldr	r1, [sp, #488]	; 0x1e8
 8007d90:	9339      	str	r3, [sp, #228]	; 0xe4
 8007d92:	000b      	movs	r3, r1
 8007d94:	9249      	str	r2, [sp, #292]	; 0x124
 8007d96:	9a8a      	ldr	r2, [sp, #552]	; 0x228
 8007d98:	4053      	eors	r3, r2
 8007d9a:	4063      	eors	r3, r4
 8007d9c:	401a      	ands	r2, r3
 8007d9e:	400b      	ands	r3, r1
 8007da0:	997b      	ldr	r1, [sp, #492]	; 0x1ec
 8007da2:	933a      	str	r3, [sp, #232]	; 0xe8
 8007da4:	000b      	movs	r3, r1
 8007da6:	924a      	str	r2, [sp, #296]	; 0x128
 8007da8:	9a8b      	ldr	r2, [sp, #556]	; 0x22c
 8007daa:	4053      	eors	r3, r2
 8007dac:	405c      	eors	r4, r3
 8007dae:	4022      	ands	r2, r4
 8007db0:	400c      	ands	r4, r1
 8007db2:	924b      	str	r2, [sp, #300]	; 0x12c
 8007db4:	943b      	str	r4, [sp, #236]	; 0xec
 8007db6:	3d01      	subs	r5, #1
 8007db8:	d200      	bcs.n	8007dbc <C25519keyExchange.part.50+0x378>
 8007dba:	e1da      	b.n	8008172 <C25519keyExchange.part.50+0x72e>
 8007dbc:	aaf4      	add	r2, sp, #976	; 0x3d0
 8007dbe:	4694      	mov	ip, r2
 8007dc0:	4aa1      	ldr	r2, [pc, #644]	; (8008048 <C25519keyExchange.part.50+0x604>)
 8007dc2:	10eb      	asrs	r3, r5, #3
 8007dc4:	4463      	add	r3, ip
 8007dc6:	4694      	mov	ip, r2
 8007dc8:	4463      	add	r3, ip
 8007dca:	781c      	ldrb	r4, [r3, #0]
 8007dcc:	2307      	movs	r3, #7
 8007dce:	402b      	ands	r3, r5
 8007dd0:	411c      	asrs	r4, r3
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	9303      	str	r3, [sp, #12]
 8007dd6:	4643      	mov	r3, r8
 8007dd8:	6033      	str	r3, [r6, #0]
 8007dda:	6833      	ldr	r3, [r6, #0]
 8007ddc:	403c      	ands	r4, r7
 8007dde:	9303      	str	r3, [sp, #12]
 8007de0:	4b98      	ldr	r3, [pc, #608]	; (8008044 <C25519keyExchange.part.50+0x600>)
 8007de2:	3c01      	subs	r4, #1
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	9203      	str	r2, [sp, #12]
 8007de8:	9a03      	ldr	r2, [sp, #12]
 8007dea:	3201      	adds	r2, #1
 8007dec:	d000      	beq.n	8007df0 <C25519keyExchange.part.50+0x3ac>
 8007dee:	e661      	b.n	8007ab4 <C25519keyExchange.part.50+0x70>
 8007df0:	9a03      	ldr	r2, [sp, #12]
 8007df2:	601a      	str	r2, [r3, #0]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	9303      	str	r3, [sp, #12]
 8007df8:	9b03      	ldr	r3, [sp, #12]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d100      	bne.n	8007e00 <C25519keyExchange.part.50+0x3bc>
 8007dfe:	e08f      	b.n	8007f20 <C25519keyExchange.part.50+0x4dc>
 8007e00:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8007e02:	993c      	ldr	r1, [sp, #240]	; 0xf0
 8007e04:	0013      	movs	r3, r2
 8007e06:	400b      	ands	r3, r1
 8007e08:	4023      	ands	r3, r4
 8007e0a:	401a      	ands	r2, r3
 8007e0c:	924c      	str	r2, [sp, #304]	; 0x130
 8007e0e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8007e10:	400b      	ands	r3, r1
 8007e12:	935c      	str	r3, [sp, #368]	; 0x170
 8007e14:	0013      	movs	r3, r2
 8007e16:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8007e18:	400b      	ands	r3, r1
 8007e1a:	4023      	ands	r3, r4
 8007e1c:	401a      	ands	r2, r3
 8007e1e:	924d      	str	r2, [sp, #308]	; 0x134
 8007e20:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8007e22:	400b      	ands	r3, r1
 8007e24:	935d      	str	r3, [sp, #372]	; 0x174
 8007e26:	0013      	movs	r3, r2
 8007e28:	993e      	ldr	r1, [sp, #248]	; 0xf8
 8007e2a:	400b      	ands	r3, r1
 8007e2c:	4023      	ands	r3, r4
 8007e2e:	401a      	ands	r2, r3
 8007e30:	924e      	str	r2, [sp, #312]	; 0x138
 8007e32:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8007e34:	400b      	ands	r3, r1
 8007e36:	935e      	str	r3, [sp, #376]	; 0x178
 8007e38:	0013      	movs	r3, r2
 8007e3a:	993f      	ldr	r1, [sp, #252]	; 0xfc
 8007e3c:	400b      	ands	r3, r1
 8007e3e:	4023      	ands	r3, r4
 8007e40:	401a      	ands	r2, r3
 8007e42:	924f      	str	r2, [sp, #316]	; 0x13c
 8007e44:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8007e46:	400b      	ands	r3, r1
 8007e48:	935f      	str	r3, [sp, #380]	; 0x17c
 8007e4a:	0013      	movs	r3, r2
 8007e4c:	9940      	ldr	r1, [sp, #256]	; 0x100
 8007e4e:	400b      	ands	r3, r1
 8007e50:	4023      	ands	r3, r4
 8007e52:	401a      	ands	r2, r3
 8007e54:	9250      	str	r2, [sp, #320]	; 0x140
 8007e56:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8007e58:	400b      	ands	r3, r1
 8007e5a:	9360      	str	r3, [sp, #384]	; 0x180
 8007e5c:	0013      	movs	r3, r2
 8007e5e:	9941      	ldr	r1, [sp, #260]	; 0x104
 8007e60:	400b      	ands	r3, r1
 8007e62:	4023      	ands	r3, r4
 8007e64:	401a      	ands	r2, r3
 8007e66:	9251      	str	r2, [sp, #324]	; 0x144
 8007e68:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8007e6a:	400b      	ands	r3, r1
 8007e6c:	9361      	str	r3, [sp, #388]	; 0x184
 8007e6e:	0013      	movs	r3, r2
 8007e70:	9942      	ldr	r1, [sp, #264]	; 0x108
 8007e72:	400b      	ands	r3, r1
 8007e74:	4023      	ands	r3, r4
 8007e76:	401a      	ands	r2, r3
 8007e78:	9252      	str	r2, [sp, #328]	; 0x148
 8007e7a:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8007e7c:	400b      	ands	r3, r1
 8007e7e:	9362      	str	r3, [sp, #392]	; 0x188
 8007e80:	0013      	movs	r3, r2
 8007e82:	9943      	ldr	r1, [sp, #268]	; 0x10c
 8007e84:	400b      	ands	r3, r1
 8007e86:	e658      	b.n	8007b3a <C25519keyExchange.part.50+0xf6>
 8007e88:	9a02      	ldr	r2, [sp, #8]
 8007e8a:	601a      	str	r2, [r3, #0]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	9302      	str	r3, [sp, #8]
 8007e90:	9b02      	ldr	r3, [sp, #8]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d100      	bne.n	8007e98 <C25519keyExchange.part.50+0x454>
 8007e96:	e0d9      	b.n	800804c <C25519keyExchange.part.50+0x608>
 8007e98:	9a7c      	ldr	r2, [sp, #496]	; 0x1f0
 8007e9a:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8007e9c:	0013      	movs	r3, r2
 8007e9e:	400b      	ands	r3, r1
 8007ea0:	4023      	ands	r3, r4
 8007ea2:	401a      	ands	r2, r3
 8007ea4:	923c      	str	r2, [sp, #240]	; 0xf0
 8007ea6:	9a7d      	ldr	r2, [sp, #500]	; 0x1f4
 8007ea8:	400b      	ands	r3, r1
 8007eaa:	932c      	str	r3, [sp, #176]	; 0xb0
 8007eac:	0013      	movs	r3, r2
 8007eae:	996d      	ldr	r1, [sp, #436]	; 0x1b4
 8007eb0:	400b      	ands	r3, r1
 8007eb2:	4023      	ands	r3, r4
 8007eb4:	401a      	ands	r2, r3
 8007eb6:	923d      	str	r2, [sp, #244]	; 0xf4
 8007eb8:	9a7e      	ldr	r2, [sp, #504]	; 0x1f8
 8007eba:	400b      	ands	r3, r1
 8007ebc:	932d      	str	r3, [sp, #180]	; 0xb4
 8007ebe:	0013      	movs	r3, r2
 8007ec0:	996e      	ldr	r1, [sp, #440]	; 0x1b8
 8007ec2:	400b      	ands	r3, r1
 8007ec4:	4023      	ands	r3, r4
 8007ec6:	401a      	ands	r2, r3
 8007ec8:	923e      	str	r2, [sp, #248]	; 0xf8
 8007eca:	9a7f      	ldr	r2, [sp, #508]	; 0x1fc
 8007ecc:	400b      	ands	r3, r1
 8007ece:	932e      	str	r3, [sp, #184]	; 0xb8
 8007ed0:	0013      	movs	r3, r2
 8007ed2:	996f      	ldr	r1, [sp, #444]	; 0x1bc
 8007ed4:	400b      	ands	r3, r1
 8007ed6:	4023      	ands	r3, r4
 8007ed8:	401a      	ands	r2, r3
 8007eda:	923f      	str	r2, [sp, #252]	; 0xfc
 8007edc:	9a80      	ldr	r2, [sp, #512]	; 0x200
 8007ede:	400b      	ands	r3, r1
 8007ee0:	932f      	str	r3, [sp, #188]	; 0xbc
 8007ee2:	0013      	movs	r3, r2
 8007ee4:	9970      	ldr	r1, [sp, #448]	; 0x1c0
 8007ee6:	400b      	ands	r3, r1
 8007ee8:	4023      	ands	r3, r4
 8007eea:	401a      	ands	r2, r3
 8007eec:	9240      	str	r2, [sp, #256]	; 0x100
 8007eee:	9a81      	ldr	r2, [sp, #516]	; 0x204
 8007ef0:	400b      	ands	r3, r1
 8007ef2:	9330      	str	r3, [sp, #192]	; 0xc0
 8007ef4:	0013      	movs	r3, r2
 8007ef6:	9971      	ldr	r1, [sp, #452]	; 0x1c4
 8007ef8:	400b      	ands	r3, r1
 8007efa:	4023      	ands	r3, r4
 8007efc:	401a      	ands	r2, r3
 8007efe:	9241      	str	r2, [sp, #260]	; 0x104
 8007f00:	9a82      	ldr	r2, [sp, #520]	; 0x208
 8007f02:	400b      	ands	r3, r1
 8007f04:	9331      	str	r3, [sp, #196]	; 0xc4
 8007f06:	0013      	movs	r3, r2
 8007f08:	9972      	ldr	r1, [sp, #456]	; 0x1c8
 8007f0a:	400b      	ands	r3, r1
 8007f0c:	4023      	ands	r3, r4
 8007f0e:	401a      	ands	r2, r3
 8007f10:	9242      	str	r2, [sp, #264]	; 0x108
 8007f12:	9a83      	ldr	r2, [sp, #524]	; 0x20c
 8007f14:	400b      	ands	r3, r1
 8007f16:	9332      	str	r3, [sp, #200]	; 0xc8
 8007f18:	0013      	movs	r3, r2
 8007f1a:	9973      	ldr	r1, [sp, #460]	; 0x1cc
 8007f1c:	400b      	ands	r3, r1
 8007f1e:	e6fd      	b.n	8007d1c <C25519keyExchange.part.50+0x2d8>
 8007f20:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8007f22:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8007f24:	001a      	movs	r2, r3
 8007f26:	404a      	eors	r2, r1
 8007f28:	4022      	ands	r2, r4
 8007f2a:	4053      	eors	r3, r2
 8007f2c:	935c      	str	r3, [sp, #368]	; 0x170
 8007f2e:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 8007f30:	4051      	eors	r1, r2
 8007f32:	001a      	movs	r2, r3
 8007f34:	914c      	str	r1, [sp, #304]	; 0x130
 8007f36:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8007f38:	404a      	eors	r2, r1
 8007f3a:	4022      	ands	r2, r4
 8007f3c:	4053      	eors	r3, r2
 8007f3e:	935d      	str	r3, [sp, #372]	; 0x174
 8007f40:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8007f42:	4051      	eors	r1, r2
 8007f44:	001a      	movs	r2, r3
 8007f46:	914d      	str	r1, [sp, #308]	; 0x134
 8007f48:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8007f4a:	404a      	eors	r2, r1
 8007f4c:	4022      	ands	r2, r4
 8007f4e:	4053      	eors	r3, r2
 8007f50:	935e      	str	r3, [sp, #376]	; 0x178
 8007f52:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8007f54:	4051      	eors	r1, r2
 8007f56:	001a      	movs	r2, r3
 8007f58:	914e      	str	r1, [sp, #312]	; 0x138
 8007f5a:	992f      	ldr	r1, [sp, #188]	; 0xbc
 8007f5c:	404a      	eors	r2, r1
 8007f5e:	4022      	ands	r2, r4
 8007f60:	4053      	eors	r3, r2
 8007f62:	935f      	str	r3, [sp, #380]	; 0x17c
 8007f64:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8007f66:	4051      	eors	r1, r2
 8007f68:	001a      	movs	r2, r3
 8007f6a:	914f      	str	r1, [sp, #316]	; 0x13c
 8007f6c:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8007f6e:	404a      	eors	r2, r1
 8007f70:	4022      	ands	r2, r4
 8007f72:	4053      	eors	r3, r2
 8007f74:	9360      	str	r3, [sp, #384]	; 0x180
 8007f76:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007f78:	4051      	eors	r1, r2
 8007f7a:	001a      	movs	r2, r3
 8007f7c:	9150      	str	r1, [sp, #320]	; 0x140
 8007f7e:	9931      	ldr	r1, [sp, #196]	; 0xc4
 8007f80:	404a      	eors	r2, r1
 8007f82:	4022      	ands	r2, r4
 8007f84:	4053      	eors	r3, r2
 8007f86:	9361      	str	r3, [sp, #388]	; 0x184
 8007f88:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8007f8a:	4051      	eors	r1, r2
 8007f8c:	001a      	movs	r2, r3
 8007f8e:	9151      	str	r1, [sp, #324]	; 0x144
 8007f90:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8007f92:	404a      	eors	r2, r1
 8007f94:	4022      	ands	r2, r4
 8007f96:	4053      	eors	r3, r2
 8007f98:	9362      	str	r3, [sp, #392]	; 0x188
 8007f9a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007f9c:	4051      	eors	r1, r2
 8007f9e:	001a      	movs	r2, r3
 8007fa0:	9152      	str	r1, [sp, #328]	; 0x148
 8007fa2:	9933      	ldr	r1, [sp, #204]	; 0xcc
 8007fa4:	404a      	eors	r2, r1
 8007fa6:	4022      	ands	r2, r4
 8007fa8:	4051      	eors	r1, r2
 8007faa:	4053      	eors	r3, r2
 8007fac:	9153      	str	r1, [sp, #332]	; 0x14c
 8007fae:	9363      	str	r3, [sp, #396]	; 0x18c
 8007fb0:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8007fb2:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8007fb4:	001a      	movs	r2, r3
 8007fb6:	404a      	eors	r2, r1
 8007fb8:	4022      	ands	r2, r4
 8007fba:	4053      	eors	r3, r2
 8007fbc:	9364      	str	r3, [sp, #400]	; 0x190
 8007fbe:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007fc0:	4051      	eors	r1, r2
 8007fc2:	001a      	movs	r2, r3
 8007fc4:	9154      	str	r1, [sp, #336]	; 0x150
 8007fc6:	9935      	ldr	r1, [sp, #212]	; 0xd4
 8007fc8:	404a      	eors	r2, r1
 8007fca:	4022      	ands	r2, r4
 8007fcc:	4053      	eors	r3, r2
 8007fce:	9365      	str	r3, [sp, #404]	; 0x194
 8007fd0:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8007fd2:	4051      	eors	r1, r2
 8007fd4:	001a      	movs	r2, r3
 8007fd6:	9155      	str	r1, [sp, #340]	; 0x154
 8007fd8:	9936      	ldr	r1, [sp, #216]	; 0xd8
 8007fda:	404a      	eors	r2, r1
 8007fdc:	4022      	ands	r2, r4
 8007fde:	4053      	eors	r3, r2
 8007fe0:	9366      	str	r3, [sp, #408]	; 0x198
 8007fe2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007fe4:	4051      	eors	r1, r2
 8007fe6:	001a      	movs	r2, r3
 8007fe8:	9156      	str	r1, [sp, #344]	; 0x158
 8007fea:	9937      	ldr	r1, [sp, #220]	; 0xdc
 8007fec:	404a      	eors	r2, r1
 8007fee:	4022      	ands	r2, r4
 8007ff0:	4053      	eors	r3, r2
 8007ff2:	9367      	str	r3, [sp, #412]	; 0x19c
 8007ff4:	9b48      	ldr	r3, [sp, #288]	; 0x120
 8007ff6:	4051      	eors	r1, r2
 8007ff8:	001a      	movs	r2, r3
 8007ffa:	9157      	str	r1, [sp, #348]	; 0x15c
 8007ffc:	9938      	ldr	r1, [sp, #224]	; 0xe0
 8007ffe:	404a      	eors	r2, r1
 8008000:	4022      	ands	r2, r4
 8008002:	4053      	eors	r3, r2
 8008004:	9368      	str	r3, [sp, #416]	; 0x1a0
 8008006:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8008008:	4051      	eors	r1, r2
 800800a:	001a      	movs	r2, r3
 800800c:	9158      	str	r1, [sp, #352]	; 0x160
 800800e:	9939      	ldr	r1, [sp, #228]	; 0xe4
 8008010:	404a      	eors	r2, r1
 8008012:	4022      	ands	r2, r4
 8008014:	4053      	eors	r3, r2
 8008016:	9369      	str	r3, [sp, #420]	; 0x1a4
 8008018:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 800801a:	4051      	eors	r1, r2
 800801c:	001a      	movs	r2, r3
 800801e:	9159      	str	r1, [sp, #356]	; 0x164
 8008020:	993a      	ldr	r1, [sp, #232]	; 0xe8
 8008022:	404a      	eors	r2, r1
 8008024:	4022      	ands	r2, r4
 8008026:	4053      	eors	r3, r2
 8008028:	936a      	str	r3, [sp, #424]	; 0x1a8
 800802a:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 800802c:	4051      	eors	r1, r2
 800802e:	001a      	movs	r2, r3
 8008030:	915a      	str	r1, [sp, #360]	; 0x168
 8008032:	993b      	ldr	r1, [sp, #236]	; 0xec
 8008034:	404a      	eors	r2, r1
 8008036:	4022      	ands	r2, r4
 8008038:	4051      	eors	r1, r2
 800803a:	4053      	eors	r3, r2
 800803c:	915b      	str	r1, [sp, #364]	; 0x16c
 800803e:	936b      	str	r3, [sp, #428]	; 0x1ac
 8008040:	e5c8      	b.n	8007bd4 <C25519keyExchange.part.50+0x190>
 8008042:	46c0      	nop			; (mov r8, r8)
 8008044:	40023000 	.word	0x40023000
 8008048:	fffffc40 	.word	0xfffffc40
 800804c:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 800804e:	997c      	ldr	r1, [sp, #496]	; 0x1f0
 8008050:	001a      	movs	r2, r3
 8008052:	404a      	eors	r2, r1
 8008054:	4022      	ands	r2, r4
 8008056:	4053      	eors	r3, r2
 8008058:	932c      	str	r3, [sp, #176]	; 0xb0
 800805a:	9b6d      	ldr	r3, [sp, #436]	; 0x1b4
 800805c:	4051      	eors	r1, r2
 800805e:	001a      	movs	r2, r3
 8008060:	913c      	str	r1, [sp, #240]	; 0xf0
 8008062:	997d      	ldr	r1, [sp, #500]	; 0x1f4
 8008064:	404a      	eors	r2, r1
 8008066:	4022      	ands	r2, r4
 8008068:	4053      	eors	r3, r2
 800806a:	932d      	str	r3, [sp, #180]	; 0xb4
 800806c:	9b6e      	ldr	r3, [sp, #440]	; 0x1b8
 800806e:	4051      	eors	r1, r2
 8008070:	001a      	movs	r2, r3
 8008072:	913d      	str	r1, [sp, #244]	; 0xf4
 8008074:	997e      	ldr	r1, [sp, #504]	; 0x1f8
 8008076:	404a      	eors	r2, r1
 8008078:	4022      	ands	r2, r4
 800807a:	4053      	eors	r3, r2
 800807c:	932e      	str	r3, [sp, #184]	; 0xb8
 800807e:	9b6f      	ldr	r3, [sp, #444]	; 0x1bc
 8008080:	4051      	eors	r1, r2
 8008082:	001a      	movs	r2, r3
 8008084:	913e      	str	r1, [sp, #248]	; 0xf8
 8008086:	997f      	ldr	r1, [sp, #508]	; 0x1fc
 8008088:	404a      	eors	r2, r1
 800808a:	4022      	ands	r2, r4
 800808c:	4053      	eors	r3, r2
 800808e:	932f      	str	r3, [sp, #188]	; 0xbc
 8008090:	9b70      	ldr	r3, [sp, #448]	; 0x1c0
 8008092:	4051      	eors	r1, r2
 8008094:	001a      	movs	r2, r3
 8008096:	913f      	str	r1, [sp, #252]	; 0xfc
 8008098:	9980      	ldr	r1, [sp, #512]	; 0x200
 800809a:	404a      	eors	r2, r1
 800809c:	4022      	ands	r2, r4
 800809e:	4053      	eors	r3, r2
 80080a0:	9330      	str	r3, [sp, #192]	; 0xc0
 80080a2:	9b71      	ldr	r3, [sp, #452]	; 0x1c4
 80080a4:	4051      	eors	r1, r2
 80080a6:	001a      	movs	r2, r3
 80080a8:	9140      	str	r1, [sp, #256]	; 0x100
 80080aa:	9981      	ldr	r1, [sp, #516]	; 0x204
 80080ac:	404a      	eors	r2, r1
 80080ae:	4022      	ands	r2, r4
 80080b0:	4053      	eors	r3, r2
 80080b2:	9331      	str	r3, [sp, #196]	; 0xc4
 80080b4:	9b72      	ldr	r3, [sp, #456]	; 0x1c8
 80080b6:	4051      	eors	r1, r2
 80080b8:	001a      	movs	r2, r3
 80080ba:	9141      	str	r1, [sp, #260]	; 0x104
 80080bc:	9982      	ldr	r1, [sp, #520]	; 0x208
 80080be:	404a      	eors	r2, r1
 80080c0:	4022      	ands	r2, r4
 80080c2:	4053      	eors	r3, r2
 80080c4:	9332      	str	r3, [sp, #200]	; 0xc8
 80080c6:	9b73      	ldr	r3, [sp, #460]	; 0x1cc
 80080c8:	4051      	eors	r1, r2
 80080ca:	001a      	movs	r2, r3
 80080cc:	9142      	str	r1, [sp, #264]	; 0x108
 80080ce:	9983      	ldr	r1, [sp, #524]	; 0x20c
 80080d0:	404a      	eors	r2, r1
 80080d2:	4022      	ands	r2, r4
 80080d4:	4051      	eors	r1, r2
 80080d6:	4053      	eors	r3, r2
 80080d8:	9143      	str	r1, [sp, #268]	; 0x10c
 80080da:	9333      	str	r3, [sp, #204]	; 0xcc
 80080dc:	9b74      	ldr	r3, [sp, #464]	; 0x1d0
 80080de:	9984      	ldr	r1, [sp, #528]	; 0x210
 80080e0:	001a      	movs	r2, r3
 80080e2:	404a      	eors	r2, r1
 80080e4:	4022      	ands	r2, r4
 80080e6:	4053      	eors	r3, r2
 80080e8:	9334      	str	r3, [sp, #208]	; 0xd0
 80080ea:	9b75      	ldr	r3, [sp, #468]	; 0x1d4
 80080ec:	4051      	eors	r1, r2
 80080ee:	001a      	movs	r2, r3
 80080f0:	9144      	str	r1, [sp, #272]	; 0x110
 80080f2:	9985      	ldr	r1, [sp, #532]	; 0x214
 80080f4:	404a      	eors	r2, r1
 80080f6:	4022      	ands	r2, r4
 80080f8:	4053      	eors	r3, r2
 80080fa:	9335      	str	r3, [sp, #212]	; 0xd4
 80080fc:	9b76      	ldr	r3, [sp, #472]	; 0x1d8
 80080fe:	4051      	eors	r1, r2
 8008100:	001a      	movs	r2, r3
 8008102:	9145      	str	r1, [sp, #276]	; 0x114
 8008104:	9986      	ldr	r1, [sp, #536]	; 0x218
 8008106:	404a      	eors	r2, r1
 8008108:	4022      	ands	r2, r4
 800810a:	4053      	eors	r3, r2
 800810c:	9336      	str	r3, [sp, #216]	; 0xd8
 800810e:	9b77      	ldr	r3, [sp, #476]	; 0x1dc
 8008110:	4051      	eors	r1, r2
 8008112:	001a      	movs	r2, r3
 8008114:	9146      	str	r1, [sp, #280]	; 0x118
 8008116:	9987      	ldr	r1, [sp, #540]	; 0x21c
 8008118:	404a      	eors	r2, r1
 800811a:	4022      	ands	r2, r4
 800811c:	4053      	eors	r3, r2
 800811e:	9337      	str	r3, [sp, #220]	; 0xdc
 8008120:	9b78      	ldr	r3, [sp, #480]	; 0x1e0
 8008122:	4051      	eors	r1, r2
 8008124:	001a      	movs	r2, r3
 8008126:	9147      	str	r1, [sp, #284]	; 0x11c
 8008128:	9988      	ldr	r1, [sp, #544]	; 0x220
 800812a:	404a      	eors	r2, r1
 800812c:	4022      	ands	r2, r4
 800812e:	4053      	eors	r3, r2
 8008130:	9338      	str	r3, [sp, #224]	; 0xe0
 8008132:	9b79      	ldr	r3, [sp, #484]	; 0x1e4
 8008134:	4051      	eors	r1, r2
 8008136:	001a      	movs	r2, r3
 8008138:	9148      	str	r1, [sp, #288]	; 0x120
 800813a:	9989      	ldr	r1, [sp, #548]	; 0x224
 800813c:	404a      	eors	r2, r1
 800813e:	4022      	ands	r2, r4
 8008140:	4053      	eors	r3, r2
 8008142:	9339      	str	r3, [sp, #228]	; 0xe4
 8008144:	9b7a      	ldr	r3, [sp, #488]	; 0x1e8
 8008146:	4051      	eors	r1, r2
 8008148:	001a      	movs	r2, r3
 800814a:	9149      	str	r1, [sp, #292]	; 0x124
 800814c:	998a      	ldr	r1, [sp, #552]	; 0x228
 800814e:	404a      	eors	r2, r1
 8008150:	4022      	ands	r2, r4
 8008152:	4053      	eors	r3, r2
 8008154:	933a      	str	r3, [sp, #232]	; 0xe8
 8008156:	9b7b      	ldr	r3, [sp, #492]	; 0x1ec
 8008158:	4051      	eors	r1, r2
 800815a:	914a      	str	r1, [sp, #296]	; 0x128
 800815c:	0019      	movs	r1, r3
 800815e:	9a8b      	ldr	r2, [sp, #556]	; 0x22c
 8008160:	4051      	eors	r1, r2
 8008162:	400c      	ands	r4, r1
 8008164:	4062      	eors	r2, r4
 8008166:	405c      	eors	r4, r3
 8008168:	924b      	str	r2, [sp, #300]	; 0x12c
 800816a:	943b      	str	r4, [sp, #236]	; 0xec
 800816c:	3d01      	subs	r5, #1
 800816e:	d300      	bcc.n	8008172 <C25519keyExchange.part.50+0x72e>
 8008170:	e624      	b.n	8007dbc <C25519keyExchange.part.50+0x378>
 8008172:	a93c      	add	r1, sp, #240	; 0xf0
 8008174:	a8dc      	add	r0, sp, #880	; 0x370
 8008176:	f7fe fda7 	bl	8006cc8 <fe25519_copy>
 800817a:	a944      	add	r1, sp, #272	; 0x110
 800817c:	a8e4      	add	r0, sp, #912	; 0x390
 800817e:	f7fe fda3 	bl	8006cc8 <fe25519_copy>
 8008182:	a9e4      	add	r1, sp, #912	; 0x390
 8008184:	0008      	movs	r0, r1
 8008186:	f7ff f9ed 	bl	8007564 <fe25519_invert>
 800818a:	aae4      	add	r2, sp, #912	; 0x390
 800818c:	a9dc      	add	r1, sp, #880	; 0x370
 800818e:	a8ec      	add	r0, sp, #944	; 0x3b0
 8008190:	f7ff f82e 	bl	80071f0 <fe25519_mul>
 8008194:	4648      	mov	r0, r9
 8008196:	a9ec      	add	r1, sp, #944	; 0x3b0
 8008198:	f7fe ffda 	bl	8007150 <fe25519_pack>
 800819c:	2000      	movs	r0, #0
 800819e:	23f5      	movs	r3, #245	; 0xf5
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	449d      	add	sp, r3
 80081a4:	bc0c      	pop	{r2, r3}
 80081a6:	4690      	mov	r8, r2
 80081a8:	4699      	mov	r9, r3
 80081aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080081ac <C25519keyGen>:
 80081ac:	b530      	push	{r4, r5, lr}
 80081ae:	b089      	sub	sp, #36	; 0x24
 80081b0:	2220      	movs	r2, #32
 80081b2:	0004      	movs	r4, r0
 80081b4:	000d      	movs	r5, r1
 80081b6:	4668      	mov	r0, sp
 80081b8:	2100      	movs	r1, #0
 80081ba:	f000 f8a0 	bl	80082fe <memset>
 80081be:	2309      	movs	r3, #9
 80081c0:	466a      	mov	r2, sp
 80081c2:	7013      	strb	r3, [r2, #0]
 80081c4:	2c00      	cmp	r4, #0
 80081c6:	d013      	beq.n	80081f0 <C25519keyGen+0x44>
 80081c8:	2d00      	cmp	r5, #0
 80081ca:	d011      	beq.n	80081f0 <C25519keyGen+0x44>
 80081cc:	2207      	movs	r2, #7
 80081ce:	7823      	ldrb	r3, [r4, #0]
 80081d0:	0021      	movs	r1, r4
 80081d2:	4393      	bics	r3, r2
 80081d4:	7023      	strb	r3, [r4, #0]
 80081d6:	237f      	movs	r3, #127	; 0x7f
 80081d8:	7fe2      	ldrb	r2, [r4, #31]
 80081da:	0028      	movs	r0, r5
 80081dc:	4013      	ands	r3, r2
 80081de:	2240      	movs	r2, #64	; 0x40
 80081e0:	4313      	orrs	r3, r2
 80081e2:	77e3      	strb	r3, [r4, #31]
 80081e4:	466a      	mov	r2, sp
 80081e6:	f7ff fc2d 	bl	8007a44 <C25519keyExchange.part.50>
 80081ea:	2000      	movs	r0, #0
 80081ec:	b009      	add	sp, #36	; 0x24
 80081ee:	bd30      	pop	{r4, r5, pc}
 80081f0:	4800      	ldr	r0, [pc, #0]	; (80081f4 <C25519keyGen+0x48>)
 80081f2:	e7fb      	b.n	80081ec <C25519keyGen+0x40>
 80081f4:	000015e4 	.word	0x000015e4

080081f8 <C25519keyExchange>:
 80081f8:	b510      	push	{r4, lr}
 80081fa:	2900      	cmp	r1, #0
 80081fc:	d006      	beq.n	800820c <C25519keyExchange+0x14>
 80081fe:	2a00      	cmp	r2, #0
 8008200:	d004      	beq.n	800820c <C25519keyExchange+0x14>
 8008202:	2800      	cmp	r0, #0
 8008204:	d002      	beq.n	800820c <C25519keyExchange+0x14>
 8008206:	f7ff fc1d 	bl	8007a44 <C25519keyExchange.part.50>
 800820a:	bd10      	pop	{r4, pc}
 800820c:	4800      	ldr	r0, [pc, #0]	; (8008210 <C25519keyExchange+0x18>)
 800820e:	e7fc      	b.n	800820a <C25519keyExchange+0x12>
 8008210:	000015e4 	.word	0x000015e4

08008214 <__assert_func>:
 8008214:	b530      	push	{r4, r5, lr}
 8008216:	001c      	movs	r4, r3
 8008218:	4b09      	ldr	r3, [pc, #36]	; (8008240 <__assert_func+0x2c>)
 800821a:	0005      	movs	r5, r0
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	b085      	sub	sp, #20
 8008220:	68d8      	ldr	r0, [r3, #12]
 8008222:	4b08      	ldr	r3, [pc, #32]	; (8008244 <__assert_func+0x30>)
 8008224:	2a00      	cmp	r2, #0
 8008226:	d101      	bne.n	800822c <__assert_func+0x18>
 8008228:	4b07      	ldr	r3, [pc, #28]	; (8008248 <__assert_func+0x34>)
 800822a:	001a      	movs	r2, r3
 800822c:	9202      	str	r2, [sp, #8]
 800822e:	9301      	str	r3, [sp, #4]
 8008230:	9100      	str	r1, [sp, #0]
 8008232:	002b      	movs	r3, r5
 8008234:	0022      	movs	r2, r4
 8008236:	4905      	ldr	r1, [pc, #20]	; (800824c <__assert_func+0x38>)
 8008238:	f000 f81a 	bl	8008270 <fiprintf>
 800823c:	f000 fcb0 	bl	8008ba0 <abort>
 8008240:	2000000c 	.word	0x2000000c
 8008244:	08009408 	.word	0x08009408
 8008248:	08009443 	.word	0x08009443
 800824c:	08009415 	.word	0x08009415

08008250 <calloc>:
 8008250:	b510      	push	{r4, lr}
 8008252:	4b03      	ldr	r3, [pc, #12]	; (8008260 <calloc+0x10>)
 8008254:	000a      	movs	r2, r1
 8008256:	0001      	movs	r1, r0
 8008258:	6818      	ldr	r0, [r3, #0]
 800825a:	f000 f858 	bl	800830e <_calloc_r>
 800825e:	bd10      	pop	{r4, pc}
 8008260:	2000000c 	.word	0x2000000c

08008264 <__errno>:
 8008264:	4b01      	ldr	r3, [pc, #4]	; (800826c <__errno+0x8>)
 8008266:	6818      	ldr	r0, [r3, #0]
 8008268:	4770      	bx	lr
 800826a:	46c0      	nop			; (mov r8, r8)
 800826c:	2000000c 	.word	0x2000000c

08008270 <fiprintf>:
 8008270:	b40e      	push	{r1, r2, r3}
 8008272:	b503      	push	{r0, r1, lr}
 8008274:	0001      	movs	r1, r0
 8008276:	ab03      	add	r3, sp, #12
 8008278:	4804      	ldr	r0, [pc, #16]	; (800828c <fiprintf+0x1c>)
 800827a:	cb04      	ldmia	r3!, {r2}
 800827c:	6800      	ldr	r0, [r0, #0]
 800827e:	9301      	str	r3, [sp, #4]
 8008280:	f000 f924 	bl	80084cc <_vfiprintf_r>
 8008284:	b002      	add	sp, #8
 8008286:	bc08      	pop	{r3}
 8008288:	b003      	add	sp, #12
 800828a:	4718      	bx	r3
 800828c:	2000000c 	.word	0x2000000c

08008290 <__libc_init_array>:
 8008290:	b570      	push	{r4, r5, r6, lr}
 8008292:	2600      	movs	r6, #0
 8008294:	4d0c      	ldr	r5, [pc, #48]	; (80082c8 <__libc_init_array+0x38>)
 8008296:	4c0d      	ldr	r4, [pc, #52]	; (80082cc <__libc_init_array+0x3c>)
 8008298:	1b64      	subs	r4, r4, r5
 800829a:	10a4      	asrs	r4, r4, #2
 800829c:	42a6      	cmp	r6, r4
 800829e:	d109      	bne.n	80082b4 <__libc_init_array+0x24>
 80082a0:	2600      	movs	r6, #0
 80082a2:	f000 ff93 	bl	80091cc <_init>
 80082a6:	4d0a      	ldr	r5, [pc, #40]	; (80082d0 <__libc_init_array+0x40>)
 80082a8:	4c0a      	ldr	r4, [pc, #40]	; (80082d4 <__libc_init_array+0x44>)
 80082aa:	1b64      	subs	r4, r4, r5
 80082ac:	10a4      	asrs	r4, r4, #2
 80082ae:	42a6      	cmp	r6, r4
 80082b0:	d105      	bne.n	80082be <__libc_init_array+0x2e>
 80082b2:	bd70      	pop	{r4, r5, r6, pc}
 80082b4:	00b3      	lsls	r3, r6, #2
 80082b6:	58eb      	ldr	r3, [r5, r3]
 80082b8:	4798      	blx	r3
 80082ba:	3601      	adds	r6, #1
 80082bc:	e7ee      	b.n	800829c <__libc_init_array+0xc>
 80082be:	00b3      	lsls	r3, r6, #2
 80082c0:	58eb      	ldr	r3, [r5, r3]
 80082c2:	4798      	blx	r3
 80082c4:	3601      	adds	r6, #1
 80082c6:	e7f2      	b.n	80082ae <__libc_init_array+0x1e>
 80082c8:	080094dc 	.word	0x080094dc
 80082cc:	080094dc 	.word	0x080094dc
 80082d0:	080094dc 	.word	0x080094dc
 80082d4:	080094e0 	.word	0x080094e0

080082d8 <free>:
 80082d8:	b510      	push	{r4, lr}
 80082da:	4b03      	ldr	r3, [pc, #12]	; (80082e8 <free+0x10>)
 80082dc:	0001      	movs	r1, r0
 80082de:	6818      	ldr	r0, [r3, #0]
 80082e0:	f000 f824 	bl	800832c <_free_r>
 80082e4:	bd10      	pop	{r4, pc}
 80082e6:	46c0      	nop			; (mov r8, r8)
 80082e8:	2000000c 	.word	0x2000000c

080082ec <memcpy>:
 80082ec:	2300      	movs	r3, #0
 80082ee:	b510      	push	{r4, lr}
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d100      	bne.n	80082f6 <memcpy+0xa>
 80082f4:	bd10      	pop	{r4, pc}
 80082f6:	5ccc      	ldrb	r4, [r1, r3]
 80082f8:	54c4      	strb	r4, [r0, r3]
 80082fa:	3301      	adds	r3, #1
 80082fc:	e7f8      	b.n	80082f0 <memcpy+0x4>

080082fe <memset>:
 80082fe:	0003      	movs	r3, r0
 8008300:	1812      	adds	r2, r2, r0
 8008302:	4293      	cmp	r3, r2
 8008304:	d100      	bne.n	8008308 <memset+0xa>
 8008306:	4770      	bx	lr
 8008308:	7019      	strb	r1, [r3, #0]
 800830a:	3301      	adds	r3, #1
 800830c:	e7f9      	b.n	8008302 <memset+0x4>

0800830e <_calloc_r>:
 800830e:	434a      	muls	r2, r1
 8008310:	b570      	push	{r4, r5, r6, lr}
 8008312:	0011      	movs	r1, r2
 8008314:	0014      	movs	r4, r2
 8008316:	f000 f853 	bl	80083c0 <_malloc_r>
 800831a:	1e05      	subs	r5, r0, #0
 800831c:	d003      	beq.n	8008326 <_calloc_r+0x18>
 800831e:	0022      	movs	r2, r4
 8008320:	2100      	movs	r1, #0
 8008322:	f7ff ffec 	bl	80082fe <memset>
 8008326:	0028      	movs	r0, r5
 8008328:	bd70      	pop	{r4, r5, r6, pc}
	...

0800832c <_free_r>:
 800832c:	b570      	push	{r4, r5, r6, lr}
 800832e:	0005      	movs	r5, r0
 8008330:	2900      	cmp	r1, #0
 8008332:	d010      	beq.n	8008356 <_free_r+0x2a>
 8008334:	1f0c      	subs	r4, r1, #4
 8008336:	6823      	ldr	r3, [r4, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	da00      	bge.n	800833e <_free_r+0x12>
 800833c:	18e4      	adds	r4, r4, r3
 800833e:	0028      	movs	r0, r5
 8008340:	f000 fe39 	bl	8008fb6 <__malloc_lock>
 8008344:	4a1d      	ldr	r2, [pc, #116]	; (80083bc <_free_r+0x90>)
 8008346:	6813      	ldr	r3, [r2, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d105      	bne.n	8008358 <_free_r+0x2c>
 800834c:	6063      	str	r3, [r4, #4]
 800834e:	6014      	str	r4, [r2, #0]
 8008350:	0028      	movs	r0, r5
 8008352:	f000 fe31 	bl	8008fb8 <__malloc_unlock>
 8008356:	bd70      	pop	{r4, r5, r6, pc}
 8008358:	42a3      	cmp	r3, r4
 800835a:	d909      	bls.n	8008370 <_free_r+0x44>
 800835c:	6821      	ldr	r1, [r4, #0]
 800835e:	1860      	adds	r0, r4, r1
 8008360:	4283      	cmp	r3, r0
 8008362:	d1f3      	bne.n	800834c <_free_r+0x20>
 8008364:	6818      	ldr	r0, [r3, #0]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	1841      	adds	r1, r0, r1
 800836a:	6021      	str	r1, [r4, #0]
 800836c:	e7ee      	b.n	800834c <_free_r+0x20>
 800836e:	0013      	movs	r3, r2
 8008370:	685a      	ldr	r2, [r3, #4]
 8008372:	2a00      	cmp	r2, #0
 8008374:	d001      	beq.n	800837a <_free_r+0x4e>
 8008376:	42a2      	cmp	r2, r4
 8008378:	d9f9      	bls.n	800836e <_free_r+0x42>
 800837a:	6819      	ldr	r1, [r3, #0]
 800837c:	1858      	adds	r0, r3, r1
 800837e:	42a0      	cmp	r0, r4
 8008380:	d10b      	bne.n	800839a <_free_r+0x6e>
 8008382:	6820      	ldr	r0, [r4, #0]
 8008384:	1809      	adds	r1, r1, r0
 8008386:	1858      	adds	r0, r3, r1
 8008388:	6019      	str	r1, [r3, #0]
 800838a:	4282      	cmp	r2, r0
 800838c:	d1e0      	bne.n	8008350 <_free_r+0x24>
 800838e:	6810      	ldr	r0, [r2, #0]
 8008390:	6852      	ldr	r2, [r2, #4]
 8008392:	1841      	adds	r1, r0, r1
 8008394:	6019      	str	r1, [r3, #0]
 8008396:	605a      	str	r2, [r3, #4]
 8008398:	e7da      	b.n	8008350 <_free_r+0x24>
 800839a:	42a0      	cmp	r0, r4
 800839c:	d902      	bls.n	80083a4 <_free_r+0x78>
 800839e:	230c      	movs	r3, #12
 80083a0:	602b      	str	r3, [r5, #0]
 80083a2:	e7d5      	b.n	8008350 <_free_r+0x24>
 80083a4:	6821      	ldr	r1, [r4, #0]
 80083a6:	1860      	adds	r0, r4, r1
 80083a8:	4282      	cmp	r2, r0
 80083aa:	d103      	bne.n	80083b4 <_free_r+0x88>
 80083ac:	6810      	ldr	r0, [r2, #0]
 80083ae:	6852      	ldr	r2, [r2, #4]
 80083b0:	1841      	adds	r1, r0, r1
 80083b2:	6021      	str	r1, [r4, #0]
 80083b4:	6062      	str	r2, [r4, #4]
 80083b6:	605c      	str	r4, [r3, #4]
 80083b8:	e7ca      	b.n	8008350 <_free_r+0x24>
 80083ba:	46c0      	nop			; (mov r8, r8)
 80083bc:	20000544 	.word	0x20000544

080083c0 <_malloc_r>:
 80083c0:	2303      	movs	r3, #3
 80083c2:	b570      	push	{r4, r5, r6, lr}
 80083c4:	1ccd      	adds	r5, r1, #3
 80083c6:	439d      	bics	r5, r3
 80083c8:	3508      	adds	r5, #8
 80083ca:	0006      	movs	r6, r0
 80083cc:	2d0c      	cmp	r5, #12
 80083ce:	d21e      	bcs.n	800840e <_malloc_r+0x4e>
 80083d0:	250c      	movs	r5, #12
 80083d2:	42a9      	cmp	r1, r5
 80083d4:	d81d      	bhi.n	8008412 <_malloc_r+0x52>
 80083d6:	0030      	movs	r0, r6
 80083d8:	f000 fded 	bl	8008fb6 <__malloc_lock>
 80083dc:	4a25      	ldr	r2, [pc, #148]	; (8008474 <_malloc_r+0xb4>)
 80083de:	6814      	ldr	r4, [r2, #0]
 80083e0:	0021      	movs	r1, r4
 80083e2:	2900      	cmp	r1, #0
 80083e4:	d119      	bne.n	800841a <_malloc_r+0x5a>
 80083e6:	4c24      	ldr	r4, [pc, #144]	; (8008478 <_malloc_r+0xb8>)
 80083e8:	6823      	ldr	r3, [r4, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d103      	bne.n	80083f6 <_malloc_r+0x36>
 80083ee:	0030      	movs	r0, r6
 80083f0:	f000 faf8 	bl	80089e4 <_sbrk_r>
 80083f4:	6020      	str	r0, [r4, #0]
 80083f6:	0029      	movs	r1, r5
 80083f8:	0030      	movs	r0, r6
 80083fa:	f000 faf3 	bl	80089e4 <_sbrk_r>
 80083fe:	1c43      	adds	r3, r0, #1
 8008400:	d12b      	bne.n	800845a <_malloc_r+0x9a>
 8008402:	230c      	movs	r3, #12
 8008404:	0030      	movs	r0, r6
 8008406:	6033      	str	r3, [r6, #0]
 8008408:	f000 fdd6 	bl	8008fb8 <__malloc_unlock>
 800840c:	e003      	b.n	8008416 <_malloc_r+0x56>
 800840e:	2d00      	cmp	r5, #0
 8008410:	dadf      	bge.n	80083d2 <_malloc_r+0x12>
 8008412:	230c      	movs	r3, #12
 8008414:	6033      	str	r3, [r6, #0]
 8008416:	2000      	movs	r0, #0
 8008418:	bd70      	pop	{r4, r5, r6, pc}
 800841a:	680b      	ldr	r3, [r1, #0]
 800841c:	1b5b      	subs	r3, r3, r5
 800841e:	d419      	bmi.n	8008454 <_malloc_r+0x94>
 8008420:	2b0b      	cmp	r3, #11
 8008422:	d903      	bls.n	800842c <_malloc_r+0x6c>
 8008424:	600b      	str	r3, [r1, #0]
 8008426:	18cc      	adds	r4, r1, r3
 8008428:	6025      	str	r5, [r4, #0]
 800842a:	e003      	b.n	8008434 <_malloc_r+0x74>
 800842c:	684b      	ldr	r3, [r1, #4]
 800842e:	428c      	cmp	r4, r1
 8008430:	d10d      	bne.n	800844e <_malloc_r+0x8e>
 8008432:	6013      	str	r3, [r2, #0]
 8008434:	0030      	movs	r0, r6
 8008436:	f000 fdbf 	bl	8008fb8 <__malloc_unlock>
 800843a:	0020      	movs	r0, r4
 800843c:	2207      	movs	r2, #7
 800843e:	300b      	adds	r0, #11
 8008440:	1d23      	adds	r3, r4, #4
 8008442:	4390      	bics	r0, r2
 8008444:	1ac3      	subs	r3, r0, r3
 8008446:	d0e7      	beq.n	8008418 <_malloc_r+0x58>
 8008448:	425a      	negs	r2, r3
 800844a:	50e2      	str	r2, [r4, r3]
 800844c:	e7e4      	b.n	8008418 <_malloc_r+0x58>
 800844e:	6063      	str	r3, [r4, #4]
 8008450:	000c      	movs	r4, r1
 8008452:	e7ef      	b.n	8008434 <_malloc_r+0x74>
 8008454:	000c      	movs	r4, r1
 8008456:	6849      	ldr	r1, [r1, #4]
 8008458:	e7c3      	b.n	80083e2 <_malloc_r+0x22>
 800845a:	2303      	movs	r3, #3
 800845c:	1cc4      	adds	r4, r0, #3
 800845e:	439c      	bics	r4, r3
 8008460:	42a0      	cmp	r0, r4
 8008462:	d0e1      	beq.n	8008428 <_malloc_r+0x68>
 8008464:	1a21      	subs	r1, r4, r0
 8008466:	0030      	movs	r0, r6
 8008468:	f000 fabc 	bl	80089e4 <_sbrk_r>
 800846c:	1c43      	adds	r3, r0, #1
 800846e:	d1db      	bne.n	8008428 <_malloc_r+0x68>
 8008470:	e7c7      	b.n	8008402 <_malloc_r+0x42>
 8008472:	46c0      	nop			; (mov r8, r8)
 8008474:	20000544 	.word	0x20000544
 8008478:	20000548 	.word	0x20000548

0800847c <__sfputc_r>:
 800847c:	6893      	ldr	r3, [r2, #8]
 800847e:	b510      	push	{r4, lr}
 8008480:	3b01      	subs	r3, #1
 8008482:	6093      	str	r3, [r2, #8]
 8008484:	2b00      	cmp	r3, #0
 8008486:	da04      	bge.n	8008492 <__sfputc_r+0x16>
 8008488:	6994      	ldr	r4, [r2, #24]
 800848a:	42a3      	cmp	r3, r4
 800848c:	db07      	blt.n	800849e <__sfputc_r+0x22>
 800848e:	290a      	cmp	r1, #10
 8008490:	d005      	beq.n	800849e <__sfputc_r+0x22>
 8008492:	6813      	ldr	r3, [r2, #0]
 8008494:	1c58      	adds	r0, r3, #1
 8008496:	6010      	str	r0, [r2, #0]
 8008498:	7019      	strb	r1, [r3, #0]
 800849a:	0008      	movs	r0, r1
 800849c:	bd10      	pop	{r4, pc}
 800849e:	f000 fab3 	bl	8008a08 <__swbuf_r>
 80084a2:	0001      	movs	r1, r0
 80084a4:	e7f9      	b.n	800849a <__sfputc_r+0x1e>

080084a6 <__sfputs_r>:
 80084a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084a8:	0006      	movs	r6, r0
 80084aa:	000f      	movs	r7, r1
 80084ac:	0014      	movs	r4, r2
 80084ae:	18d5      	adds	r5, r2, r3
 80084b0:	42ac      	cmp	r4, r5
 80084b2:	d101      	bne.n	80084b8 <__sfputs_r+0x12>
 80084b4:	2000      	movs	r0, #0
 80084b6:	e007      	b.n	80084c8 <__sfputs_r+0x22>
 80084b8:	7821      	ldrb	r1, [r4, #0]
 80084ba:	003a      	movs	r2, r7
 80084bc:	0030      	movs	r0, r6
 80084be:	f7ff ffdd 	bl	800847c <__sfputc_r>
 80084c2:	3401      	adds	r4, #1
 80084c4:	1c43      	adds	r3, r0, #1
 80084c6:	d1f3      	bne.n	80084b0 <__sfputs_r+0xa>
 80084c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080084cc <_vfiprintf_r>:
 80084cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084ce:	b0a1      	sub	sp, #132	; 0x84
 80084d0:	9003      	str	r0, [sp, #12]
 80084d2:	000f      	movs	r7, r1
 80084d4:	0016      	movs	r6, r2
 80084d6:	001d      	movs	r5, r3
 80084d8:	2800      	cmp	r0, #0
 80084da:	d005      	beq.n	80084e8 <_vfiprintf_r+0x1c>
 80084dc:	6983      	ldr	r3, [r0, #24]
 80084de:	9305      	str	r3, [sp, #20]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d101      	bne.n	80084e8 <_vfiprintf_r+0x1c>
 80084e4:	f000 fc5c 	bl	8008da0 <__sinit>
 80084e8:	4b7b      	ldr	r3, [pc, #492]	; (80086d8 <_vfiprintf_r+0x20c>)
 80084ea:	429f      	cmp	r7, r3
 80084ec:	d15c      	bne.n	80085a8 <_vfiprintf_r+0xdc>
 80084ee:	9b03      	ldr	r3, [sp, #12]
 80084f0:	685f      	ldr	r7, [r3, #4]
 80084f2:	89bb      	ldrh	r3, [r7, #12]
 80084f4:	071b      	lsls	r3, r3, #28
 80084f6:	d563      	bpl.n	80085c0 <_vfiprintf_r+0xf4>
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d060      	beq.n	80085c0 <_vfiprintf_r+0xf4>
 80084fe:	2300      	movs	r3, #0
 8008500:	ac08      	add	r4, sp, #32
 8008502:	6163      	str	r3, [r4, #20]
 8008504:	3320      	adds	r3, #32
 8008506:	7663      	strb	r3, [r4, #25]
 8008508:	3310      	adds	r3, #16
 800850a:	76a3      	strb	r3, [r4, #26]
 800850c:	9507      	str	r5, [sp, #28]
 800850e:	0035      	movs	r5, r6
 8008510:	782b      	ldrb	r3, [r5, #0]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d001      	beq.n	800851a <_vfiprintf_r+0x4e>
 8008516:	2b25      	cmp	r3, #37	; 0x25
 8008518:	d15c      	bne.n	80085d4 <_vfiprintf_r+0x108>
 800851a:	1bab      	subs	r3, r5, r6
 800851c:	9305      	str	r3, [sp, #20]
 800851e:	d00c      	beq.n	800853a <_vfiprintf_r+0x6e>
 8008520:	0032      	movs	r2, r6
 8008522:	0039      	movs	r1, r7
 8008524:	9803      	ldr	r0, [sp, #12]
 8008526:	f7ff ffbe 	bl	80084a6 <__sfputs_r>
 800852a:	1c43      	adds	r3, r0, #1
 800852c:	d100      	bne.n	8008530 <_vfiprintf_r+0x64>
 800852e:	e0c4      	b.n	80086ba <_vfiprintf_r+0x1ee>
 8008530:	6962      	ldr	r2, [r4, #20]
 8008532:	9b05      	ldr	r3, [sp, #20]
 8008534:	4694      	mov	ip, r2
 8008536:	4463      	add	r3, ip
 8008538:	6163      	str	r3, [r4, #20]
 800853a:	782b      	ldrb	r3, [r5, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d100      	bne.n	8008542 <_vfiprintf_r+0x76>
 8008540:	e0bb      	b.n	80086ba <_vfiprintf_r+0x1ee>
 8008542:	2201      	movs	r2, #1
 8008544:	2300      	movs	r3, #0
 8008546:	4252      	negs	r2, r2
 8008548:	6062      	str	r2, [r4, #4]
 800854a:	a904      	add	r1, sp, #16
 800854c:	3254      	adds	r2, #84	; 0x54
 800854e:	1852      	adds	r2, r2, r1
 8008550:	1c6e      	adds	r6, r5, #1
 8008552:	6023      	str	r3, [r4, #0]
 8008554:	60e3      	str	r3, [r4, #12]
 8008556:	60a3      	str	r3, [r4, #8]
 8008558:	7013      	strb	r3, [r2, #0]
 800855a:	65a3      	str	r3, [r4, #88]	; 0x58
 800855c:	7831      	ldrb	r1, [r6, #0]
 800855e:	2205      	movs	r2, #5
 8008560:	485e      	ldr	r0, [pc, #376]	; (80086dc <_vfiprintf_r+0x210>)
 8008562:	f000 fd1d 	bl	8008fa0 <memchr>
 8008566:	1c75      	adds	r5, r6, #1
 8008568:	2800      	cmp	r0, #0
 800856a:	d135      	bne.n	80085d8 <_vfiprintf_r+0x10c>
 800856c:	6822      	ldr	r2, [r4, #0]
 800856e:	06d3      	lsls	r3, r2, #27
 8008570:	d504      	bpl.n	800857c <_vfiprintf_r+0xb0>
 8008572:	2353      	movs	r3, #83	; 0x53
 8008574:	a904      	add	r1, sp, #16
 8008576:	185b      	adds	r3, r3, r1
 8008578:	2120      	movs	r1, #32
 800857a:	7019      	strb	r1, [r3, #0]
 800857c:	0713      	lsls	r3, r2, #28
 800857e:	d504      	bpl.n	800858a <_vfiprintf_r+0xbe>
 8008580:	2353      	movs	r3, #83	; 0x53
 8008582:	a904      	add	r1, sp, #16
 8008584:	185b      	adds	r3, r3, r1
 8008586:	212b      	movs	r1, #43	; 0x2b
 8008588:	7019      	strb	r1, [r3, #0]
 800858a:	7833      	ldrb	r3, [r6, #0]
 800858c:	2b2a      	cmp	r3, #42	; 0x2a
 800858e:	d02c      	beq.n	80085ea <_vfiprintf_r+0x11e>
 8008590:	0035      	movs	r5, r6
 8008592:	2100      	movs	r1, #0
 8008594:	200a      	movs	r0, #10
 8008596:	68e3      	ldr	r3, [r4, #12]
 8008598:	782a      	ldrb	r2, [r5, #0]
 800859a:	1c6e      	adds	r6, r5, #1
 800859c:	3a30      	subs	r2, #48	; 0x30
 800859e:	2a09      	cmp	r2, #9
 80085a0:	d964      	bls.n	800866c <_vfiprintf_r+0x1a0>
 80085a2:	2900      	cmp	r1, #0
 80085a4:	d02e      	beq.n	8008604 <_vfiprintf_r+0x138>
 80085a6:	e026      	b.n	80085f6 <_vfiprintf_r+0x12a>
 80085a8:	4b4d      	ldr	r3, [pc, #308]	; (80086e0 <_vfiprintf_r+0x214>)
 80085aa:	429f      	cmp	r7, r3
 80085ac:	d102      	bne.n	80085b4 <_vfiprintf_r+0xe8>
 80085ae:	9b03      	ldr	r3, [sp, #12]
 80085b0:	689f      	ldr	r7, [r3, #8]
 80085b2:	e79e      	b.n	80084f2 <_vfiprintf_r+0x26>
 80085b4:	4b4b      	ldr	r3, [pc, #300]	; (80086e4 <_vfiprintf_r+0x218>)
 80085b6:	429f      	cmp	r7, r3
 80085b8:	d19b      	bne.n	80084f2 <_vfiprintf_r+0x26>
 80085ba:	9b03      	ldr	r3, [sp, #12]
 80085bc:	68df      	ldr	r7, [r3, #12]
 80085be:	e798      	b.n	80084f2 <_vfiprintf_r+0x26>
 80085c0:	0039      	movs	r1, r7
 80085c2:	9803      	ldr	r0, [sp, #12]
 80085c4:	f000 fa76 	bl	8008ab4 <__swsetup_r>
 80085c8:	2800      	cmp	r0, #0
 80085ca:	d098      	beq.n	80084fe <_vfiprintf_r+0x32>
 80085cc:	2001      	movs	r0, #1
 80085ce:	4240      	negs	r0, r0
 80085d0:	b021      	add	sp, #132	; 0x84
 80085d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085d4:	3501      	adds	r5, #1
 80085d6:	e79b      	b.n	8008510 <_vfiprintf_r+0x44>
 80085d8:	4b40      	ldr	r3, [pc, #256]	; (80086dc <_vfiprintf_r+0x210>)
 80085da:	6822      	ldr	r2, [r4, #0]
 80085dc:	1ac0      	subs	r0, r0, r3
 80085de:	2301      	movs	r3, #1
 80085e0:	4083      	lsls	r3, r0
 80085e2:	4313      	orrs	r3, r2
 80085e4:	6023      	str	r3, [r4, #0]
 80085e6:	002e      	movs	r6, r5
 80085e8:	e7b8      	b.n	800855c <_vfiprintf_r+0x90>
 80085ea:	9b07      	ldr	r3, [sp, #28]
 80085ec:	1d19      	adds	r1, r3, #4
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	9107      	str	r1, [sp, #28]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	db01      	blt.n	80085fa <_vfiprintf_r+0x12e>
 80085f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80085f8:	e004      	b.n	8008604 <_vfiprintf_r+0x138>
 80085fa:	425b      	negs	r3, r3
 80085fc:	60e3      	str	r3, [r4, #12]
 80085fe:	2302      	movs	r3, #2
 8008600:	4313      	orrs	r3, r2
 8008602:	6023      	str	r3, [r4, #0]
 8008604:	782b      	ldrb	r3, [r5, #0]
 8008606:	2b2e      	cmp	r3, #46	; 0x2e
 8008608:	d10a      	bne.n	8008620 <_vfiprintf_r+0x154>
 800860a:	786b      	ldrb	r3, [r5, #1]
 800860c:	2b2a      	cmp	r3, #42	; 0x2a
 800860e:	d135      	bne.n	800867c <_vfiprintf_r+0x1b0>
 8008610:	9b07      	ldr	r3, [sp, #28]
 8008612:	3502      	adds	r5, #2
 8008614:	1d1a      	adds	r2, r3, #4
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	9207      	str	r2, [sp, #28]
 800861a:	2b00      	cmp	r3, #0
 800861c:	db2b      	blt.n	8008676 <_vfiprintf_r+0x1aa>
 800861e:	9309      	str	r3, [sp, #36]	; 0x24
 8008620:	4e31      	ldr	r6, [pc, #196]	; (80086e8 <_vfiprintf_r+0x21c>)
 8008622:	7829      	ldrb	r1, [r5, #0]
 8008624:	2203      	movs	r2, #3
 8008626:	0030      	movs	r0, r6
 8008628:	f000 fcba 	bl	8008fa0 <memchr>
 800862c:	2800      	cmp	r0, #0
 800862e:	d006      	beq.n	800863e <_vfiprintf_r+0x172>
 8008630:	2340      	movs	r3, #64	; 0x40
 8008632:	1b80      	subs	r0, r0, r6
 8008634:	4083      	lsls	r3, r0
 8008636:	6822      	ldr	r2, [r4, #0]
 8008638:	3501      	adds	r5, #1
 800863a:	4313      	orrs	r3, r2
 800863c:	6023      	str	r3, [r4, #0]
 800863e:	7829      	ldrb	r1, [r5, #0]
 8008640:	2206      	movs	r2, #6
 8008642:	482a      	ldr	r0, [pc, #168]	; (80086ec <_vfiprintf_r+0x220>)
 8008644:	1c6e      	adds	r6, r5, #1
 8008646:	7621      	strb	r1, [r4, #24]
 8008648:	f000 fcaa 	bl	8008fa0 <memchr>
 800864c:	2800      	cmp	r0, #0
 800864e:	d03a      	beq.n	80086c6 <_vfiprintf_r+0x1fa>
 8008650:	4b27      	ldr	r3, [pc, #156]	; (80086f0 <_vfiprintf_r+0x224>)
 8008652:	2b00      	cmp	r3, #0
 8008654:	d125      	bne.n	80086a2 <_vfiprintf_r+0x1d6>
 8008656:	2207      	movs	r2, #7
 8008658:	9b07      	ldr	r3, [sp, #28]
 800865a:	3307      	adds	r3, #7
 800865c:	4393      	bics	r3, r2
 800865e:	3308      	adds	r3, #8
 8008660:	9307      	str	r3, [sp, #28]
 8008662:	6963      	ldr	r3, [r4, #20]
 8008664:	9a04      	ldr	r2, [sp, #16]
 8008666:	189b      	adds	r3, r3, r2
 8008668:	6163      	str	r3, [r4, #20]
 800866a:	e750      	b.n	800850e <_vfiprintf_r+0x42>
 800866c:	4343      	muls	r3, r0
 800866e:	2101      	movs	r1, #1
 8008670:	189b      	adds	r3, r3, r2
 8008672:	0035      	movs	r5, r6
 8008674:	e790      	b.n	8008598 <_vfiprintf_r+0xcc>
 8008676:	2301      	movs	r3, #1
 8008678:	425b      	negs	r3, r3
 800867a:	e7d0      	b.n	800861e <_vfiprintf_r+0x152>
 800867c:	2300      	movs	r3, #0
 800867e:	200a      	movs	r0, #10
 8008680:	001a      	movs	r2, r3
 8008682:	3501      	adds	r5, #1
 8008684:	6063      	str	r3, [r4, #4]
 8008686:	7829      	ldrb	r1, [r5, #0]
 8008688:	1c6e      	adds	r6, r5, #1
 800868a:	3930      	subs	r1, #48	; 0x30
 800868c:	2909      	cmp	r1, #9
 800868e:	d903      	bls.n	8008698 <_vfiprintf_r+0x1cc>
 8008690:	2b00      	cmp	r3, #0
 8008692:	d0c5      	beq.n	8008620 <_vfiprintf_r+0x154>
 8008694:	9209      	str	r2, [sp, #36]	; 0x24
 8008696:	e7c3      	b.n	8008620 <_vfiprintf_r+0x154>
 8008698:	4342      	muls	r2, r0
 800869a:	2301      	movs	r3, #1
 800869c:	1852      	adds	r2, r2, r1
 800869e:	0035      	movs	r5, r6
 80086a0:	e7f1      	b.n	8008686 <_vfiprintf_r+0x1ba>
 80086a2:	ab07      	add	r3, sp, #28
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	003a      	movs	r2, r7
 80086a8:	4b12      	ldr	r3, [pc, #72]	; (80086f4 <_vfiprintf_r+0x228>)
 80086aa:	0021      	movs	r1, r4
 80086ac:	9803      	ldr	r0, [sp, #12]
 80086ae:	e000      	b.n	80086b2 <_vfiprintf_r+0x1e6>
 80086b0:	bf00      	nop
 80086b2:	9004      	str	r0, [sp, #16]
 80086b4:	9b04      	ldr	r3, [sp, #16]
 80086b6:	3301      	adds	r3, #1
 80086b8:	d1d3      	bne.n	8008662 <_vfiprintf_r+0x196>
 80086ba:	89bb      	ldrh	r3, [r7, #12]
 80086bc:	065b      	lsls	r3, r3, #25
 80086be:	d500      	bpl.n	80086c2 <_vfiprintf_r+0x1f6>
 80086c0:	e784      	b.n	80085cc <_vfiprintf_r+0x100>
 80086c2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80086c4:	e784      	b.n	80085d0 <_vfiprintf_r+0x104>
 80086c6:	ab07      	add	r3, sp, #28
 80086c8:	9300      	str	r3, [sp, #0]
 80086ca:	003a      	movs	r2, r7
 80086cc:	4b09      	ldr	r3, [pc, #36]	; (80086f4 <_vfiprintf_r+0x228>)
 80086ce:	0021      	movs	r1, r4
 80086d0:	9803      	ldr	r0, [sp, #12]
 80086d2:	f000 f87f 	bl	80087d4 <_printf_i>
 80086d6:	e7ec      	b.n	80086b2 <_vfiprintf_r+0x1e6>
 80086d8:	0800949c 	.word	0x0800949c
 80086dc:	08009448 	.word	0x08009448
 80086e0:	080094bc 	.word	0x080094bc
 80086e4:	0800947c 	.word	0x0800947c
 80086e8:	0800944e 	.word	0x0800944e
 80086ec:	08009452 	.word	0x08009452
 80086f0:	00000000 	.word	0x00000000
 80086f4:	080084a7 	.word	0x080084a7

080086f8 <_printf_common>:
 80086f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086fa:	0015      	movs	r5, r2
 80086fc:	9301      	str	r3, [sp, #4]
 80086fe:	688a      	ldr	r2, [r1, #8]
 8008700:	690b      	ldr	r3, [r1, #16]
 8008702:	9000      	str	r0, [sp, #0]
 8008704:	000c      	movs	r4, r1
 8008706:	4293      	cmp	r3, r2
 8008708:	da00      	bge.n	800870c <_printf_common+0x14>
 800870a:	0013      	movs	r3, r2
 800870c:	0022      	movs	r2, r4
 800870e:	602b      	str	r3, [r5, #0]
 8008710:	3243      	adds	r2, #67	; 0x43
 8008712:	7812      	ldrb	r2, [r2, #0]
 8008714:	2a00      	cmp	r2, #0
 8008716:	d001      	beq.n	800871c <_printf_common+0x24>
 8008718:	3301      	adds	r3, #1
 800871a:	602b      	str	r3, [r5, #0]
 800871c:	6823      	ldr	r3, [r4, #0]
 800871e:	069b      	lsls	r3, r3, #26
 8008720:	d502      	bpl.n	8008728 <_printf_common+0x30>
 8008722:	682b      	ldr	r3, [r5, #0]
 8008724:	3302      	adds	r3, #2
 8008726:	602b      	str	r3, [r5, #0]
 8008728:	2706      	movs	r7, #6
 800872a:	6823      	ldr	r3, [r4, #0]
 800872c:	401f      	ands	r7, r3
 800872e:	d027      	beq.n	8008780 <_printf_common+0x88>
 8008730:	0023      	movs	r3, r4
 8008732:	3343      	adds	r3, #67	; 0x43
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	1e5a      	subs	r2, r3, #1
 8008738:	4193      	sbcs	r3, r2
 800873a:	6822      	ldr	r2, [r4, #0]
 800873c:	0692      	lsls	r2, r2, #26
 800873e:	d430      	bmi.n	80087a2 <_printf_common+0xaa>
 8008740:	0022      	movs	r2, r4
 8008742:	9901      	ldr	r1, [sp, #4]
 8008744:	3243      	adds	r2, #67	; 0x43
 8008746:	9800      	ldr	r0, [sp, #0]
 8008748:	9e08      	ldr	r6, [sp, #32]
 800874a:	47b0      	blx	r6
 800874c:	1c43      	adds	r3, r0, #1
 800874e:	d025      	beq.n	800879c <_printf_common+0xa4>
 8008750:	2306      	movs	r3, #6
 8008752:	6820      	ldr	r0, [r4, #0]
 8008754:	682a      	ldr	r2, [r5, #0]
 8008756:	68e1      	ldr	r1, [r4, #12]
 8008758:	4003      	ands	r3, r0
 800875a:	2500      	movs	r5, #0
 800875c:	2b04      	cmp	r3, #4
 800875e:	d103      	bne.n	8008768 <_printf_common+0x70>
 8008760:	1a8d      	subs	r5, r1, r2
 8008762:	43eb      	mvns	r3, r5
 8008764:	17db      	asrs	r3, r3, #31
 8008766:	401d      	ands	r5, r3
 8008768:	68a3      	ldr	r3, [r4, #8]
 800876a:	6922      	ldr	r2, [r4, #16]
 800876c:	4293      	cmp	r3, r2
 800876e:	dd01      	ble.n	8008774 <_printf_common+0x7c>
 8008770:	1a9b      	subs	r3, r3, r2
 8008772:	18ed      	adds	r5, r5, r3
 8008774:	2700      	movs	r7, #0
 8008776:	42bd      	cmp	r5, r7
 8008778:	d120      	bne.n	80087bc <_printf_common+0xc4>
 800877a:	2000      	movs	r0, #0
 800877c:	e010      	b.n	80087a0 <_printf_common+0xa8>
 800877e:	3701      	adds	r7, #1
 8008780:	68e3      	ldr	r3, [r4, #12]
 8008782:	682a      	ldr	r2, [r5, #0]
 8008784:	1a9b      	subs	r3, r3, r2
 8008786:	42bb      	cmp	r3, r7
 8008788:	ddd2      	ble.n	8008730 <_printf_common+0x38>
 800878a:	0022      	movs	r2, r4
 800878c:	2301      	movs	r3, #1
 800878e:	3219      	adds	r2, #25
 8008790:	9901      	ldr	r1, [sp, #4]
 8008792:	9800      	ldr	r0, [sp, #0]
 8008794:	9e08      	ldr	r6, [sp, #32]
 8008796:	47b0      	blx	r6
 8008798:	1c43      	adds	r3, r0, #1
 800879a:	d1f0      	bne.n	800877e <_printf_common+0x86>
 800879c:	2001      	movs	r0, #1
 800879e:	4240      	negs	r0, r0
 80087a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80087a2:	2030      	movs	r0, #48	; 0x30
 80087a4:	18e1      	adds	r1, r4, r3
 80087a6:	3143      	adds	r1, #67	; 0x43
 80087a8:	7008      	strb	r0, [r1, #0]
 80087aa:	0021      	movs	r1, r4
 80087ac:	1c5a      	adds	r2, r3, #1
 80087ae:	3145      	adds	r1, #69	; 0x45
 80087b0:	7809      	ldrb	r1, [r1, #0]
 80087b2:	18a2      	adds	r2, r4, r2
 80087b4:	3243      	adds	r2, #67	; 0x43
 80087b6:	3302      	adds	r3, #2
 80087b8:	7011      	strb	r1, [r2, #0]
 80087ba:	e7c1      	b.n	8008740 <_printf_common+0x48>
 80087bc:	0022      	movs	r2, r4
 80087be:	2301      	movs	r3, #1
 80087c0:	321a      	adds	r2, #26
 80087c2:	9901      	ldr	r1, [sp, #4]
 80087c4:	9800      	ldr	r0, [sp, #0]
 80087c6:	9e08      	ldr	r6, [sp, #32]
 80087c8:	47b0      	blx	r6
 80087ca:	1c43      	adds	r3, r0, #1
 80087cc:	d0e6      	beq.n	800879c <_printf_common+0xa4>
 80087ce:	3701      	adds	r7, #1
 80087d0:	e7d1      	b.n	8008776 <_printf_common+0x7e>
	...

080087d4 <_printf_i>:
 80087d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087d6:	b089      	sub	sp, #36	; 0x24
 80087d8:	9204      	str	r2, [sp, #16]
 80087da:	000a      	movs	r2, r1
 80087dc:	3243      	adds	r2, #67	; 0x43
 80087de:	9305      	str	r3, [sp, #20]
 80087e0:	9003      	str	r0, [sp, #12]
 80087e2:	9202      	str	r2, [sp, #8]
 80087e4:	7e0a      	ldrb	r2, [r1, #24]
 80087e6:	000c      	movs	r4, r1
 80087e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087ea:	2a6e      	cmp	r2, #110	; 0x6e
 80087ec:	d100      	bne.n	80087f0 <_printf_i+0x1c>
 80087ee:	e086      	b.n	80088fe <_printf_i+0x12a>
 80087f0:	d81f      	bhi.n	8008832 <_printf_i+0x5e>
 80087f2:	2a63      	cmp	r2, #99	; 0x63
 80087f4:	d033      	beq.n	800885e <_printf_i+0x8a>
 80087f6:	d808      	bhi.n	800880a <_printf_i+0x36>
 80087f8:	2a00      	cmp	r2, #0
 80087fa:	d100      	bne.n	80087fe <_printf_i+0x2a>
 80087fc:	e08c      	b.n	8008918 <_printf_i+0x144>
 80087fe:	2a58      	cmp	r2, #88	; 0x58
 8008800:	d04d      	beq.n	800889e <_printf_i+0xca>
 8008802:	0025      	movs	r5, r4
 8008804:	3542      	adds	r5, #66	; 0x42
 8008806:	702a      	strb	r2, [r5, #0]
 8008808:	e030      	b.n	800886c <_printf_i+0x98>
 800880a:	2a64      	cmp	r2, #100	; 0x64
 800880c:	d001      	beq.n	8008812 <_printf_i+0x3e>
 800880e:	2a69      	cmp	r2, #105	; 0x69
 8008810:	d1f7      	bne.n	8008802 <_printf_i+0x2e>
 8008812:	6819      	ldr	r1, [r3, #0]
 8008814:	6825      	ldr	r5, [r4, #0]
 8008816:	1d0a      	adds	r2, r1, #4
 8008818:	0628      	lsls	r0, r5, #24
 800881a:	d529      	bpl.n	8008870 <_printf_i+0x9c>
 800881c:	6808      	ldr	r0, [r1, #0]
 800881e:	601a      	str	r2, [r3, #0]
 8008820:	2800      	cmp	r0, #0
 8008822:	da03      	bge.n	800882c <_printf_i+0x58>
 8008824:	232d      	movs	r3, #45	; 0x2d
 8008826:	9a02      	ldr	r2, [sp, #8]
 8008828:	4240      	negs	r0, r0
 800882a:	7013      	strb	r3, [r2, #0]
 800882c:	4e6b      	ldr	r6, [pc, #428]	; (80089dc <_printf_i+0x208>)
 800882e:	270a      	movs	r7, #10
 8008830:	e04f      	b.n	80088d2 <_printf_i+0xfe>
 8008832:	2a73      	cmp	r2, #115	; 0x73
 8008834:	d074      	beq.n	8008920 <_printf_i+0x14c>
 8008836:	d808      	bhi.n	800884a <_printf_i+0x76>
 8008838:	2a6f      	cmp	r2, #111	; 0x6f
 800883a:	d01f      	beq.n	800887c <_printf_i+0xa8>
 800883c:	2a70      	cmp	r2, #112	; 0x70
 800883e:	d1e0      	bne.n	8008802 <_printf_i+0x2e>
 8008840:	2220      	movs	r2, #32
 8008842:	6809      	ldr	r1, [r1, #0]
 8008844:	430a      	orrs	r2, r1
 8008846:	6022      	str	r2, [r4, #0]
 8008848:	e003      	b.n	8008852 <_printf_i+0x7e>
 800884a:	2a75      	cmp	r2, #117	; 0x75
 800884c:	d016      	beq.n	800887c <_printf_i+0xa8>
 800884e:	2a78      	cmp	r2, #120	; 0x78
 8008850:	d1d7      	bne.n	8008802 <_printf_i+0x2e>
 8008852:	0022      	movs	r2, r4
 8008854:	2178      	movs	r1, #120	; 0x78
 8008856:	3245      	adds	r2, #69	; 0x45
 8008858:	7011      	strb	r1, [r2, #0]
 800885a:	4e61      	ldr	r6, [pc, #388]	; (80089e0 <_printf_i+0x20c>)
 800885c:	e022      	b.n	80088a4 <_printf_i+0xd0>
 800885e:	0025      	movs	r5, r4
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	3542      	adds	r5, #66	; 0x42
 8008864:	1d11      	adds	r1, r2, #4
 8008866:	6019      	str	r1, [r3, #0]
 8008868:	6813      	ldr	r3, [r2, #0]
 800886a:	702b      	strb	r3, [r5, #0]
 800886c:	2301      	movs	r3, #1
 800886e:	e065      	b.n	800893c <_printf_i+0x168>
 8008870:	6808      	ldr	r0, [r1, #0]
 8008872:	601a      	str	r2, [r3, #0]
 8008874:	0669      	lsls	r1, r5, #25
 8008876:	d5d3      	bpl.n	8008820 <_printf_i+0x4c>
 8008878:	b200      	sxth	r0, r0
 800887a:	e7d1      	b.n	8008820 <_printf_i+0x4c>
 800887c:	6819      	ldr	r1, [r3, #0]
 800887e:	6825      	ldr	r5, [r4, #0]
 8008880:	1d08      	adds	r0, r1, #4
 8008882:	6018      	str	r0, [r3, #0]
 8008884:	6808      	ldr	r0, [r1, #0]
 8008886:	062e      	lsls	r6, r5, #24
 8008888:	d505      	bpl.n	8008896 <_printf_i+0xc2>
 800888a:	4e54      	ldr	r6, [pc, #336]	; (80089dc <_printf_i+0x208>)
 800888c:	2708      	movs	r7, #8
 800888e:	2a6f      	cmp	r2, #111	; 0x6f
 8008890:	d01b      	beq.n	80088ca <_printf_i+0xf6>
 8008892:	270a      	movs	r7, #10
 8008894:	e019      	b.n	80088ca <_printf_i+0xf6>
 8008896:	066d      	lsls	r5, r5, #25
 8008898:	d5f7      	bpl.n	800888a <_printf_i+0xb6>
 800889a:	b280      	uxth	r0, r0
 800889c:	e7f5      	b.n	800888a <_printf_i+0xb6>
 800889e:	3145      	adds	r1, #69	; 0x45
 80088a0:	4e4e      	ldr	r6, [pc, #312]	; (80089dc <_printf_i+0x208>)
 80088a2:	700a      	strb	r2, [r1, #0]
 80088a4:	6818      	ldr	r0, [r3, #0]
 80088a6:	6822      	ldr	r2, [r4, #0]
 80088a8:	1d01      	adds	r1, r0, #4
 80088aa:	6800      	ldr	r0, [r0, #0]
 80088ac:	6019      	str	r1, [r3, #0]
 80088ae:	0615      	lsls	r5, r2, #24
 80088b0:	d521      	bpl.n	80088f6 <_printf_i+0x122>
 80088b2:	07d3      	lsls	r3, r2, #31
 80088b4:	d502      	bpl.n	80088bc <_printf_i+0xe8>
 80088b6:	2320      	movs	r3, #32
 80088b8:	431a      	orrs	r2, r3
 80088ba:	6022      	str	r2, [r4, #0]
 80088bc:	2710      	movs	r7, #16
 80088be:	2800      	cmp	r0, #0
 80088c0:	d103      	bne.n	80088ca <_printf_i+0xf6>
 80088c2:	2320      	movs	r3, #32
 80088c4:	6822      	ldr	r2, [r4, #0]
 80088c6:	439a      	bics	r2, r3
 80088c8:	6022      	str	r2, [r4, #0]
 80088ca:	0023      	movs	r3, r4
 80088cc:	2200      	movs	r2, #0
 80088ce:	3343      	adds	r3, #67	; 0x43
 80088d0:	701a      	strb	r2, [r3, #0]
 80088d2:	6863      	ldr	r3, [r4, #4]
 80088d4:	60a3      	str	r3, [r4, #8]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	db58      	blt.n	800898c <_printf_i+0x1b8>
 80088da:	2204      	movs	r2, #4
 80088dc:	6821      	ldr	r1, [r4, #0]
 80088de:	4391      	bics	r1, r2
 80088e0:	6021      	str	r1, [r4, #0]
 80088e2:	2800      	cmp	r0, #0
 80088e4:	d154      	bne.n	8008990 <_printf_i+0x1bc>
 80088e6:	9d02      	ldr	r5, [sp, #8]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d05a      	beq.n	80089a2 <_printf_i+0x1ce>
 80088ec:	0025      	movs	r5, r4
 80088ee:	7833      	ldrb	r3, [r6, #0]
 80088f0:	3542      	adds	r5, #66	; 0x42
 80088f2:	702b      	strb	r3, [r5, #0]
 80088f4:	e055      	b.n	80089a2 <_printf_i+0x1ce>
 80088f6:	0655      	lsls	r5, r2, #25
 80088f8:	d5db      	bpl.n	80088b2 <_printf_i+0xde>
 80088fa:	b280      	uxth	r0, r0
 80088fc:	e7d9      	b.n	80088b2 <_printf_i+0xde>
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	680d      	ldr	r5, [r1, #0]
 8008902:	1d10      	adds	r0, r2, #4
 8008904:	6949      	ldr	r1, [r1, #20]
 8008906:	6018      	str	r0, [r3, #0]
 8008908:	6813      	ldr	r3, [r2, #0]
 800890a:	062e      	lsls	r6, r5, #24
 800890c:	d501      	bpl.n	8008912 <_printf_i+0x13e>
 800890e:	6019      	str	r1, [r3, #0]
 8008910:	e002      	b.n	8008918 <_printf_i+0x144>
 8008912:	066d      	lsls	r5, r5, #25
 8008914:	d5fb      	bpl.n	800890e <_printf_i+0x13a>
 8008916:	8019      	strh	r1, [r3, #0]
 8008918:	2300      	movs	r3, #0
 800891a:	9d02      	ldr	r5, [sp, #8]
 800891c:	6123      	str	r3, [r4, #16]
 800891e:	e04f      	b.n	80089c0 <_printf_i+0x1ec>
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	1d11      	adds	r1, r2, #4
 8008924:	6019      	str	r1, [r3, #0]
 8008926:	6815      	ldr	r5, [r2, #0]
 8008928:	2100      	movs	r1, #0
 800892a:	6862      	ldr	r2, [r4, #4]
 800892c:	0028      	movs	r0, r5
 800892e:	f000 fb37 	bl	8008fa0 <memchr>
 8008932:	2800      	cmp	r0, #0
 8008934:	d001      	beq.n	800893a <_printf_i+0x166>
 8008936:	1b40      	subs	r0, r0, r5
 8008938:	6060      	str	r0, [r4, #4]
 800893a:	6863      	ldr	r3, [r4, #4]
 800893c:	6123      	str	r3, [r4, #16]
 800893e:	2300      	movs	r3, #0
 8008940:	9a02      	ldr	r2, [sp, #8]
 8008942:	7013      	strb	r3, [r2, #0]
 8008944:	e03c      	b.n	80089c0 <_printf_i+0x1ec>
 8008946:	6923      	ldr	r3, [r4, #16]
 8008948:	002a      	movs	r2, r5
 800894a:	9904      	ldr	r1, [sp, #16]
 800894c:	9803      	ldr	r0, [sp, #12]
 800894e:	9d05      	ldr	r5, [sp, #20]
 8008950:	47a8      	blx	r5
 8008952:	1c43      	adds	r3, r0, #1
 8008954:	d03e      	beq.n	80089d4 <_printf_i+0x200>
 8008956:	6823      	ldr	r3, [r4, #0]
 8008958:	079b      	lsls	r3, r3, #30
 800895a:	d415      	bmi.n	8008988 <_printf_i+0x1b4>
 800895c:	9b07      	ldr	r3, [sp, #28]
 800895e:	68e0      	ldr	r0, [r4, #12]
 8008960:	4298      	cmp	r0, r3
 8008962:	da39      	bge.n	80089d8 <_printf_i+0x204>
 8008964:	0018      	movs	r0, r3
 8008966:	e037      	b.n	80089d8 <_printf_i+0x204>
 8008968:	0022      	movs	r2, r4
 800896a:	2301      	movs	r3, #1
 800896c:	3219      	adds	r2, #25
 800896e:	9904      	ldr	r1, [sp, #16]
 8008970:	9803      	ldr	r0, [sp, #12]
 8008972:	9e05      	ldr	r6, [sp, #20]
 8008974:	47b0      	blx	r6
 8008976:	1c43      	adds	r3, r0, #1
 8008978:	d02c      	beq.n	80089d4 <_printf_i+0x200>
 800897a:	3501      	adds	r5, #1
 800897c:	68e3      	ldr	r3, [r4, #12]
 800897e:	9a07      	ldr	r2, [sp, #28]
 8008980:	1a9b      	subs	r3, r3, r2
 8008982:	42ab      	cmp	r3, r5
 8008984:	dcf0      	bgt.n	8008968 <_printf_i+0x194>
 8008986:	e7e9      	b.n	800895c <_printf_i+0x188>
 8008988:	2500      	movs	r5, #0
 800898a:	e7f7      	b.n	800897c <_printf_i+0x1a8>
 800898c:	2800      	cmp	r0, #0
 800898e:	d0ad      	beq.n	80088ec <_printf_i+0x118>
 8008990:	9d02      	ldr	r5, [sp, #8]
 8008992:	0039      	movs	r1, r7
 8008994:	f7f7 fc3e 	bl	8000214 <__aeabi_uidivmod>
 8008998:	5c73      	ldrb	r3, [r6, r1]
 800899a:	3d01      	subs	r5, #1
 800899c:	702b      	strb	r3, [r5, #0]
 800899e:	2800      	cmp	r0, #0
 80089a0:	d1f7      	bne.n	8008992 <_printf_i+0x1be>
 80089a2:	2f08      	cmp	r7, #8
 80089a4:	d109      	bne.n	80089ba <_printf_i+0x1e6>
 80089a6:	6823      	ldr	r3, [r4, #0]
 80089a8:	07db      	lsls	r3, r3, #31
 80089aa:	d506      	bpl.n	80089ba <_printf_i+0x1e6>
 80089ac:	6863      	ldr	r3, [r4, #4]
 80089ae:	6922      	ldr	r2, [r4, #16]
 80089b0:	4293      	cmp	r3, r2
 80089b2:	dc02      	bgt.n	80089ba <_printf_i+0x1e6>
 80089b4:	2330      	movs	r3, #48	; 0x30
 80089b6:	3d01      	subs	r5, #1
 80089b8:	702b      	strb	r3, [r5, #0]
 80089ba:	9b02      	ldr	r3, [sp, #8]
 80089bc:	1b5b      	subs	r3, r3, r5
 80089be:	6123      	str	r3, [r4, #16]
 80089c0:	9b05      	ldr	r3, [sp, #20]
 80089c2:	aa07      	add	r2, sp, #28
 80089c4:	9300      	str	r3, [sp, #0]
 80089c6:	0021      	movs	r1, r4
 80089c8:	9b04      	ldr	r3, [sp, #16]
 80089ca:	9803      	ldr	r0, [sp, #12]
 80089cc:	f7ff fe94 	bl	80086f8 <_printf_common>
 80089d0:	1c43      	adds	r3, r0, #1
 80089d2:	d1b8      	bne.n	8008946 <_printf_i+0x172>
 80089d4:	2001      	movs	r0, #1
 80089d6:	4240      	negs	r0, r0
 80089d8:	b009      	add	sp, #36	; 0x24
 80089da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089dc:	08009459 	.word	0x08009459
 80089e0:	0800946a 	.word	0x0800946a

080089e4 <_sbrk_r>:
 80089e4:	2300      	movs	r3, #0
 80089e6:	b570      	push	{r4, r5, r6, lr}
 80089e8:	4c06      	ldr	r4, [pc, #24]	; (8008a04 <_sbrk_r+0x20>)
 80089ea:	0005      	movs	r5, r0
 80089ec:	0008      	movs	r0, r1
 80089ee:	6023      	str	r3, [r4, #0]
 80089f0:	f7f9 f9d0 	bl	8001d94 <_sbrk>
 80089f4:	1c43      	adds	r3, r0, #1
 80089f6:	d103      	bne.n	8008a00 <_sbrk_r+0x1c>
 80089f8:	6823      	ldr	r3, [r4, #0]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d000      	beq.n	8008a00 <_sbrk_r+0x1c>
 80089fe:	602b      	str	r3, [r5, #0]
 8008a00:	bd70      	pop	{r4, r5, r6, pc}
 8008a02:	46c0      	nop			; (mov r8, r8)
 8008a04:	20000888 	.word	0x20000888

08008a08 <__swbuf_r>:
 8008a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a0a:	0005      	movs	r5, r0
 8008a0c:	000e      	movs	r6, r1
 8008a0e:	0014      	movs	r4, r2
 8008a10:	2800      	cmp	r0, #0
 8008a12:	d004      	beq.n	8008a1e <__swbuf_r+0x16>
 8008a14:	6983      	ldr	r3, [r0, #24]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d101      	bne.n	8008a1e <__swbuf_r+0x16>
 8008a1a:	f000 f9c1 	bl	8008da0 <__sinit>
 8008a1e:	4b22      	ldr	r3, [pc, #136]	; (8008aa8 <__swbuf_r+0xa0>)
 8008a20:	429c      	cmp	r4, r3
 8008a22:	d12d      	bne.n	8008a80 <__swbuf_r+0x78>
 8008a24:	686c      	ldr	r4, [r5, #4]
 8008a26:	69a3      	ldr	r3, [r4, #24]
 8008a28:	60a3      	str	r3, [r4, #8]
 8008a2a:	89a3      	ldrh	r3, [r4, #12]
 8008a2c:	071b      	lsls	r3, r3, #28
 8008a2e:	d531      	bpl.n	8008a94 <__swbuf_r+0x8c>
 8008a30:	6923      	ldr	r3, [r4, #16]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d02e      	beq.n	8008a94 <__swbuf_r+0x8c>
 8008a36:	6823      	ldr	r3, [r4, #0]
 8008a38:	6922      	ldr	r2, [r4, #16]
 8008a3a:	b2f7      	uxtb	r7, r6
 8008a3c:	1a98      	subs	r0, r3, r2
 8008a3e:	6963      	ldr	r3, [r4, #20]
 8008a40:	b2f6      	uxtb	r6, r6
 8008a42:	4283      	cmp	r3, r0
 8008a44:	dc05      	bgt.n	8008a52 <__swbuf_r+0x4a>
 8008a46:	0021      	movs	r1, r4
 8008a48:	0028      	movs	r0, r5
 8008a4a:	f000 f93b 	bl	8008cc4 <_fflush_r>
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	d126      	bne.n	8008aa0 <__swbuf_r+0x98>
 8008a52:	68a3      	ldr	r3, [r4, #8]
 8008a54:	3001      	adds	r0, #1
 8008a56:	3b01      	subs	r3, #1
 8008a58:	60a3      	str	r3, [r4, #8]
 8008a5a:	6823      	ldr	r3, [r4, #0]
 8008a5c:	1c5a      	adds	r2, r3, #1
 8008a5e:	6022      	str	r2, [r4, #0]
 8008a60:	701f      	strb	r7, [r3, #0]
 8008a62:	6963      	ldr	r3, [r4, #20]
 8008a64:	4283      	cmp	r3, r0
 8008a66:	d004      	beq.n	8008a72 <__swbuf_r+0x6a>
 8008a68:	89a3      	ldrh	r3, [r4, #12]
 8008a6a:	07db      	lsls	r3, r3, #31
 8008a6c:	d51a      	bpl.n	8008aa4 <__swbuf_r+0x9c>
 8008a6e:	2e0a      	cmp	r6, #10
 8008a70:	d118      	bne.n	8008aa4 <__swbuf_r+0x9c>
 8008a72:	0021      	movs	r1, r4
 8008a74:	0028      	movs	r0, r5
 8008a76:	f000 f925 	bl	8008cc4 <_fflush_r>
 8008a7a:	2800      	cmp	r0, #0
 8008a7c:	d012      	beq.n	8008aa4 <__swbuf_r+0x9c>
 8008a7e:	e00f      	b.n	8008aa0 <__swbuf_r+0x98>
 8008a80:	4b0a      	ldr	r3, [pc, #40]	; (8008aac <__swbuf_r+0xa4>)
 8008a82:	429c      	cmp	r4, r3
 8008a84:	d101      	bne.n	8008a8a <__swbuf_r+0x82>
 8008a86:	68ac      	ldr	r4, [r5, #8]
 8008a88:	e7cd      	b.n	8008a26 <__swbuf_r+0x1e>
 8008a8a:	4b09      	ldr	r3, [pc, #36]	; (8008ab0 <__swbuf_r+0xa8>)
 8008a8c:	429c      	cmp	r4, r3
 8008a8e:	d1ca      	bne.n	8008a26 <__swbuf_r+0x1e>
 8008a90:	68ec      	ldr	r4, [r5, #12]
 8008a92:	e7c8      	b.n	8008a26 <__swbuf_r+0x1e>
 8008a94:	0021      	movs	r1, r4
 8008a96:	0028      	movs	r0, r5
 8008a98:	f000 f80c 	bl	8008ab4 <__swsetup_r>
 8008a9c:	2800      	cmp	r0, #0
 8008a9e:	d0ca      	beq.n	8008a36 <__swbuf_r+0x2e>
 8008aa0:	2601      	movs	r6, #1
 8008aa2:	4276      	negs	r6, r6
 8008aa4:	0030      	movs	r0, r6
 8008aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008aa8:	0800949c 	.word	0x0800949c
 8008aac:	080094bc 	.word	0x080094bc
 8008ab0:	0800947c 	.word	0x0800947c

08008ab4 <__swsetup_r>:
 8008ab4:	4b36      	ldr	r3, [pc, #216]	; (8008b90 <__swsetup_r+0xdc>)
 8008ab6:	b570      	push	{r4, r5, r6, lr}
 8008ab8:	681d      	ldr	r5, [r3, #0]
 8008aba:	0006      	movs	r6, r0
 8008abc:	000c      	movs	r4, r1
 8008abe:	2d00      	cmp	r5, #0
 8008ac0:	d005      	beq.n	8008ace <__swsetup_r+0x1a>
 8008ac2:	69ab      	ldr	r3, [r5, #24]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d102      	bne.n	8008ace <__swsetup_r+0x1a>
 8008ac8:	0028      	movs	r0, r5
 8008aca:	f000 f969 	bl	8008da0 <__sinit>
 8008ace:	4b31      	ldr	r3, [pc, #196]	; (8008b94 <__swsetup_r+0xe0>)
 8008ad0:	429c      	cmp	r4, r3
 8008ad2:	d10f      	bne.n	8008af4 <__swsetup_r+0x40>
 8008ad4:	686c      	ldr	r4, [r5, #4]
 8008ad6:	230c      	movs	r3, #12
 8008ad8:	5ee2      	ldrsh	r2, [r4, r3]
 8008ada:	b293      	uxth	r3, r2
 8008adc:	0719      	lsls	r1, r3, #28
 8008ade:	d42d      	bmi.n	8008b3c <__swsetup_r+0x88>
 8008ae0:	06d9      	lsls	r1, r3, #27
 8008ae2:	d411      	bmi.n	8008b08 <__swsetup_r+0x54>
 8008ae4:	2309      	movs	r3, #9
 8008ae6:	2001      	movs	r0, #1
 8008ae8:	6033      	str	r3, [r6, #0]
 8008aea:	3337      	adds	r3, #55	; 0x37
 8008aec:	4313      	orrs	r3, r2
 8008aee:	81a3      	strh	r3, [r4, #12]
 8008af0:	4240      	negs	r0, r0
 8008af2:	bd70      	pop	{r4, r5, r6, pc}
 8008af4:	4b28      	ldr	r3, [pc, #160]	; (8008b98 <__swsetup_r+0xe4>)
 8008af6:	429c      	cmp	r4, r3
 8008af8:	d101      	bne.n	8008afe <__swsetup_r+0x4a>
 8008afa:	68ac      	ldr	r4, [r5, #8]
 8008afc:	e7eb      	b.n	8008ad6 <__swsetup_r+0x22>
 8008afe:	4b27      	ldr	r3, [pc, #156]	; (8008b9c <__swsetup_r+0xe8>)
 8008b00:	429c      	cmp	r4, r3
 8008b02:	d1e8      	bne.n	8008ad6 <__swsetup_r+0x22>
 8008b04:	68ec      	ldr	r4, [r5, #12]
 8008b06:	e7e6      	b.n	8008ad6 <__swsetup_r+0x22>
 8008b08:	075b      	lsls	r3, r3, #29
 8008b0a:	d513      	bpl.n	8008b34 <__swsetup_r+0x80>
 8008b0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b0e:	2900      	cmp	r1, #0
 8008b10:	d008      	beq.n	8008b24 <__swsetup_r+0x70>
 8008b12:	0023      	movs	r3, r4
 8008b14:	3344      	adds	r3, #68	; 0x44
 8008b16:	4299      	cmp	r1, r3
 8008b18:	d002      	beq.n	8008b20 <__swsetup_r+0x6c>
 8008b1a:	0030      	movs	r0, r6
 8008b1c:	f7ff fc06 	bl	800832c <_free_r>
 8008b20:	2300      	movs	r3, #0
 8008b22:	6363      	str	r3, [r4, #52]	; 0x34
 8008b24:	2224      	movs	r2, #36	; 0x24
 8008b26:	89a3      	ldrh	r3, [r4, #12]
 8008b28:	4393      	bics	r3, r2
 8008b2a:	81a3      	strh	r3, [r4, #12]
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	6063      	str	r3, [r4, #4]
 8008b30:	6923      	ldr	r3, [r4, #16]
 8008b32:	6023      	str	r3, [r4, #0]
 8008b34:	2308      	movs	r3, #8
 8008b36:	89a2      	ldrh	r2, [r4, #12]
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	81a3      	strh	r3, [r4, #12]
 8008b3c:	6923      	ldr	r3, [r4, #16]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d10b      	bne.n	8008b5a <__swsetup_r+0xa6>
 8008b42:	21a0      	movs	r1, #160	; 0xa0
 8008b44:	2280      	movs	r2, #128	; 0x80
 8008b46:	89a3      	ldrh	r3, [r4, #12]
 8008b48:	0089      	lsls	r1, r1, #2
 8008b4a:	0092      	lsls	r2, r2, #2
 8008b4c:	400b      	ands	r3, r1
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d003      	beq.n	8008b5a <__swsetup_r+0xa6>
 8008b52:	0021      	movs	r1, r4
 8008b54:	0030      	movs	r0, r6
 8008b56:	f000 f9df 	bl	8008f18 <__smakebuf_r>
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	89a2      	ldrh	r2, [r4, #12]
 8008b5e:	4013      	ands	r3, r2
 8008b60:	d011      	beq.n	8008b86 <__swsetup_r+0xd2>
 8008b62:	2300      	movs	r3, #0
 8008b64:	60a3      	str	r3, [r4, #8]
 8008b66:	6963      	ldr	r3, [r4, #20]
 8008b68:	425b      	negs	r3, r3
 8008b6a:	61a3      	str	r3, [r4, #24]
 8008b6c:	2000      	movs	r0, #0
 8008b6e:	6923      	ldr	r3, [r4, #16]
 8008b70:	4283      	cmp	r3, r0
 8008b72:	d1be      	bne.n	8008af2 <__swsetup_r+0x3e>
 8008b74:	230c      	movs	r3, #12
 8008b76:	5ee2      	ldrsh	r2, [r4, r3]
 8008b78:	0613      	lsls	r3, r2, #24
 8008b7a:	d5ba      	bpl.n	8008af2 <__swsetup_r+0x3e>
 8008b7c:	2340      	movs	r3, #64	; 0x40
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	81a3      	strh	r3, [r4, #12]
 8008b82:	3801      	subs	r0, #1
 8008b84:	e7b5      	b.n	8008af2 <__swsetup_r+0x3e>
 8008b86:	0792      	lsls	r2, r2, #30
 8008b88:	d400      	bmi.n	8008b8c <__swsetup_r+0xd8>
 8008b8a:	6963      	ldr	r3, [r4, #20]
 8008b8c:	60a3      	str	r3, [r4, #8]
 8008b8e:	e7ed      	b.n	8008b6c <__swsetup_r+0xb8>
 8008b90:	2000000c 	.word	0x2000000c
 8008b94:	0800949c 	.word	0x0800949c
 8008b98:	080094bc 	.word	0x080094bc
 8008b9c:	0800947c 	.word	0x0800947c

08008ba0 <abort>:
 8008ba0:	b510      	push	{r4, lr}
 8008ba2:	2006      	movs	r0, #6
 8008ba4:	f000 fa34 	bl	8009010 <raise>
 8008ba8:	2001      	movs	r0, #1
 8008baa:	f7f9 f881 	bl	8001cb0 <_exit>
	...

08008bb0 <__sflush_r>:
 8008bb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bb2:	898a      	ldrh	r2, [r1, #12]
 8008bb4:	0005      	movs	r5, r0
 8008bb6:	000c      	movs	r4, r1
 8008bb8:	0713      	lsls	r3, r2, #28
 8008bba:	d460      	bmi.n	8008c7e <__sflush_r+0xce>
 8008bbc:	684b      	ldr	r3, [r1, #4]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	dc04      	bgt.n	8008bcc <__sflush_r+0x1c>
 8008bc2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	dc01      	bgt.n	8008bcc <__sflush_r+0x1c>
 8008bc8:	2000      	movs	r0, #0
 8008bca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008bcc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008bce:	2f00      	cmp	r7, #0
 8008bd0:	d0fa      	beq.n	8008bc8 <__sflush_r+0x18>
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	682e      	ldr	r6, [r5, #0]
 8008bd6:	602b      	str	r3, [r5, #0]
 8008bd8:	2380      	movs	r3, #128	; 0x80
 8008bda:	015b      	lsls	r3, r3, #5
 8008bdc:	6a21      	ldr	r1, [r4, #32]
 8008bde:	401a      	ands	r2, r3
 8008be0:	d034      	beq.n	8008c4c <__sflush_r+0x9c>
 8008be2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008be4:	89a3      	ldrh	r3, [r4, #12]
 8008be6:	075b      	lsls	r3, r3, #29
 8008be8:	d506      	bpl.n	8008bf8 <__sflush_r+0x48>
 8008bea:	6863      	ldr	r3, [r4, #4]
 8008bec:	1ac0      	subs	r0, r0, r3
 8008bee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d001      	beq.n	8008bf8 <__sflush_r+0x48>
 8008bf4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008bf6:	1ac0      	subs	r0, r0, r3
 8008bf8:	0002      	movs	r2, r0
 8008bfa:	6a21      	ldr	r1, [r4, #32]
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	0028      	movs	r0, r5
 8008c00:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008c02:	47b8      	blx	r7
 8008c04:	89a1      	ldrh	r1, [r4, #12]
 8008c06:	1c43      	adds	r3, r0, #1
 8008c08:	d106      	bne.n	8008c18 <__sflush_r+0x68>
 8008c0a:	682b      	ldr	r3, [r5, #0]
 8008c0c:	2b1d      	cmp	r3, #29
 8008c0e:	d830      	bhi.n	8008c72 <__sflush_r+0xc2>
 8008c10:	4a2b      	ldr	r2, [pc, #172]	; (8008cc0 <__sflush_r+0x110>)
 8008c12:	40da      	lsrs	r2, r3
 8008c14:	07d3      	lsls	r3, r2, #31
 8008c16:	d52c      	bpl.n	8008c72 <__sflush_r+0xc2>
 8008c18:	2300      	movs	r3, #0
 8008c1a:	6063      	str	r3, [r4, #4]
 8008c1c:	6923      	ldr	r3, [r4, #16]
 8008c1e:	6023      	str	r3, [r4, #0]
 8008c20:	04cb      	lsls	r3, r1, #19
 8008c22:	d505      	bpl.n	8008c30 <__sflush_r+0x80>
 8008c24:	1c43      	adds	r3, r0, #1
 8008c26:	d102      	bne.n	8008c2e <__sflush_r+0x7e>
 8008c28:	682b      	ldr	r3, [r5, #0]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d100      	bne.n	8008c30 <__sflush_r+0x80>
 8008c2e:	6560      	str	r0, [r4, #84]	; 0x54
 8008c30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c32:	602e      	str	r6, [r5, #0]
 8008c34:	2900      	cmp	r1, #0
 8008c36:	d0c7      	beq.n	8008bc8 <__sflush_r+0x18>
 8008c38:	0023      	movs	r3, r4
 8008c3a:	3344      	adds	r3, #68	; 0x44
 8008c3c:	4299      	cmp	r1, r3
 8008c3e:	d002      	beq.n	8008c46 <__sflush_r+0x96>
 8008c40:	0028      	movs	r0, r5
 8008c42:	f7ff fb73 	bl	800832c <_free_r>
 8008c46:	2000      	movs	r0, #0
 8008c48:	6360      	str	r0, [r4, #52]	; 0x34
 8008c4a:	e7be      	b.n	8008bca <__sflush_r+0x1a>
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	0028      	movs	r0, r5
 8008c50:	47b8      	blx	r7
 8008c52:	1c43      	adds	r3, r0, #1
 8008c54:	d1c6      	bne.n	8008be4 <__sflush_r+0x34>
 8008c56:	682b      	ldr	r3, [r5, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d0c3      	beq.n	8008be4 <__sflush_r+0x34>
 8008c5c:	2b1d      	cmp	r3, #29
 8008c5e:	d001      	beq.n	8008c64 <__sflush_r+0xb4>
 8008c60:	2b16      	cmp	r3, #22
 8008c62:	d101      	bne.n	8008c68 <__sflush_r+0xb8>
 8008c64:	602e      	str	r6, [r5, #0]
 8008c66:	e7af      	b.n	8008bc8 <__sflush_r+0x18>
 8008c68:	2340      	movs	r3, #64	; 0x40
 8008c6a:	89a2      	ldrh	r2, [r4, #12]
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	81a3      	strh	r3, [r4, #12]
 8008c70:	e7ab      	b.n	8008bca <__sflush_r+0x1a>
 8008c72:	2340      	movs	r3, #64	; 0x40
 8008c74:	430b      	orrs	r3, r1
 8008c76:	2001      	movs	r0, #1
 8008c78:	81a3      	strh	r3, [r4, #12]
 8008c7a:	4240      	negs	r0, r0
 8008c7c:	e7a5      	b.n	8008bca <__sflush_r+0x1a>
 8008c7e:	690f      	ldr	r7, [r1, #16]
 8008c80:	2f00      	cmp	r7, #0
 8008c82:	d0a1      	beq.n	8008bc8 <__sflush_r+0x18>
 8008c84:	680b      	ldr	r3, [r1, #0]
 8008c86:	600f      	str	r7, [r1, #0]
 8008c88:	1bdb      	subs	r3, r3, r7
 8008c8a:	9301      	str	r3, [sp, #4]
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	0792      	lsls	r2, r2, #30
 8008c90:	d100      	bne.n	8008c94 <__sflush_r+0xe4>
 8008c92:	694b      	ldr	r3, [r1, #20]
 8008c94:	60a3      	str	r3, [r4, #8]
 8008c96:	9b01      	ldr	r3, [sp, #4]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	dc00      	bgt.n	8008c9e <__sflush_r+0xee>
 8008c9c:	e794      	b.n	8008bc8 <__sflush_r+0x18>
 8008c9e:	9b01      	ldr	r3, [sp, #4]
 8008ca0:	003a      	movs	r2, r7
 8008ca2:	6a21      	ldr	r1, [r4, #32]
 8008ca4:	0028      	movs	r0, r5
 8008ca6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ca8:	47b0      	blx	r6
 8008caa:	2800      	cmp	r0, #0
 8008cac:	dc03      	bgt.n	8008cb6 <__sflush_r+0x106>
 8008cae:	2340      	movs	r3, #64	; 0x40
 8008cb0:	89a2      	ldrh	r2, [r4, #12]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	e7df      	b.n	8008c76 <__sflush_r+0xc6>
 8008cb6:	9b01      	ldr	r3, [sp, #4]
 8008cb8:	183f      	adds	r7, r7, r0
 8008cba:	1a1b      	subs	r3, r3, r0
 8008cbc:	9301      	str	r3, [sp, #4]
 8008cbe:	e7ea      	b.n	8008c96 <__sflush_r+0xe6>
 8008cc0:	20400001 	.word	0x20400001

08008cc4 <_fflush_r>:
 8008cc4:	690b      	ldr	r3, [r1, #16]
 8008cc6:	b570      	push	{r4, r5, r6, lr}
 8008cc8:	0005      	movs	r5, r0
 8008cca:	000c      	movs	r4, r1
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d101      	bne.n	8008cd4 <_fflush_r+0x10>
 8008cd0:	2000      	movs	r0, #0
 8008cd2:	bd70      	pop	{r4, r5, r6, pc}
 8008cd4:	2800      	cmp	r0, #0
 8008cd6:	d004      	beq.n	8008ce2 <_fflush_r+0x1e>
 8008cd8:	6983      	ldr	r3, [r0, #24]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d101      	bne.n	8008ce2 <_fflush_r+0x1e>
 8008cde:	f000 f85f 	bl	8008da0 <__sinit>
 8008ce2:	4b0b      	ldr	r3, [pc, #44]	; (8008d10 <_fflush_r+0x4c>)
 8008ce4:	429c      	cmp	r4, r3
 8008ce6:	d109      	bne.n	8008cfc <_fflush_r+0x38>
 8008ce8:	686c      	ldr	r4, [r5, #4]
 8008cea:	220c      	movs	r2, #12
 8008cec:	5ea3      	ldrsh	r3, [r4, r2]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d0ee      	beq.n	8008cd0 <_fflush_r+0xc>
 8008cf2:	0021      	movs	r1, r4
 8008cf4:	0028      	movs	r0, r5
 8008cf6:	f7ff ff5b 	bl	8008bb0 <__sflush_r>
 8008cfa:	e7ea      	b.n	8008cd2 <_fflush_r+0xe>
 8008cfc:	4b05      	ldr	r3, [pc, #20]	; (8008d14 <_fflush_r+0x50>)
 8008cfe:	429c      	cmp	r4, r3
 8008d00:	d101      	bne.n	8008d06 <_fflush_r+0x42>
 8008d02:	68ac      	ldr	r4, [r5, #8]
 8008d04:	e7f1      	b.n	8008cea <_fflush_r+0x26>
 8008d06:	4b04      	ldr	r3, [pc, #16]	; (8008d18 <_fflush_r+0x54>)
 8008d08:	429c      	cmp	r4, r3
 8008d0a:	d1ee      	bne.n	8008cea <_fflush_r+0x26>
 8008d0c:	68ec      	ldr	r4, [r5, #12]
 8008d0e:	e7ec      	b.n	8008cea <_fflush_r+0x26>
 8008d10:	0800949c 	.word	0x0800949c
 8008d14:	080094bc 	.word	0x080094bc
 8008d18:	0800947c 	.word	0x0800947c

08008d1c <std>:
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	b510      	push	{r4, lr}
 8008d20:	0004      	movs	r4, r0
 8008d22:	6003      	str	r3, [r0, #0]
 8008d24:	6043      	str	r3, [r0, #4]
 8008d26:	6083      	str	r3, [r0, #8]
 8008d28:	8181      	strh	r1, [r0, #12]
 8008d2a:	6643      	str	r3, [r0, #100]	; 0x64
 8008d2c:	81c2      	strh	r2, [r0, #14]
 8008d2e:	6103      	str	r3, [r0, #16]
 8008d30:	6143      	str	r3, [r0, #20]
 8008d32:	6183      	str	r3, [r0, #24]
 8008d34:	0019      	movs	r1, r3
 8008d36:	2208      	movs	r2, #8
 8008d38:	305c      	adds	r0, #92	; 0x5c
 8008d3a:	f7ff fae0 	bl	80082fe <memset>
 8008d3e:	4b05      	ldr	r3, [pc, #20]	; (8008d54 <std+0x38>)
 8008d40:	6224      	str	r4, [r4, #32]
 8008d42:	6263      	str	r3, [r4, #36]	; 0x24
 8008d44:	4b04      	ldr	r3, [pc, #16]	; (8008d58 <std+0x3c>)
 8008d46:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d48:	4b04      	ldr	r3, [pc, #16]	; (8008d5c <std+0x40>)
 8008d4a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d4c:	4b04      	ldr	r3, [pc, #16]	; (8008d60 <std+0x44>)
 8008d4e:	6323      	str	r3, [r4, #48]	; 0x30
 8008d50:	bd10      	pop	{r4, pc}
 8008d52:	46c0      	nop			; (mov r8, r8)
 8008d54:	08009051 	.word	0x08009051
 8008d58:	08009079 	.word	0x08009079
 8008d5c:	080090b1 	.word	0x080090b1
 8008d60:	080090dd 	.word	0x080090dd

08008d64 <_cleanup_r>:
 8008d64:	b510      	push	{r4, lr}
 8008d66:	4902      	ldr	r1, [pc, #8]	; (8008d70 <_cleanup_r+0xc>)
 8008d68:	f000 f88c 	bl	8008e84 <_fwalk_reent>
 8008d6c:	bd10      	pop	{r4, pc}
 8008d6e:	46c0      	nop			; (mov r8, r8)
 8008d70:	08008cc5 	.word	0x08008cc5

08008d74 <__sfmoreglue>:
 8008d74:	b570      	push	{r4, r5, r6, lr}
 8008d76:	2568      	movs	r5, #104	; 0x68
 8008d78:	1e4a      	subs	r2, r1, #1
 8008d7a:	4355      	muls	r5, r2
 8008d7c:	000e      	movs	r6, r1
 8008d7e:	0029      	movs	r1, r5
 8008d80:	3174      	adds	r1, #116	; 0x74
 8008d82:	f7ff fb1d 	bl	80083c0 <_malloc_r>
 8008d86:	1e04      	subs	r4, r0, #0
 8008d88:	d008      	beq.n	8008d9c <__sfmoreglue+0x28>
 8008d8a:	2100      	movs	r1, #0
 8008d8c:	002a      	movs	r2, r5
 8008d8e:	6001      	str	r1, [r0, #0]
 8008d90:	6046      	str	r6, [r0, #4]
 8008d92:	300c      	adds	r0, #12
 8008d94:	60a0      	str	r0, [r4, #8]
 8008d96:	3268      	adds	r2, #104	; 0x68
 8008d98:	f7ff fab1 	bl	80082fe <memset>
 8008d9c:	0020      	movs	r0, r4
 8008d9e:	bd70      	pop	{r4, r5, r6, pc}

08008da0 <__sinit>:
 8008da0:	6983      	ldr	r3, [r0, #24]
 8008da2:	b513      	push	{r0, r1, r4, lr}
 8008da4:	0004      	movs	r4, r0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d128      	bne.n	8008dfc <__sinit+0x5c>
 8008daa:	6483      	str	r3, [r0, #72]	; 0x48
 8008dac:	64c3      	str	r3, [r0, #76]	; 0x4c
 8008dae:	6503      	str	r3, [r0, #80]	; 0x50
 8008db0:	4b13      	ldr	r3, [pc, #76]	; (8008e00 <__sinit+0x60>)
 8008db2:	4a14      	ldr	r2, [pc, #80]	; (8008e04 <__sinit+0x64>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	6282      	str	r2, [r0, #40]	; 0x28
 8008db8:	9301      	str	r3, [sp, #4]
 8008dba:	4298      	cmp	r0, r3
 8008dbc:	d101      	bne.n	8008dc2 <__sinit+0x22>
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	6183      	str	r3, [r0, #24]
 8008dc2:	0020      	movs	r0, r4
 8008dc4:	f000 f820 	bl	8008e08 <__sfp>
 8008dc8:	6060      	str	r0, [r4, #4]
 8008dca:	0020      	movs	r0, r4
 8008dcc:	f000 f81c 	bl	8008e08 <__sfp>
 8008dd0:	60a0      	str	r0, [r4, #8]
 8008dd2:	0020      	movs	r0, r4
 8008dd4:	f000 f818 	bl	8008e08 <__sfp>
 8008dd8:	2200      	movs	r2, #0
 8008dda:	60e0      	str	r0, [r4, #12]
 8008ddc:	2104      	movs	r1, #4
 8008dde:	6860      	ldr	r0, [r4, #4]
 8008de0:	f7ff ff9c 	bl	8008d1c <std>
 8008de4:	2201      	movs	r2, #1
 8008de6:	2109      	movs	r1, #9
 8008de8:	68a0      	ldr	r0, [r4, #8]
 8008dea:	f7ff ff97 	bl	8008d1c <std>
 8008dee:	2202      	movs	r2, #2
 8008df0:	2112      	movs	r1, #18
 8008df2:	68e0      	ldr	r0, [r4, #12]
 8008df4:	f7ff ff92 	bl	8008d1c <std>
 8008df8:	2301      	movs	r3, #1
 8008dfa:	61a3      	str	r3, [r4, #24]
 8008dfc:	bd13      	pop	{r0, r1, r4, pc}
 8008dfe:	46c0      	nop			; (mov r8, r8)
 8008e00:	08009444 	.word	0x08009444
 8008e04:	08008d65 	.word	0x08008d65

08008e08 <__sfp>:
 8008e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e0a:	4b1c      	ldr	r3, [pc, #112]	; (8008e7c <__sfp+0x74>)
 8008e0c:	0007      	movs	r7, r0
 8008e0e:	681e      	ldr	r6, [r3, #0]
 8008e10:	69b3      	ldr	r3, [r6, #24]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d102      	bne.n	8008e1c <__sfp+0x14>
 8008e16:	0030      	movs	r0, r6
 8008e18:	f7ff ffc2 	bl	8008da0 <__sinit>
 8008e1c:	3648      	adds	r6, #72	; 0x48
 8008e1e:	68b4      	ldr	r4, [r6, #8]
 8008e20:	6873      	ldr	r3, [r6, #4]
 8008e22:	3b01      	subs	r3, #1
 8008e24:	d504      	bpl.n	8008e30 <__sfp+0x28>
 8008e26:	6833      	ldr	r3, [r6, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d007      	beq.n	8008e3c <__sfp+0x34>
 8008e2c:	6836      	ldr	r6, [r6, #0]
 8008e2e:	e7f6      	b.n	8008e1e <__sfp+0x16>
 8008e30:	220c      	movs	r2, #12
 8008e32:	5ea5      	ldrsh	r5, [r4, r2]
 8008e34:	2d00      	cmp	r5, #0
 8008e36:	d00d      	beq.n	8008e54 <__sfp+0x4c>
 8008e38:	3468      	adds	r4, #104	; 0x68
 8008e3a:	e7f2      	b.n	8008e22 <__sfp+0x1a>
 8008e3c:	2104      	movs	r1, #4
 8008e3e:	0038      	movs	r0, r7
 8008e40:	f7ff ff98 	bl	8008d74 <__sfmoreglue>
 8008e44:	6030      	str	r0, [r6, #0]
 8008e46:	2800      	cmp	r0, #0
 8008e48:	d1f0      	bne.n	8008e2c <__sfp+0x24>
 8008e4a:	230c      	movs	r3, #12
 8008e4c:	0004      	movs	r4, r0
 8008e4e:	603b      	str	r3, [r7, #0]
 8008e50:	0020      	movs	r0, r4
 8008e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e54:	0020      	movs	r0, r4
 8008e56:	4b0a      	ldr	r3, [pc, #40]	; (8008e80 <__sfp+0x78>)
 8008e58:	6665      	str	r5, [r4, #100]	; 0x64
 8008e5a:	6025      	str	r5, [r4, #0]
 8008e5c:	6065      	str	r5, [r4, #4]
 8008e5e:	60a5      	str	r5, [r4, #8]
 8008e60:	60e3      	str	r3, [r4, #12]
 8008e62:	6125      	str	r5, [r4, #16]
 8008e64:	6165      	str	r5, [r4, #20]
 8008e66:	61a5      	str	r5, [r4, #24]
 8008e68:	2208      	movs	r2, #8
 8008e6a:	0029      	movs	r1, r5
 8008e6c:	305c      	adds	r0, #92	; 0x5c
 8008e6e:	f7ff fa46 	bl	80082fe <memset>
 8008e72:	6365      	str	r5, [r4, #52]	; 0x34
 8008e74:	63a5      	str	r5, [r4, #56]	; 0x38
 8008e76:	64a5      	str	r5, [r4, #72]	; 0x48
 8008e78:	64e5      	str	r5, [r4, #76]	; 0x4c
 8008e7a:	e7e9      	b.n	8008e50 <__sfp+0x48>
 8008e7c:	08009444 	.word	0x08009444
 8008e80:	ffff0001 	.word	0xffff0001

08008e84 <_fwalk_reent>:
 8008e84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e86:	0004      	movs	r4, r0
 8008e88:	0007      	movs	r7, r0
 8008e8a:	2600      	movs	r6, #0
 8008e8c:	9101      	str	r1, [sp, #4]
 8008e8e:	3448      	adds	r4, #72	; 0x48
 8008e90:	2c00      	cmp	r4, #0
 8008e92:	d101      	bne.n	8008e98 <_fwalk_reent+0x14>
 8008e94:	0030      	movs	r0, r6
 8008e96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008e98:	6863      	ldr	r3, [r4, #4]
 8008e9a:	68a5      	ldr	r5, [r4, #8]
 8008e9c:	9300      	str	r3, [sp, #0]
 8008e9e:	9b00      	ldr	r3, [sp, #0]
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	9300      	str	r3, [sp, #0]
 8008ea4:	d501      	bpl.n	8008eaa <_fwalk_reent+0x26>
 8008ea6:	6824      	ldr	r4, [r4, #0]
 8008ea8:	e7f2      	b.n	8008e90 <_fwalk_reent+0xc>
 8008eaa:	89ab      	ldrh	r3, [r5, #12]
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d908      	bls.n	8008ec2 <_fwalk_reent+0x3e>
 8008eb0:	220e      	movs	r2, #14
 8008eb2:	5eab      	ldrsh	r3, [r5, r2]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	d004      	beq.n	8008ec2 <_fwalk_reent+0x3e>
 8008eb8:	0029      	movs	r1, r5
 8008eba:	0038      	movs	r0, r7
 8008ebc:	9b01      	ldr	r3, [sp, #4]
 8008ebe:	4798      	blx	r3
 8008ec0:	4306      	orrs	r6, r0
 8008ec2:	3568      	adds	r5, #104	; 0x68
 8008ec4:	e7eb      	b.n	8008e9e <_fwalk_reent+0x1a>
	...

08008ec8 <__swhatbuf_r>:
 8008ec8:	b570      	push	{r4, r5, r6, lr}
 8008eca:	000e      	movs	r6, r1
 8008ecc:	001d      	movs	r5, r3
 8008ece:	230e      	movs	r3, #14
 8008ed0:	5ec9      	ldrsh	r1, [r1, r3]
 8008ed2:	b096      	sub	sp, #88	; 0x58
 8008ed4:	0014      	movs	r4, r2
 8008ed6:	2900      	cmp	r1, #0
 8008ed8:	da07      	bge.n	8008eea <__swhatbuf_r+0x22>
 8008eda:	2300      	movs	r3, #0
 8008edc:	602b      	str	r3, [r5, #0]
 8008ede:	89b3      	ldrh	r3, [r6, #12]
 8008ee0:	061b      	lsls	r3, r3, #24
 8008ee2:	d411      	bmi.n	8008f08 <__swhatbuf_r+0x40>
 8008ee4:	2380      	movs	r3, #128	; 0x80
 8008ee6:	00db      	lsls	r3, r3, #3
 8008ee8:	e00f      	b.n	8008f0a <__swhatbuf_r+0x42>
 8008eea:	466a      	mov	r2, sp
 8008eec:	f000 f922 	bl	8009134 <_fstat_r>
 8008ef0:	2800      	cmp	r0, #0
 8008ef2:	dbf2      	blt.n	8008eda <__swhatbuf_r+0x12>
 8008ef4:	22f0      	movs	r2, #240	; 0xf0
 8008ef6:	9b01      	ldr	r3, [sp, #4]
 8008ef8:	0212      	lsls	r2, r2, #8
 8008efa:	4013      	ands	r3, r2
 8008efc:	4a05      	ldr	r2, [pc, #20]	; (8008f14 <__swhatbuf_r+0x4c>)
 8008efe:	189b      	adds	r3, r3, r2
 8008f00:	425a      	negs	r2, r3
 8008f02:	4153      	adcs	r3, r2
 8008f04:	602b      	str	r3, [r5, #0]
 8008f06:	e7ed      	b.n	8008ee4 <__swhatbuf_r+0x1c>
 8008f08:	2340      	movs	r3, #64	; 0x40
 8008f0a:	2000      	movs	r0, #0
 8008f0c:	6023      	str	r3, [r4, #0]
 8008f0e:	b016      	add	sp, #88	; 0x58
 8008f10:	bd70      	pop	{r4, r5, r6, pc}
 8008f12:	46c0      	nop			; (mov r8, r8)
 8008f14:	ffffe000 	.word	0xffffe000

08008f18 <__smakebuf_r>:
 8008f18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f1a:	2602      	movs	r6, #2
 8008f1c:	898b      	ldrh	r3, [r1, #12]
 8008f1e:	0005      	movs	r5, r0
 8008f20:	000c      	movs	r4, r1
 8008f22:	4233      	tst	r3, r6
 8008f24:	d006      	beq.n	8008f34 <__smakebuf_r+0x1c>
 8008f26:	0023      	movs	r3, r4
 8008f28:	3347      	adds	r3, #71	; 0x47
 8008f2a:	6023      	str	r3, [r4, #0]
 8008f2c:	6123      	str	r3, [r4, #16]
 8008f2e:	2301      	movs	r3, #1
 8008f30:	6163      	str	r3, [r4, #20]
 8008f32:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008f34:	ab01      	add	r3, sp, #4
 8008f36:	466a      	mov	r2, sp
 8008f38:	f7ff ffc6 	bl	8008ec8 <__swhatbuf_r>
 8008f3c:	9900      	ldr	r1, [sp, #0]
 8008f3e:	0007      	movs	r7, r0
 8008f40:	0028      	movs	r0, r5
 8008f42:	f7ff fa3d 	bl	80083c0 <_malloc_r>
 8008f46:	2800      	cmp	r0, #0
 8008f48:	d108      	bne.n	8008f5c <__smakebuf_r+0x44>
 8008f4a:	220c      	movs	r2, #12
 8008f4c:	5ea3      	ldrsh	r3, [r4, r2]
 8008f4e:	059a      	lsls	r2, r3, #22
 8008f50:	d4ef      	bmi.n	8008f32 <__smakebuf_r+0x1a>
 8008f52:	2203      	movs	r2, #3
 8008f54:	4393      	bics	r3, r2
 8008f56:	431e      	orrs	r6, r3
 8008f58:	81a6      	strh	r6, [r4, #12]
 8008f5a:	e7e4      	b.n	8008f26 <__smakebuf_r+0xe>
 8008f5c:	4b0f      	ldr	r3, [pc, #60]	; (8008f9c <__smakebuf_r+0x84>)
 8008f5e:	62ab      	str	r3, [r5, #40]	; 0x28
 8008f60:	2380      	movs	r3, #128	; 0x80
 8008f62:	89a2      	ldrh	r2, [r4, #12]
 8008f64:	6020      	str	r0, [r4, #0]
 8008f66:	4313      	orrs	r3, r2
 8008f68:	81a3      	strh	r3, [r4, #12]
 8008f6a:	9b00      	ldr	r3, [sp, #0]
 8008f6c:	6120      	str	r0, [r4, #16]
 8008f6e:	6163      	str	r3, [r4, #20]
 8008f70:	9b01      	ldr	r3, [sp, #4]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00d      	beq.n	8008f92 <__smakebuf_r+0x7a>
 8008f76:	230e      	movs	r3, #14
 8008f78:	5ee1      	ldrsh	r1, [r4, r3]
 8008f7a:	0028      	movs	r0, r5
 8008f7c:	f000 f8ec 	bl	8009158 <_isatty_r>
 8008f80:	2800      	cmp	r0, #0
 8008f82:	d006      	beq.n	8008f92 <__smakebuf_r+0x7a>
 8008f84:	2203      	movs	r2, #3
 8008f86:	89a3      	ldrh	r3, [r4, #12]
 8008f88:	4393      	bics	r3, r2
 8008f8a:	001a      	movs	r2, r3
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	81a3      	strh	r3, [r4, #12]
 8008f92:	89a0      	ldrh	r0, [r4, #12]
 8008f94:	4338      	orrs	r0, r7
 8008f96:	81a0      	strh	r0, [r4, #12]
 8008f98:	e7cb      	b.n	8008f32 <__smakebuf_r+0x1a>
 8008f9a:	46c0      	nop			; (mov r8, r8)
 8008f9c:	08008d65 	.word	0x08008d65

08008fa0 <memchr>:
 8008fa0:	b2c9      	uxtb	r1, r1
 8008fa2:	1882      	adds	r2, r0, r2
 8008fa4:	4290      	cmp	r0, r2
 8008fa6:	d101      	bne.n	8008fac <memchr+0xc>
 8008fa8:	2000      	movs	r0, #0
 8008faa:	4770      	bx	lr
 8008fac:	7803      	ldrb	r3, [r0, #0]
 8008fae:	428b      	cmp	r3, r1
 8008fb0:	d0fb      	beq.n	8008faa <memchr+0xa>
 8008fb2:	3001      	adds	r0, #1
 8008fb4:	e7f6      	b.n	8008fa4 <memchr+0x4>

08008fb6 <__malloc_lock>:
 8008fb6:	4770      	bx	lr

08008fb8 <__malloc_unlock>:
 8008fb8:	4770      	bx	lr

08008fba <_raise_r>:
 8008fba:	b570      	push	{r4, r5, r6, lr}
 8008fbc:	0004      	movs	r4, r0
 8008fbe:	000d      	movs	r5, r1
 8008fc0:	291f      	cmp	r1, #31
 8008fc2:	d904      	bls.n	8008fce <_raise_r+0x14>
 8008fc4:	2316      	movs	r3, #22
 8008fc6:	6003      	str	r3, [r0, #0]
 8008fc8:	2001      	movs	r0, #1
 8008fca:	4240      	negs	r0, r0
 8008fcc:	bd70      	pop	{r4, r5, r6, pc}
 8008fce:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d004      	beq.n	8008fde <_raise_r+0x24>
 8008fd4:	008a      	lsls	r2, r1, #2
 8008fd6:	189b      	adds	r3, r3, r2
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	2a00      	cmp	r2, #0
 8008fdc:	d108      	bne.n	8008ff0 <_raise_r+0x36>
 8008fde:	0020      	movs	r0, r4
 8008fe0:	f000 f832 	bl	8009048 <_getpid_r>
 8008fe4:	002a      	movs	r2, r5
 8008fe6:	0001      	movs	r1, r0
 8008fe8:	0020      	movs	r0, r4
 8008fea:	f000 f81b 	bl	8009024 <_kill_r>
 8008fee:	e7ed      	b.n	8008fcc <_raise_r+0x12>
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	2a01      	cmp	r2, #1
 8008ff4:	d0ea      	beq.n	8008fcc <_raise_r+0x12>
 8008ff6:	1c51      	adds	r1, r2, #1
 8008ff8:	d103      	bne.n	8009002 <_raise_r+0x48>
 8008ffa:	2316      	movs	r3, #22
 8008ffc:	3001      	adds	r0, #1
 8008ffe:	6023      	str	r3, [r4, #0]
 8009000:	e7e4      	b.n	8008fcc <_raise_r+0x12>
 8009002:	2400      	movs	r4, #0
 8009004:	0028      	movs	r0, r5
 8009006:	601c      	str	r4, [r3, #0]
 8009008:	4790      	blx	r2
 800900a:	0020      	movs	r0, r4
 800900c:	e7de      	b.n	8008fcc <_raise_r+0x12>
	...

08009010 <raise>:
 8009010:	b510      	push	{r4, lr}
 8009012:	4b03      	ldr	r3, [pc, #12]	; (8009020 <raise+0x10>)
 8009014:	0001      	movs	r1, r0
 8009016:	6818      	ldr	r0, [r3, #0]
 8009018:	f7ff ffcf 	bl	8008fba <_raise_r>
 800901c:	bd10      	pop	{r4, pc}
 800901e:	46c0      	nop			; (mov r8, r8)
 8009020:	2000000c 	.word	0x2000000c

08009024 <_kill_r>:
 8009024:	2300      	movs	r3, #0
 8009026:	b570      	push	{r4, r5, r6, lr}
 8009028:	4c06      	ldr	r4, [pc, #24]	; (8009044 <_kill_r+0x20>)
 800902a:	0005      	movs	r5, r0
 800902c:	0008      	movs	r0, r1
 800902e:	0011      	movs	r1, r2
 8009030:	6023      	str	r3, [r4, #0]
 8009032:	f7f8 fe2d 	bl	8001c90 <_kill>
 8009036:	1c43      	adds	r3, r0, #1
 8009038:	d103      	bne.n	8009042 <_kill_r+0x1e>
 800903a:	6823      	ldr	r3, [r4, #0]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d000      	beq.n	8009042 <_kill_r+0x1e>
 8009040:	602b      	str	r3, [r5, #0]
 8009042:	bd70      	pop	{r4, r5, r6, pc}
 8009044:	20000888 	.word	0x20000888

08009048 <_getpid_r>:
 8009048:	b510      	push	{r4, lr}
 800904a:	f7f8 fe1b 	bl	8001c84 <_getpid>
 800904e:	bd10      	pop	{r4, pc}

08009050 <__sread>:
 8009050:	b570      	push	{r4, r5, r6, lr}
 8009052:	000c      	movs	r4, r1
 8009054:	250e      	movs	r5, #14
 8009056:	5f49      	ldrsh	r1, [r1, r5]
 8009058:	f000 f8a4 	bl	80091a4 <_read_r>
 800905c:	2800      	cmp	r0, #0
 800905e:	db03      	blt.n	8009068 <__sread+0x18>
 8009060:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009062:	181b      	adds	r3, r3, r0
 8009064:	6563      	str	r3, [r4, #84]	; 0x54
 8009066:	bd70      	pop	{r4, r5, r6, pc}
 8009068:	89a3      	ldrh	r3, [r4, #12]
 800906a:	4a02      	ldr	r2, [pc, #8]	; (8009074 <__sread+0x24>)
 800906c:	4013      	ands	r3, r2
 800906e:	81a3      	strh	r3, [r4, #12]
 8009070:	e7f9      	b.n	8009066 <__sread+0x16>
 8009072:	46c0      	nop			; (mov r8, r8)
 8009074:	ffffefff 	.word	0xffffefff

08009078 <__swrite>:
 8009078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800907a:	001f      	movs	r7, r3
 800907c:	898b      	ldrh	r3, [r1, #12]
 800907e:	0005      	movs	r5, r0
 8009080:	000c      	movs	r4, r1
 8009082:	0016      	movs	r6, r2
 8009084:	05db      	lsls	r3, r3, #23
 8009086:	d505      	bpl.n	8009094 <__swrite+0x1c>
 8009088:	230e      	movs	r3, #14
 800908a:	5ec9      	ldrsh	r1, [r1, r3]
 800908c:	2200      	movs	r2, #0
 800908e:	2302      	movs	r3, #2
 8009090:	f000 f874 	bl	800917c <_lseek_r>
 8009094:	89a3      	ldrh	r3, [r4, #12]
 8009096:	4a05      	ldr	r2, [pc, #20]	; (80090ac <__swrite+0x34>)
 8009098:	0028      	movs	r0, r5
 800909a:	4013      	ands	r3, r2
 800909c:	81a3      	strh	r3, [r4, #12]
 800909e:	0032      	movs	r2, r6
 80090a0:	230e      	movs	r3, #14
 80090a2:	5ee1      	ldrsh	r1, [r4, r3]
 80090a4:	003b      	movs	r3, r7
 80090a6:	f000 f81f 	bl	80090e8 <_write_r>
 80090aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090ac:	ffffefff 	.word	0xffffefff

080090b0 <__sseek>:
 80090b0:	b570      	push	{r4, r5, r6, lr}
 80090b2:	000c      	movs	r4, r1
 80090b4:	250e      	movs	r5, #14
 80090b6:	5f49      	ldrsh	r1, [r1, r5]
 80090b8:	f000 f860 	bl	800917c <_lseek_r>
 80090bc:	89a3      	ldrh	r3, [r4, #12]
 80090be:	1c42      	adds	r2, r0, #1
 80090c0:	d103      	bne.n	80090ca <__sseek+0x1a>
 80090c2:	4a05      	ldr	r2, [pc, #20]	; (80090d8 <__sseek+0x28>)
 80090c4:	4013      	ands	r3, r2
 80090c6:	81a3      	strh	r3, [r4, #12]
 80090c8:	bd70      	pop	{r4, r5, r6, pc}
 80090ca:	2280      	movs	r2, #128	; 0x80
 80090cc:	0152      	lsls	r2, r2, #5
 80090ce:	4313      	orrs	r3, r2
 80090d0:	81a3      	strh	r3, [r4, #12]
 80090d2:	6560      	str	r0, [r4, #84]	; 0x54
 80090d4:	e7f8      	b.n	80090c8 <__sseek+0x18>
 80090d6:	46c0      	nop			; (mov r8, r8)
 80090d8:	ffffefff 	.word	0xffffefff

080090dc <__sclose>:
 80090dc:	b510      	push	{r4, lr}
 80090de:	230e      	movs	r3, #14
 80090e0:	5ec9      	ldrsh	r1, [r1, r3]
 80090e2:	f000 f815 	bl	8009110 <_close_r>
 80090e6:	bd10      	pop	{r4, pc}

080090e8 <_write_r>:
 80090e8:	b570      	push	{r4, r5, r6, lr}
 80090ea:	0005      	movs	r5, r0
 80090ec:	0008      	movs	r0, r1
 80090ee:	0011      	movs	r1, r2
 80090f0:	2200      	movs	r2, #0
 80090f2:	4c06      	ldr	r4, [pc, #24]	; (800910c <_write_r+0x24>)
 80090f4:	6022      	str	r2, [r4, #0]
 80090f6:	001a      	movs	r2, r3
 80090f8:	f7f8 fe03 	bl	8001d02 <_write>
 80090fc:	1c43      	adds	r3, r0, #1
 80090fe:	d103      	bne.n	8009108 <_write_r+0x20>
 8009100:	6823      	ldr	r3, [r4, #0]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d000      	beq.n	8009108 <_write_r+0x20>
 8009106:	602b      	str	r3, [r5, #0]
 8009108:	bd70      	pop	{r4, r5, r6, pc}
 800910a:	46c0      	nop			; (mov r8, r8)
 800910c:	20000888 	.word	0x20000888

08009110 <_close_r>:
 8009110:	2300      	movs	r3, #0
 8009112:	b570      	push	{r4, r5, r6, lr}
 8009114:	4c06      	ldr	r4, [pc, #24]	; (8009130 <_close_r+0x20>)
 8009116:	0005      	movs	r5, r0
 8009118:	0008      	movs	r0, r1
 800911a:	6023      	str	r3, [r4, #0]
 800911c:	f7f8 fe0d 	bl	8001d3a <_close>
 8009120:	1c43      	adds	r3, r0, #1
 8009122:	d103      	bne.n	800912c <_close_r+0x1c>
 8009124:	6823      	ldr	r3, [r4, #0]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d000      	beq.n	800912c <_close_r+0x1c>
 800912a:	602b      	str	r3, [r5, #0]
 800912c:	bd70      	pop	{r4, r5, r6, pc}
 800912e:	46c0      	nop			; (mov r8, r8)
 8009130:	20000888 	.word	0x20000888

08009134 <_fstat_r>:
 8009134:	2300      	movs	r3, #0
 8009136:	b570      	push	{r4, r5, r6, lr}
 8009138:	4c06      	ldr	r4, [pc, #24]	; (8009154 <_fstat_r+0x20>)
 800913a:	0005      	movs	r5, r0
 800913c:	0008      	movs	r0, r1
 800913e:	0011      	movs	r1, r2
 8009140:	6023      	str	r3, [r4, #0]
 8009142:	f7f8 fe04 	bl	8001d4e <_fstat>
 8009146:	1c43      	adds	r3, r0, #1
 8009148:	d103      	bne.n	8009152 <_fstat_r+0x1e>
 800914a:	6823      	ldr	r3, [r4, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d000      	beq.n	8009152 <_fstat_r+0x1e>
 8009150:	602b      	str	r3, [r5, #0]
 8009152:	bd70      	pop	{r4, r5, r6, pc}
 8009154:	20000888 	.word	0x20000888

08009158 <_isatty_r>:
 8009158:	2300      	movs	r3, #0
 800915a:	b570      	push	{r4, r5, r6, lr}
 800915c:	4c06      	ldr	r4, [pc, #24]	; (8009178 <_isatty_r+0x20>)
 800915e:	0005      	movs	r5, r0
 8009160:	0008      	movs	r0, r1
 8009162:	6023      	str	r3, [r4, #0]
 8009164:	f7f8 fe01 	bl	8001d6a <_isatty>
 8009168:	1c43      	adds	r3, r0, #1
 800916a:	d103      	bne.n	8009174 <_isatty_r+0x1c>
 800916c:	6823      	ldr	r3, [r4, #0]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d000      	beq.n	8009174 <_isatty_r+0x1c>
 8009172:	602b      	str	r3, [r5, #0]
 8009174:	bd70      	pop	{r4, r5, r6, pc}
 8009176:	46c0      	nop			; (mov r8, r8)
 8009178:	20000888 	.word	0x20000888

0800917c <_lseek_r>:
 800917c:	b570      	push	{r4, r5, r6, lr}
 800917e:	0005      	movs	r5, r0
 8009180:	0008      	movs	r0, r1
 8009182:	0011      	movs	r1, r2
 8009184:	2200      	movs	r2, #0
 8009186:	4c06      	ldr	r4, [pc, #24]	; (80091a0 <_lseek_r+0x24>)
 8009188:	6022      	str	r2, [r4, #0]
 800918a:	001a      	movs	r2, r3
 800918c:	f7f8 fdf6 	bl	8001d7c <_lseek>
 8009190:	1c43      	adds	r3, r0, #1
 8009192:	d103      	bne.n	800919c <_lseek_r+0x20>
 8009194:	6823      	ldr	r3, [r4, #0]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d000      	beq.n	800919c <_lseek_r+0x20>
 800919a:	602b      	str	r3, [r5, #0]
 800919c:	bd70      	pop	{r4, r5, r6, pc}
 800919e:	46c0      	nop			; (mov r8, r8)
 80091a0:	20000888 	.word	0x20000888

080091a4 <_read_r>:
 80091a4:	b570      	push	{r4, r5, r6, lr}
 80091a6:	0005      	movs	r5, r0
 80091a8:	0008      	movs	r0, r1
 80091aa:	0011      	movs	r1, r2
 80091ac:	2200      	movs	r2, #0
 80091ae:	4c06      	ldr	r4, [pc, #24]	; (80091c8 <_read_r+0x24>)
 80091b0:	6022      	str	r2, [r4, #0]
 80091b2:	001a      	movs	r2, r3
 80091b4:	f7f8 fd88 	bl	8001cc8 <_read>
 80091b8:	1c43      	adds	r3, r0, #1
 80091ba:	d103      	bne.n	80091c4 <_read_r+0x20>
 80091bc:	6823      	ldr	r3, [r4, #0]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d000      	beq.n	80091c4 <_read_r+0x20>
 80091c2:	602b      	str	r3, [r5, #0]
 80091c4:	bd70      	pop	{r4, r5, r6, pc}
 80091c6:	46c0      	nop			; (mov r8, r8)
 80091c8:	20000888 	.word	0x20000888

080091cc <_init>:
 80091cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ce:	46c0      	nop			; (mov r8, r8)
 80091d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091d2:	bc08      	pop	{r3}
 80091d4:	469e      	mov	lr, r3
 80091d6:	4770      	bx	lr

080091d8 <_fini>:
 80091d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091da:	46c0      	nop			; (mov r8, r8)
 80091dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091de:	bc08      	pop	{r3}
 80091e0:	469e      	mov	lr, r3
 80091e2:	4770      	bx	lr
 80091e4:	0000      	movs	r0, r0
	...

080091e8 <__FLASH_Program_Fast_veneer>:
 80091e8:	b401      	push	{r0}
 80091ea:	4802      	ldr	r0, [pc, #8]	; (80091f4 <__FLASH_Program_Fast_veneer+0xc>)
 80091ec:	4684      	mov	ip, r0
 80091ee:	bc01      	pop	{r0}
 80091f0:	4760      	bx	ip
 80091f2:	bf00      	nop
 80091f4:	20000071 	.word	0x20000071

Disassembly of section .data:

20000000 <SystemCoreClock>:
20000000:	00f42400                                .$..

20000004 <uwTickPrio>:
20000004:	00000004                                ....

20000008 <uwTickFreq>:
20000008:	00000001                                ....

2000000c <_impure_ptr>:
2000000c:	20000010                                ... 

20000010 <impure_data>:
20000010:	00000000 0800949c 080094bc 0800947c     ............|...
	...

20000070 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000070:	b580      	push	{r7, lr}
20000072:	b088      	sub	sp, #32
20000074:	af00      	add	r7, sp, #0
20000076:	6078      	str	r0, [r7, #4]
20000078:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
2000007a:	231f      	movs	r3, #31
2000007c:	18fb      	adds	r3, r7, r3
2000007e:	2200      	movs	r2, #0
20000080:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
20000082:	687b      	ldr	r3, [r7, #4]
20000084:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
20000086:	683b      	ldr	r3, [r7, #0]
20000088:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000008a:	4b19      	ldr	r3, [pc, #100]	; (200000f0 <FLASH_Program_Fast+0x80>)
2000008c:	695a      	ldr	r2, [r3, #20]
2000008e:	4b18      	ldr	r3, [pc, #96]	; (200000f0 <FLASH_Program_Fast+0x80>)
20000090:	2180      	movs	r1, #128	; 0x80
20000092:	02c9      	lsls	r1, r1, #11
20000094:	430a      	orrs	r2, r1
20000096:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000098:	f3ef 8310 	mrs	r3, PRIMASK
2000009c:	60fb      	str	r3, [r7, #12]
  return(result);
2000009e:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200000a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200000a2:	b672      	cpsid	i
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
200000a4:	e00f      	b.n	200000c6 <FLASH_Program_Fast+0x56>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200000a6:	697a      	ldr	r2, [r7, #20]
200000a8:	69bb      	ldr	r3, [r7, #24]
200000aa:	6812      	ldr	r2, [r2, #0]
200000ac:	601a      	str	r2, [r3, #0]
    src += 4U;
200000ae:	697b      	ldr	r3, [r7, #20]
200000b0:	3304      	adds	r3, #4
200000b2:	617b      	str	r3, [r7, #20]
    dest += 4U;
200000b4:	69bb      	ldr	r3, [r7, #24]
200000b6:	3304      	adds	r3, #4
200000b8:	61bb      	str	r3, [r7, #24]
    index++;
200000ba:	211f      	movs	r1, #31
200000bc:	187b      	adds	r3, r7, r1
200000be:	781a      	ldrb	r2, [r3, #0]
200000c0:	187b      	adds	r3, r7, r1
200000c2:	3201      	adds	r2, #1
200000c4:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200000c6:	231f      	movs	r3, #31
200000c8:	18fb      	adds	r3, r7, r3
200000ca:	781b      	ldrb	r3, [r3, #0]
200000cc:	2b3f      	cmp	r3, #63	; 0x3f
200000ce:	d9ea      	bls.n	200000a6 <FLASH_Program_Fast+0x36>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
200000d0:	46c0      	nop			; (mov r8, r8)
200000d2:	4b07      	ldr	r3, [pc, #28]	; (200000f0 <FLASH_Program_Fast+0x80>)
200000d4:	691a      	ldr	r2, [r3, #16]
200000d6:	2380      	movs	r3, #128	; 0x80
200000d8:	025b      	lsls	r3, r3, #9
200000da:	4013      	ands	r3, r2
200000dc:	d1f9      	bne.n	200000d2 <FLASH_Program_Fast+0x62>
200000de:	693b      	ldr	r3, [r7, #16]
200000e0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200000e2:	68bb      	ldr	r3, [r7, #8]
200000e4:	f383 8810 	msr	PRIMASK, r3
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200000e8:	46c0      	nop			; (mov r8, r8)
200000ea:	46bd      	mov	sp, r7
200000ec:	b008      	add	sp, #32
200000ee:	bd80      	pop	{r7, pc}
200000f0:	40022000 	.word	0x40022000
