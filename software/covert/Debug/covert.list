
covert.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090f8  080000c0  080000c0  000100c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  080091b8  080091b8  000191b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800949c  0800949c  000200f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800949c  0800949c  000200f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800949c  0800949c  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800949c  0800949c  0001949c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094a0  080094a0  000194a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  080094a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00000794  200000f8  08009598  000200f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000088c  08009598  0002088c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ab4  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e5f  00000000  00000000  00034bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001290  00000000  00000000  00037a30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001128  00000000  00000000  00038cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b816  00000000  00000000  00039de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001252b  00000000  00000000  000555fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a5ac0  00000000  00000000  00067b29  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000fa  00000000  00000000  0010d5e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b84  00000000  00000000  0010d6e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000f8 	.word	0x200000f8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009190 	.word	0x08009190

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000fc 	.word	0x200000fc
 8000104:	08009190 	.word	0x08009190

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_lmul>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	46ce      	mov	lr, r9
 8000224:	4647      	mov	r7, r8
 8000226:	0415      	lsls	r5, r2, #16
 8000228:	0c2d      	lsrs	r5, r5, #16
 800022a:	002e      	movs	r6, r5
 800022c:	b580      	push	{r7, lr}
 800022e:	0407      	lsls	r7, r0, #16
 8000230:	0c14      	lsrs	r4, r2, #16
 8000232:	0c3f      	lsrs	r7, r7, #16
 8000234:	4699      	mov	r9, r3
 8000236:	0c03      	lsrs	r3, r0, #16
 8000238:	437e      	muls	r6, r7
 800023a:	435d      	muls	r5, r3
 800023c:	4367      	muls	r7, r4
 800023e:	4363      	muls	r3, r4
 8000240:	197f      	adds	r7, r7, r5
 8000242:	0c34      	lsrs	r4, r6, #16
 8000244:	19e4      	adds	r4, r4, r7
 8000246:	469c      	mov	ip, r3
 8000248:	42a5      	cmp	r5, r4
 800024a:	d903      	bls.n	8000254 <__aeabi_lmul+0x34>
 800024c:	2380      	movs	r3, #128	; 0x80
 800024e:	025b      	lsls	r3, r3, #9
 8000250:	4698      	mov	r8, r3
 8000252:	44c4      	add	ip, r8
 8000254:	464b      	mov	r3, r9
 8000256:	4343      	muls	r3, r0
 8000258:	4351      	muls	r1, r2
 800025a:	0c25      	lsrs	r5, r4, #16
 800025c:	0436      	lsls	r6, r6, #16
 800025e:	4465      	add	r5, ip
 8000260:	0c36      	lsrs	r6, r6, #16
 8000262:	0424      	lsls	r4, r4, #16
 8000264:	19a4      	adds	r4, r4, r6
 8000266:	195b      	adds	r3, r3, r5
 8000268:	1859      	adds	r1, r3, r1
 800026a:	0020      	movs	r0, r4
 800026c:	bc0c      	pop	{r2, r3}
 800026e:	4690      	mov	r8, r2
 8000270:	4699      	mov	r9, r3
 8000272:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000274:	b5b0      	push	{r4, r5, r7, lr}
 8000276:	b0a2      	sub	sp, #136	; 0x88
 8000278:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800027a:	f001 fdd9 	bl	8001e30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027e:	f000 fa17 	bl	80006b0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	EraseInitStruct.Banks = FLASH_BANK_1;
 8000282:	4bbc      	ldr	r3, [pc, #752]	; (8000574 <main+0x300>)
 8000284:	2204      	movs	r2, #4
 8000286:	605a      	str	r2, [r3, #4]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000288:	4bba      	ldr	r3, [pc, #744]	; (8000574 <main+0x300>)
 800028a:	2202      	movs	r2, #2
 800028c:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Page = (FLASH_PAGE_NB - 1);
 800028e:	4bb9      	ldr	r3, [pc, #740]	; (8000574 <main+0x300>)
 8000290:	223f      	movs	r2, #63	; 0x3f
 8000292:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbPages = 1;
 8000294:	4bb7      	ldr	r3, [pc, #732]	; (8000574 <main+0x300>)
 8000296:	2201      	movs	r2, #1
 8000298:	60da      	str	r2, [r3, #12]

	recording.enabled = 0;
 800029a:	4bb7      	ldr	r3, [pc, #732]	; (8000578 <main+0x304>)
 800029c:	2200      	movs	r2, #0
 800029e:	701a      	strb	r2, [r3, #0]
	playback.enabled = 0;
 80002a0:	4bb6      	ldr	r3, [pc, #728]	; (800057c <main+0x308>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	701a      	strb	r2, [r3, #0]

	radio.spi_handle = &hspi1;
 80002a6:	4bb6      	ldr	r3, [pc, #728]	; (8000580 <main+0x30c>)
 80002a8:	4ab6      	ldr	r2, [pc, #728]	; (8000584 <main+0x310>)
 80002aa:	601a      	str	r2, [r3, #0]

	radio.nss_port = RADIO_CS_GPIO_Port;
 80002ac:	4bb4      	ldr	r3, [pc, #720]	; (8000580 <main+0x30c>)
 80002ae:	22a0      	movs	r2, #160	; 0xa0
 80002b0:	05d2      	lsls	r2, r2, #23
 80002b2:	605a      	str	r2, [r3, #4]
	radio.nss_pin = RADIO_CS_Pin;
 80002b4:	4bb2      	ldr	r3, [pc, #712]	; (8000580 <main+0x30c>)
 80002b6:	2280      	movs	r2, #128	; 0x80
 80002b8:	811a      	strh	r2, [r3, #8]
	radio.nrst_port = RADIO_RESET_GPIO_Port;
 80002ba:	4bb1      	ldr	r3, [pc, #708]	; (8000580 <main+0x30c>)
 80002bc:	4ab2      	ldr	r2, [pc, #712]	; (8000588 <main+0x314>)
 80002be:	60da      	str	r2, [r3, #12]
	radio.nrst_pin = RADIO_RESET_Pin;
 80002c0:	4baf      	ldr	r3, [pc, #700]	; (8000580 <main+0x30c>)
 80002c2:	2210      	movs	r2, #16
 80002c4:	821a      	strh	r2, [r3, #16]
	radio.irq_port = RADIO_INT_GPIO_Port;
 80002c6:	4bae      	ldr	r3, [pc, #696]	; (8000580 <main+0x30c>)
 80002c8:	22a0      	movs	r2, #160	; 0xa0
 80002ca:	05d2      	lsls	r2, r2, #23
 80002cc:	615a      	str	r2, [r3, #20]
	radio.irq_pin = RADIO_INT_Pin;
 80002ce:	4bac      	ldr	r3, [pc, #688]	; (8000580 <main+0x30c>)
 80002d0:	2201      	movs	r2, #1
 80002d2:	831a      	strh	r2, [r3, #24]

	radio.txDone = true;
 80002d4:	4baa      	ldr	r3, [pc, #680]	; (8000580 <main+0x30c>)
 80002d6:	2222      	movs	r2, #34	; 0x22
 80002d8:	2101      	movs	r1, #1
 80002da:	5499      	strb	r1, [r3, r2]
	radio.rxDoneCallback = readingCallback;
 80002dc:	4ba8      	ldr	r3, [pc, #672]	; (8000580 <main+0x30c>)
 80002de:	4aab      	ldr	r2, [pc, #684]	; (800058c <main+0x318>)
 80002e0:	625a      	str	r2, [r3, #36]	; 0x24

	aKeys.gotOther = 0;
 80002e2:	4bab      	ldr	r3, [pc, #684]	; (8000590 <main+0x31c>)
 80002e4:	2280      	movs	r2, #128	; 0x80
 80002e6:	2100      	movs	r1, #0
 80002e8:	5499      	strb	r1, [r3, r2]
	aKeys.pairing = 0;
 80002ea:	4ba9      	ldr	r3, [pc, #676]	; (8000590 <main+0x31c>)
 80002ec:	2282      	movs	r2, #130	; 0x82
 80002ee:	2100      	movs	r1, #0
 80002f0:	5499      	strb	r1, [r3, r2]
	aKeys.masterSent = 0;
 80002f2:	4ba7      	ldr	r3, [pc, #668]	; (8000590 <main+0x31c>)
 80002f4:	2281      	movs	r2, #129	; 0x81
 80002f6:	2100      	movs	r1, #0
 80002f8:	5499      	strb	r1, [r3, r2]
	aKeys.sharedSecret[0] = 0;
 80002fa:	4ba5      	ldr	r3, [pc, #660]	; (8000590 <main+0x31c>)
 80002fc:	2260      	movs	r2, #96	; 0x60
 80002fe:	2100      	movs	r1, #0
 8000300:	5499      	strb	r1, [r3, r2]

	outgoing.data = 0;
 8000302:	4ba4      	ldr	r3, [pc, #656]	; (8000594 <main+0x320>)
 8000304:	3306      	adds	r3, #6
 8000306:	781a      	ldrb	r2, [r3, #0]
 8000308:	2100      	movs	r1, #0
 800030a:	400a      	ands	r2, r1
 800030c:	701a      	strb	r2, [r3, #0]
 800030e:	785a      	ldrb	r2, [r3, #1]
 8000310:	2100      	movs	r1, #0
 8000312:	400a      	ands	r2, r1
 8000314:	705a      	strb	r2, [r3, #1]
 8000316:	789a      	ldrb	r2, [r3, #2]
 8000318:	2100      	movs	r1, #0
 800031a:	400a      	ands	r2, r1
 800031c:	709a      	strb	r2, [r3, #2]
 800031e:	78da      	ldrb	r2, [r3, #3]
 8000320:	2100      	movs	r1, #0
 8000322:	400a      	ands	r2, r1
 8000324:	70da      	strb	r2, [r3, #3]
 8000326:	791a      	ldrb	r2, [r3, #4]
 8000328:	2100      	movs	r1, #0
 800032a:	400a      	ands	r2, r1
 800032c:	711a      	strb	r2, [r3, #4]
 800032e:	795a      	ldrb	r2, [r3, #5]
 8000330:	2100      	movs	r1, #0
 8000332:	400a      	ands	r2, r1
 8000334:	715a      	strb	r2, [r3, #5]
 8000336:	799a      	ldrb	r2, [r3, #6]
 8000338:	2100      	movs	r1, #0
 800033a:	400a      	ands	r2, r1
 800033c:	719a      	strb	r2, [r3, #6]
 800033e:	79da      	ldrb	r2, [r3, #7]
 8000340:	2100      	movs	r1, #0
 8000342:	400a      	ands	r2, r1
 8000344:	71da      	strb	r2, [r3, #7]

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000346:	f000 fbb5 	bl	8000ab4 <MX_GPIO_Init>
  MX_AES_Init();
 800034a:	f000 fa35 	bl	80007b8 <MX_AES_Init>
  MX_RNG_Init();
 800034e:	f000 fa87 	bl	8000860 <MX_RNG_Init>
  MX_CRC_Init();
 8000352:	f000 fa61 	bl	8000818 <MX_CRC_Init>
  MX_TIM16_Init();
 8000356:	f000 fb85 	bl	8000a64 <MX_TIM16_Init>
  MX_TIM1_Init();
 800035a:	f000 fad7 	bl	800090c <MX_TIM1_Init>
  MX_SPI1_Init();
 800035e:	f000 fa97 	bl	8000890 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	if (!rfm95_init(&radio)) {
 8000362:	4b87      	ldr	r3, [pc, #540]	; (8000580 <main+0x30c>)
 8000364:	0018      	movs	r0, r3
 8000366:	f000 ff6b 	bl	8001240 <rfm95_init>
 800036a:	0003      	movs	r3, r0
 800036c:	001a      	movs	r2, r3
 800036e:	2301      	movs	r3, #1
 8000370:	4053      	eors	r3, r2
 8000372:	b2db      	uxtb	r3, r3
 8000374:	2b00      	cmp	r3, #0
 8000376:	d007      	beq.n	8000388 <main+0x114>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000378:	2380      	movs	r3, #128	; 0x80
 800037a:	00db      	lsls	r3, r3, #3
 800037c:	4882      	ldr	r0, [pc, #520]	; (8000588 <main+0x314>)
 800037e:	2201      	movs	r2, #1
 8000380:	0019      	movs	r1, r3
 8000382:	f003 fc74 	bl	8003c6e <HAL_GPIO_WritePin>
		while (1) {
 8000386:	e7fe      	b.n	8000386 <main+0x112>

		}
	}

	HAL_TIM_Base_Start_IT(&htim16);
 8000388:	4b83      	ldr	r3, [pc, #524]	; (8000598 <main+0x324>)
 800038a:	0018      	movs	r0, r3
 800038c:	f005 fb74 	bl	8005a78 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000390:	4b82      	ldr	r3, [pc, #520]	; (800059c <main+0x328>)
 8000392:	2100      	movs	r1, #0
 8000394:	0018      	movs	r0, r3
 8000396:	f005 fc23 	bl	8005be0 <HAL_TIM_PWM_Start>

	readKeyFromFlash(pKeyAES, &EraseInitStruct);
 800039a:	4a76      	ldr	r2, [pc, #472]	; (8000574 <main+0x300>)
 800039c:	4b80      	ldr	r3, [pc, #512]	; (80005a0 <main+0x32c>)
 800039e:	0011      	movs	r1, r2
 80003a0:	0018      	movs	r0, r3
 80003a2:	f000 feed 	bl	8001180 <readKeyFromFlash>
	// We lost our random key or we want a reset?
	if (RESET || pKeyAES[0] == 0 || pKeyAES[0] == UINT32_MAX) {
 80003a6:	4b7e      	ldr	r3, [pc, #504]	; (80005a0 <main+0x32c>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d003      	beq.n	80003b6 <main+0x142>
 80003ae:	4b7c      	ldr	r3, [pc, #496]	; (80005a0 <main+0x32c>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	3301      	adds	r3, #1
 80003b4:	d140      	bne.n	8000438 <main+0x1c4>
		uint64_t tmp[2];
		for (int i = 0; i < 2; i++) {
 80003b6:	2300      	movs	r3, #0
 80003b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80003ba:	e02d      	b.n	8000418 <main+0x1a4>
			if (HAL_RNG_GenerateRandomNumber(&hrng, &tmp[i]) != HAL_OK)
 80003bc:	2368      	movs	r3, #104	; 0x68
 80003be:	18fa      	adds	r2, r7, r3
 80003c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80003c2:	00db      	lsls	r3, r3, #3
 80003c4:	18d2      	adds	r2, r2, r3
 80003c6:	4b77      	ldr	r3, [pc, #476]	; (80005a4 <main+0x330>)
 80003c8:	0011      	movs	r1, r2
 80003ca:	0018      	movs	r0, r3
 80003cc:	f004 fbad 	bl	8004b2a <HAL_RNG_GenerateRandomNumber>
 80003d0:	1e03      	subs	r3, r0, #0
 80003d2:	d001      	beq.n	80003d8 <main+0x164>
				Error_Handler();
 80003d4:	f000 ff2f 	bl	8001236 <Error_Handler>
			tmp[i] <<= 32;
 80003d8:	2168      	movs	r1, #104	; 0x68
 80003da:	187a      	adds	r2, r7, r1
 80003dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80003de:	00db      	lsls	r3, r3, #3
 80003e0:	18d3      	adds	r3, r2, r3
 80003e2:	681a      	ldr	r2, [r3, #0]
 80003e4:	685b      	ldr	r3, [r3, #4]
 80003e6:	0015      	movs	r5, r2
 80003e8:	2300      	movs	r3, #0
 80003ea:	001c      	movs	r4, r3
 80003ec:	187a      	adds	r2, r7, r1
 80003ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80003f0:	00db      	lsls	r3, r3, #3
 80003f2:	18d3      	adds	r3, r2, r3
 80003f4:	601c      	str	r4, [r3, #0]
 80003f6:	605d      	str	r5, [r3, #4]
			if (HAL_RNG_GenerateRandomNumber(&hrng, &tmp[i]) != HAL_OK)
 80003f8:	187a      	adds	r2, r7, r1
 80003fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80003fc:	00db      	lsls	r3, r3, #3
 80003fe:	18d2      	adds	r2, r2, r3
 8000400:	4b68      	ldr	r3, [pc, #416]	; (80005a4 <main+0x330>)
 8000402:	0011      	movs	r1, r2
 8000404:	0018      	movs	r0, r3
 8000406:	f004 fb90 	bl	8004b2a <HAL_RNG_GenerateRandomNumber>
 800040a:	1e03      	subs	r3, r0, #0
 800040c:	d001      	beq.n	8000412 <main+0x19e>
				Error_Handler();
 800040e:	f000 ff12 	bl	8001236 <Error_Handler>
		for (int i = 0; i < 2; i++) {
 8000412:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000414:	3301      	adds	r3, #1
 8000416:	67bb      	str	r3, [r7, #120]	; 0x78
 8000418:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800041a:	2b01      	cmp	r3, #1
 800041c:	ddce      	ble.n	80003bc <main+0x148>
		}
		writeKeyToFlash(tmp, &EraseInitStruct);
 800041e:	4a55      	ldr	r2, [pc, #340]	; (8000574 <main+0x300>)
 8000420:	2368      	movs	r3, #104	; 0x68
 8000422:	18fb      	adds	r3, r7, r3
 8000424:	0011      	movs	r1, r2
 8000426:	0018      	movs	r0, r3
 8000428:	f000 fecf 	bl	80011ca <writeKeyToFlash>
		readKeyFromFlash(pKeyAES, &EraseInitStruct);
 800042c:	4a51      	ldr	r2, [pc, #324]	; (8000574 <main+0x300>)
 800042e:	4b5c      	ldr	r3, [pc, #368]	; (80005a0 <main+0x32c>)
 8000430:	0011      	movs	r1, r2
 8000432:	0018      	movs	r0, r3
 8000434:	f000 fea4 	bl	8001180 <readKeyFromFlash>
	}
	MX_AES_Init();
 8000438:	f000 f9be 	bl	80007b8 <MX_AES_Init>

	// Generate a random sequence number for packets
	HAL_RNG_GenerateRandomNumber(&hrng, &deviceSeqs[DEVICE_ID]);
 800043c:	4a5a      	ldr	r2, [pc, #360]	; (80005a8 <main+0x334>)
 800043e:	4b59      	ldr	r3, [pc, #356]	; (80005a4 <main+0x330>)
 8000440:	0011      	movs	r1, r2
 8000442:	0018      	movs	r0, r3
 8000444:	f004 fb71 	bl	8004b2a <HAL_RNG_GenerateRandomNumber>

	// Might as well generate a public key in advance
	for (int i = 0; i < 8; i++) {
 8000448:	2300      	movs	r3, #0
 800044a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800044c:	e00b      	b.n	8000466 <main+0x1f2>
		HAL_RNG_GenerateRandomNumber(&hrng, &aKeys.privateKey[i]);
 800044e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000450:	009a      	lsls	r2, r3, #2
 8000452:	4b4f      	ldr	r3, [pc, #316]	; (8000590 <main+0x31c>)
 8000454:	18d2      	adds	r2, r2, r3
 8000456:	4b53      	ldr	r3, [pc, #332]	; (80005a4 <main+0x330>)
 8000458:	0011      	movs	r1, r2
 800045a:	0018      	movs	r0, r3
 800045c:	f004 fb65 	bl	8004b2a <HAL_RNG_GenerateRandomNumber>
	for (int i = 0; i < 8; i++) {
 8000460:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000462:	3301      	adds	r3, #1
 8000464:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000466:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000468:	2b07      	cmp	r3, #7
 800046a:	ddf0      	ble.n	800044e <main+0x1da>
	}
	C25519keyGen((uint8_t*) aKeys.privateKey, aKeys.publicKey);
 800046c:	4a4f      	ldr	r2, [pc, #316]	; (80005ac <main+0x338>)
 800046e:	4b48      	ldr	r3, [pc, #288]	; (8000590 <main+0x31c>)
 8000470:	0011      	movs	r1, r2
 8000472:	0018      	movs	r0, r3
 8000474:	f007 fe7c 	bl	8008170 <C25519keyGen>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (aKeys.pairing && aKeys.pairing++ <= 5) {
 8000478:	4b45      	ldr	r3, [pc, #276]	; (8000590 <main+0x31c>)
 800047a:	2282      	movs	r2, #130	; 0x82
 800047c:	5c9b      	ldrb	r3, [r3, r2]
 800047e:	b2db      	uxtb	r3, r3
 8000480:	2b00      	cmp	r3, #0
 8000482:	d023      	beq.n	80004cc <main+0x258>
 8000484:	4b42      	ldr	r3, [pc, #264]	; (8000590 <main+0x31c>)
 8000486:	2282      	movs	r2, #130	; 0x82
 8000488:	5c9b      	ldrb	r3, [r3, r2]
 800048a:	b2db      	uxtb	r3, r3
 800048c:	1c5a      	adds	r2, r3, #1
 800048e:	b2d0      	uxtb	r0, r2
 8000490:	4a3f      	ldr	r2, [pc, #252]	; (8000590 <main+0x31c>)
 8000492:	2182      	movs	r1, #130	; 0x82
 8000494:	5450      	strb	r0, [r2, r1]
 8000496:	2b05      	cmp	r3, #5
 8000498:	d818      	bhi.n	80004cc <main+0x258>
			// send our public key in plaintext.
			transmitPackage(aKeys.publicKey, 32);
 800049a:	4b44      	ldr	r3, [pc, #272]	; (80005ac <main+0x338>)
 800049c:	2120      	movs	r1, #32
 800049e:	0018      	movs	r0, r3
 80004a0:	f001 f898 	bl	80015d4 <transmitPackage>
			// randomize the delay here todo
			uint32_t randoffset = 0;
 80004a4:	2300      	movs	r3, #0
 80004a6:	667b      	str	r3, [r7, #100]	; 0x64
			HAL_RNG_GenerateRandomNumber(&hrng, &randoffset);
 80004a8:	2364      	movs	r3, #100	; 0x64
 80004aa:	18fa      	adds	r2, r7, r3
 80004ac:	4b3d      	ldr	r3, [pc, #244]	; (80005a4 <main+0x330>)
 80004ae:	0011      	movs	r1, r2
 80004b0:	0018      	movs	r0, r3
 80004b2:	f004 fb3a 	bl	8004b2a <HAL_RNG_GenerateRandomNumber>

			HAL_Delay(1000 + (randoffset & 0x7ff));
 80004b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80004b8:	055b      	lsls	r3, r3, #21
 80004ba:	0d5b      	lsrs	r3, r3, #21
 80004bc:	22fa      	movs	r2, #250	; 0xfa
 80004be:	0092      	lsls	r2, r2, #2
 80004c0:	4694      	mov	ip, r2
 80004c2:	4463      	add	r3, ip
 80004c4:	0018      	movs	r0, r3
 80004c6:	f001 fd39 	bl	8001f3c <HAL_Delay>
 80004ca:	e7d5      	b.n	8000478 <main+0x204>
			continue;
		} else {
			aKeys.pairing = 0;
 80004cc:	4b30      	ldr	r3, [pc, #192]	; (8000590 <main+0x31c>)
 80004ce:	2282      	movs	r2, #130	; 0x82
 80004d0:	2100      	movs	r1, #0
 80004d2:	5499      	strb	r1, [r3, r2]
		}

		if (aKeys.gotOther) {
 80004d4:	4b2e      	ldr	r3, [pc, #184]	; (8000590 <main+0x31c>)
 80004d6:	2280      	movs	r2, #128	; 0x80
 80004d8:	5c9b      	ldrb	r3, [r3, r2]
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d011      	beq.n	8000504 <main+0x290>
			C25519keyExchange(aKeys.sharedSecret, (uint8_t*) aKeys.privateKey,
 80004e0:	4a33      	ldr	r2, [pc, #204]	; (80005b0 <main+0x33c>)
 80004e2:	492b      	ldr	r1, [pc, #172]	; (8000590 <main+0x31c>)
 80004e4:	4b33      	ldr	r3, [pc, #204]	; (80005b4 <main+0x340>)
 80004e6:	0018      	movs	r0, r3
 80004e8:	f007 fe68 	bl	80081bc <C25519keyExchange>
					aKeys.otherPublicKey);
			rfm95_init(&radio);
 80004ec:	4b24      	ldr	r3, [pc, #144]	; (8000580 <main+0x30c>)
 80004ee:	0018      	movs	r0, r3
 80004f0:	f000 fea6 	bl	8001240 <rfm95_init>
			aKeys.gotOther = 0;
 80004f4:	4b26      	ldr	r3, [pc, #152]	; (8000590 <main+0x31c>)
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	2100      	movs	r1, #0
 80004fa:	5499      	strb	r1, [r3, r2]
			aKeys.masterSent = 1;
 80004fc:	4b24      	ldr	r3, [pc, #144]	; (8000590 <main+0x31c>)
 80004fe:	2281      	movs	r2, #129	; 0x81
 8000500:	2101      	movs	r1, #1
 8000502:	5499      	strb	r1, [r3, r2]
		}

		if (aKeys.masterSent && aKeys.masterSent++ <= 10) {
 8000504:	4b22      	ldr	r3, [pc, #136]	; (8000590 <main+0x31c>)
 8000506:	2281      	movs	r2, #129	; 0x81
 8000508:	5c9b      	ldrb	r3, [r3, r2]
 800050a:	b2db      	uxtb	r3, r3
 800050c:	2b00      	cmp	r3, #0
 800050e:	d055      	beq.n	80005bc <main+0x348>
 8000510:	4b1f      	ldr	r3, [pc, #124]	; (8000590 <main+0x31c>)
 8000512:	2281      	movs	r2, #129	; 0x81
 8000514:	5c9b      	ldrb	r3, [r3, r2]
 8000516:	b2db      	uxtb	r3, r3
 8000518:	1c5a      	adds	r2, r3, #1
 800051a:	b2d0      	uxtb	r0, r2
 800051c:	4a1c      	ldr	r2, [pc, #112]	; (8000590 <main+0x31c>)
 800051e:	2181      	movs	r1, #129	; 0x81
 8000520:	5450      	strb	r0, [r2, r1]
 8000522:	2b0a      	cmp	r3, #10
 8000524:	d84a      	bhi.n	80005bc <main+0x348>
//				rfm95_read(RFM95_REGISTER_OP_MODE, &regopmode);
//				rfm95_write(RFM95_REGISTER_OP_MODE,
//				RFM95_REGISTER_OP_MODE_LORA_RXCONTINUOUS | 0x80);
				//we're a slave device and we can just sit and wait for master count to ++
			}
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000526:	2380      	movs	r3, #128	; 0x80
 8000528:	009b      	lsls	r3, r3, #2
 800052a:	4823      	ldr	r0, [pc, #140]	; (80005b8 <main+0x344>)
 800052c:	2200      	movs	r2, #0
 800052e:	0019      	movs	r1, r3
 8000530:	f003 fb9d 	bl	8003c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000534:	2380      	movs	r3, #128	; 0x80
 8000536:	00db      	lsls	r3, r3, #3
 8000538:	4813      	ldr	r0, [pc, #76]	; (8000588 <main+0x314>)
 800053a:	2201      	movs	r2, #1
 800053c:	0019      	movs	r1, r3
 800053e:	f003 fb96 	bl	8003c6e <HAL_GPIO_WritePin>
			HAL_Delay(500);
 8000542:	23fa      	movs	r3, #250	; 0xfa
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	0018      	movs	r0, r3
 8000548:	f001 fcf8 	bl	8001f3c <HAL_Delay>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800054c:	2380      	movs	r3, #128	; 0x80
 800054e:	009b      	lsls	r3, r3, #2
 8000550:	4819      	ldr	r0, [pc, #100]	; (80005b8 <main+0x344>)
 8000552:	2201      	movs	r2, #1
 8000554:	0019      	movs	r1, r3
 8000556:	f003 fb8a 	bl	8003c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800055a:	2380      	movs	r3, #128	; 0x80
 800055c:	00db      	lsls	r3, r3, #3
 800055e:	480a      	ldr	r0, [pc, #40]	; (8000588 <main+0x314>)
 8000560:	2200      	movs	r2, #0
 8000562:	0019      	movs	r1, r3
 8000564:	f003 fb83 	bl	8003c6e <HAL_GPIO_WritePin>
			HAL_Delay(500);
 8000568:	23fa      	movs	r3, #250	; 0xfa
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	0018      	movs	r0, r3
 800056e:	f001 fce5 	bl	8001f3c <HAL_Delay>
			continue;
 8000572:	e094      	b.n	800069e <main+0x42a>
 8000574:	20000588 	.word	0x20000588
 8000578:	20000610 	.word	0x20000610
 800057c:	20000578 	.word	0x20000578
 8000580:	20000598 	.word	0x20000598
 8000584:	20000634 	.word	0x20000634
 8000588:	50000800 	.word	0x50000800
 800058c:	08000fd5 	.word	0x08000fd5
 8000590:	20000698 	.word	0x20000698
 8000594:	20000874 	.word	0x20000874
 8000598:	2000071c 	.word	0x2000071c
 800059c:	200005c4 	.word	0x200005c4
 80005a0:	20000114 	.word	0x20000114
 80005a4:	20000620 	.word	0x20000620
 80005a8:	20000124 	.word	0x20000124
 80005ac:	200006b8 	.word	0x200006b8
 80005b0:	200006d8 	.word	0x200006d8
 80005b4:	200006f8 	.word	0x200006f8
 80005b8:	50000400 	.word	0x50000400
		} else {
			aKeys.masterSent = 0;
 80005bc:	4b38      	ldr	r3, [pc, #224]	; (80006a0 <main+0x42c>)
 80005be:	2281      	movs	r2, #129	; 0x81
 80005c0:	2100      	movs	r1, #0
 80005c2:	5499      	strb	r1, [r3, r2]
		}

		if (outgoing.data) {
 80005c4:	4b37      	ldr	r3, [pc, #220]	; (80006a4 <main+0x430>)
 80005c6:	7998      	ldrb	r0, [r3, #6]
 80005c8:	79dc      	ldrb	r4, [r3, #7]
 80005ca:	0224      	lsls	r4, r4, #8
 80005cc:	4320      	orrs	r0, r4
 80005ce:	7a1c      	ldrb	r4, [r3, #8]
 80005d0:	0424      	lsls	r4, r4, #16
 80005d2:	4320      	orrs	r0, r4
 80005d4:	7a5c      	ldrb	r4, [r3, #9]
 80005d6:	0624      	lsls	r4, r4, #24
 80005d8:	4320      	orrs	r0, r4
 80005da:	0001      	movs	r1, r0
 80005dc:	7a98      	ldrb	r0, [r3, #10]
 80005de:	7adc      	ldrb	r4, [r3, #11]
 80005e0:	0224      	lsls	r4, r4, #8
 80005e2:	4320      	orrs	r0, r4
 80005e4:	7b1c      	ldrb	r4, [r3, #12]
 80005e6:	0424      	lsls	r4, r4, #16
 80005e8:	4320      	orrs	r0, r4
 80005ea:	7b5b      	ldrb	r3, [r3, #13]
 80005ec:	061b      	lsls	r3, r3, #24
 80005ee:	4303      	orrs	r3, r0
 80005f0:	001a      	movs	r2, r3
 80005f2:	000b      	movs	r3, r1
 80005f4:	4313      	orrs	r3, r2
 80005f6:	d048      	beq.n	800068a <main+0x416>
			//encrypt and transmit the outgoing packet
			uint32_t tempin[4] = { 0 };
 80005f8:	2444      	movs	r4, #68	; 0x44
 80005fa:	193b      	adds	r3, r7, r4
 80005fc:	0018      	movs	r0, r3
 80005fe:	2310      	movs	r3, #16
 8000600:	001a      	movs	r2, r3
 8000602:	2100      	movs	r1, #0
 8000604:	f007 fe5d 	bl	80082c2 <memset>
			uint32_t tempout[4] = { 0 };
 8000608:	2534      	movs	r5, #52	; 0x34
 800060a:	197b      	adds	r3, r7, r5
 800060c:	0018      	movs	r0, r3
 800060e:	2310      	movs	r3, #16
 8000610:	001a      	movs	r2, r3
 8000612:	2100      	movs	r1, #0
 8000614:	f007 fe55 	bl	80082c2 <memset>
			memcpy(tempin, &outgoing, sizeof(Packet));
 8000618:	193a      	adds	r2, r7, r4
 800061a:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <main+0x430>)
 800061c:	0010      	movs	r0, r2
 800061e:	0019      	movs	r1, r3
 8000620:	230e      	movs	r3, #14
 8000622:	001a      	movs	r2, r3
 8000624:	f007 fe44 	bl	80082b0 <memcpy>
			// todo don't delete data before SENDING!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//			outgoing.data = 0;
//			for (int i = 0; i<16; i++) {
//				tempout[i] = 42+i;
//			}
			HAL_CRYP_Encrypt(&hcryp, (uint8_t*) tempin, 16, (uint8_t*) tempout,
 8000628:	197a      	adds	r2, r7, r5
 800062a:	1939      	adds	r1, r7, r4
 800062c:	481e      	ldr	r0, [pc, #120]	; (80006a8 <main+0x434>)
 800062e:	2301      	movs	r3, #1
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	0013      	movs	r3, r2
 8000634:	2210      	movs	r2, #16
 8000636:	f001 fea1 	bl	800237c <HAL_CRYP_Encrypt>
					1);
			outgoing.data = 0;
 800063a:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <main+0x430>)
 800063c:	3306      	adds	r3, #6
 800063e:	781a      	ldrb	r2, [r3, #0]
 8000640:	2100      	movs	r1, #0
 8000642:	400a      	ands	r2, r1
 8000644:	701a      	strb	r2, [r3, #0]
 8000646:	785a      	ldrb	r2, [r3, #1]
 8000648:	2100      	movs	r1, #0
 800064a:	400a      	ands	r2, r1
 800064c:	705a      	strb	r2, [r3, #1]
 800064e:	789a      	ldrb	r2, [r3, #2]
 8000650:	2100      	movs	r1, #0
 8000652:	400a      	ands	r2, r1
 8000654:	709a      	strb	r2, [r3, #2]
 8000656:	78da      	ldrb	r2, [r3, #3]
 8000658:	2100      	movs	r1, #0
 800065a:	400a      	ands	r2, r1
 800065c:	70da      	strb	r2, [r3, #3]
 800065e:	791a      	ldrb	r2, [r3, #4]
 8000660:	2100      	movs	r1, #0
 8000662:	400a      	ands	r2, r1
 8000664:	711a      	strb	r2, [r3, #4]
 8000666:	795a      	ldrb	r2, [r3, #5]
 8000668:	2100      	movs	r1, #0
 800066a:	400a      	ands	r2, r1
 800066c:	715a      	strb	r2, [r3, #5]
 800066e:	799a      	ldrb	r2, [r3, #6]
 8000670:	2100      	movs	r1, #0
 8000672:	400a      	ands	r2, r1
 8000674:	719a      	strb	r2, [r3, #6]
 8000676:	79da      	ldrb	r2, [r3, #7]
 8000678:	2100      	movs	r1, #0
 800067a:	400a      	ands	r2, r1
 800067c:	71da      	strb	r2, [r3, #7]
			transmitPackage((uint8_t*) tempout, 16); // change this to tempout
 800067e:	197b      	adds	r3, r7, r5
 8000680:	2110      	movs	r1, #16
 8000682:	0018      	movs	r0, r3
 8000684:	f000 ffa6 	bl	80015d4 <transmitPackage>
 8000688:	e6f6      	b.n	8000478 <main+0x204>
			continue;
		}

		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800068a:	2380      	movs	r3, #128	; 0x80
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	4a07      	ldr	r2, [pc, #28]	; (80006ac <main+0x438>)
 8000690:	0019      	movs	r1, r3
 8000692:	0010      	movs	r0, r2
 8000694:	f003 fb08 	bl	8003ca8 <HAL_GPIO_TogglePin>

//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
		HAL_Delay(10);
 8000698:	200a      	movs	r0, #10
 800069a:	f001 fc4f 	bl	8001f3c <HAL_Delay>
		if (aKeys.pairing && aKeys.pairing++ <= 5) {
 800069e:	e6eb      	b.n	8000478 <main+0x204>
 80006a0:	20000698 	.word	0x20000698
 80006a4:	20000874 	.word	0x20000874
 80006a8:	20000768 	.word	0x20000768
 80006ac:	50000400 	.word	0x50000400

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b0a1      	sub	sp, #132	; 0x84
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	2448      	movs	r4, #72	; 0x48
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	0018      	movs	r0, r3
 80006bc:	2338      	movs	r3, #56	; 0x38
 80006be:	001a      	movs	r2, r3
 80006c0:	2100      	movs	r1, #0
 80006c2:	f007 fdfe 	bl	80082c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c6:	2338      	movs	r3, #56	; 0x38
 80006c8:	18fb      	adds	r3, r7, r3
 80006ca:	0018      	movs	r0, r3
 80006cc:	2310      	movs	r3, #16
 80006ce:	001a      	movs	r2, r3
 80006d0:	2100      	movs	r1, #0
 80006d2:	f007 fdf6 	bl	80082c2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d6:	003b      	movs	r3, r7
 80006d8:	0018      	movs	r0, r3
 80006da:	2338      	movs	r3, #56	; 0x38
 80006dc:	001a      	movs	r2, r3
 80006de:	2100      	movs	r1, #0
 80006e0:	f007 fdef 	bl	80082c2 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	0018      	movs	r0, r3
 80006ea:	f003 fb23 	bl	8003d34 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	2202      	movs	r2, #2
 80006f2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	2280      	movs	r2, #128	; 0x80
 80006f8:	0052      	lsls	r2, r2, #1
 80006fa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006fc:	0021      	movs	r1, r4
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000704:	187b      	adds	r3, r7, r1
 8000706:	2240      	movs	r2, #64	; 0x40
 8000708:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2202      	movs	r2, #2
 800070e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000710:	187b      	adds	r3, r7, r1
 8000712:	2202      	movs	r2, #2
 8000714:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2200      	movs	r2, #0
 800071a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800071c:	187b      	adds	r3, r7, r1
 800071e:	2208      	movs	r2, #8
 8000720:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2280      	movs	r2, #128	; 0x80
 8000726:	0292      	lsls	r2, r2, #10
 8000728:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2280      	movs	r2, #128	; 0x80
 800072e:	0492      	lsls	r2, r2, #18
 8000730:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2280      	movs	r2, #128	; 0x80
 8000736:	0592      	lsls	r2, r2, #22
 8000738:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073a:	187b      	adds	r3, r7, r1
 800073c:	0018      	movs	r0, r3
 800073e:	f003 fb39 	bl	8003db4 <HAL_RCC_OscConfig>
 8000742:	1e03      	subs	r3, r0, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000746:	f000 fd76 	bl	8001236 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074a:	2138      	movs	r1, #56	; 0x38
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2207      	movs	r2, #7
 8000750:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2202      	movs	r2, #2
 8000756:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000758:	187b      	adds	r3, r7, r1
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800075e:	187b      	adds	r3, r7, r1
 8000760:	2200      	movs	r2, #0
 8000762:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000764:	187b      	adds	r3, r7, r1
 8000766:	2102      	movs	r1, #2
 8000768:	0018      	movs	r0, r3
 800076a:	f003 fe43 	bl	80043f4 <HAL_RCC_ClockConfig>
 800076e:	1e03      	subs	r3, r0, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000772:	f000 fd60 	bl	8001236 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_TIM1;
 8000776:	003b      	movs	r3, r7
 8000778:	2290      	movs	r2, #144	; 0x90
 800077a:	0392      	lsls	r2, r2, #14
 800077c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI_DIV8;
 800077e:	003b      	movs	r3, r7
 8000780:	2280      	movs	r2, #128	; 0x80
 8000782:	04d2      	lsls	r2, r2, #19
 8000784:	621a      	str	r2, [r3, #32]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000786:	003b      	movs	r3, r7
 8000788:	2200      	movs	r2, #0
 800078a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800078c:	003b      	movs	r3, r7
 800078e:	0018      	movs	r0, r3
 8000790:	f003 ffba 	bl	8004708 <HAL_RCCEx_PeriphCLKConfig>
 8000794:	1e03      	subs	r3, r0, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000798:	f000 fd4d 	bl	8001236 <Error_Handler>
  }
  /** Configure the RNG clock.
  */
  __HAL_RCC_RNGDIV_CONFIG(RCC_RNGCLK_DIV1);
 800079c:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <SystemClock_Config+0x100>)
 800079e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80007a0:	4b03      	ldr	r3, [pc, #12]	; (80007b0 <SystemClock_Config+0x100>)
 80007a2:	4904      	ldr	r1, [pc, #16]	; (80007b4 <SystemClock_Config+0x104>)
 80007a4:	400a      	ands	r2, r1
 80007a6:	655a      	str	r2, [r3, #84]	; 0x54
}
 80007a8:	46c0      	nop			; (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	b021      	add	sp, #132	; 0x84
 80007ae:	bd90      	pop	{r4, r7, pc}
 80007b0:	40021000 	.word	0x40021000
 80007b4:	cfffffff 	.word	0xcfffffff

080007b8 <MX_AES_Init>:
  * @brief AES Initialization Function
  * @param None
  * @retval None
  */
static void MX_AES_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END AES_Init 0 */

  /* USER CODE BEGIN AES_Init 1 */

  /* USER CODE END AES_Init 1 */
  hcryp.Instance = AES;
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_AES_Init+0x50>)
 80007be:	4a13      	ldr	r2, [pc, #76]	; (800080c <MX_AES_Init+0x54>)
 80007c0:	601a      	str	r2, [r3, #0]
  hcryp.Init.DataType = CRYP_DATATYPE_8B;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_AES_Init+0x50>)
 80007c4:	2204      	movs	r2, #4
 80007c6:	605a      	str	r2, [r3, #4]
  hcryp.Init.KeySize = CRYP_KEYSIZE_128B;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_AES_Init+0x50>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  hcryp.Init.pKey = (uint32_t *)pKeyAES;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_AES_Init+0x50>)
 80007d0:	4a0f      	ldr	r2, [pc, #60]	; (8000810 <MX_AES_Init+0x58>)
 80007d2:	60da      	str	r2, [r3, #12]
  hcryp.Init.pInitVect = (uint32_t *)pInitVectAES;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_AES_Init+0x50>)
 80007d6:	4a0f      	ldr	r2, [pc, #60]	; (8000814 <MX_AES_Init+0x5c>)
 80007d8:	611a      	str	r2, [r3, #16]
  hcryp.Init.Algorithm = CRYP_AES_CBC;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_AES_Init+0x50>)
 80007dc:	2220      	movs	r2, #32
 80007de:	615a      	str	r2, [r3, #20]
  hcryp.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_AES_Init+0x50>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	625a      	str	r2, [r3, #36]	; 0x24
  hcryp.Init.HeaderWidthUnit = CRYP_HEADERWIDTHUNIT_BYTE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_AES_Init+0x50>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	629a      	str	r2, [r3, #40]	; 0x28
  hcryp.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ALWAYS;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_AES_Init+0x50>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_CRYP_Init(&hcryp) != HAL_OK)
 80007f2:	4b05      	ldr	r3, [pc, #20]	; (8000808 <MX_AES_Init+0x50>)
 80007f4:	0018      	movs	r0, r3
 80007f6:	f001 fd83 	bl	8002300 <HAL_CRYP_Init>
 80007fa:	1e03      	subs	r3, r0, #0
 80007fc:	d001      	beq.n	8000802 <MX_AES_Init+0x4a>
  {
    Error_Handler();
 80007fe:	f000 fd1a 	bl	8001236 <Error_Handler>
  }
  /* USER CODE BEGIN AES_Init 2 */
  /* USER CODE END AES_Init 2 */

}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000768 	.word	0x20000768
 800080c:	40026000 	.word	0x40026000
 8000810:	20000114 	.word	0x20000114
 8000814:	08009318 	.word	0x08009318

08000818 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800081c:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_CRC_Init+0x40>)
 800081e:	4a0f      	ldr	r2, [pc, #60]	; (800085c <MX_CRC_Init+0x44>)
 8000820:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000822:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <MX_CRC_Init+0x40>)
 8000824:	2200      	movs	r2, #0
 8000826:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000828:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <MX_CRC_Init+0x40>)
 800082a:	2200      	movs	r2, #0
 800082c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800082e:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <MX_CRC_Init+0x40>)
 8000830:	2200      	movs	r2, #0
 8000832:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000834:	4b08      	ldr	r3, [pc, #32]	; (8000858 <MX_CRC_Init+0x40>)
 8000836:	2200      	movs	r2, #0
 8000838:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800083a:	4b07      	ldr	r3, [pc, #28]	; (8000858 <MX_CRC_Init+0x40>)
 800083c:	2201      	movs	r2, #1
 800083e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <MX_CRC_Init+0x40>)
 8000842:	0018      	movs	r0, r3
 8000844:	f001 fc90 	bl	8002168 <HAL_CRC_Init>
 8000848:	1e03      	subs	r3, r0, #0
 800084a:	d001      	beq.n	8000850 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800084c:	f000 fcf3 	bl	8001236 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000850:	46c0      	nop			; (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	20000550 	.word	0x20000550
 800085c:	40023000 	.word	0x40023000

08000860 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000864:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_RNG_Init+0x28>)
 8000866:	4a09      	ldr	r2, [pc, #36]	; (800088c <MX_RNG_Init+0x2c>)
 8000868:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800086a:	4b07      	ldr	r3, [pc, #28]	; (8000888 <MX_RNG_Init+0x28>)
 800086c:	2200      	movs	r2, #0
 800086e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <MX_RNG_Init+0x28>)
 8000872:	0018      	movs	r0, r3
 8000874:	f004 f922 	bl	8004abc <HAL_RNG_Init>
 8000878:	1e03      	subs	r3, r0, #0
 800087a:	d001      	beq.n	8000880 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 800087c:	f000 fcdb 	bl	8001236 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000880:	46c0      	nop			; (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	20000620 	.word	0x20000620
 800088c:	40025000 	.word	0x40025000

08000890 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000894:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <MX_SPI1_Init+0x74>)
 8000896:	4a1c      	ldr	r2, [pc, #112]	; (8000908 <MX_SPI1_Init+0x78>)
 8000898:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800089a:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <MX_SPI1_Init+0x74>)
 800089c:	2282      	movs	r2, #130	; 0x82
 800089e:	0052      	lsls	r2, r2, #1
 80008a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008a2:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_SPI1_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008a8:	4b16      	ldr	r3, [pc, #88]	; (8000904 <MX_SPI1_Init+0x74>)
 80008aa:	22e0      	movs	r2, #224	; 0xe0
 80008ac:	00d2      	lsls	r2, r2, #3
 80008ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_SPI1_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <MX_SPI1_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_SPI1_Init+0x74>)
 80008be:	2280      	movs	r2, #128	; 0x80
 80008c0:	0092      	lsls	r2, r2, #2
 80008c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_SPI1_Init+0x74>)
 80008c6:	2218      	movs	r2, #24
 80008c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_SPI1_Init+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_SPI1_Init+0x74>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_SPI1_Init+0x74>)
 80008d8:	2200      	movs	r2, #0
 80008da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_SPI1_Init+0x74>)
 80008de:	2207      	movs	r2, #7
 80008e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_SPI1_Init+0x74>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_SPI1_Init+0x74>)
 80008ea:	2208      	movs	r2, #8
 80008ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008ee:	4b05      	ldr	r3, [pc, #20]	; (8000904 <MX_SPI1_Init+0x74>)
 80008f0:	0018      	movs	r0, r3
 80008f2:	f004 f971 	bl	8004bd8 <HAL_SPI_Init>
 80008f6:	1e03      	subs	r3, r0, #0
 80008f8:	d001      	beq.n	80008fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008fa:	f000 fc9c 	bl	8001236 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000634 	.word	0x20000634
 8000908:	40013000 	.word	0x40013000

0800090c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b098      	sub	sp, #96	; 0x60
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000912:	2354      	movs	r3, #84	; 0x54
 8000914:	18fb      	adds	r3, r7, r3
 8000916:	0018      	movs	r0, r3
 8000918:	230c      	movs	r3, #12
 800091a:	001a      	movs	r2, r3
 800091c:	2100      	movs	r1, #0
 800091e:	f007 fcd0 	bl	80082c2 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000922:	2338      	movs	r3, #56	; 0x38
 8000924:	18fb      	adds	r3, r7, r3
 8000926:	0018      	movs	r0, r3
 8000928:	231c      	movs	r3, #28
 800092a:	001a      	movs	r2, r3
 800092c:	2100      	movs	r1, #0
 800092e:	f007 fcc8 	bl	80082c2 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	0018      	movs	r0, r3
 8000936:	2334      	movs	r3, #52	; 0x34
 8000938:	001a      	movs	r2, r3
 800093a:	2100      	movs	r1, #0
 800093c:	f007 fcc1 	bl	80082c2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000940:	4b45      	ldr	r3, [pc, #276]	; (8000a58 <MX_TIM1_Init+0x14c>)
 8000942:	4a46      	ldr	r2, [pc, #280]	; (8000a5c <MX_TIM1_Init+0x150>)
 8000944:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000946:	4b44      	ldr	r3, [pc, #272]	; (8000a58 <MX_TIM1_Init+0x14c>)
 8000948:	2200      	movs	r2, #0
 800094a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094c:	4b42      	ldr	r3, [pc, #264]	; (8000a58 <MX_TIM1_Init+0x14c>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000952:	4b41      	ldr	r3, [pc, #260]	; (8000a58 <MX_TIM1_Init+0x14c>)
 8000954:	4a42      	ldr	r2, [pc, #264]	; (8000a60 <MX_TIM1_Init+0x154>)
 8000956:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000958:	4b3f      	ldr	r3, [pc, #252]	; (8000a58 <MX_TIM1_Init+0x14c>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800095e:	4b3e      	ldr	r3, [pc, #248]	; (8000a58 <MX_TIM1_Init+0x14c>)
 8000960:	2200      	movs	r2, #0
 8000962:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000964:	4b3c      	ldr	r3, [pc, #240]	; (8000a58 <MX_TIM1_Init+0x14c>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800096a:	4b3b      	ldr	r3, [pc, #236]	; (8000a58 <MX_TIM1_Init+0x14c>)
 800096c:	0018      	movs	r0, r3
 800096e:	f005 f8df 	bl	8005b30 <HAL_TIM_PWM_Init>
 8000972:	1e03      	subs	r3, r0, #0
 8000974:	d001      	beq.n	800097a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000976:	f000 fc5e 	bl	8001236 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800097a:	2154      	movs	r1, #84	; 0x54
 800097c:	187b      	adds	r3, r7, r1
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000982:	187b      	adds	r3, r7, r1
 8000984:	2200      	movs	r2, #0
 8000986:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800098e:	187a      	adds	r2, r7, r1
 8000990:	4b31      	ldr	r3, [pc, #196]	; (8000a58 <MX_TIM1_Init+0x14c>)
 8000992:	0011      	movs	r1, r2
 8000994:	0018      	movs	r0, r3
 8000996:	f005 ffbd 	bl	8006914 <HAL_TIMEx_MasterConfigSynchronization>
 800099a:	1e03      	subs	r3, r0, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800099e:	f000 fc4a 	bl	8001236 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009a2:	2138      	movs	r1, #56	; 0x38
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	2260      	movs	r2, #96	; 0x60
 80009a8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	2200      	movs	r2, #0
 80009ae:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2200      	movs	r2, #0
 80009ba:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2200      	movs	r2, #0
 80009c6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ce:	1879      	adds	r1, r7, r1
 80009d0:	4b21      	ldr	r3, [pc, #132]	; (8000a58 <MX_TIM1_Init+0x14c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	0018      	movs	r0, r3
 80009d6:	f005 fb1f 	bl	8006018 <HAL_TIM_PWM_ConfigChannel>
 80009da:	1e03      	subs	r3, r0, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80009de:	f000 fc2a 	bl	8001236 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	2200      	movs	r2, #0
 80009ec:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	2280      	movs	r2, #128	; 0x80
 8000a04:	0192      	lsls	r2, r2, #6
 8000a06:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	2200      	movs	r2, #0
 8000a12:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	2200      	movs	r2, #0
 8000a18:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	2280      	movs	r2, #128	; 0x80
 8000a1e:	0492      	lsls	r2, r2, #18
 8000a20:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	2200      	movs	r2, #0
 8000a26:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	2200      	movs	r2, #0
 8000a32:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a34:	1d3a      	adds	r2, r7, #4
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <MX_TIM1_Init+0x14c>)
 8000a38:	0011      	movs	r1, r2
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f005 ffd8 	bl	80069f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a40:	1e03      	subs	r3, r0, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000a44:	f000 fbf7 	bl	8001236 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a48:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <MX_TIM1_Init+0x14c>)
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f001 f880 	bl	8001b50 <HAL_TIM_MspPostInit>

}
 8000a50:	46c0      	nop			; (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	b018      	add	sp, #96	; 0x60
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	200005c4 	.word	0x200005c4
 8000a5c:	40012c00 	.word	0x40012c00
 8000a60:	0000ffff 	.word	0x0000ffff

08000a64 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_TIM16_Init+0x44>)
 8000a6a:	4a10      	ldr	r2, [pc, #64]	; (8000aac <MX_TIM16_Init+0x48>)
 8000a6c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 64;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <MX_TIM16_Init+0x44>)
 8000a70:	2240      	movs	r2, #64	; 0x40
 8000a72:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_TIM16_Init+0x44>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 25000;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <MX_TIM16_Init+0x44>)
 8000a7c:	4a0c      	ldr	r2, [pc, #48]	; (8000ab0 <MX_TIM16_Init+0x4c>)
 8000a7e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_TIM16_Init+0x44>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <MX_TIM16_Init+0x44>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_TIM16_Init+0x44>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000a92:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <MX_TIM16_Init+0x44>)
 8000a94:	0018      	movs	r0, r3
 8000a96:	f004 ff97 	bl	80059c8 <HAL_TIM_Base_Init>
 8000a9a:	1e03      	subs	r3, r0, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8000a9e:	f000 fbca 	bl	8001236 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	2000071c 	.word	0x2000071c
 8000aac:	40014400 	.word	0x40014400
 8000ab0:	000061a8 	.word	0x000061a8

08000ab4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b089      	sub	sp, #36	; 0x24
 8000ab8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aba:	240c      	movs	r4, #12
 8000abc:	193b      	adds	r3, r7, r4
 8000abe:	0018      	movs	r0, r3
 8000ac0:	2314      	movs	r3, #20
 8000ac2:	001a      	movs	r2, r3
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	f007 fbfc 	bl	80082c2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	4b56      	ldr	r3, [pc, #344]	; (8000c24 <MX_GPIO_Init+0x170>)
 8000acc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ace:	4b55      	ldr	r3, [pc, #340]	; (8000c24 <MX_GPIO_Init+0x170>)
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ad6:	4b53      	ldr	r3, [pc, #332]	; (8000c24 <MX_GPIO_Init+0x170>)
 8000ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ada:	2201      	movs	r2, #1
 8000adc:	4013      	ands	r3, r2
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae2:	4b50      	ldr	r3, [pc, #320]	; (8000c24 <MX_GPIO_Init+0x170>)
 8000ae4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ae6:	4b4f      	ldr	r3, [pc, #316]	; (8000c24 <MX_GPIO_Init+0x170>)
 8000ae8:	2104      	movs	r1, #4
 8000aea:	430a      	orrs	r2, r1
 8000aec:	635a      	str	r2, [r3, #52]	; 0x34
 8000aee:	4b4d      	ldr	r3, [pc, #308]	; (8000c24 <MX_GPIO_Init+0x170>)
 8000af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000af2:	2204      	movs	r2, #4
 8000af4:	4013      	ands	r3, r2
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	4b4a      	ldr	r3, [pc, #296]	; (8000c24 <MX_GPIO_Init+0x170>)
 8000afc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000afe:	4b49      	ldr	r3, [pc, #292]	; (8000c24 <MX_GPIO_Init+0x170>)
 8000b00:	2102      	movs	r1, #2
 8000b02:	430a      	orrs	r2, r1
 8000b04:	635a      	str	r2, [r3, #52]	; 0x34
 8000b06:	4b47      	ldr	r3, [pc, #284]	; (8000c24 <MX_GPIO_Init+0x170>)
 8000b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_CS_GPIO_Port, RADIO_CS_Pin, GPIO_PIN_RESET);
 8000b12:	23a0      	movs	r3, #160	; 0xa0
 8000b14:	05db      	lsls	r3, r3, #23
 8000b16:	2200      	movs	r2, #0
 8000b18:	2180      	movs	r1, #128	; 0x80
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f003 f8a7 	bl	8003c6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RADIO_RESET_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000b20:	2382      	movs	r3, #130	; 0x82
 8000b22:	00db      	lsls	r3, r3, #3
 8000b24:	4840      	ldr	r0, [pc, #256]	; (8000c28 <MX_GPIO_Init+0x174>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	0019      	movs	r1, r3
 8000b2a:	f003 f8a0 	bl	8003c6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000b2e:	2380      	movs	r3, #128	; 0x80
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	483e      	ldr	r0, [pc, #248]	; (8000c2c <MX_GPIO_Init+0x178>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	0019      	movs	r1, r3
 8000b38:	f003 f899 	bl	8003c6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RADIO_INT_Pin */
  GPIO_InitStruct.Pin = RADIO_INT_Pin;
 8000b3c:	193b      	adds	r3, r7, r4
 8000b3e:	2201      	movs	r2, #1
 8000b40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b42:	193b      	adds	r3, r7, r4
 8000b44:	4a3a      	ldr	r2, [pc, #232]	; (8000c30 <MX_GPIO_Init+0x17c>)
 8000b46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b48:	193b      	adds	r3, r7, r4
 8000b4a:	2202      	movs	r2, #2
 8000b4c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RADIO_INT_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	193a      	adds	r2, r7, r4
 8000b50:	23a0      	movs	r3, #160	; 0xa0
 8000b52:	05db      	lsls	r3, r3, #23
 8000b54:	0011      	movs	r1, r2
 8000b56:	0018      	movs	r0, r3
 8000b58:	f002 ff08 	bl	800396c <HAL_GPIO_Init>

  /*Configure GPIO pin : RADIO_CS_Pin */
  GPIO_InitStruct.Pin = RADIO_CS_Pin;
 8000b5c:	0021      	movs	r1, r4
 8000b5e:	187b      	adds	r3, r7, r1
 8000b60:	2280      	movs	r2, #128	; 0x80
 8000b62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	2201      	movs	r2, #1
 8000b68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b6a:	187b      	adds	r3, r7, r1
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RADIO_CS_GPIO_Port, &GPIO_InitStruct);
 8000b76:	000c      	movs	r4, r1
 8000b78:	187a      	adds	r2, r7, r1
 8000b7a:	23a0      	movs	r3, #160	; 0xa0
 8000b7c:	05db      	lsls	r3, r3, #23
 8000b7e:	0011      	movs	r1, r2
 8000b80:	0018      	movs	r0, r3
 8000b82:	f002 fef3 	bl	800396c <HAL_GPIO_Init>

  /*Configure GPIO pins : RADIO_RESET_Pin LED2_Pin */
  GPIO_InitStruct.Pin = RADIO_RESET_Pin|LED2_Pin;
 8000b86:	0021      	movs	r1, r4
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	2282      	movs	r2, #130	; 0x82
 8000b8c:	00d2      	lsls	r2, r2, #3
 8000b8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	2201      	movs	r2, #1
 8000b94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	187b      	adds	r3, r7, r1
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	187b      	adds	r3, r7, r1
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba2:	000c      	movs	r4, r1
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	4a20      	ldr	r2, [pc, #128]	; (8000c28 <MX_GPIO_Init+0x174>)
 8000ba8:	0019      	movs	r1, r3
 8000baa:	0010      	movs	r0, r2
 8000bac:	f002 fede 	bl	800396c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAIR_Pin RESET2_Pin VIBE_BUTTON_Pin */
  GPIO_InitStruct.Pin = PAIR_Pin|RESET2_Pin|VIBE_BUTTON_Pin;
 8000bb0:	0021      	movs	r1, r4
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	2285      	movs	r2, #133	; 0x85
 8000bb6:	0192      	lsls	r2, r2, #6
 8000bb8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	4a1d      	ldr	r2, [pc, #116]	; (8000c34 <MX_GPIO_Init+0x180>)
 8000bbe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc6:	000c      	movs	r4, r1
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	4a18      	ldr	r2, [pc, #96]	; (8000c2c <MX_GPIO_Init+0x178>)
 8000bcc:	0019      	movs	r1, r3
 8000bce:	0010      	movs	r0, r2
 8000bd0:	f002 fecc 	bl	800396c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000bd4:	0021      	movs	r1, r4
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	2280      	movs	r2, #128	; 0x80
 8000bda:	0092      	lsls	r2, r2, #2
 8000bdc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bde:	187b      	adds	r3, r7, r1
 8000be0:	2201      	movs	r2, #1
 8000be2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	187b      	adds	r3, r7, r1
 8000bec:	2200      	movs	r2, #0
 8000bee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	187b      	adds	r3, r7, r1
 8000bf2:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <MX_GPIO_Init+0x178>)
 8000bf4:	0019      	movs	r1, r3
 8000bf6:	0010      	movs	r0, r2
 8000bf8:	f002 feb8 	bl	800396c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2101      	movs	r1, #1
 8000c00:	2005      	movs	r0, #5
 8000c02:	f001 fa7f 	bl	8002104 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000c06:	2005      	movs	r0, #5
 8000c08:	f001 fa91 	bl	800212e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2101      	movs	r1, #1
 8000c10:	2007      	movs	r0, #7
 8000c12:	f001 fa77 	bl	8002104 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000c16:	2007      	movs	r0, #7
 8000c18:	f001 fa89 	bl	800212e <HAL_NVIC_EnableIRQ>

}
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b009      	add	sp, #36	; 0x24
 8000c22:	bd90      	pop	{r4, r7, pc}
 8000c24:	40021000 	.word	0x40021000
 8000c28:	50000800 	.word	0x50000800
 8000c2c:	50000400 	.word	0x50000400
 8000c30:	10110000 	.word	0x10110000
 8000c34:	10210000 	.word	0x10210000

08000c38 <HAL_GPIO_EXTI_Falling_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8000c38:	b590      	push	{r4, r7, lr}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	0002      	movs	r2, r0
 8000c40:	1dbb      	adds	r3, r7, #6
 8000c42:	801a      	strh	r2, [r3, #0]

//	__disable_irq();
	if (recording.enabled || aKeys.pairing) {
 8000c44:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <HAL_GPIO_EXTI_Falling_Callback+0x78>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d12b      	bne.n	8000ca6 <HAL_GPIO_EXTI_Falling_Callback+0x6e>
 8000c4e:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <HAL_GPIO_EXTI_Falling_Callback+0x7c>)
 8000c50:	2282      	movs	r2, #130	; 0x82
 8000c52:	5c9b      	ldrb	r3, [r3, r2]
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d125      	bne.n	8000ca6 <HAL_GPIO_EXTI_Falling_Callback+0x6e>
		return;
	}
	if (GPIO_Pin == PAIR_Pin) {
 8000c5a:	1dbb      	adds	r3, r7, #6
 8000c5c:	881a      	ldrh	r2, [r3, #0]
 8000c5e:	2380      	movs	r3, #128	; 0x80
 8000c60:	019b      	lsls	r3, r3, #6
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d104      	bne.n	8000c70 <HAL_GPIO_EXTI_Falling_Callback+0x38>
		// in actual pairing
		aKeys.pairing = 1;
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <HAL_GPIO_EXTI_Falling_Callback+0x7c>)
 8000c68:	2282      	movs	r2, #130	; 0x82
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	5499      	strb	r1, [r3, r2]
 8000c6e:	e01b      	b.n	8000ca8 <HAL_GPIO_EXTI_Falling_Callback+0x70>

	} else if (GPIO_Pin == VIBE_BUTTON_Pin) {
 8000c70:	1dbb      	adds	r3, r7, #6
 8000c72:	881a      	ldrh	r2, [r3, #0]
 8000c74:	2380      	movs	r3, #128	; 0x80
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d10b      	bne.n	8000c94 <HAL_GPIO_EXTI_Falling_Callback+0x5c>
		// on vibe button:
		recording.enabled = 1;
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <HAL_GPIO_EXTI_Falling_Callback+0x78>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	701a      	strb	r2, [r3, #0]
		recording.count = 1;
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <HAL_GPIO_EXTI_Falling_Callback+0x78>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	705a      	strb	r2, [r3, #1]
		recording.data = 1;
 8000c88:	4a09      	ldr	r2, [pc, #36]	; (8000cb0 <HAL_GPIO_EXTI_Falling_Callback+0x78>)
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	2400      	movs	r4, #0
 8000c8e:	6093      	str	r3, [r2, #8]
 8000c90:	60d4      	str	r4, [r2, #12]
 8000c92:	e009      	b.n	8000ca8 <HAL_GPIO_EXTI_Falling_Callback+0x70>
	} else if (GPIO_Pin == RESET2_Pin) {
 8000c94:	1dbb      	adds	r3, r7, #6
 8000c96:	881b      	ldrh	r3, [r3, #0]
 8000c98:	2b40      	cmp	r3, #64	; 0x40
 8000c9a:	d105      	bne.n	8000ca8 <HAL_GPIO_EXTI_Falling_Callback+0x70>
		rfm95_init(&radio);
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f000 face 	bl	8001240 <rfm95_init>
 8000ca4:	e000      	b.n	8000ca8 <HAL_GPIO_EXTI_Falling_Callback+0x70>
		return;
 8000ca6:	46c0      	nop			; (mov r8, r8)
	}
//	__enable_irq();
}
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b003      	add	sp, #12
 8000cac:	bd90      	pop	{r4, r7, pc}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	20000610 	.word	0x20000610
 8000cb4:	20000698 	.word	0x20000698
 8000cb8:	20000598 	.word	0x20000598

08000cbc <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	0002      	movs	r2, r0
 8000cc4:	1dbb      	adds	r3, r7, #6
 8000cc6:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == RADIO_INT_Pin) {
 8000cc8:	1dbb      	adds	r3, r7, #6
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d101      	bne.n	8000cd4 <HAL_GPIO_EXTI_Rising_Callback+0x18>
		rfm95_handleInterrupt();
 8000cd0:	f000 fd06 	bl	80016e0 <rfm95_handleInterrupt>
	}
}
 8000cd4:	46c0      	nop			; (mov r8, r8)
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	b002      	add	sp, #8
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cde:	b08b      	sub	sp, #44	; 0x2c
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
	if (aKeys.pairing) {
 8000ce4:	4bb1      	ldr	r3, [pc, #708]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000ce6:	2282      	movs	r2, #130	; 0x82
 8000ce8:	5c9b      	ldrb	r3, [r3, r2]
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d006      	beq.n	8000cfe <HAL_TIM_PeriodElapsedCallback+0x22>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000cf0:	2380      	movs	r3, #128	; 0x80
 8000cf2:	00db      	lsls	r3, r3, #3
 8000cf4:	4aae      	ldr	r2, [pc, #696]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000cf6:	0019      	movs	r1, r3
 8000cf8:	0010      	movs	r0, r2
 8000cfa:	f002 ffd5 	bl	8003ca8 <HAL_GPIO_TogglePin>
	}
//	if (aKeys.masterSent) {
//		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
//	}
	// Check which version of the timer triggered this callback and toggle LED
	if (htim == &htim16 && (recording.enabled || playback.enabled)) {
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	4bac      	ldr	r3, [pc, #688]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d000      	beq.n	8000d08 <HAL_TIM_PeriodElapsedCallback+0x2c>
 8000d06:	e14c      	b.n	8000fa2 <HAL_TIM_PeriodElapsedCallback+0x2c6>
 8000d08:	4bab      	ldr	r3, [pc, #684]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d105      	bne.n	8000d1e <HAL_TIM_PeriodElapsedCallback+0x42>
 8000d12:	4baa      	ldr	r3, [pc, #680]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d100      	bne.n	8000d1e <HAL_TIM_PeriodElapsedCallback+0x42>
 8000d1c:	e141      	b.n	8000fa2 <HAL_TIM_PeriodElapsedCallback+0x2c6>

		if (playback.enabled) {
 8000d1e:	4ba7      	ldr	r3, [pc, #668]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d04f      	beq.n	8000dc8 <HAL_TIM_PeriodElapsedCallback+0xec>
			uint8_t state = (playback.data >> (playback.count++)) & 1;
 8000d28:	4ba4      	ldr	r3, [pc, #656]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000d2a:	68dc      	ldr	r4, [r3, #12]
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	4aa3      	ldr	r2, [pc, #652]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000d30:	7852      	ldrb	r2, [r2, #1]
 8000d32:	1c51      	adds	r1, r2, #1
 8000d34:	b2c8      	uxtb	r0, r1
 8000d36:	49a1      	ldr	r1, [pc, #644]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000d38:	7048      	strb	r0, [r1, #1]
 8000d3a:	0011      	movs	r1, r2
 8000d3c:	3920      	subs	r1, #32
 8000d3e:	2900      	cmp	r1, #0
 8000d40:	db03      	blt.n	8000d4a <HAL_TIM_PeriodElapsedCallback+0x6e>
 8000d42:	0020      	movs	r0, r4
 8000d44:	40c8      	lsrs	r0, r1
 8000d46:	0005      	movs	r5, r0
 8000d48:	e008      	b.n	8000d5c <HAL_TIM_PeriodElapsedCallback+0x80>
 8000d4a:	2120      	movs	r1, #32
 8000d4c:	1a89      	subs	r1, r1, r2
 8000d4e:	0020      	movs	r0, r4
 8000d50:	4088      	lsls	r0, r1
 8000d52:	0001      	movs	r1, r0
 8000d54:	0018      	movs	r0, r3
 8000d56:	40d0      	lsrs	r0, r2
 8000d58:	0005      	movs	r5, r0
 8000d5a:	430d      	orrs	r5, r1
 8000d5c:	0023      	movs	r3, r4
 8000d5e:	40d3      	lsrs	r3, r2
 8000d60:	001e      	movs	r6, r3
 8000d62:	b2ea      	uxtb	r2, r5
 8000d64:	201f      	movs	r0, #31
 8000d66:	2408      	movs	r4, #8
 8000d68:	193b      	adds	r3, r7, r4
 8000d6a:	181b      	adds	r3, r3, r0
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	400a      	ands	r2, r1
 8000d70:	701a      	strb	r2, [r3, #0]

			TIM1->CCR1 = state ? (DUTY_CYCLE_ON * UINT16_MAX) / 10 : 0;
 8000d72:	193b      	adds	r3, r7, r4
 8000d74:	181b      	adds	r3, r3, r0
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <HAL_TIM_PeriodElapsedCallback+0xa4>
 8000d7c:	4a90      	ldr	r2, [pc, #576]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000d7e:	e000      	b.n	8000d82 <HAL_TIM_PeriodElapsedCallback+0xa6>
 8000d80:	2200      	movs	r2, #0
 8000d82:	4b90      	ldr	r3, [pc, #576]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000d84:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,
 8000d86:	231f      	movs	r3, #31
 8000d88:	2208      	movs	r2, #8
 8000d8a:	4694      	mov	ip, r2
 8000d8c:	44bc      	add	ip, r7
 8000d8e:	4463      	add	r3, ip
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	1e5a      	subs	r2, r3, #1
 8000d94:	4193      	sbcs	r3, r2
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	001a      	movs	r2, r3
 8000d9a:	2380      	movs	r3, #128	; 0x80
 8000d9c:	00db      	lsls	r3, r3, #3
 8000d9e:	4884      	ldr	r0, [pc, #528]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000da0:	0019      	movs	r1, r3
 8000da2:	f002 ff64 	bl	8003c6e <HAL_GPIO_WritePin>
					(state ? GPIO_PIN_SET : GPIO_PIN_RESET));

			if (playback.count >= sizeof(playback.data) * 8) {
 8000da6:	4b85      	ldr	r3, [pc, #532]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000da8:	785b      	ldrb	r3, [r3, #1]
 8000daa:	2b3f      	cmp	r3, #63	; 0x3f
 8000dac:	d90c      	bls.n	8000dc8 <HAL_TIM_PeriodElapsedCallback+0xec>
				playback.enabled = 0;
 8000dae:	4b83      	ldr	r3, [pc, #524]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000db4:	2380      	movs	r3, #128	; 0x80
 8000db6:	00db      	lsls	r3, r3, #3
 8000db8:	487d      	ldr	r0, [pc, #500]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	0019      	movs	r1, r3
 8000dbe:	f002 ff56 	bl	8003c6e <HAL_GPIO_WritePin>
				TIM1->CCR1 = 0;
 8000dc2:	4b80      	ldr	r3, [pc, #512]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	635a      	str	r2, [r3, #52]	; 0x34
			}
		}

		if (recording.enabled) {
 8000dc8:	4b7b      	ldr	r3, [pc, #492]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d100      	bne.n	8000dd4 <HAL_TIM_PeriodElapsedCallback+0xf8>
 8000dd2:	e0e6      	b.n	8000fa2 <HAL_TIM_PeriodElapsedCallback+0x2c6>
			uint64_t read = (
					HAL_GPIO_ReadPin(VIBE_BUTTON_GPIO_Port, VIBE_BUTTON_Pin)
 8000dd4:	2380      	movs	r3, #128	; 0x80
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	4a7b      	ldr	r2, [pc, #492]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000dda:	0019      	movs	r1, r3
 8000ddc:	0010      	movs	r0, r2
 8000dde:	f002 ff29 	bl	8003c34 <HAL_GPIO_ReadPin>
 8000de2:	0003      	movs	r3, r0
							== GPIO_PIN_RESET ? 1 : 0);
 8000de4:	425a      	negs	r2, r3
 8000de6:	4153      	adcs	r3, r2
 8000de8:	b2db      	uxtb	r3, r3
			uint64_t read = (
 8000dea:	61bb      	str	r3, [r7, #24]
 8000dec:	2300      	movs	r3, #0
 8000dee:	61fb      	str	r3, [r7, #28]
			uint64_t state = read << (recording.count++);
 8000df0:	4b71      	ldr	r3, [pc, #452]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000df2:	785b      	ldrb	r3, [r3, #1]
 8000df4:	1c5a      	adds	r2, r3, #1
 8000df6:	b2d1      	uxtb	r1, r2
 8000df8:	4a6f      	ldr	r2, [pc, #444]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000dfa:	7051      	strb	r1, [r2, #1]
 8000dfc:	001a      	movs	r2, r3
 8000dfe:	3a20      	subs	r2, #32
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	db04      	blt.n	8000e0e <HAL_TIM_PeriodElapsedCallback+0x132>
 8000e04:	69b9      	ldr	r1, [r7, #24]
 8000e06:	4091      	lsls	r1, r2
 8000e08:	000a      	movs	r2, r1
 8000e0a:	617a      	str	r2, [r7, #20]
 8000e0c:	e008      	b.n	8000e20 <HAL_TIM_PeriodElapsedCallback+0x144>
 8000e0e:	2220      	movs	r2, #32
 8000e10:	1ad2      	subs	r2, r2, r3
 8000e12:	69b9      	ldr	r1, [r7, #24]
 8000e14:	40d1      	lsrs	r1, r2
 8000e16:	000a      	movs	r2, r1
 8000e18:	69f9      	ldr	r1, [r7, #28]
 8000e1a:	4099      	lsls	r1, r3
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	617a      	str	r2, [r7, #20]
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	409a      	lsls	r2, r3
 8000e24:	0013      	movs	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
			recording.data |= state;
 8000e28:	4b63      	ldr	r3, [pc, #396]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000e2a:	68dc      	ldr	r4, [r3, #12]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	431a      	orrs	r2, r3
 8000e32:	603a      	str	r2, [r7, #0]
 8000e34:	697a      	ldr	r2, [r7, #20]
 8000e36:	4322      	orrs	r2, r4
 8000e38:	607a      	str	r2, [r7, #4]
 8000e3a:	4b5f      	ldr	r3, [pc, #380]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000e3c:	6839      	ldr	r1, [r7, #0]
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	6099      	str	r1, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
			if (recording.count >= sizeof(recording.data) * 8) {
 8000e44:	4b5c      	ldr	r3, [pc, #368]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000e46:	785b      	ldrb	r3, [r3, #1]
 8000e48:	2b3f      	cmp	r3, #63	; 0x3f
 8000e4a:	d800      	bhi.n	8000e4e <HAL_TIM_PeriodElapsedCallback+0x172>
 8000e4c:	e0a9      	b.n	8000fa2 <HAL_TIM_PeriodElapsedCallback+0x2c6>
				// packet should be formed & sent here

				outgoing.deviceID = DEVICE_ID;
 8000e4e:	4b5f      	ldr	r3, [pc, #380]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	705a      	strb	r2, [r3, #1]
				outgoing.preamble = VIBE_PREAMBLE;
 8000e54:	4b5d      	ldr	r3, [pc, #372]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000e56:	22f0      	movs	r2, #240	; 0xf0
 8000e58:	701a      	strb	r2, [r3, #0]
				outgoing.sequenceNumber = ++deviceSeqs[DEVICE_ID];
 8000e5a:	4b5d      	ldr	r3, [pc, #372]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	1c5a      	adds	r2, r3, #1
 8000e60:	4b5b      	ldr	r3, [pc, #364]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	4b5a      	ldr	r3, [pc, #360]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4b58      	ldr	r3, [pc, #352]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000e6a:	3302      	adds	r3, #2
 8000e6c:	21ff      	movs	r1, #255	; 0xff
 8000e6e:	4011      	ands	r1, r2
 8000e70:	000c      	movs	r4, r1
 8000e72:	7819      	ldrb	r1, [r3, #0]
 8000e74:	2000      	movs	r0, #0
 8000e76:	4001      	ands	r1, r0
 8000e78:	1c08      	adds	r0, r1, #0
 8000e7a:	1c21      	adds	r1, r4, #0
 8000e7c:	4301      	orrs	r1, r0
 8000e7e:	7019      	strb	r1, [r3, #0]
 8000e80:	0a11      	lsrs	r1, r2, #8
 8000e82:	20ff      	movs	r0, #255	; 0xff
 8000e84:	4001      	ands	r1, r0
 8000e86:	000c      	movs	r4, r1
 8000e88:	7859      	ldrb	r1, [r3, #1]
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	4001      	ands	r1, r0
 8000e8e:	1c08      	adds	r0, r1, #0
 8000e90:	1c21      	adds	r1, r4, #0
 8000e92:	4301      	orrs	r1, r0
 8000e94:	7059      	strb	r1, [r3, #1]
 8000e96:	0c11      	lsrs	r1, r2, #16
 8000e98:	20ff      	movs	r0, #255	; 0xff
 8000e9a:	4001      	ands	r1, r0
 8000e9c:	000c      	movs	r4, r1
 8000e9e:	7899      	ldrb	r1, [r3, #2]
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	4001      	ands	r1, r0
 8000ea4:	1c08      	adds	r0, r1, #0
 8000ea6:	1c21      	adds	r1, r4, #0
 8000ea8:	4301      	orrs	r1, r0
 8000eaa:	7099      	strb	r1, [r3, #2]
 8000eac:	0e10      	lsrs	r0, r2, #24
 8000eae:	78da      	ldrb	r2, [r3, #3]
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	400a      	ands	r2, r1
 8000eb4:	1c11      	adds	r1, r2, #0
 8000eb6:	1c02      	adds	r2, r0, #0
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	70da      	strb	r2, [r3, #3]
				outgoing.data = recording.data;
 8000ebc:	4b3e      	ldr	r3, [pc, #248]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000ebe:	6899      	ldr	r1, [r3, #8]
 8000ec0:	68da      	ldr	r2, [r3, #12]
 8000ec2:	4b42      	ldr	r3, [pc, #264]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000ec4:	3306      	adds	r3, #6
 8000ec6:	20ff      	movs	r0, #255	; 0xff
 8000ec8:	4008      	ands	r0, r1
 8000eca:	0005      	movs	r5, r0
 8000ecc:	7818      	ldrb	r0, [r3, #0]
 8000ece:	2400      	movs	r4, #0
 8000ed0:	4020      	ands	r0, r4
 8000ed2:	1c04      	adds	r4, r0, #0
 8000ed4:	1c28      	adds	r0, r5, #0
 8000ed6:	4320      	orrs	r0, r4
 8000ed8:	7018      	strb	r0, [r3, #0]
 8000eda:	0a08      	lsrs	r0, r1, #8
 8000edc:	24ff      	movs	r4, #255	; 0xff
 8000ede:	4020      	ands	r0, r4
 8000ee0:	0005      	movs	r5, r0
 8000ee2:	7858      	ldrb	r0, [r3, #1]
 8000ee4:	2400      	movs	r4, #0
 8000ee6:	4020      	ands	r0, r4
 8000ee8:	1c04      	adds	r4, r0, #0
 8000eea:	1c28      	adds	r0, r5, #0
 8000eec:	4320      	orrs	r0, r4
 8000eee:	7058      	strb	r0, [r3, #1]
 8000ef0:	0c08      	lsrs	r0, r1, #16
 8000ef2:	24ff      	movs	r4, #255	; 0xff
 8000ef4:	4020      	ands	r0, r4
 8000ef6:	0005      	movs	r5, r0
 8000ef8:	7898      	ldrb	r0, [r3, #2]
 8000efa:	2400      	movs	r4, #0
 8000efc:	4020      	ands	r0, r4
 8000efe:	1c04      	adds	r4, r0, #0
 8000f00:	1c28      	adds	r0, r5, #0
 8000f02:	4320      	orrs	r0, r4
 8000f04:	7098      	strb	r0, [r3, #2]
 8000f06:	0e0d      	lsrs	r5, r1, #24
 8000f08:	78d8      	ldrb	r0, [r3, #3]
 8000f0a:	2400      	movs	r4, #0
 8000f0c:	4020      	ands	r0, r4
 8000f0e:	1c04      	adds	r4, r0, #0
 8000f10:	1c28      	adds	r0, r5, #0
 8000f12:	4320      	orrs	r0, r4
 8000f14:	70d8      	strb	r0, [r3, #3]
 8000f16:	20ff      	movs	r0, #255	; 0xff
 8000f18:	4010      	ands	r0, r2
 8000f1a:	0005      	movs	r5, r0
 8000f1c:	7918      	ldrb	r0, [r3, #4]
 8000f1e:	2400      	movs	r4, #0
 8000f20:	4020      	ands	r0, r4
 8000f22:	1c04      	adds	r4, r0, #0
 8000f24:	1c28      	adds	r0, r5, #0
 8000f26:	4320      	orrs	r0, r4
 8000f28:	7118      	strb	r0, [r3, #4]
 8000f2a:	0a10      	lsrs	r0, r2, #8
 8000f2c:	24ff      	movs	r4, #255	; 0xff
 8000f2e:	4020      	ands	r0, r4
 8000f30:	0005      	movs	r5, r0
 8000f32:	7958      	ldrb	r0, [r3, #5]
 8000f34:	2400      	movs	r4, #0
 8000f36:	4020      	ands	r0, r4
 8000f38:	1c04      	adds	r4, r0, #0
 8000f3a:	1c28      	adds	r0, r5, #0
 8000f3c:	4320      	orrs	r0, r4
 8000f3e:	7158      	strb	r0, [r3, #5]
 8000f40:	0c10      	lsrs	r0, r2, #16
 8000f42:	24ff      	movs	r4, #255	; 0xff
 8000f44:	4020      	ands	r0, r4
 8000f46:	0005      	movs	r5, r0
 8000f48:	7998      	ldrb	r0, [r3, #6]
 8000f4a:	2400      	movs	r4, #0
 8000f4c:	4020      	ands	r0, r4
 8000f4e:	1c04      	adds	r4, r0, #0
 8000f50:	1c28      	adds	r0, r5, #0
 8000f52:	4320      	orrs	r0, r4
 8000f54:	7198      	strb	r0, [r3, #6]
 8000f56:	0e10      	lsrs	r0, r2, #24
 8000f58:	79da      	ldrb	r2, [r3, #7]
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	400a      	ands	r2, r1
 8000f5e:	1c11      	adds	r1, r2, #0
 8000f60:	1c02      	adds	r2, r0, #0
 8000f62:	430a      	orrs	r2, r1
 8000f64:	71da      	strb	r2, [r3, #7]

				playback.data = recording.data;
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000f68:	68dc      	ldr	r4, [r3, #12]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	4a13      	ldr	r2, [pc, #76]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000f6e:	6093      	str	r3, [r2, #8]
 8000f70:	60d4      	str	r4, [r2, #12]
				playback.enabled = 1;
 8000f72:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
				playback.count = 0;
 8000f78:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	705a      	strb	r2, [r3, #1]
				recording.enabled = 0;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]
				if (state) {
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	697a      	ldr	r2, [r7, #20]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	d00a      	beq.n	8000fa2 <HAL_TIM_PeriodElapsedCallback+0x2c6>
					recording.enabled = 1;
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	701a      	strb	r2, [r3, #0]
					recording.count = 1;
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	705a      	strb	r2, [r3, #1]
					recording.data = 1;
 8000f98:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	2400      	movs	r4, #0
 8000f9e:	6093      	str	r3, [r2, #8]
 8000fa0:	60d4      	str	r4, [r2, #12]
			}
		}

//		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	}
}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b00b      	add	sp, #44	; 0x2c
 8000fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	20000698 	.word	0x20000698
 8000fb0:	50000800 	.word	0x50000800
 8000fb4:	2000071c 	.word	0x2000071c
 8000fb8:	20000610 	.word	0x20000610
 8000fbc:	20000578 	.word	0x20000578
 8000fc0:	0000b332 	.word	0x0000b332
 8000fc4:	40012c00 	.word	0x40012c00
 8000fc8:	50000400 	.word	0x50000400
 8000fcc:	20000874 	.word	0x20000874
 8000fd0:	20000124 	.word	0x20000124

08000fd4 <readingCallback>:

static void readingCallback(uint8_t *buffer, uint8_t length) {
 8000fd4:	b5b0      	push	{r4, r5, r7, lr}
 8000fd6:	b094      	sub	sp, #80	; 0x50
 8000fd8:	af02      	add	r7, sp, #8
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	000a      	movs	r2, r1
 8000fde:	1cfb      	adds	r3, r7, #3
 8000fe0:	701a      	strb	r2, [r3, #0]
	if (aKeys.pairing && length == 32) {
 8000fe2:	4b60      	ldr	r3, [pc, #384]	; (8001164 <readingCallback+0x190>)
 8000fe4:	2282      	movs	r2, #130	; 0x82
 8000fe6:	5c9b      	ldrb	r3, [r3, r2]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00f      	beq.n	800100e <readingCallback+0x3a>
 8000fee:	1cfb      	adds	r3, r7, #3
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b20      	cmp	r3, #32
 8000ff4:	d10b      	bne.n	800100e <readingCallback+0x3a>
		memcpy(aKeys.otherPublicKey, buffer, length);
 8000ff6:	1cfb      	adds	r3, r7, #3
 8000ff8:	781a      	ldrb	r2, [r3, #0]
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	4b5a      	ldr	r3, [pc, #360]	; (8001168 <readingCallback+0x194>)
 8000ffe:	0018      	movs	r0, r3
 8001000:	f007 f956 	bl	80082b0 <memcpy>
		aKeys.gotOther = 1;
 8001004:	4b57      	ldr	r3, [pc, #348]	; (8001164 <readingCallback+0x190>)
 8001006:	2280      	movs	r2, #128	; 0x80
 8001008:	2101      	movs	r1, #1
 800100a:	5499      	strb	r1, [r3, r2]
 800100c:	e0a6      	b.n	800115c <readingCallback+0x188>
	} else if (!MASTER_DEVICE && length == 16 && aKeys.masterSent) {
 800100e:	1cfb      	adds	r3, r7, #3
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b10      	cmp	r3, #16
 8001014:	d14b      	bne.n	80010ae <readingCallback+0xda>
 8001016:	4b53      	ldr	r3, [pc, #332]	; (8001164 <readingCallback+0x190>)
 8001018:	2281      	movs	r2, #129	; 0x81
 800101a:	5c9b      	ldrb	r3, [r3, r2]
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2b00      	cmp	r3, #0
 8001020:	d045      	beq.n	80010ae <readingCallback+0xda>
		// try to decrypt with shared secret
		uint32_t oldPkeys[4] = { 0 };
 8001022:	2438      	movs	r4, #56	; 0x38
 8001024:	193b      	adds	r3, r7, r4
 8001026:	0018      	movs	r0, r3
 8001028:	2310      	movs	r3, #16
 800102a:	001a      	movs	r2, r3
 800102c:	2100      	movs	r1, #0
 800102e:	f007 f948 	bl	80082c2 <memset>
		uint32_t newPkeys[4] = { 0 };
 8001032:	2528      	movs	r5, #40	; 0x28
 8001034:	197b      	adds	r3, r7, r5
 8001036:	0018      	movs	r0, r3
 8001038:	2310      	movs	r3, #16
 800103a:	001a      	movs	r2, r3
 800103c:	2100      	movs	r1, #0
 800103e:	f007 f940 	bl	80082c2 <memset>
		memcpy(oldPkeys, pKeyAES, AESKeySize);
 8001042:	193b      	adds	r3, r7, r4
 8001044:	4a49      	ldr	r2, [pc, #292]	; (800116c <readingCallback+0x198>)
 8001046:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001048:	c313      	stmia	r3!, {r0, r1, r4}
 800104a:	6812      	ldr	r2, [r2, #0]
 800104c:	601a      	str	r2, [r3, #0]
		memcpy(pKeyAES, aKeys.sharedSecret, AESKeySize);
 800104e:	4a47      	ldr	r2, [pc, #284]	; (800116c <readingCallback+0x198>)
 8001050:	4b44      	ldr	r3, [pc, #272]	; (8001164 <readingCallback+0x190>)
 8001052:	3360      	adds	r3, #96	; 0x60
 8001054:	cb13      	ldmia	r3!, {r0, r1, r4}
 8001056:	c213      	stmia	r2!, {r0, r1, r4}
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	6013      	str	r3, [r2, #0]
		MX_AES_Init();
 800105c:	f7ff fbac 	bl	80007b8 <MX_AES_Init>
		if (HAL_CRYP_Decrypt(&hcryp, buffer, 16, (uint8_t*) newPkeys, 1)
 8001060:	197a      	adds	r2, r7, r5
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	4842      	ldr	r0, [pc, #264]	; (8001170 <readingCallback+0x19c>)
 8001066:	2301      	movs	r3, #1
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	0013      	movs	r3, r2
 800106c:	2210      	movs	r2, #16
 800106e:	f001 fa2d 	bl	80024cc <HAL_CRYP_Decrypt>
 8001072:	1e03      	subs	r3, r0, #0
 8001074:	d111      	bne.n	800109a <readingCallback+0xc6>
				== HAL_OK) {
			writeKeyToFlash((uint64_t*) newPkeys, &EraseInitStruct);
 8001076:	4a3f      	ldr	r2, [pc, #252]	; (8001174 <readingCallback+0x1a0>)
 8001078:	2428      	movs	r4, #40	; 0x28
 800107a:	193b      	adds	r3, r7, r4
 800107c:	0011      	movs	r1, r2
 800107e:	0018      	movs	r0, r3
 8001080:	f000 f8a3 	bl	80011ca <writeKeyToFlash>
			memcpy(pKeyAES, newPkeys, AESKeySize);
 8001084:	4b39      	ldr	r3, [pc, #228]	; (800116c <readingCallback+0x198>)
 8001086:	193a      	adds	r2, r7, r4
 8001088:	ca13      	ldmia	r2!, {r0, r1, r4}
 800108a:	c313      	stmia	r3!, {r0, r1, r4}
 800108c:	6812      	ldr	r2, [r2, #0]
 800108e:	601a      	str	r2, [r3, #0]
			aKeys.masterSent = 0;
 8001090:	4b34      	ldr	r3, [pc, #208]	; (8001164 <readingCallback+0x190>)
 8001092:	2281      	movs	r2, #129	; 0x81
 8001094:	2100      	movs	r1, #0
 8001096:	5499      	strb	r1, [r3, r2]
 8001098:	e006      	b.n	80010a8 <readingCallback+0xd4>
		} else {
			memcpy(pKeyAES, oldPkeys, AESKeySize);
 800109a:	4b34      	ldr	r3, [pc, #208]	; (800116c <readingCallback+0x198>)
 800109c:	2238      	movs	r2, #56	; 0x38
 800109e:	18ba      	adds	r2, r7, r2
 80010a0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80010a2:	c313      	stmia	r3!, {r0, r1, r4}
 80010a4:	6812      	ldr	r2, [r2, #0]
 80010a6:	601a      	str	r2, [r3, #0]
		}
		MX_AES_Init();
 80010a8:	f7ff fb86 	bl	80007b8 <MX_AES_Init>
	} else if (!MASTER_DEVICE && length == 16 && aKeys.masterSent) {
 80010ac:	e056      	b.n	800115c <readingCallback+0x188>
	} else {

		if (length != 16) {
 80010ae:	1cfb      	adds	r3, r7, #3
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2b10      	cmp	r3, #16
 80010b4:	d151      	bne.n	800115a <readingCallback+0x186>
			// something went wrong
			return;
		}
		uint32_t tempout[4] = { 0 };
 80010b6:	2418      	movs	r4, #24
 80010b8:	193b      	adds	r3, r7, r4
 80010ba:	0018      	movs	r0, r3
 80010bc:	2310      	movs	r3, #16
 80010be:	001a      	movs	r2, r3
 80010c0:	2100      	movs	r1, #0
 80010c2:	f007 f8fe 	bl	80082c2 <memset>
		Packet tmp;
		if (HAL_CRYP_Decrypt(&hcryp, buffer, 16, (uint8_t*) tempout, 1)
 80010c6:	193a      	adds	r2, r7, r4
 80010c8:	6879      	ldr	r1, [r7, #4]
 80010ca:	4829      	ldr	r0, [pc, #164]	; (8001170 <readingCallback+0x19c>)
 80010cc:	2301      	movs	r3, #1
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	0013      	movs	r3, r2
 80010d2:	2210      	movs	r2, #16
 80010d4:	f001 f9fa 	bl	80024cc <HAL_CRYP_Decrypt>
 80010d8:	1e03      	subs	r3, r0, #0
 80010da:	d13f      	bne.n	800115c <readingCallback+0x188>
				== HAL_OK) {
			memcpy(&tmp, tempout, sizeof(Packet));
 80010dc:	2408      	movs	r4, #8
 80010de:	193a      	adds	r2, r7, r4
 80010e0:	2318      	movs	r3, #24
 80010e2:	18fb      	adds	r3, r7, r3
 80010e4:	0010      	movs	r0, r2
 80010e6:	0019      	movs	r1, r3
 80010e8:	230e      	movs	r3, #14
 80010ea:	001a      	movs	r2, r3
 80010ec:	f007 f8e0 	bl	80082b0 <memcpy>
			if (tmp.preamble == VIBE_PREAMBLE
 80010f0:	193b      	adds	r3, r7, r4
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2bf0      	cmp	r3, #240	; 0xf0
 80010f6:	d131      	bne.n	800115c <readingCallback+0x188>
					&& tmp.sequenceNumber > deviceSeqs[tmp.deviceID]) {
 80010f8:	2008      	movs	r0, #8
 80010fa:	183b      	adds	r3, r7, r0
 80010fc:	885a      	ldrh	r2, [r3, #2]
 80010fe:	889b      	ldrh	r3, [r3, #4]
 8001100:	041b      	lsls	r3, r3, #16
 8001102:	4313      	orrs	r3, r2
 8001104:	0019      	movs	r1, r3
 8001106:	183b      	adds	r3, r7, r0
 8001108:	785b      	ldrb	r3, [r3, #1]
 800110a:	001a      	movs	r2, r3
 800110c:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <readingCallback+0x1a4>)
 800110e:	0092      	lsls	r2, r2, #2
 8001110:	58d3      	ldr	r3, [r2, r3]
 8001112:	4299      	cmp	r1, r3
 8001114:	d922      	bls.n	800115c <readingCallback+0x188>
				playback.data = tmp.data;
 8001116:	2508      	movs	r5, #8
 8001118:	197b      	adds	r3, r7, r5
 800111a:	88d8      	ldrh	r0, [r3, #6]
 800111c:	891c      	ldrh	r4, [r3, #8]
 800111e:	0424      	lsls	r4, r4, #16
 8001120:	4320      	orrs	r0, r4
 8001122:	0001      	movs	r1, r0
 8001124:	8958      	ldrh	r0, [r3, #10]
 8001126:	899b      	ldrh	r3, [r3, #12]
 8001128:	041b      	lsls	r3, r3, #16
 800112a:	4303      	orrs	r3, r0
 800112c:	001a      	movs	r2, r3
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <readingCallback+0x1a8>)
 8001130:	6099      	str	r1, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
				playback.enabled = 1;
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <readingCallback+0x1a8>)
 8001136:	2201      	movs	r2, #1
 8001138:	701a      	strb	r2, [r3, #0]
				playback.count = 0;
 800113a:	4b10      	ldr	r3, [pc, #64]	; (800117c <readingCallback+0x1a8>)
 800113c:	2200      	movs	r2, #0
 800113e:	705a      	strb	r2, [r3, #1]
				deviceSeqs[tmp.deviceID] = tmp.sequenceNumber;
 8001140:	197b      	adds	r3, r7, r5
 8001142:	785b      	ldrb	r3, [r3, #1]
 8001144:	0018      	movs	r0, r3
 8001146:	197b      	adds	r3, r7, r5
 8001148:	885a      	ldrh	r2, [r3, #2]
 800114a:	889b      	ldrh	r3, [r3, #4]
 800114c:	041b      	lsls	r3, r3, #16
 800114e:	4313      	orrs	r3, r2
 8001150:	0019      	movs	r1, r3
 8001152:	4b09      	ldr	r3, [pc, #36]	; (8001178 <readingCallback+0x1a4>)
 8001154:	0082      	lsls	r2, r0, #2
 8001156:	50d1      	str	r1, [r2, r3]
 8001158:	e000      	b.n	800115c <readingCallback+0x188>
			return;
 800115a:	46c0      	nop			; (mov r8, r8)
	// if master shared key
	// writeKey to flash
	// set pkey
	// reinit AES
	// else mark an error
}
 800115c:	46bd      	mov	sp, r7
 800115e:	b012      	add	sp, #72	; 0x48
 8001160:	bdb0      	pop	{r4, r5, r7, pc}
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	20000698 	.word	0x20000698
 8001168:	200006d8 	.word	0x200006d8
 800116c:	20000114 	.word	0x20000114
 8001170:	20000768 	.word	0x20000768
 8001174:	20000588 	.word	0x20000588
 8001178:	20000124 	.word	0x20000124
 800117c:	20000578 	.word	0x20000578

08001180 <readKeyFromFlash>:

static void readKeyFromFlash(uint32_t *ptr, FLASH_EraseInitTypeDef *erase) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]

	uint32_t addr = 0x08000000 + FLASH_PAGE_SIZE * erase->Page;
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	2280      	movs	r2, #128	; 0x80
 8001190:	0252      	lsls	r2, r2, #9
 8001192:	4694      	mov	ip, r2
 8001194:	4463      	add	r3, ip
 8001196:	02db      	lsls	r3, r3, #11
 8001198:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < AESKeySize / sizeof(uint32_t); i++) {
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	e00d      	b.n	80011bc <readKeyFromFlash+0x3c>
		ptr[i] = ((uint32_t*) addr)[i];
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	009a      	lsls	r2, r3, #2
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	18d3      	adds	r3, r2, r3
 80011a8:	001a      	movs	r2, r3
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	18cb      	adds	r3, r1, r3
 80011b2:	6812      	ldr	r2, [r2, #0]
 80011b4:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < AESKeySize / sizeof(uint32_t); i++) {
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	3301      	adds	r3, #1
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2b03      	cmp	r3, #3
 80011c0:	d9ee      	bls.n	80011a0 <readKeyFromFlash+0x20>
	}
}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	46bd      	mov	sp, r7
 80011c6:	b004      	add	sp, #16
 80011c8:	bd80      	pop	{r7, pc}

080011ca <writeKeyToFlash>:

static void writeKeyToFlash(uint64_t *ptr, FLASH_EraseInitTypeDef *erase) {
 80011ca:	b590      	push	{r4, r7, lr}
 80011cc:	b087      	sub	sp, #28
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	6039      	str	r1, [r7, #0]

	uint32_t addr = 0x08000000 + FLASH_PAGE_SIZE * erase->Page;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	2280      	movs	r2, #128	; 0x80
 80011da:	0252      	lsls	r2, r2, #9
 80011dc:	4694      	mov	ip, r2
 80011de:	4463      	add	r3, ip
 80011e0:	02db      	lsls	r3, r3, #11
 80011e2:	613b      	str	r3, [r7, #16]

	uint32_t pgerr = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
	HAL_FLASH_Unlock();
 80011e8:	f002 fa6e 	bl	80036c8 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(erase, &pgerr);
 80011ec:	230c      	movs	r3, #12
 80011ee:	18fa      	adds	r2, r7, r3
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	0011      	movs	r1, r2
 80011f4:	0018      	movs	r0, r3
 80011f6:	f002 fb15 	bl	8003824 <HAL_FLASHEx_Erase>
	for (int i = 0; i < AESKeySize / sizeof(uint64_t); i++) {
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
 80011fe:	e011      	b.n	8001224 <writeKeyToFlash+0x5a>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
				addr + (sizeof(uint64_t)) * i, ptr[i]);
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	00da      	lsls	r2, r3, #3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	18d1      	adds	r1, r2, r3
				addr + (sizeof(uint64_t)) * i, ptr[i]);
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	18d3      	adds	r3, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 8001210:	685c      	ldr	r4, [r3, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	001a      	movs	r2, r3
 8001216:	0023      	movs	r3, r4
 8001218:	2001      	movs	r0, #1
 800121a:	f002 fa05 	bl	8003628 <HAL_FLASH_Program>
	for (int i = 0; i < AESKeySize / sizeof(uint64_t); i++) {
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	3301      	adds	r3, #1
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d9ea      	bls.n	8001200 <writeKeyToFlash+0x36>
	}
	HAL_FLASH_Lock();
 800122a:	f002 fa71 	bl	8003710 <HAL_FLASH_Lock>
}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	46bd      	mov	sp, r7
 8001232:	b007      	add	sp, #28
 8001234:	bd90      	pop	{r4, r7, pc}

08001236 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800123a:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800123c:	e7fe      	b.n	800123c <Error_Handler+0x6>
	...

08001240 <rfm95_init>:
 */

/**
 * Initializes device and sets Handle
 */
bool rfm95_init(rfm95_handle_t *handle_pointer) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	handle = handle_pointer;
 8001248:	4b9c      	ldr	r3, [pc, #624]	; (80014bc <rfm95_init+0x27c>)
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	601a      	str	r2, [r3, #0]

	assert(handle->spi_handle->Init.Mode == SPI_MODE_MASTER);
 800124e:	4b9b      	ldr	r3, [pc, #620]	; (80014bc <rfm95_init+0x27c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	685a      	ldr	r2, [r3, #4]
 8001256:	2382      	movs	r3, #130	; 0x82
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	429a      	cmp	r2, r3
 800125c:	d005      	beq.n	800126a <rfm95_init+0x2a>
 800125e:	4b98      	ldr	r3, [pc, #608]	; (80014c0 <rfm95_init+0x280>)
 8001260:	4a98      	ldr	r2, [pc, #608]	; (80014c4 <rfm95_init+0x284>)
 8001262:	4899      	ldr	r0, [pc, #612]	; (80014c8 <rfm95_init+0x288>)
 8001264:	211e      	movs	r1, #30
 8001266:	f006 ffb7 	bl	80081d8 <__assert_func>
	assert(handle->spi_handle->Init.Direction == SPI_DIRECTION_2LINES);
 800126a:	4b94      	ldr	r3, [pc, #592]	; (80014bc <rfm95_init+0x27c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d005      	beq.n	8001282 <rfm95_init+0x42>
 8001276:	4b95      	ldr	r3, [pc, #596]	; (80014cc <rfm95_init+0x28c>)
 8001278:	4a92      	ldr	r2, [pc, #584]	; (80014c4 <rfm95_init+0x284>)
 800127a:	4893      	ldr	r0, [pc, #588]	; (80014c8 <rfm95_init+0x288>)
 800127c:	211f      	movs	r1, #31
 800127e:	f006 ffab 	bl	80081d8 <__assert_func>
	assert(handle->spi_handle->Init.DataSize == SPI_DATASIZE_8BIT);
 8001282:	4b8e      	ldr	r3, [pc, #568]	; (80014bc <rfm95_init+0x27c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	68da      	ldr	r2, [r3, #12]
 800128a:	23e0      	movs	r3, #224	; 0xe0
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	429a      	cmp	r2, r3
 8001290:	d005      	beq.n	800129e <rfm95_init+0x5e>
 8001292:	4b8f      	ldr	r3, [pc, #572]	; (80014d0 <rfm95_init+0x290>)
 8001294:	4a8b      	ldr	r2, [pc, #556]	; (80014c4 <rfm95_init+0x284>)
 8001296:	488c      	ldr	r0, [pc, #560]	; (80014c8 <rfm95_init+0x288>)
 8001298:	2120      	movs	r1, #32
 800129a:	f006 ff9d 	bl	80081d8 <__assert_func>
	assert(handle->spi_handle->Init.CLKPolarity == SPI_POLARITY_LOW);
 800129e:	4b87      	ldr	r3, [pc, #540]	; (80014bc <rfm95_init+0x27c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d005      	beq.n	80012b6 <rfm95_init+0x76>
 80012aa:	4b8a      	ldr	r3, [pc, #552]	; (80014d4 <rfm95_init+0x294>)
 80012ac:	4a85      	ldr	r2, [pc, #532]	; (80014c4 <rfm95_init+0x284>)
 80012ae:	4886      	ldr	r0, [pc, #536]	; (80014c8 <rfm95_init+0x288>)
 80012b0:	2121      	movs	r1, #33	; 0x21
 80012b2:	f006 ff91 	bl	80081d8 <__assert_func>
	assert(handle->spi_handle->Init.CLKPhase == SPI_PHASE_1EDGE);
 80012b6:	4b81      	ldr	r3, [pc, #516]	; (80014bc <rfm95_init+0x27c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d005      	beq.n	80012ce <rfm95_init+0x8e>
 80012c2:	4b85      	ldr	r3, [pc, #532]	; (80014d8 <rfm95_init+0x298>)
 80012c4:	4a7f      	ldr	r2, [pc, #508]	; (80014c4 <rfm95_init+0x284>)
 80012c6:	4880      	ldr	r0, [pc, #512]	; (80014c8 <rfm95_init+0x288>)
 80012c8:	2122      	movs	r1, #34	; 0x22
 80012ca:	f006 ff85 	bl	80081d8 <__assert_func>

	rfm95_reset();
 80012ce:	f000 fb03 	bl	80018d8 <rfm95_reset>

	// Check for correct version.
	uint8_t version = 0;
 80012d2:	210f      	movs	r1, #15
 80012d4:	187b      	adds	r3, r7, r1
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
	if (!rfm95_read(RFM95_REGISTER_VERSION, &version))
 80012da:	187b      	adds	r3, r7, r1
 80012dc:	0019      	movs	r1, r3
 80012de:	2042      	movs	r0, #66	; 0x42
 80012e0:	f000 fa7a 	bl	80017d8 <rfm95_read>
 80012e4:	0003      	movs	r3, r0
 80012e6:	001a      	movs	r2, r3
 80012e8:	2301      	movs	r3, #1
 80012ea:	4053      	eors	r3, r2
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <rfm95_init+0xb6>
		return false;
 80012f2:	2300      	movs	r3, #0
 80012f4:	e0dd      	b.n	80014b2 <rfm95_init+0x272>
	if (version != RFM9x_VER)
 80012f6:	230f      	movs	r3, #15
 80012f8:	18fb      	adds	r3, r7, r3
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b12      	cmp	r3, #18
 80012fe:	d001      	beq.n	8001304 <rfm95_init+0xc4>
		return false;
 8001300:	2300      	movs	r3, #0
 8001302:	e0d6      	b.n	80014b2 <rfm95_init+0x272>

	// Module must be placed in sleep mode before switching to lora.
	if (!rfm95_write(RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_SLEEP))
 8001304:	2100      	movs	r1, #0
 8001306:	2001      	movs	r0, #1
 8001308:	f000 faa8 	bl	800185c <rfm95_write>
 800130c:	0003      	movs	r3, r0
 800130e:	001a      	movs	r2, r3
 8001310:	2301      	movs	r3, #1
 8001312:	4053      	eors	r3, r2
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <rfm95_init+0xde>
		return false;
 800131a:	2300      	movs	r3, #0
 800131c:	e0c9      	b.n	80014b2 <rfm95_init+0x272>
	if (!rfm95_write(RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA))
 800131e:	2180      	movs	r1, #128	; 0x80
 8001320:	2001      	movs	r0, #1
 8001322:	f000 fa9b 	bl	800185c <rfm95_write>
 8001326:	0003      	movs	r3, r0
 8001328:	001a      	movs	r2, r3
 800132a:	2301      	movs	r3, #1
 800132c:	4053      	eors	r3, r2
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <rfm95_init+0xf8>
		return false;
 8001334:	2300      	movs	r3, #0
 8001336:	e0bc      	b.n	80014b2 <rfm95_init+0x272>

	// Set module power to 17dbm.
	if (!rfm95_setPower(20))
 8001338:	2014      	movs	r0, #20
 800133a:	f000 f8cf 	bl	80014dc <rfm95_setPower>
 800133e:	0003      	movs	r3, r0
 8001340:	001a      	movs	r2, r3
 8001342:	2301      	movs	r3, #1
 8001344:	4053      	eors	r3, r2
 8001346:	b2db      	uxtb	r3, r3
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <rfm95_init+0x110>
		return false;
 800134c:	2300      	movs	r3, #0
 800134e:	e0b0      	b.n	80014b2 <rfm95_init+0x272>

	// RX timeout set to 37 symbols.
	if (!rfm95_write(RFM95_REGISTER_SYMB_TIMEOUT_LSB, 255))
 8001350:	21ff      	movs	r1, #255	; 0xff
 8001352:	201f      	movs	r0, #31
 8001354:	f000 fa82 	bl	800185c <rfm95_write>
 8001358:	0003      	movs	r3, r0
 800135a:	001a      	movs	r2, r3
 800135c:	2301      	movs	r3, #1
 800135e:	4053      	eors	r3, r2
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <rfm95_init+0x12a>
		return false;
 8001366:	2300      	movs	r3, #0
 8001368:	e0a3      	b.n	80014b2 <rfm95_init+0x272>

	// Preamble set to 8 + 4.25 = 12.25 symbols.
	if (!rfm95_write(RFM95_REGISTER_PREAMBLE_MSB, 0x00))
 800136a:	2100      	movs	r1, #0
 800136c:	2020      	movs	r0, #32
 800136e:	f000 fa75 	bl	800185c <rfm95_write>
 8001372:	0003      	movs	r3, r0
 8001374:	001a      	movs	r2, r3
 8001376:	2301      	movs	r3, #1
 8001378:	4053      	eors	r3, r2
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <rfm95_init+0x144>
		return false;
 8001380:	2300      	movs	r3, #0
 8001382:	e096      	b.n	80014b2 <rfm95_init+0x272>
	if (!rfm95_write(RFM95_REGISTER_PREAMBLE_LSB, 0x08))
 8001384:	2108      	movs	r1, #8
 8001386:	2021      	movs	r0, #33	; 0x21
 8001388:	f000 fa68 	bl	800185c <rfm95_write>
 800138c:	0003      	movs	r3, r0
 800138e:	001a      	movs	r2, r3
 8001390:	2301      	movs	r3, #1
 8001392:	4053      	eors	r3, r2
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <rfm95_init+0x15e>
		return false;
 800139a:	2300      	movs	r3, #0
 800139c:	e089      	b.n	80014b2 <rfm95_init+0x272>

	// Set IQ inversion.
	if (!rfm95_write(RFM95_REGISTER_INVERT_IQ_1,
 800139e:	2127      	movs	r1, #39	; 0x27
 80013a0:	2033      	movs	r0, #51	; 0x33
 80013a2:	f000 fa5b 	bl	800185c <rfm95_write>
 80013a6:	0003      	movs	r3, r0
 80013a8:	001a      	movs	r2, r3
 80013aa:	2301      	movs	r3, #1
 80013ac:	4053      	eors	r3, r2
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <rfm95_init+0x178>
	RFM95_REGISTER_INVERT_IQ_1_ON_TXONLY))
		return false;
 80013b4:	2300      	movs	r3, #0
 80013b6:	e07c      	b.n	80014b2 <rfm95_init+0x272>
	if (!rfm95_write(RFM95_REGISTER_INVERT_IQ_2,
 80013b8:	211d      	movs	r1, #29
 80013ba:	203b      	movs	r0, #59	; 0x3b
 80013bc:	f000 fa4e 	bl	800185c <rfm95_write>
 80013c0:	0003      	movs	r3, r0
 80013c2:	001a      	movs	r2, r3
 80013c4:	2301      	movs	r3, #1
 80013c6:	4053      	eors	r3, r2
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <rfm95_init+0x192>
	RFM95_REGISTER_INVERT_IQ_2_OFF))
		return false;
 80013ce:	2300      	movs	r3, #0
 80013d0:	e06f      	b.n	80014b2 <rfm95_init+0x272>

	// Set up TX and RX FIFO base addresses.
	if (!rfm95_write(RFM95_REGISTER_FIFO_TX_BASE_ADDR, 0x80))
 80013d2:	2180      	movs	r1, #128	; 0x80
 80013d4:	200e      	movs	r0, #14
 80013d6:	f000 fa41 	bl	800185c <rfm95_write>
 80013da:	0003      	movs	r3, r0
 80013dc:	001a      	movs	r2, r3
 80013de:	2301      	movs	r3, #1
 80013e0:	4053      	eors	r3, r2
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <rfm95_init+0x1ac>
		return false;
 80013e8:	2300      	movs	r3, #0
 80013ea:	e062      	b.n	80014b2 <rfm95_init+0x272>
	if (!rfm95_write(RFM95_REGISTER_FIFO_RX_BASE_ADDR, 0x00))
 80013ec:	2100      	movs	r1, #0
 80013ee:	200f      	movs	r0, #15
 80013f0:	f000 fa34 	bl	800185c <rfm95_write>
 80013f4:	0003      	movs	r3, r0
 80013f6:	001a      	movs	r2, r3
 80013f8:	2301      	movs	r3, #1
 80013fa:	4053      	eors	r3, r2
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <rfm95_init+0x1c6>
		return false;
 8001402:	2300      	movs	r3, #0
 8001404:	e055      	b.n	80014b2 <rfm95_init+0x272>

	if (!rfm95_write(RFM95_REGISTER_FR_MSB, lora_frequency[0]))
 8001406:	23e4      	movs	r3, #228	; 0xe4
 8001408:	0019      	movs	r1, r3
 800140a:	2006      	movs	r0, #6
 800140c:	f000 fa26 	bl	800185c <rfm95_write>
 8001410:	0003      	movs	r3, r0
 8001412:	001a      	movs	r2, r3
 8001414:	2301      	movs	r3, #1
 8001416:	4053      	eors	r3, r2
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <rfm95_init+0x1e2>
		return false;
 800141e:	2300      	movs	r3, #0
 8001420:	e047      	b.n	80014b2 <rfm95_init+0x272>
	if (!rfm95_write(RFM95_REGISTER_FR_MID, lora_frequency[1]))
 8001422:	23c0      	movs	r3, #192	; 0xc0
 8001424:	0019      	movs	r1, r3
 8001426:	2007      	movs	r0, #7
 8001428:	f000 fa18 	bl	800185c <rfm95_write>
 800142c:	0003      	movs	r3, r0
 800142e:	001a      	movs	r2, r3
 8001430:	2301      	movs	r3, #1
 8001432:	4053      	eors	r3, r2
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <rfm95_init+0x1fe>
		return false;
 800143a:	2300      	movs	r3, #0
 800143c:	e039      	b.n	80014b2 <rfm95_init+0x272>
	if (!rfm95_write(RFM95_REGISTER_FR_LSB, lora_frequency[2]))
 800143e:	2326      	movs	r3, #38	; 0x26
 8001440:	0019      	movs	r1, r3
 8001442:	2008      	movs	r0, #8
 8001444:	f000 fa0a 	bl	800185c <rfm95_write>
 8001448:	0003      	movs	r3, r0
 800144a:	001a      	movs	r2, r3
 800144c:	2301      	movs	r3, #1
 800144e:	4053      	eors	r3, r2
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <rfm95_init+0x21a>
		return false;
 8001456:	2300      	movs	r3, #0
 8001458:	e02b      	b.n	80014b2 <rfm95_init+0x272>
//82
	if (!rfm95_write(RFM95_REGISTER_MODEM_CONFIG_1, 0x82))
 800145a:	2182      	movs	r1, #130	; 0x82
 800145c:	201d      	movs	r0, #29
 800145e:	f000 f9fd 	bl	800185c <rfm95_write>
 8001462:	0003      	movs	r3, r0
 8001464:	001a      	movs	r2, r3
 8001466:	2301      	movs	r3, #1
 8001468:	4053      	eors	r3, r2
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <rfm95_init+0x234>
		return false;
 8001470:	2300      	movs	r3, #0
 8001472:	e01e      	b.n	80014b2 <rfm95_init+0x272>
	if (!rfm95_write(RFM95_REGISTER_MODEM_CONFIG_2, 0x90 | 0b111))
 8001474:	2197      	movs	r1, #151	; 0x97
 8001476:	201e      	movs	r0, #30
 8001478:	f000 f9f0 	bl	800185c <rfm95_write>
 800147c:	0003      	movs	r3, r0
 800147e:	001a      	movs	r2, r3
 8001480:	2301      	movs	r3, #1
 8001482:	4053      	eors	r3, r2
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <rfm95_init+0x24e>
		return false;  //change to 0x94 for enabling CRC
 800148a:	2300      	movs	r3, #0
 800148c:	e011      	b.n	80014b2 <rfm95_init+0x272>
	if (!rfm95_write(RFM95_REGISTER_MODEM_CONFIG_3, 0x00))
 800148e:	2100      	movs	r1, #0
 8001490:	2026      	movs	r0, #38	; 0x26
 8001492:	f000 f9e3 	bl	800185c <rfm95_write>
 8001496:	0003      	movs	r3, r0
 8001498:	001a      	movs	r2, r3
 800149a:	2301      	movs	r3, #1
 800149c:	4053      	eors	r3, r2
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <rfm95_init+0x268>
		return false;
 80014a4:	2300      	movs	r3, #0
 80014a6:	e004      	b.n	80014b2 <rfm95_init+0x272>

	rfm95_write(RFM95_REGISTER_OP_MODE,
 80014a8:	2185      	movs	r1, #133	; 0x85
 80014aa:	2001      	movs	r0, #1
 80014ac:	f000 f9d6 	bl	800185c <rfm95_write>
	RFM95_REGISTER_OP_MODE_LORA_RXCONTINUOUS | 0x80);

	return true;
 80014b0:	2301      	movs	r3, #1
}
 80014b2:	0018      	movs	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	b004      	add	sp, #16
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	46c0      	nop			; (mov r8, r8)
 80014bc:	200005c0 	.word	0x200005c0
 80014c0:	080091b8 	.word	0x080091b8
 80014c4:	08009328 	.word	0x08009328
 80014c8:	080091ec 	.word	0x080091ec
 80014cc:	08009200 	.word	0x08009200
 80014d0:	0800923c 	.word	0x0800923c
 80014d4:	08009274 	.word	0x08009274
 80014d8:	080092b0 	.word	0x080092b0

080014dc <rfm95_setPower>:

/**
 * Sets power for transmission, 17 by default
 */
bool rfm95_setPower(int8_t power) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	0002      	movs	r2, r0
 80014e4:	1dfb      	adds	r3, r7, #7
 80014e6:	701a      	strb	r2, [r3, #0]
	rfm95_register_pa_config_t pa_config = { 0 };
 80014e8:	230c      	movs	r3, #12
 80014ea:	18fb      	adds	r3, r7, r3
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
	uint8_t pa_dac_config = 0;
 80014f0:	230f      	movs	r3, #15
 80014f2:	18fb      	adds	r3, r7, r3
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]

	if (power >= 2 && power <= 17) {
 80014f8:	1dfb      	adds	r3, r7, #7
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	b25b      	sxtb	r3, r3
 80014fe:	2b01      	cmp	r3, #1
 8001500:	dd28      	ble.n	8001554 <rfm95_setPower+0x78>
 8001502:	1dfb      	adds	r3, r7, #7
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	b25b      	sxtb	r3, r3
 8001508:	2b11      	cmp	r3, #17
 800150a:	dc23      	bgt.n	8001554 <rfm95_setPower+0x78>
		pa_config.max_power = 7;
 800150c:	200c      	movs	r0, #12
 800150e:	183b      	adds	r3, r7, r0
 8001510:	781a      	ldrb	r2, [r3, #0]
 8001512:	2170      	movs	r1, #112	; 0x70
 8001514:	430a      	orrs	r2, r1
 8001516:	701a      	strb	r2, [r3, #0]
		pa_config.pa_select = 1;
 8001518:	183b      	adds	r3, r7, r0
 800151a:	781a      	ldrb	r2, [r3, #0]
 800151c:	2180      	movs	r1, #128	; 0x80
 800151e:	4249      	negs	r1, r1
 8001520:	430a      	orrs	r2, r1
 8001522:	701a      	strb	r2, [r3, #0]
		pa_config.output_power = (power - 2);
 8001524:	1dfb      	adds	r3, r7, #7
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	3b02      	subs	r3, #2
 800152a:	b2db      	uxtb	r3, r3
 800152c:	1c1a      	adds	r2, r3, #0
 800152e:	230f      	movs	r3, #15
 8001530:	4013      	ands	r3, r2
 8001532:	b2da      	uxtb	r2, r3
 8001534:	183b      	adds	r3, r7, r0
 8001536:	210f      	movs	r1, #15
 8001538:	400a      	ands	r2, r1
 800153a:	0010      	movs	r0, r2
 800153c:	781a      	ldrb	r2, [r3, #0]
 800153e:	210f      	movs	r1, #15
 8001540:	438a      	bics	r2, r1
 8001542:	1c11      	adds	r1, r2, #0
 8001544:	1c02      	adds	r2, r0, #0
 8001546:	430a      	orrs	r2, r1
 8001548:	701a      	strb	r2, [r3, #0]
		pa_dac_config = RFM95_REGISTER_PA_DAC_LOW_POWER;
 800154a:	230f      	movs	r3, #15
 800154c:	18fb      	adds	r3, r7, r3
 800154e:	2284      	movs	r2, #132	; 0x84
 8001550:	701a      	strb	r2, [r3, #0]
 8001552:	e019      	b.n	8001588 <rfm95_setPower+0xac>

	} else if (power == 20) {
 8001554:	1dfb      	adds	r3, r7, #7
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b25b      	sxtb	r3, r3
 800155a:	2b14      	cmp	r3, #20
 800155c:	d114      	bne.n	8001588 <rfm95_setPower+0xac>
		pa_config.max_power = 7;
 800155e:	200c      	movs	r0, #12
 8001560:	183b      	adds	r3, r7, r0
 8001562:	781a      	ldrb	r2, [r3, #0]
 8001564:	2170      	movs	r1, #112	; 0x70
 8001566:	430a      	orrs	r2, r1
 8001568:	701a      	strb	r2, [r3, #0]
		pa_config.pa_select = 1;
 800156a:	183b      	adds	r3, r7, r0
 800156c:	781a      	ldrb	r2, [r3, #0]
 800156e:	2180      	movs	r1, #128	; 0x80
 8001570:	4249      	negs	r1, r1
 8001572:	430a      	orrs	r2, r1
 8001574:	701a      	strb	r2, [r3, #0]
		pa_config.output_power = 15;
 8001576:	183b      	adds	r3, r7, r0
 8001578:	781a      	ldrb	r2, [r3, #0]
 800157a:	210f      	movs	r1, #15
 800157c:	430a      	orrs	r2, r1
 800157e:	701a      	strb	r2, [r3, #0]
		pa_dac_config = RFM95_REGISTER_PA_DAC_HIGH_POWER;
 8001580:	230f      	movs	r3, #15
 8001582:	18fb      	adds	r3, r7, r3
 8001584:	2287      	movs	r2, #135	; 0x87
 8001586:	701a      	strb	r2, [r3, #0]
	}

	if (!rfm95_write(RFM95_REGISTER_PA_CONFIG, pa_config.buffer))
 8001588:	230c      	movs	r3, #12
 800158a:	18fb      	adds	r3, r7, r3
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	0019      	movs	r1, r3
 8001590:	2009      	movs	r0, #9
 8001592:	f000 f963 	bl	800185c <rfm95_write>
 8001596:	0003      	movs	r3, r0
 8001598:	001a      	movs	r2, r3
 800159a:	2301      	movs	r3, #1
 800159c:	4053      	eors	r3, r2
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <rfm95_setPower+0xcc>
		return false;
 80015a4:	2300      	movs	r3, #0
 80015a6:	e010      	b.n	80015ca <rfm95_setPower+0xee>
	if (!rfm95_write(RFM95_REGISTER_PA_DAC, pa_dac_config))
 80015a8:	230f      	movs	r3, #15
 80015aa:	18fb      	adds	r3, r7, r3
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	0019      	movs	r1, r3
 80015b0:	204d      	movs	r0, #77	; 0x4d
 80015b2:	f000 f953 	bl	800185c <rfm95_write>
 80015b6:	0003      	movs	r3, r0
 80015b8:	001a      	movs	r2, r3
 80015ba:	2301      	movs	r3, #1
 80015bc:	4053      	eors	r3, r2
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <rfm95_setPower+0xec>
		return false;
 80015c4:	2300      	movs	r3, #0
 80015c6:	e000      	b.n	80015ca <rfm95_setPower+0xee>

	return true;
 80015c8:	2301      	movs	r3, #1
}
 80015ca:	0018      	movs	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	b004      	add	sp, #16
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <transmitPackage>:

/**
 * Transmits payload after adding preamble
 */
bool transmitPackage(uint8_t *payload, size_t payloadLength) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]

	if (!handle->txDone) {
 80015de:	4b3f      	ldr	r3, [pc, #252]	; (80016dc <transmitPackage+0x108>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2222      	movs	r2, #34	; 0x22
 80015e4:	5c9b      	ldrb	r3, [r3, r2]
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d105      	bne.n	80015f8 <transmitPackage+0x24>
		rfm95_write(RFM95_REGISTER_OP_MODE,
 80015ec:	2185      	movs	r1, #133	; 0x85
 80015ee:	2001      	movs	r0, #1
 80015f0:	f000 f934 	bl	800185c <rfm95_write>
							RFM95_REGISTER_OP_MODE_LORA_RXCONTINUOUS | 0x80);
		return false;
 80015f4:	2300      	movs	r3, #0
 80015f6:	e06c      	b.n	80016d2 <transmitPackage+0xfe>
	}
	handle->txDone = false;
 80015f8:	4b38      	ldr	r3, [pc, #224]	; (80016dc <transmitPackage+0x108>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2222      	movs	r2, #34	; 0x22
 80015fe:	2100      	movs	r1, #0
 8001600:	5499      	strb	r1, [r3, r2]
//	payload[0] = 0xff;
//	payload[1] = 0xff;
//	payload[2] = 0x00;
//	payload[3] = 0x00;

	uint8_t regopmode = 0;
 8001602:	230b      	movs	r3, #11
 8001604:	18fb      	adds	r3, r7, r3
 8001606:	2200      	movs	r2, #0
 8001608:	701a      	strb	r2, [r3, #0]
	do {
		rfm95_read(RFM95_REGISTER_OP_MODE, &regopmode);
 800160a:	230b      	movs	r3, #11
 800160c:	18fb      	adds	r3, r7, r3
 800160e:	0019      	movs	r1, r3
 8001610:	2001      	movs	r0, #1
 8001612:	f000 f8e1 	bl	80017d8 <rfm95_read>
		if (!rfm95_write(RFM95_REGISTER_OP_MODE,
 8001616:	2181      	movs	r1, #129	; 0x81
 8001618:	2001      	movs	r0, #1
 800161a:	f000 f91f 	bl	800185c <rfm95_write>
 800161e:	0003      	movs	r3, r0
 8001620:	001a      	movs	r2, r3
 8001622:	2301      	movs	r3, #1
 8001624:	4053      	eors	r3, r2
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <transmitPackage+0x5c>
		RFM95_REGISTER_OP_MODE_LORA_STANDBY))
			return false;
 800162c:	2300      	movs	r3, #0
 800162e:	e050      	b.n	80016d2 <transmitPackage+0xfe>
		HAL_Delay(1);
 8001630:	2001      	movs	r0, #1
 8001632:	f000 fc83 	bl	8001f3c <HAL_Delay>
	} while (regopmode != RFM95_REGISTER_OP_MODE_LORA_STANDBY);
 8001636:	230b      	movs	r3, #11
 8001638:	18fb      	adds	r3, r7, r3
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b81      	cmp	r3, #129	; 0x81
 800163e:	d1e4      	bne.n	800160a <transmitPackage+0x36>

	if (!rfm95_write(RFM95_REGISTER_PAYLOAD_LENGTH, payloadLength))
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	b2db      	uxtb	r3, r3
 8001644:	0019      	movs	r1, r3
 8001646:	2022      	movs	r0, #34	; 0x22
 8001648:	f000 f908 	bl	800185c <rfm95_write>
 800164c:	0003      	movs	r3, r0
 800164e:	001a      	movs	r2, r3
 8001650:	2301      	movs	r3, #1
 8001652:	4053      	eors	r3, r2
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <transmitPackage+0x8a>
		return false;
 800165a:	2300      	movs	r3, #0
 800165c:	e039      	b.n	80016d2 <transmitPackage+0xfe>

	// Set SPI pointer to start of TX section in FIFO
	if (!rfm95_write(RFM95_REGISTER_FIFO_ADDR_PTR, 0x80))
 800165e:	2180      	movs	r1, #128	; 0x80
 8001660:	200d      	movs	r0, #13
 8001662:	f000 f8fb 	bl	800185c <rfm95_write>
 8001666:	0003      	movs	r3, r0
 8001668:	001a      	movs	r2, r3
 800166a:	2301      	movs	r3, #1
 800166c:	4053      	eors	r3, r2
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <transmitPackage+0xa4>
		return false;
 8001674:	2300      	movs	r3, #0
 8001676:	e02c      	b.n	80016d2 <transmitPackage+0xfe>

	// Write payload to FIFO.
	for (size_t i = 0; i < payloadLength; i++) {
 8001678:	2300      	movs	r3, #0
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	e00a      	b.n	8001694 <transmitPackage+0xc0>
		rfm95_write(RFM95_REGISTER_FIFO_ACCESS, payload[i]);
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	18d3      	adds	r3, r2, r3
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	0019      	movs	r1, r3
 8001688:	2000      	movs	r0, #0
 800168a:	f000 f8e7 	bl	800185c <rfm95_write>
	for (size_t i = 0; i < payloadLength; i++) {
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	3301      	adds	r3, #1
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	429a      	cmp	r2, r3
 800169a:	d3f0      	bcc.n	800167e <transmitPackage+0xaa>
	}

	if (!rfm95_write(RFM95_REGISTER_DIO_MAPPING_1,
 800169c:	2140      	movs	r1, #64	; 0x40
 800169e:	2040      	movs	r0, #64	; 0x40
 80016a0:	f000 f8dc 	bl	800185c <rfm95_write>
 80016a4:	0003      	movs	r3, r0
 80016a6:	001a      	movs	r2, r3
 80016a8:	2301      	movs	r3, #1
 80016aa:	4053      	eors	r3, r2
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <transmitPackage+0xe2>
	RFM95_REGISTER_DIO_MAPPING_1_IRQ_TXDONE))
		return false;
 80016b2:	2300      	movs	r3, #0
 80016b4:	e00d      	b.n	80016d2 <transmitPackage+0xfe>
	if (!rfm95_write(RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_TX))
 80016b6:	2183      	movs	r1, #131	; 0x83
 80016b8:	2001      	movs	r0, #1
 80016ba:	f000 f8cf 	bl	800185c <rfm95_write>
 80016be:	0003      	movs	r3, r0
 80016c0:	001a      	movs	r2, r3
 80016c2:	2301      	movs	r3, #1
 80016c4:	4053      	eors	r3, r2
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <transmitPackage+0xfc>
		return false;
 80016cc:	2300      	movs	r3, #0
 80016ce:	e000      	b.n	80016d2 <transmitPackage+0xfe>
//	if (!rfm95_write(RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_SLEEP)) return false;

//	rfm95_write(RFM95_REGISTER_OP_MODE,
//				RFM95_REGISTER_OP_MODE_LORA_RXCONTINUOUS | 0x80);

	return true;
 80016d0:	2301      	movs	r3, #1

}
 80016d2:	0018      	movs	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b004      	add	sp, #16
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	200005c0 	.word	0x200005c0

080016e0 <rfm95_handleInterrupt>:
//	return true;
//}
/**
 * Generic function for handling interrupt, for tx and rx
 */
void rfm95_handleInterrupt() {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
	uint8_t irqFlags;
	rfm95_read(RFM95_REGISTER_IRQ_FLAGS, &irqFlags);
 80016e6:	1dfb      	adds	r3, r7, #7
 80016e8:	0019      	movs	r1, r3
 80016ea:	2012      	movs	r0, #18
 80016ec:	f000 f874 	bl	80017d8 <rfm95_read>
	rfm95_write(RFM95_REGISTER_IRQ_FLAGS, irqFlags);
 80016f0:	1dfb      	adds	r3, r7, #7
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	0019      	movs	r1, r3
 80016f6:	2012      	movs	r0, #18
 80016f8:	f000 f8b0 	bl	800185c <rfm95_write>

	if ((irqFlags & 0x20) == 0) {
 80016fc:	1dfb      	adds	r3, r7, #7
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	001a      	movs	r2, r3
 8001702:	2320      	movs	r3, #32
 8001704:	4013      	ands	r3, r2
 8001706:	d160      	bne.n	80017ca <rfm95_handleInterrupt+0xea>
//		++packetError;
		if ((irqFlags & 0x40) != 0) {
 8001708:	1dfb      	adds	r3, r7, #7
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	001a      	movs	r2, r3
 800170e:	2340      	movs	r3, #64	; 0x40
 8001710:	4013      	ands	r3, r2
 8001712:	d047      	beq.n	80017a4 <rfm95_handleInterrupt+0xc4>
			// read packet length
			uint8_t packetLength;

			// reading from RX_NVBYTES, since implicit header mode is off
			// check line 706 in the arduino library
			rfm95_read(0x13, &packetLength);
 8001714:	1dbb      	adds	r3, r7, #6
 8001716:	0019      	movs	r1, r3
 8001718:	2013      	movs	r0, #19
 800171a:	f000 f85d 	bl	80017d8 <rfm95_read>

			// set FIFO address to current RX address
			uint8_t currentAddr;

			rfm95_read(0x10, &currentAddr);
 800171e:	1d7b      	adds	r3, r7, #5
 8001720:	0019      	movs	r1, r3
 8001722:	2010      	movs	r0, #16
 8001724:	f000 f858 	bl	80017d8 <rfm95_read>
			rfm95_write(RFM95_REGISTER_FIFO_ADDR_PTR, currentAddr);
 8001728:	1d7b      	adds	r3, r7, #5
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	0019      	movs	r1, r3
 800172e:	200d      	movs	r0, #13
 8001730:	f000 f894 	bl	800185c <rfm95_write>

			uint8_t *buffer = (uint8_t*) calloc(packetLength, sizeof(uint8_t));
 8001734:	1dbb      	adds	r3, r7, #6
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2101      	movs	r1, #1
 800173a:	0018      	movs	r0, r3
 800173c:	f006 fd6a 	bl	8008214 <calloc>
 8001740:	0003      	movs	r3, r0
 8001742:	60bb      	str	r3, [r7, #8]

			for (size_t i = 0; i < packetLength; i++) {
 8001744:	2300      	movs	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	e009      	b.n	800175e <rfm95_handleInterrupt+0x7e>
				rfm95_read(RFM95_REGISTER_FIFO_ACCESS, &buffer[i]);
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	18d3      	adds	r3, r2, r3
 8001750:	0019      	movs	r1, r3
 8001752:	2000      	movs	r0, #0
 8001754:	f000 f840 	bl	80017d8 <rfm95_read>
			for (size_t i = 0; i < packetLength; i++) {
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	3301      	adds	r3, #1
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	1dbb      	adds	r3, r7, #6
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	001a      	movs	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4293      	cmp	r3, r2
 8001768:	d3ef      	bcc.n	800174a <rfm95_handleInterrupt+0x6a>
//                receivedPacketLength = packetLength;
//                receivedPacketData = (uint8_t *) calloc(packetLength, sizeof(uint8_t));
//            	memcpy(receivedPacketData, buffer + 4, packetLength);
//            }

			if (handle->rxDoneCallback) {
 800176a:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <rfm95_handleInterrupt+0xf4>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001770:	2b00      	cmp	r3, #0
 8001772:	d007      	beq.n	8001784 <rfm95_handleInterrupt+0xa4>
				handle->rxDoneCallback(buffer, packetLength);
 8001774:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <rfm95_handleInterrupt+0xf4>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177a:	1dba      	adds	r2, r7, #6
 800177c:	7811      	ldrb	r1, [r2, #0]
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	0010      	movs	r0, r2
 8001782:	4798      	blx	r3
//			rfm95_write(RFM95_REGISTER_OP_MODE,
//								RFM95_REGISTER_OP_MODE_LORA_RXCONTINUOUS | 0x80);

			//line 401? receive()
			//writeRegister(REG_DIO_MAPPING_1, 0x00); // DIO0 => RXDONE
			rfm95_write(RFM95_REGISTER_DIO_MAPPING_1, 0x00);
 8001784:	2100      	movs	r1, #0
 8001786:	2040      	movs	r0, #64	; 0x40
 8001788:	f000 f868 	bl	800185c <rfm95_write>
			rfm95_write(RFM95_REGISTER_OP_MODE,
 800178c:	2185      	movs	r1, #133	; 0x85
 800178e:	2001      	movs	r0, #1
 8001790:	f000 f864 	bl	800185c <rfm95_write>
								RFM95_REGISTER_OP_MODE_LORA_RXCONTINUOUS | 0x80);

			rfm95_write(RFM95_REGISTER_FIFO_RX_BASE_ADDR, 0x00);
 8001794:	2100      	movs	r1, #0
 8001796:	200f      	movs	r0, #15
 8001798:	f000 f860 	bl	800185c <rfm95_write>
			//RegSeqConfig1?
			free(buffer);
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	0018      	movs	r0, r3
 80017a0:	f006 fd7c 	bl	800829c <free>

		}
		if ((irqFlags & 0x08) != 0) {
 80017a4:	1dfb      	adds	r3, r7, #7
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	001a      	movs	r2, r3
 80017aa:	2308      	movs	r3, #8
 80017ac:	4013      	ands	r3, r2
 80017ae:	d00c      	beq.n	80017ca <rfm95_handleInterrupt+0xea>
			handle->txDone = true;
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <rfm95_handleInterrupt+0xf4>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2222      	movs	r2, #34	; 0x22
 80017b6:	2101      	movs	r1, #1
 80017b8:	5499      	strb	r1, [r3, r2]
			rfm95_write(RFM95_REGISTER_OP_MODE,
 80017ba:	2185      	movs	r1, #133	; 0x85
 80017bc:	2001      	movs	r0, #1
 80017be:	f000 f84d 	bl	800185c <rfm95_write>
					RFM95_REGISTER_OP_MODE_LORA_RXCONTINUOUS | 0x80);
			rfm95_write(RFM95_REGISTER_DIO_MAPPING_1, 0x00);
 80017c2:	2100      	movs	r1, #0
 80017c4:	2040      	movs	r0, #64	; 0x40
 80017c6:	f000 f849 	bl	800185c <rfm95_write>

		}
	}
}
 80017ca:	46c0      	nop			; (mov r8, r8)
 80017cc:	46bd      	mov	sp, r7
 80017ce:	b004      	add	sp, #16
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	200005c0 	.word	0x200005c0

080017d8 <rfm95_read>:
 */

/**
 * Reads from register given by reg and stores value in buffer
 */
bool rfm95_read(rfm95_register_t reg, uint8_t *buffer) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	0002      	movs	r2, r0
 80017e0:	6039      	str	r1, [r7, #0]
 80017e2:	1dfb      	adds	r3, r7, #7
 80017e4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 80017e6:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <rfm95_read+0x80>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6858      	ldr	r0, [r3, #4]
 80017ec:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <rfm95_read+0x80>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	891b      	ldrh	r3, [r3, #8]
 80017f2:	2200      	movs	r2, #0
 80017f4:	0019      	movs	r1, r3
 80017f6:	f002 fa3a 	bl	8003c6e <HAL_GPIO_WritePin>

	uint8_t transmit_buffer = (uint8_t) reg & 0x7fu;
 80017fa:	1dfb      	adds	r3, r7, #7
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	227f      	movs	r2, #127	; 0x7f
 8001800:	4013      	ands	r3, r2
 8001802:	b2da      	uxtb	r2, r3
 8001804:	210f      	movs	r1, #15
 8001806:	187b      	adds	r3, r7, r1
 8001808:	701a      	strb	r2, [r3, #0]

	if (HAL_SPI_Transmit(handle->spi_handle, &transmit_buffer, 1,
 800180a:	4b13      	ldr	r3, [pc, #76]	; (8001858 <rfm95_read+0x80>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6818      	ldr	r0, [r3, #0]
 8001810:	1879      	adds	r1, r7, r1
 8001812:	230a      	movs	r3, #10
 8001814:	2201      	movs	r2, #1
 8001816:	f003 fa97 	bl	8004d48 <HAL_SPI_Transmit>
 800181a:	1e03      	subs	r3, r0, #0
 800181c:	d001      	beq.n	8001822 <rfm95_read+0x4a>
	RFM95_SPI_TIMEOUT) != HAL_OK)
		return false;
 800181e:	2300      	movs	r3, #0
 8001820:	e016      	b.n	8001850 <rfm95_read+0x78>
	if (HAL_SPI_Receive(handle->spi_handle, buffer, 1, RFM95_SPI_TIMEOUT)
 8001822:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <rfm95_read+0x80>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6818      	ldr	r0, [r3, #0]
 8001828:	6839      	ldr	r1, [r7, #0]
 800182a:	230a      	movs	r3, #10
 800182c:	2201      	movs	r2, #1
 800182e:	f003 fbe3 	bl	8004ff8 <HAL_SPI_Receive>
 8001832:	1e03      	subs	r3, r0, #0
 8001834:	d001      	beq.n	800183a <rfm95_read+0x62>
			!= HAL_OK)
		return false;
 8001836:	2300      	movs	r3, #0
 8001838:	e00a      	b.n	8001850 <rfm95_read+0x78>

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 800183a:	4b07      	ldr	r3, [pc, #28]	; (8001858 <rfm95_read+0x80>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6858      	ldr	r0, [r3, #4]
 8001840:	4b05      	ldr	r3, [pc, #20]	; (8001858 <rfm95_read+0x80>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	891b      	ldrh	r3, [r3, #8]
 8001846:	2201      	movs	r2, #1
 8001848:	0019      	movs	r1, r3
 800184a:	f002 fa10 	bl	8003c6e <HAL_GPIO_WritePin>

	return true;
 800184e:	2301      	movs	r3, #1
}
 8001850:	0018      	movs	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	b004      	add	sp, #16
 8001856:	bd80      	pop	{r7, pc}
 8001858:	200005c0 	.word	0x200005c0

0800185c <rfm95_write>:

/**
 * Writes value to register given by reg
 */
bool rfm95_write(rfm95_register_t reg, uint8_t value) {
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	0002      	movs	r2, r0
 8001864:	1dfb      	adds	r3, r7, #7
 8001866:	701a      	strb	r2, [r3, #0]
 8001868:	1dbb      	adds	r3, r7, #6
 800186a:	1c0a      	adds	r2, r1, #0
 800186c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 800186e:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <rfm95_write+0x78>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6858      	ldr	r0, [r3, #4]
 8001874:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <rfm95_write+0x78>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	891b      	ldrh	r3, [r3, #8]
 800187a:	2200      	movs	r2, #0
 800187c:	0019      	movs	r1, r3
 800187e:	f002 f9f6 	bl	8003c6e <HAL_GPIO_WritePin>

	uint8_t transmit_buffer[2] = { ((uint8_t) reg | 0x80u), value };
 8001882:	1dfb      	adds	r3, r7, #7
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2280      	movs	r2, #128	; 0x80
 8001888:	4252      	negs	r2, r2
 800188a:	4313      	orrs	r3, r2
 800188c:	b2da      	uxtb	r2, r3
 800188e:	210c      	movs	r1, #12
 8001890:	187b      	adds	r3, r7, r1
 8001892:	701a      	strb	r2, [r3, #0]
 8001894:	187b      	adds	r3, r7, r1
 8001896:	1dba      	adds	r2, r7, #6
 8001898:	7812      	ldrb	r2, [r2, #0]
 800189a:	705a      	strb	r2, [r3, #1]

	if (HAL_SPI_Transmit(handle->spi_handle, transmit_buffer, 2,
 800189c:	4b0d      	ldr	r3, [pc, #52]	; (80018d4 <rfm95_write+0x78>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6818      	ldr	r0, [r3, #0]
 80018a2:	1879      	adds	r1, r7, r1
 80018a4:	230a      	movs	r3, #10
 80018a6:	2202      	movs	r2, #2
 80018a8:	f003 fa4e 	bl	8004d48 <HAL_SPI_Transmit>
 80018ac:	1e03      	subs	r3, r0, #0
 80018ae:	d001      	beq.n	80018b4 <rfm95_write+0x58>
	RFM95_SPI_TIMEOUT) != HAL_OK)
		return false;
 80018b0:	2300      	movs	r3, #0
 80018b2:	e00a      	b.n	80018ca <rfm95_write+0x6e>

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 80018b4:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <rfm95_write+0x78>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6858      	ldr	r0, [r3, #4]
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <rfm95_write+0x78>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	891b      	ldrh	r3, [r3, #8]
 80018c0:	2201      	movs	r2, #1
 80018c2:	0019      	movs	r1, r3
 80018c4:	f002 f9d3 	bl	8003c6e <HAL_GPIO_WritePin>

	return true;
 80018c8:	2301      	movs	r3, #1
}
 80018ca:	0018      	movs	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	b004      	add	sp, #16
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	46c0      	nop			; (mov r8, r8)
 80018d4:	200005c0 	.word	0x200005c0

080018d8 <rfm95_reset>:

/**
 * Resets Device for initialization
 */
void rfm95_reset() {
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_RESET);
 80018dc:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <rfm95_reset+0x40>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68d8      	ldr	r0, [r3, #12]
 80018e2:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <rfm95_reset+0x40>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	8a1b      	ldrh	r3, [r3, #16]
 80018e8:	2200      	movs	r2, #0
 80018ea:	0019      	movs	r1, r3
 80018ec:	f002 f9bf 	bl	8003c6e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80018f0:	2001      	movs	r0, #1
 80018f2:	f000 fb23 	bl	8001f3c <HAL_Delay>
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_SET);
 80018f6:	4b08      	ldr	r3, [pc, #32]	; (8001918 <rfm95_reset+0x40>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68d8      	ldr	r0, [r3, #12]
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <rfm95_reset+0x40>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	8a1b      	ldrh	r3, [r3, #16]
 8001902:	2201      	movs	r2, #1
 8001904:	0019      	movs	r1, r3
 8001906:	f002 f9b2 	bl	8003c6e <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800190a:	2005      	movs	r0, #5
 800190c:	f000 fb16 	bl	8001f3c <HAL_Delay>
}
 8001910:	46c0      	nop			; (mov r8, r8)
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	46c0      	nop			; (mov r8, r8)
 8001918:	200005c0 	.word	0x200005c0

0800191c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001922:	4b11      	ldr	r3, [pc, #68]	; (8001968 <HAL_MspInit+0x4c>)
 8001924:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001926:	4b10      	ldr	r3, [pc, #64]	; (8001968 <HAL_MspInit+0x4c>)
 8001928:	2101      	movs	r1, #1
 800192a:	430a      	orrs	r2, r1
 800192c:	641a      	str	r2, [r3, #64]	; 0x40
 800192e:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <HAL_MspInit+0x4c>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	2201      	movs	r2, #1
 8001934:	4013      	ands	r3, r2
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800193a:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <HAL_MspInit+0x4c>)
 800193c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <HAL_MspInit+0x4c>)
 8001940:	2180      	movs	r1, #128	; 0x80
 8001942:	0549      	lsls	r1, r1, #21
 8001944:	430a      	orrs	r2, r1
 8001946:	63da      	str	r2, [r3, #60]	; 0x3c
 8001948:	4b07      	ldr	r3, [pc, #28]	; (8001968 <HAL_MspInit+0x4c>)
 800194a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	055b      	lsls	r3, r3, #21
 8001950:	4013      	ands	r3, r2
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8001956:	23c0      	movs	r3, #192	; 0xc0
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	0018      	movs	r0, r3
 800195c:	f000 fb10 	bl	8001f80 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001960:	46c0      	nop			; (mov r8, r8)
 8001962:	46bd      	mov	sp, r7
 8001964:	b002      	add	sp, #8
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40021000 	.word	0x40021000

0800196c <HAL_CRYP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcryp: CRYP handle pointer
* @retval None
*/
void HAL_CRYP_MspInit(CRYP_HandleTypeDef* hcryp)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  if(hcryp->Instance==AES)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <HAL_CRYP_MspInit+0x38>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d10d      	bne.n	800199a <HAL_CRYP_MspInit+0x2e>
  {
  /* USER CODE BEGIN AES_MspInit 0 */

  /* USER CODE END AES_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_AES_CLK_ENABLE();
 800197e:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <HAL_CRYP_MspInit+0x3c>)
 8001980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <HAL_CRYP_MspInit+0x3c>)
 8001984:	2180      	movs	r1, #128	; 0x80
 8001986:	0249      	lsls	r1, r1, #9
 8001988:	430a      	orrs	r2, r1
 800198a:	639a      	str	r2, [r3, #56]	; 0x38
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <HAL_CRYP_MspInit+0x3c>)
 800198e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	025b      	lsls	r3, r3, #9
 8001994:	4013      	ands	r3, r2
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN AES_MspInit 1 */

  /* USER CODE END AES_MspInit 1 */
  }

}
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	46bd      	mov	sp, r7
 800199e:	b004      	add	sp, #16
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	40026000 	.word	0x40026000
 80019a8:	40021000 	.word	0x40021000

080019ac <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <HAL_CRC_MspInit+0x38>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d10d      	bne.n	80019da <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <HAL_CRC_MspInit+0x3c>)
 80019c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <HAL_CRC_MspInit+0x3c>)
 80019c4:	2180      	movs	r1, #128	; 0x80
 80019c6:	0149      	lsls	r1, r1, #5
 80019c8:	430a      	orrs	r2, r1
 80019ca:	639a      	str	r2, [r3, #56]	; 0x38
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_CRC_MspInit+0x3c>)
 80019ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	015b      	lsls	r3, r3, #5
 80019d4:	4013      	ands	r3, r2
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80019da:	46c0      	nop			; (mov r8, r8)
 80019dc:	46bd      	mov	sp, r7
 80019de:	b004      	add	sp, #16
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	40023000 	.word	0x40023000
 80019e8:	40021000 	.word	0x40021000

080019ec <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a0a      	ldr	r2, [pc, #40]	; (8001a24 <HAL_RNG_MspInit+0x38>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d10d      	bne.n	8001a1a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80019fe:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <HAL_RNG_MspInit+0x3c>)
 8001a00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_RNG_MspInit+0x3c>)
 8001a04:	2180      	movs	r1, #128	; 0x80
 8001a06:	02c9      	lsls	r1, r1, #11
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	639a      	str	r2, [r3, #56]	; 0x38
 8001a0c:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_RNG_MspInit+0x3c>)
 8001a0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	02db      	lsls	r3, r3, #11
 8001a14:	4013      	ands	r3, r2
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	b004      	add	sp, #16
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	40025000 	.word	0x40025000
 8001a28:	40021000 	.word	0x40021000

08001a2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	2314      	movs	r3, #20
 8001a36:	18fb      	adds	r3, r7, r3
 8001a38:	0018      	movs	r0, r3
 8001a3a:	2314      	movs	r3, #20
 8001a3c:	001a      	movs	r2, r3
 8001a3e:	2100      	movs	r1, #0
 8001a40:	f006 fc3f 	bl	80082c2 <memset>
  if(hspi->Instance==SPI1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a1b      	ldr	r2, [pc, #108]	; (8001ab8 <HAL_SPI_MspInit+0x8c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d130      	bne.n	8001ab0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <HAL_SPI_MspInit+0x90>)
 8001a50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a52:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <HAL_SPI_MspInit+0x90>)
 8001a54:	2180      	movs	r1, #128	; 0x80
 8001a56:	0149      	lsls	r1, r1, #5
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	641a      	str	r2, [r3, #64]	; 0x40
 8001a5c:	4b17      	ldr	r3, [pc, #92]	; (8001abc <HAL_SPI_MspInit+0x90>)
 8001a5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a60:	2380      	movs	r3, #128	; 0x80
 8001a62:	015b      	lsls	r3, r3, #5
 8001a64:	4013      	ands	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	4b14      	ldr	r3, [pc, #80]	; (8001abc <HAL_SPI_MspInit+0x90>)
 8001a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a6e:	4b13      	ldr	r3, [pc, #76]	; (8001abc <HAL_SPI_MspInit+0x90>)
 8001a70:	2101      	movs	r1, #1
 8001a72:	430a      	orrs	r2, r1
 8001a74:	635a      	str	r2, [r3, #52]	; 0x34
 8001a76:	4b11      	ldr	r3, [pc, #68]	; (8001abc <HAL_SPI_MspInit+0x90>)
 8001a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6;
 8001a82:	2114      	movs	r1, #20
 8001a84:	187b      	adds	r3, r7, r1
 8001a86:	2246      	movs	r2, #70	; 0x46
 8001a88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	187b      	adds	r3, r7, r1
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	187b      	adds	r3, r7, r1
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a96:	187b      	adds	r3, r7, r1
 8001a98:	2200      	movs	r2, #0
 8001a9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001a9c:	187b      	adds	r3, r7, r1
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa2:	187a      	adds	r2, r7, r1
 8001aa4:	23a0      	movs	r3, #160	; 0xa0
 8001aa6:	05db      	lsls	r3, r3, #23
 8001aa8:	0011      	movs	r1, r2
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f001 ff5e 	bl	800396c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ab0:	46c0      	nop			; (mov r8, r8)
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	b00a      	add	sp, #40	; 0x28
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40013000 	.word	0x40013000
 8001abc:	40021000 	.word	0x40021000

08001ac0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a0a      	ldr	r2, [pc, #40]	; (8001af8 <HAL_TIM_PWM_MspInit+0x38>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d10d      	bne.n	8001aee <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <HAL_TIM_PWM_MspInit+0x3c>)
 8001ad4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <HAL_TIM_PWM_MspInit+0x3c>)
 8001ad8:	2180      	movs	r1, #128	; 0x80
 8001ada:	0109      	lsls	r1, r1, #4
 8001adc:	430a      	orrs	r2, r1
 8001ade:	641a      	str	r2, [r3, #64]	; 0x40
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_TIM_PWM_MspInit+0x3c>)
 8001ae2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ae4:	2380      	movs	r3, #128	; 0x80
 8001ae6:	011b      	lsls	r3, r3, #4
 8001ae8:	4013      	ands	r3, r2
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001aee:	46c0      	nop			; (mov r8, r8)
 8001af0:	46bd      	mov	sp, r7
 8001af2:	b004      	add	sp, #16
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	46c0      	nop			; (mov r8, r8)
 8001af8:	40012c00 	.word	0x40012c00
 8001afc:	40021000 	.word	0x40021000

08001b00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a0e      	ldr	r2, [pc, #56]	; (8001b48 <HAL_TIM_Base_MspInit+0x48>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d115      	bne.n	8001b3e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001b12:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <HAL_TIM_Base_MspInit+0x4c>)
 8001b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b16:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <HAL_TIM_Base_MspInit+0x4c>)
 8001b18:	2180      	movs	r1, #128	; 0x80
 8001b1a:	0289      	lsls	r1, r1, #10
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	641a      	str	r2, [r3, #64]	; 0x40
 8001b20:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <HAL_TIM_Base_MspInit+0x4c>)
 8001b22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	029b      	lsls	r3, r3, #10
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 2, 0);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2102      	movs	r1, #2
 8001b32:	2015      	movs	r0, #21
 8001b34:	f000 fae6 	bl	8002104 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001b38:	2015      	movs	r0, #21
 8001b3a:	f000 faf8 	bl	800212e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001b3e:	46c0      	nop			; (mov r8, r8)
 8001b40:	46bd      	mov	sp, r7
 8001b42:	b004      	add	sp, #16
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	40014400 	.word	0x40014400
 8001b4c:	40021000 	.word	0x40021000

08001b50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b088      	sub	sp, #32
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	230c      	movs	r3, #12
 8001b5a:	18fb      	adds	r3, r7, r3
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	2314      	movs	r3, #20
 8001b60:	001a      	movs	r2, r3
 8001b62:	2100      	movs	r1, #0
 8001b64:	f006 fbad 	bl	80082c2 <memset>
  if(htim->Instance==TIM1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a15      	ldr	r2, [pc, #84]	; (8001bc4 <HAL_TIM_MspPostInit+0x74>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d123      	bne.n	8001bba <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b72:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <HAL_TIM_MspPostInit+0x78>)
 8001b74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b76:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <HAL_TIM_MspPostInit+0x78>)
 8001b78:	2101      	movs	r1, #1
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b7e:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <HAL_TIM_MspPostInit+0x78>)
 8001b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b82:	2201      	movs	r2, #1
 8001b84:	4013      	ands	r3, r2
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = VIBE_PWM_Pin;
 8001b8a:	210c      	movs	r1, #12
 8001b8c:	187b      	adds	r3, r7, r1
 8001b8e:	2280      	movs	r2, #128	; 0x80
 8001b90:	0052      	lsls	r2, r2, #1
 8001b92:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b94:	187b      	adds	r3, r7, r1
 8001b96:	2202      	movs	r2, #2
 8001b98:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	187b      	adds	r3, r7, r1
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba0:	187b      	adds	r3, r7, r1
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001ba6:	187b      	adds	r3, r7, r1
 8001ba8:	2202      	movs	r2, #2
 8001baa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(VIBE_PWM_GPIO_Port, &GPIO_InitStruct);
 8001bac:	187a      	adds	r2, r7, r1
 8001bae:	23a0      	movs	r3, #160	; 0xa0
 8001bb0:	05db      	lsls	r3, r3, #23
 8001bb2:	0011      	movs	r1, r2
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f001 fed9 	bl	800396c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	b008      	add	sp, #32
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	40012c00 	.word	0x40012c00
 8001bc8:	40021000 	.word	0x40021000

08001bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <NMI_Handler+0x4>

08001bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd6:	e7fe      	b.n	8001bd6 <HardFault_Handler+0x4>

08001bd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001bdc:	46c0      	nop			; (mov r8, r8)
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bf0:	f000 f988 	bl	8001f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bf4:	46c0      	nop			; (mov r8, r8)
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001bfe:	2001      	movs	r0, #1
 8001c00:	f002 f86e 	bl	8003ce0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001c04:	46c0      	nop			; (mov r8, r8)
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001c0e:	2040      	movs	r0, #64	; 0x40
 8001c10:	f002 f866 	bl	8003ce0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f002 f861 	bl	8003ce0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001c1e:	2380      	movs	r3, #128	; 0x80
 8001c20:	019b      	lsls	r3, r3, #6
 8001c22:	0018      	movs	r0, r3
 8001c24:	f002 f85c 	bl	8003ce0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001c28:	46c0      	nop			; (mov r8, r8)
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001c34:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <TIM16_IRQHandler+0x14>)
 8001c36:	0018      	movs	r0, r3
 8001c38:	f004 f8bc 	bl	8005db4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001c3c:	46c0      	nop			; (mov r8, r8)
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	2000071c 	.word	0x2000071c

08001c48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
	return 1;
 8001c4c:	2301      	movs	r3, #1
}
 8001c4e:	0018      	movs	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <_kill>:

int _kill(int pid, int sig)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c5e:	f006 fae3 	bl	8008228 <__errno>
 8001c62:	0003      	movs	r3, r0
 8001c64:	2216      	movs	r2, #22
 8001c66:	601a      	str	r2, [r3, #0]
	return -1;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	425b      	negs	r3, r3
}
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	b002      	add	sp, #8
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <_exit>:

void _exit (int status)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	425a      	negs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	0011      	movs	r1, r2
 8001c84:	0018      	movs	r0, r3
 8001c86:	f7ff ffe5 	bl	8001c54 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c8a:	e7fe      	b.n	8001c8a <_exit+0x16>

08001c8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
 8001c9c:	e00a      	b.n	8001cb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c9e:	e000      	b.n	8001ca2 <_read+0x16>
 8001ca0:	bf00      	nop
 8001ca2:	0001      	movs	r1, r0
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	1c5a      	adds	r2, r3, #1
 8001ca8:	60ba      	str	r2, [r7, #8]
 8001caa:	b2ca      	uxtb	r2, r1
 8001cac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	dbf0      	blt.n	8001c9e <_read+0x12>
	}

return len;
 8001cbc:	687b      	ldr	r3, [r7, #4]
}
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	b006      	add	sp, #24
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b086      	sub	sp, #24
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	60f8      	str	r0, [r7, #12]
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	e009      	b.n	8001cec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	1c5a      	adds	r2, r3, #1
 8001cdc:	60ba      	str	r2, [r7, #8]
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	e000      	b.n	8001ce6 <_write+0x20>
 8001ce4:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	dbf1      	blt.n	8001cd8 <_write+0x12>
	}
	return len;
 8001cf4:	687b      	ldr	r3, [r7, #4]
}
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	b006      	add	sp, #24
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <_close>:

int _close(int file)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
	return -1;
 8001d06:	2301      	movs	r3, #1
 8001d08:	425b      	negs	r3, r3
}
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	b002      	add	sp, #8
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	2280      	movs	r2, #128	; 0x80
 8001d20:	0192      	lsls	r2, r2, #6
 8001d22:	605a      	str	r2, [r3, #4]
	return 0;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	0018      	movs	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	b002      	add	sp, #8
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <_isatty>:

int _isatty(int file)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
	return 1;
 8001d36:	2301      	movs	r3, #1
}
 8001d38:	0018      	movs	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	b002      	add	sp, #8
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
	return 0;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	0018      	movs	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	b004      	add	sp, #16
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d60:	4a14      	ldr	r2, [pc, #80]	; (8001db4 <_sbrk+0x5c>)
 8001d62:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <_sbrk+0x60>)
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d6c:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <_sbrk+0x64>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d102      	bne.n	8001d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d74:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <_sbrk+0x64>)
 8001d76:	4a12      	ldr	r2, [pc, #72]	; (8001dc0 <_sbrk+0x68>)
 8001d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d7a:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <_sbrk+0x64>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	18d3      	adds	r3, r2, r3
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d207      	bcs.n	8001d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d88:	f006 fa4e 	bl	8008228 <__errno>
 8001d8c:	0003      	movs	r3, r0
 8001d8e:	220c      	movs	r2, #12
 8001d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d92:	2301      	movs	r3, #1
 8001d94:	425b      	negs	r3, r3
 8001d96:	e009      	b.n	8001dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <_sbrk+0x64>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d9e:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <_sbrk+0x64>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	18d2      	adds	r2, r2, r3
 8001da6:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <_sbrk+0x64>)
 8001da8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001daa:	68fb      	ldr	r3, [r7, #12]
}
 8001dac:	0018      	movs	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	b006      	add	sp, #24
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20009000 	.word	0x20009000
 8001db8:	00000400 	.word	0x00000400
 8001dbc:	20000524 	.word	0x20000524
 8001dc0:	20000890 	.word	0x20000890

08001dc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dc8:	4b03      	ldr	r3, [pc, #12]	; (8001dd8 <SystemInit+0x14>)
 8001dca:	2280      	movs	r2, #128	; 0x80
 8001dcc:	0512      	lsls	r2, r2, #20
 8001dce:	609a      	str	r2, [r3, #8]
#endif
}
 8001dd0:	46c0      	nop			; (mov r8, r8)
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ddc:	480d      	ldr	r0, [pc, #52]	; (8001e14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001dde:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001de0:	f7ff fff0 	bl	8001dc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001de4:	480c      	ldr	r0, [pc, #48]	; (8001e18 <LoopForever+0x6>)
  ldr r1, =_edata
 8001de6:	490d      	ldr	r1, [pc, #52]	; (8001e1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001de8:	4a0d      	ldr	r2, [pc, #52]	; (8001e20 <LoopForever+0xe>)
  movs r3, #0
 8001dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dec:	e002      	b.n	8001df4 <LoopCopyDataInit>

08001dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001df2:	3304      	adds	r3, #4

08001df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df8:	d3f9      	bcc.n	8001dee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dfa:	4a0a      	ldr	r2, [pc, #40]	; (8001e24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dfc:	4c0a      	ldr	r4, [pc, #40]	; (8001e28 <LoopForever+0x16>)
  movs r3, #0
 8001dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e00:	e001      	b.n	8001e06 <LoopFillZerobss>

08001e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e04:	3204      	adds	r2, #4

08001e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e08:	d3fb      	bcc.n	8001e02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e0a:	f006 fa23 	bl	8008254 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001e0e:	f7fe fa31 	bl	8000274 <main>

08001e12 <LoopForever>:

LoopForever:
  b LoopForever
 8001e12:	e7fe      	b.n	8001e12 <LoopForever>
  ldr   r0, =_estack
 8001e14:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e1c:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 8001e20:	080094a4 	.word	0x080094a4
  ldr r2, =_sbss
 8001e24:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8001e28:	2000088c 	.word	0x2000088c

08001e2c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e2c:	e7fe      	b.n	8001e2c <ADC1_COMP_IRQHandler>
	...

08001e30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e36:	1dfb      	adds	r3, r7, #7
 8001e38:	2200      	movs	r2, #0
 8001e3a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e3c:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <HAL_Init+0x3c>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <HAL_Init+0x3c>)
 8001e42:	2180      	movs	r1, #128	; 0x80
 8001e44:	0049      	lsls	r1, r1, #1
 8001e46:	430a      	orrs	r2, r1
 8001e48:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e4a:	2000      	movs	r0, #0
 8001e4c:	f000 f810 	bl	8001e70 <HAL_InitTick>
 8001e50:	1e03      	subs	r3, r0, #0
 8001e52:	d003      	beq.n	8001e5c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001e54:	1dfb      	adds	r3, r7, #7
 8001e56:	2201      	movs	r2, #1
 8001e58:	701a      	strb	r2, [r3, #0]
 8001e5a:	e001      	b.n	8001e60 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001e5c:	f7ff fd5e 	bl	800191c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e60:	1dfb      	adds	r3, r7, #7
 8001e62:	781b      	ldrb	r3, [r3, #0]
}
 8001e64:	0018      	movs	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	b002      	add	sp, #8
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40022000 	.word	0x40022000

08001e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e70:	b590      	push	{r4, r7, lr}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e78:	230f      	movs	r3, #15
 8001e7a:	18fb      	adds	r3, r7, r3
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001e80:	4b1d      	ldr	r3, [pc, #116]	; (8001ef8 <HAL_InitTick+0x88>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d02b      	beq.n	8001ee0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001e88:	4b1c      	ldr	r3, [pc, #112]	; (8001efc <HAL_InitTick+0x8c>)
 8001e8a:	681c      	ldr	r4, [r3, #0]
 8001e8c:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <HAL_InitTick+0x88>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	0019      	movs	r1, r3
 8001e92:	23fa      	movs	r3, #250	; 0xfa
 8001e94:	0098      	lsls	r0, r3, #2
 8001e96:	f7fe f937 	bl	8000108 <__udivsi3>
 8001e9a:	0003      	movs	r3, r0
 8001e9c:	0019      	movs	r1, r3
 8001e9e:	0020      	movs	r0, r4
 8001ea0:	f7fe f932 	bl	8000108 <__udivsi3>
 8001ea4:	0003      	movs	r3, r0
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f000 f951 	bl	800214e <HAL_SYSTICK_Config>
 8001eac:	1e03      	subs	r3, r0, #0
 8001eae:	d112      	bne.n	8001ed6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	d80a      	bhi.n	8001ecc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	2301      	movs	r3, #1
 8001eba:	425b      	negs	r3, r3
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f000 f920 	bl	8002104 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ec4:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <HAL_InitTick+0x90>)
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	e00d      	b.n	8001ee8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001ecc:	230f      	movs	r3, #15
 8001ece:	18fb      	adds	r3, r7, r3
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	701a      	strb	r2, [r3, #0]
 8001ed4:	e008      	b.n	8001ee8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ed6:	230f      	movs	r3, #15
 8001ed8:	18fb      	adds	r3, r7, r3
 8001eda:	2201      	movs	r2, #1
 8001edc:	701a      	strb	r2, [r3, #0]
 8001ede:	e003      	b.n	8001ee8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ee0:	230f      	movs	r3, #15
 8001ee2:	18fb      	adds	r3, r7, r3
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001ee8:	230f      	movs	r3, #15
 8001eea:	18fb      	adds	r3, r7, r3
 8001eec:	781b      	ldrb	r3, [r3, #0]
}
 8001eee:	0018      	movs	r0, r3
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	b005      	add	sp, #20
 8001ef4:	bd90      	pop	{r4, r7, pc}
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	20000008 	.word	0x20000008
 8001efc:	20000000 	.word	0x20000000
 8001f00:	20000004 	.word	0x20000004

08001f04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f08:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <HAL_IncTick+0x1c>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	001a      	movs	r2, r3
 8001f0e:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <HAL_IncTick+0x20>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	18d2      	adds	r2, r2, r3
 8001f14:	4b03      	ldr	r3, [pc, #12]	; (8001f24 <HAL_IncTick+0x20>)
 8001f16:	601a      	str	r2, [r3, #0]
}
 8001f18:	46c0      	nop			; (mov r8, r8)
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	20000008 	.word	0x20000008
 8001f24:	20000884 	.word	0x20000884

08001f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f2c:	4b02      	ldr	r3, [pc, #8]	; (8001f38 <HAL_GetTick+0x10>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
}
 8001f30:	0018      	movs	r0, r3
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	20000884 	.word	0x20000884

08001f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f44:	f7ff fff0 	bl	8001f28 <HAL_GetTick>
 8001f48:	0003      	movs	r3, r0
 8001f4a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	3301      	adds	r3, #1
 8001f54:	d005      	beq.n	8001f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f56:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <HAL_Delay+0x40>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	001a      	movs	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	189b      	adds	r3, r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	f7ff ffe0 	bl	8001f28 <HAL_GetTick>
 8001f68:	0002      	movs	r2, r0
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d8f7      	bhi.n	8001f64 <HAL_Delay+0x28>
  {
  }
}
 8001f74:	46c0      	nop			; (mov r8, r8)
 8001f76:	46bd      	mov	sp, r7
 8001f78:	b004      	add	sp, #16
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000008 	.word	0x20000008

08001f80 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001f88:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a06      	ldr	r2, [pc, #24]	; (8001fa8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001f8e:	4013      	ands	r3, r2
 8001f90:	0019      	movs	r1, r3
 8001f92:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	601a      	str	r2, [r3, #0]
}
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	b002      	add	sp, #8
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	40010000 	.word	0x40010000
 8001fa8:	fffff9ff 	.word	0xfffff9ff

08001fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	0002      	movs	r2, r0
 8001fb4:	1dfb      	adds	r3, r7, #7
 8001fb6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001fb8:	1dfb      	adds	r3, r7, #7
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b7f      	cmp	r3, #127	; 0x7f
 8001fbe:	d809      	bhi.n	8001fd4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fc0:	1dfb      	adds	r3, r7, #7
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	001a      	movs	r2, r3
 8001fc6:	231f      	movs	r3, #31
 8001fc8:	401a      	ands	r2, r3
 8001fca:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <__NVIC_EnableIRQ+0x30>)
 8001fcc:	2101      	movs	r1, #1
 8001fce:	4091      	lsls	r1, r2
 8001fd0:	000a      	movs	r2, r1
 8001fd2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001fd4:	46c0      	nop			; (mov r8, r8)
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	b002      	add	sp, #8
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	e000e100 	.word	0xe000e100

08001fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fe0:	b590      	push	{r4, r7, lr}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	0002      	movs	r2, r0
 8001fe8:	6039      	str	r1, [r7, #0]
 8001fea:	1dfb      	adds	r3, r7, #7
 8001fec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001fee:	1dfb      	adds	r3, r7, #7
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b7f      	cmp	r3, #127	; 0x7f
 8001ff4:	d828      	bhi.n	8002048 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ff6:	4a2f      	ldr	r2, [pc, #188]	; (80020b4 <__NVIC_SetPriority+0xd4>)
 8001ff8:	1dfb      	adds	r3, r7, #7
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	b25b      	sxtb	r3, r3
 8001ffe:	089b      	lsrs	r3, r3, #2
 8002000:	33c0      	adds	r3, #192	; 0xc0
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	589b      	ldr	r3, [r3, r2]
 8002006:	1dfa      	adds	r2, r7, #7
 8002008:	7812      	ldrb	r2, [r2, #0]
 800200a:	0011      	movs	r1, r2
 800200c:	2203      	movs	r2, #3
 800200e:	400a      	ands	r2, r1
 8002010:	00d2      	lsls	r2, r2, #3
 8002012:	21ff      	movs	r1, #255	; 0xff
 8002014:	4091      	lsls	r1, r2
 8002016:	000a      	movs	r2, r1
 8002018:	43d2      	mvns	r2, r2
 800201a:	401a      	ands	r2, r3
 800201c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	019b      	lsls	r3, r3, #6
 8002022:	22ff      	movs	r2, #255	; 0xff
 8002024:	401a      	ands	r2, r3
 8002026:	1dfb      	adds	r3, r7, #7
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	0018      	movs	r0, r3
 800202c:	2303      	movs	r3, #3
 800202e:	4003      	ands	r3, r0
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002034:	481f      	ldr	r0, [pc, #124]	; (80020b4 <__NVIC_SetPriority+0xd4>)
 8002036:	1dfb      	adds	r3, r7, #7
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	b25b      	sxtb	r3, r3
 800203c:	089b      	lsrs	r3, r3, #2
 800203e:	430a      	orrs	r2, r1
 8002040:	33c0      	adds	r3, #192	; 0xc0
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002046:	e031      	b.n	80020ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002048:	4a1b      	ldr	r2, [pc, #108]	; (80020b8 <__NVIC_SetPriority+0xd8>)
 800204a:	1dfb      	adds	r3, r7, #7
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	0019      	movs	r1, r3
 8002050:	230f      	movs	r3, #15
 8002052:	400b      	ands	r3, r1
 8002054:	3b08      	subs	r3, #8
 8002056:	089b      	lsrs	r3, r3, #2
 8002058:	3306      	adds	r3, #6
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	18d3      	adds	r3, r2, r3
 800205e:	3304      	adds	r3, #4
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	1dfa      	adds	r2, r7, #7
 8002064:	7812      	ldrb	r2, [r2, #0]
 8002066:	0011      	movs	r1, r2
 8002068:	2203      	movs	r2, #3
 800206a:	400a      	ands	r2, r1
 800206c:	00d2      	lsls	r2, r2, #3
 800206e:	21ff      	movs	r1, #255	; 0xff
 8002070:	4091      	lsls	r1, r2
 8002072:	000a      	movs	r2, r1
 8002074:	43d2      	mvns	r2, r2
 8002076:	401a      	ands	r2, r3
 8002078:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	019b      	lsls	r3, r3, #6
 800207e:	22ff      	movs	r2, #255	; 0xff
 8002080:	401a      	ands	r2, r3
 8002082:	1dfb      	adds	r3, r7, #7
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	0018      	movs	r0, r3
 8002088:	2303      	movs	r3, #3
 800208a:	4003      	ands	r3, r0
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002090:	4809      	ldr	r0, [pc, #36]	; (80020b8 <__NVIC_SetPriority+0xd8>)
 8002092:	1dfb      	adds	r3, r7, #7
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	001c      	movs	r4, r3
 8002098:	230f      	movs	r3, #15
 800209a:	4023      	ands	r3, r4
 800209c:	3b08      	subs	r3, #8
 800209e:	089b      	lsrs	r3, r3, #2
 80020a0:	430a      	orrs	r2, r1
 80020a2:	3306      	adds	r3, #6
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	18c3      	adds	r3, r0, r3
 80020a8:	3304      	adds	r3, #4
 80020aa:	601a      	str	r2, [r3, #0]
}
 80020ac:	46c0      	nop			; (mov r8, r8)
 80020ae:	46bd      	mov	sp, r7
 80020b0:	b003      	add	sp, #12
 80020b2:	bd90      	pop	{r4, r7, pc}
 80020b4:	e000e100 	.word	0xe000e100
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	4a0c      	ldr	r2, [pc, #48]	; (80020fc <SysTick_Config+0x40>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d901      	bls.n	80020d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ce:	2301      	movs	r3, #1
 80020d0:	e010      	b.n	80020f4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020d2:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <SysTick_Config+0x44>)
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	3a01      	subs	r2, #1
 80020d8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020da:	2301      	movs	r3, #1
 80020dc:	425b      	negs	r3, r3
 80020de:	2103      	movs	r1, #3
 80020e0:	0018      	movs	r0, r3
 80020e2:	f7ff ff7d 	bl	8001fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020e6:	4b06      	ldr	r3, [pc, #24]	; (8002100 <SysTick_Config+0x44>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ec:	4b04      	ldr	r3, [pc, #16]	; (8002100 <SysTick_Config+0x44>)
 80020ee:	2207      	movs	r2, #7
 80020f0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	0018      	movs	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b002      	add	sp, #8
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	00ffffff 	.word	0x00ffffff
 8002100:	e000e010 	.word	0xe000e010

08002104 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	607a      	str	r2, [r7, #4]
 800210e:	210f      	movs	r1, #15
 8002110:	187b      	adds	r3, r7, r1
 8002112:	1c02      	adds	r2, r0, #0
 8002114:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	187b      	adds	r3, r7, r1
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	b25b      	sxtb	r3, r3
 800211e:	0011      	movs	r1, r2
 8002120:	0018      	movs	r0, r3
 8002122:	f7ff ff5d 	bl	8001fe0 <__NVIC_SetPriority>
}
 8002126:	46c0      	nop			; (mov r8, r8)
 8002128:	46bd      	mov	sp, r7
 800212a:	b004      	add	sp, #16
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	0002      	movs	r2, r0
 8002136:	1dfb      	adds	r3, r7, #7
 8002138:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800213a:	1dfb      	adds	r3, r7, #7
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	b25b      	sxtb	r3, r3
 8002140:	0018      	movs	r0, r3
 8002142:	f7ff ff33 	bl	8001fac <__NVIC_EnableIRQ>
}
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	46bd      	mov	sp, r7
 800214a:	b002      	add	sp, #8
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	0018      	movs	r0, r3
 800215a:	f7ff ffaf 	bl	80020bc <SysTick_Config>
 800215e:	0003      	movs	r3, r0
}
 8002160:	0018      	movs	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	b002      	add	sp, #8
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e056      	b.n	8002228 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	7f5b      	ldrb	r3, [r3, #29]
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d106      	bne.n	8002192 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	0018      	movs	r0, r3
 800218e:	f7ff fc0d 	bl	80019ac <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2202      	movs	r2, #2
 8002196:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	791b      	ldrb	r3, [r3, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10c      	bne.n	80021ba <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a22      	ldr	r2, [pc, #136]	; (8002230 <HAL_CRC_Init+0xc8>)
 80021a6:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2118      	movs	r1, #24
 80021b4:	438a      	bics	r2, r1
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	e00b      	b.n	80021d2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6899      	ldr	r1, [r3, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	0018      	movs	r0, r3
 80021c6:	f000 f835 	bl	8002234 <HAL_CRCEx_Polynomial_Set>
 80021ca:	1e03      	subs	r3, r0, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e02a      	b.n	8002228 <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	795b      	ldrb	r3, [r3, #5]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d105      	bne.n	80021e6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2201      	movs	r2, #1
 80021e0:	4252      	negs	r2, r2
 80021e2:	611a      	str	r2, [r3, #16]
 80021e4:	e004      	b.n	80021f0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6912      	ldr	r2, [r2, #16]
 80021ee:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2260      	movs	r2, #96	; 0x60
 80021f8:	4393      	bics	r3, r2
 80021fa:	0019      	movs	r1, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	695a      	ldr	r2, [r3, #20]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	430a      	orrs	r2, r1
 8002206:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	2280      	movs	r2, #128	; 0x80
 8002210:	4393      	bics	r3, r2
 8002212:	0019      	movs	r1, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	699a      	ldr	r2, [r3, #24]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	0018      	movs	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	b002      	add	sp, #8
 800222e:	bd80      	pop	{r7, pc}
 8002230:	04c11db7 	.word	0x04c11db7

08002234 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002240:	2317      	movs	r3, #23
 8002242:	18fb      	adds	r3, r7, r3
 8002244:	2200      	movs	r2, #0
 8002246:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002248:	231f      	movs	r3, #31
 800224a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800224c:	46c0      	nop			; (mov r8, r8)
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1e5a      	subs	r2, r3, #1
 8002252:	613a      	str	r2, [r7, #16]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d008      	beq.n	800226a <HAL_CRCEx_Polynomial_Set+0x36>
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	221f      	movs	r2, #31
 800225c:	4013      	ands	r3, r2
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	40da      	lsrs	r2, r3
 8002262:	0013      	movs	r3, r2
 8002264:	2201      	movs	r2, #1
 8002266:	4013      	ands	r3, r2
 8002268:	d0f1      	beq.n	800224e <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b08      	cmp	r3, #8
 800226e:	d017      	beq.n	80022a0 <HAL_CRCEx_Polynomial_Set+0x6c>
 8002270:	d802      	bhi.n	8002278 <HAL_CRCEx_Polynomial_Set+0x44>
 8002272:	2b00      	cmp	r3, #0
 8002274:	d021      	beq.n	80022ba <HAL_CRCEx_Polynomial_Set+0x86>
 8002276:	e01b      	b.n	80022b0 <HAL_CRCEx_Polynomial_Set+0x7c>
 8002278:	2b10      	cmp	r3, #16
 800227a:	d009      	beq.n	8002290 <HAL_CRCEx_Polynomial_Set+0x5c>
 800227c:	2b18      	cmp	r3, #24
 800227e:	d117      	bne.n	80022b0 <HAL_CRCEx_Polynomial_Set+0x7c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	2b06      	cmp	r3, #6
 8002284:	d91b      	bls.n	80022be <HAL_CRCEx_Polynomial_Set+0x8a>
      {
        status =   HAL_ERROR;
 8002286:	2317      	movs	r3, #23
 8002288:	18fb      	adds	r3, r7, r3
 800228a:	2201      	movs	r2, #1
 800228c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800228e:	e016      	b.n	80022be <HAL_CRCEx_Polynomial_Set+0x8a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	2b07      	cmp	r3, #7
 8002294:	d915      	bls.n	80022c2 <HAL_CRCEx_Polynomial_Set+0x8e>
      {
        status =   HAL_ERROR;
 8002296:	2317      	movs	r3, #23
 8002298:	18fb      	adds	r3, r7, r3
 800229a:	2201      	movs	r2, #1
 800229c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800229e:	e010      	b.n	80022c2 <HAL_CRCEx_Polynomial_Set+0x8e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	2b0f      	cmp	r3, #15
 80022a4:	d90f      	bls.n	80022c6 <HAL_CRCEx_Polynomial_Set+0x92>
      {
        status =   HAL_ERROR;
 80022a6:	2317      	movs	r3, #23
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	2201      	movs	r2, #1
 80022ac:	701a      	strb	r2, [r3, #0]
      }
      break;
 80022ae:	e00a      	b.n	80022c6 <HAL_CRCEx_Polynomial_Set+0x92>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80022b0:	2317      	movs	r3, #23
 80022b2:	18fb      	adds	r3, r7, r3
 80022b4:	2201      	movs	r2, #1
 80022b6:	701a      	strb	r2, [r3, #0]
      break;
 80022b8:	e006      	b.n	80022c8 <HAL_CRCEx_Polynomial_Set+0x94>
      break;
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	e004      	b.n	80022c8 <HAL_CRCEx_Polynomial_Set+0x94>
      break;
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	e002      	b.n	80022c8 <HAL_CRCEx_Polynomial_Set+0x94>
      break;
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	e000      	b.n	80022c8 <HAL_CRCEx_Polynomial_Set+0x94>
      break;
 80022c6:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 80022c8:	2317      	movs	r3, #23
 80022ca:	18fb      	adds	r3, r7, r3
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10e      	bne.n	80022f0 <HAL_CRCEx_Polynomial_Set+0xbc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	2218      	movs	r2, #24
 80022e2:	4393      	bics	r3, r2
 80022e4:	0019      	movs	r1, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80022f0:	2317      	movs	r3, #23
 80022f2:	18fb      	adds	r3, r7, r3
 80022f4:	781b      	ldrb	r3, [r3, #0]
}
 80022f6:	0018      	movs	r0, r3
 80022f8:	46bd      	mov	sp, r7
 80022fa:	b006      	add	sp, #24
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <HAL_CRYP_Init>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Init(CRYP_HandleTypeDef *hcryp)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_CRYP_Init+0x12>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e02d      	b.n	800236e <HAL_CRYP_Init+0x6e>

    /* Init the low level hardware */
    hcryp->MspInitCallback(hcryp);
  }
#else
  if (hcryp->State == HAL_CRYP_STATE_RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2251      	movs	r2, #81	; 0x51
 8002316:	5c9b      	ldrb	r3, [r3, r2]
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d107      	bne.n	800232e <HAL_CRYP_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hcryp->Lock = HAL_UNLOCKED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2250      	movs	r2, #80	; 0x50
 8002322:	2100      	movs	r1, #0
 8002324:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    HAL_CRYP_MspInit(hcryp);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	0018      	movs	r0, r3
 800232a:	f7ff fb1f 	bl	800196c <HAL_CRYP_MspInit>
  }
#endif /* (USE_HAL_CRYP_REGISTER_CALLBACKS) */

  /* Set the key size (This bit field is do not care in the DES or TDES modes), data type and Algorithm */
  MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD, hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a10      	ldr	r2, [pc, #64]	; (8002378 <HAL_CRYP_Init+0x78>)
 8002336:	4013      	ands	r3, r2
 8002338:	0019      	movs	r1, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	431a      	orrs	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	601a      	str	r2, [r3, #0]

  /* Reset Error Code field */
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset peripheral Key and IV configuration flag */
  hcryp->KeyIVConfig = 0U;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2251      	movs	r2, #81	; 0x51
 8002362:	2101      	movs	r1, #1
 8002364:	5499      	strb	r1, [r3, r2]

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	0018      	movs	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	b002      	add	sp, #8
 8002374:	bd80      	pop	{r7, pc}
 8002376:	46c0      	nop			; (mov r8, r8)
 8002378:	fffaff99 	.word	0xfffaff99

0800237c <HAL_CRYP_Encrypt>:
  * @param  Output Pointer to the output buffer(ciphertext)
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t *Input, uint16_t Size, uint32_t *Output, uint32_t Timeout)
{
 800237c:	b590      	push	{r4, r7, lr}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	603b      	str	r3, [r7, #0]
 8002388:	1dbb      	adds	r3, r7, #6
 800238a:	801a      	strh	r2, [r3, #0]

  /* Check input buffer size */
  assert_param(IS_CRYP_BUFFERSIZE(algo_assert, hcryp->Init.DataWidthUnit, Size));
#endif

  if (hcryp->State == HAL_CRYP_STATE_READY)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2251      	movs	r2, #81	; 0x51
 8002390:	5c9b      	ldrb	r3, [r3, r2]
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b01      	cmp	r3, #1
 8002396:	d000      	beq.n	800239a <HAL_CRYP_Encrypt+0x1e>
 8002398:	e084      	b.n	80024a4 <HAL_CRYP_Encrypt+0x128>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2251      	movs	r2, #81	; 0x51
 800239e:	2102      	movs	r1, #2
 80023a0:	5499      	strb	r1, [r3, r2]

    /* Process locked */
    __HAL_LOCK(hcryp);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2250      	movs	r2, #80	; 0x50
 80023a6:	5c9b      	ldrb	r3, [r3, r2]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d101      	bne.n	80023b0 <HAL_CRYP_Encrypt+0x34>
 80023ac:	2302      	movs	r3, #2
 80023ae:	e086      	b.n	80024be <HAL_CRYP_Encrypt+0x142>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2250      	movs	r2, #80	; 0x50
 80023b4:	2101      	movs	r1, #1
 80023b6:	5499      	strb	r1, [r3, r2]

    /*  Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr parameters*/
    hcryp->CrypInCount = 0U;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    hcryp->CrypOutCount = 0U;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2240      	movs	r2, #64	; 0x40
 80023c2:	2100      	movs	r1, #0
 80023c4:	5299      	strh	r1, [r3, r2]
    hcryp->pCrypInBuffPtr = Input;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	635a      	str	r2, [r3, #52]	; 0x34
    hcryp->pCrypOutBuffPtr = Output;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	639a      	str	r2, [r3, #56]	; 0x38

    /*  Calculate Size parameter in Byte*/
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d107      	bne.n	80023ea <HAL_CRYP_Encrypt+0x6e>
    {
      hcryp->Size = Size * 4U;
 80023da:	1dbb      	adds	r3, r7, #6
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	b299      	uxth	r1, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2242      	movs	r2, #66	; 0x42
 80023e6:	5299      	strh	r1, [r3, r2]
 80023e8:	e004      	b.n	80023f4 <HAL_CRYP_Encrypt+0x78>
    }
    else
    {
      hcryp->Size = Size;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	1dba      	adds	r2, r7, #6
 80023ee:	2142      	movs	r1, #66	; 0x42
 80023f0:	8812      	ldrh	r2, [r2, #0]
 80023f2:	525a      	strh	r2, [r3, r1]
    }

    /* Set the operating mode*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_ENCRYPT);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2118      	movs	r1, #24
 8002400:	438a      	bics	r2, r1
 8002402:	601a      	str	r2, [r3, #0]

    /* algo get algorithm selected */
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a2f      	ldr	r2, [pc, #188]	; (80024c8 <HAL_CRYP_Encrypt+0x14c>)
 800240c:	4013      	ands	r3, r2
 800240e:	613b      	str	r3, [r7, #16]

    switch (algo)
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	2b40      	cmp	r3, #64	; 0x40
 8002414:	d00c      	beq.n	8002430 <HAL_CRYP_Encrypt+0xb4>
 8002416:	d804      	bhi.n	8002422 <HAL_CRYP_Encrypt+0xa6>
 8002418:	2b00      	cmp	r3, #0
 800241a:	d009      	beq.n	8002430 <HAL_CRYP_Encrypt+0xb4>
 800241c:	2b20      	cmp	r3, #32
 800241e:	d007      	beq.n	8002430 <HAL_CRYP_Encrypt+0xb4>
 8002420:	e027      	b.n	8002472 <HAL_CRYP_Encrypt+0xf6>
 8002422:	2b60      	cmp	r3, #96	; 0x60
 8002424:	d00f      	beq.n	8002446 <HAL_CRYP_Encrypt+0xca>
 8002426:	2280      	movs	r2, #128	; 0x80
 8002428:	0252      	lsls	r2, r2, #9
 800242a:	4293      	cmp	r3, r2
 800242c:	d016      	beq.n	800245c <HAL_CRYP_Encrypt+0xe0>
 800242e:	e020      	b.n	8002472 <HAL_CRYP_Encrypt+0xf6>
      case CRYP_AES_ECB:
      case CRYP_AES_CBC:
      case CRYP_AES_CTR:

        /* AES encryption */
        status = CRYP_AES_Encrypt(hcryp, Timeout);
 8002430:	2317      	movs	r3, #23
 8002432:	18fc      	adds	r4, r7, r3
 8002434:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	0011      	movs	r1, r2
 800243a:	0018      	movs	r0, r3
 800243c:	f000 f8f8 	bl	8002630 <CRYP_AES_Encrypt>
 8002440:	0003      	movs	r3, r0
 8002442:	7023      	strb	r3, [r4, #0]
        break;
 8002444:	e020      	b.n	8002488 <HAL_CRYP_Encrypt+0x10c>

      case CRYP_AES_GCM_GMAC:

        /* AES GCM encryption */
        status = CRYP_AESGCM_Process(hcryp, Timeout) ;
 8002446:	2317      	movs	r3, #23
 8002448:	18fc      	adds	r4, r7, r3
 800244a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	0011      	movs	r1, r2
 8002450:	0018      	movs	r0, r3
 8002452:	f000 fb7d 	bl	8002b50 <CRYP_AESGCM_Process>
 8002456:	0003      	movs	r3, r0
 8002458:	7023      	strb	r3, [r4, #0]
        break;
 800245a:	e015      	b.n	8002488 <HAL_CRYP_Encrypt+0x10c>

      case CRYP_AES_CCM:

        /* AES CCM encryption */
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 800245c:	2317      	movs	r3, #23
 800245e:	18fc      	adds	r4, r7, r3
 8002460:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	0011      	movs	r1, r2
 8002466:	0018      	movs	r0, r3
 8002468:	f000 fd24 	bl	8002eb4 <CRYP_AESCCM_Process>
 800246c:	0003      	movs	r3, r0
 800246e:	7023      	strb	r3, [r4, #0]
        break;
 8002470:	e00a      	b.n	8002488 <HAL_CRYP_Encrypt+0x10c>

      default:
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002476:	2220      	movs	r2, #32
 8002478:	431a      	orrs	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	655a      	str	r2, [r3, #84]	; 0x54
        status = HAL_ERROR;
 800247e:	2317      	movs	r3, #23
 8002480:	18fb      	adds	r3, r7, r3
 8002482:	2201      	movs	r2, #1
 8002484:	701a      	strb	r2, [r3, #0]
        break;
 8002486:	46c0      	nop			; (mov r8, r8)
    }

    if (status == HAL_OK)
 8002488:	2317      	movs	r3, #23
 800248a:	18fb      	adds	r3, r7, r3
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d112      	bne.n	80024b8 <HAL_CRYP_Encrypt+0x13c>
    {
      /* Change the CRYP peripheral state */
      hcryp->State = HAL_CRYP_STATE_READY;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2251      	movs	r2, #81	; 0x51
 8002496:	2101      	movs	r1, #1
 8002498:	5499      	strb	r1, [r3, r2]

      /* Process unlocked */
      __HAL_UNLOCK(hcryp);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2250      	movs	r2, #80	; 0x50
 800249e:	2100      	movs	r1, #0
 80024a0:	5499      	strb	r1, [r3, r2]
 80024a2:	e009      	b.n	80024b8 <HAL_CRYP_Encrypt+0x13c>
    }
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a8:	2208      	movs	r2, #8
 80024aa:	431a      	orrs	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
 80024b0:	2317      	movs	r3, #23
 80024b2:	18fb      	adds	r3, r7, r3
 80024b4:	2201      	movs	r2, #1
 80024b6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80024b8:	2317      	movs	r3, #23
 80024ba:	18fb      	adds	r3, r7, r3
 80024bc:	781b      	ldrb	r3, [r3, #0]
}
 80024be:	0018      	movs	r0, r3
 80024c0:	46bd      	mov	sp, r7
 80024c2:	b007      	add	sp, #28
 80024c4:	bd90      	pop	{r4, r7, pc}
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	00010060 	.word	0x00010060

080024cc <HAL_CRYP_Decrypt>:
  * @param  Output Pointer to the output buffer(plaintext)
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Decrypt(CRYP_HandleTypeDef *hcryp, uint32_t *Input, uint16_t Size, uint32_t *Output, uint32_t Timeout)
{
 80024cc:	b590      	push	{r4, r7, lr}
 80024ce:	b087      	sub	sp, #28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	603b      	str	r3, [r7, #0]
 80024d8:	1dbb      	adds	r3, r7, #6
 80024da:	801a      	strh	r2, [r3, #0]

  /* Check input buffer size */
  assert_param(IS_CRYP_BUFFERSIZE(algo_assert, hcryp->Init.DataWidthUnit, Size));
#endif

  if (hcryp->State == HAL_CRYP_STATE_READY)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2251      	movs	r2, #81	; 0x51
 80024e0:	5c9b      	ldrb	r3, [r3, r2]
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d000      	beq.n	80024ea <HAL_CRYP_Decrypt+0x1e>
 80024e8:	e087      	b.n	80025fa <HAL_CRYP_Decrypt+0x12e>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2251      	movs	r2, #81	; 0x51
 80024ee:	2102      	movs	r1, #2
 80024f0:	5499      	strb	r1, [r3, r2]

    /* Process locked */
    __HAL_LOCK(hcryp);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2250      	movs	r2, #80	; 0x50
 80024f6:	5c9b      	ldrb	r3, [r3, r2]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d101      	bne.n	8002500 <HAL_CRYP_Decrypt+0x34>
 80024fc:	2302      	movs	r3, #2
 80024fe:	e089      	b.n	8002614 <HAL_CRYP_Decrypt+0x148>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2250      	movs	r2, #80	; 0x50
 8002504:	2101      	movs	r1, #1
 8002506:	5499      	strb	r1, [r3, r2]

    /*  Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr  parameters*/
    hcryp->CrypInCount = 0U;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hcryp->CrypOutCount = 0U;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2240      	movs	r2, #64	; 0x40
 8002512:	2100      	movs	r1, #0
 8002514:	5299      	strh	r1, [r3, r2]
    hcryp->pCrypInBuffPtr = Input;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	635a      	str	r2, [r3, #52]	; 0x34
    hcryp->pCrypOutBuffPtr = Output;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	639a      	str	r2, [r3, #56]	; 0x38

    /*  Calculate Size parameter in Byte*/
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002526:	2b00      	cmp	r3, #0
 8002528:	d107      	bne.n	800253a <HAL_CRYP_Decrypt+0x6e>
    {
      hcryp->Size = Size * 4U;
 800252a:	1dbb      	adds	r3, r7, #6
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	b299      	uxth	r1, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2242      	movs	r2, #66	; 0x42
 8002536:	5299      	strh	r1, [r3, r2]
 8002538:	e004      	b.n	8002544 <HAL_CRYP_Decrypt+0x78>
    }
    else
    {
      hcryp->Size = Size;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	1dba      	adds	r2, r7, #6
 800253e:	2142      	movs	r1, #66	; 0x42
 8002540:	8812      	ldrh	r2, [r2, #0]
 8002542:	525a      	strh	r2, [r3, r1]
    }

    /* Set Decryption operating mode*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2218      	movs	r2, #24
 800254c:	4393      	bics	r3, r2
 800254e:	001a      	movs	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2110      	movs	r1, #16
 8002556:	430a      	orrs	r2, r1
 8002558:	601a      	str	r2, [r3, #0]

    /* algo get algorithm selected */
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a2e      	ldr	r2, [pc, #184]	; (800261c <HAL_CRYP_Decrypt+0x150>)
 8002562:	4013      	ands	r3, r2
 8002564:	613b      	str	r3, [r7, #16]

    switch (algo)
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	2b40      	cmp	r3, #64	; 0x40
 800256a:	d00c      	beq.n	8002586 <HAL_CRYP_Decrypt+0xba>
 800256c:	d804      	bhi.n	8002578 <HAL_CRYP_Decrypt+0xac>
 800256e:	2b00      	cmp	r3, #0
 8002570:	d009      	beq.n	8002586 <HAL_CRYP_Decrypt+0xba>
 8002572:	2b20      	cmp	r3, #32
 8002574:	d007      	beq.n	8002586 <HAL_CRYP_Decrypt+0xba>
 8002576:	e027      	b.n	80025c8 <HAL_CRYP_Decrypt+0xfc>
 8002578:	2b60      	cmp	r3, #96	; 0x60
 800257a:	d00f      	beq.n	800259c <HAL_CRYP_Decrypt+0xd0>
 800257c:	2280      	movs	r2, #128	; 0x80
 800257e:	0252      	lsls	r2, r2, #9
 8002580:	4293      	cmp	r3, r2
 8002582:	d016      	beq.n	80025b2 <HAL_CRYP_Decrypt+0xe6>
 8002584:	e020      	b.n	80025c8 <HAL_CRYP_Decrypt+0xfc>
      case CRYP_AES_ECB:
      case CRYP_AES_CBC:
      case CRYP_AES_CTR:

        /* AES decryption */
        status = CRYP_AES_Decrypt(hcryp, Timeout);
 8002586:	2317      	movs	r3, #23
 8002588:	18fc      	adds	r4, r7, r3
 800258a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	0011      	movs	r1, r2
 8002590:	0018      	movs	r0, r3
 8002592:	f000 f8d5 	bl	8002740 <CRYP_AES_Decrypt>
 8002596:	0003      	movs	r3, r0
 8002598:	7023      	strb	r3, [r4, #0]
        break;
 800259a:	e020      	b.n	80025de <HAL_CRYP_Decrypt+0x112>

      case CRYP_AES_GCM_GMAC:

        /* AES GCM decryption */
        status = CRYP_AESGCM_Process(hcryp, Timeout) ;
 800259c:	2317      	movs	r3, #23
 800259e:	18fc      	adds	r4, r7, r3
 80025a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	0011      	movs	r1, r2
 80025a6:	0018      	movs	r0, r3
 80025a8:	f000 fad2 	bl	8002b50 <CRYP_AESGCM_Process>
 80025ac:	0003      	movs	r3, r0
 80025ae:	7023      	strb	r3, [r4, #0]
        break;
 80025b0:	e015      	b.n	80025de <HAL_CRYP_Decrypt+0x112>

      case CRYP_AES_CCM:

        /* AES CCM decryption */
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 80025b2:	2317      	movs	r3, #23
 80025b4:	18fc      	adds	r4, r7, r3
 80025b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	0011      	movs	r1, r2
 80025bc:	0018      	movs	r0, r3
 80025be:	f000 fc79 	bl	8002eb4 <CRYP_AESCCM_Process>
 80025c2:	0003      	movs	r3, r0
 80025c4:	7023      	strb	r3, [r4, #0]
        break;
 80025c6:	e00a      	b.n	80025de <HAL_CRYP_Decrypt+0x112>

      default:
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025cc:	2220      	movs	r2, #32
 80025ce:	431a      	orrs	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	655a      	str	r2, [r3, #84]	; 0x54
        status = HAL_ERROR;
 80025d4:	2317      	movs	r3, #23
 80025d6:	18fb      	adds	r3, r7, r3
 80025d8:	2201      	movs	r2, #1
 80025da:	701a      	strb	r2, [r3, #0]
        break;
 80025dc:	46c0      	nop			; (mov r8, r8)
    }

    if (status == HAL_OK)
 80025de:	2317      	movs	r3, #23
 80025e0:	18fb      	adds	r3, r7, r3
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d112      	bne.n	800260e <HAL_CRYP_Decrypt+0x142>
    {
      /* Change the CRYP peripheral state */
      hcryp->State = HAL_CRYP_STATE_READY;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2251      	movs	r2, #81	; 0x51
 80025ec:	2101      	movs	r1, #1
 80025ee:	5499      	strb	r1, [r3, r2]

      /* Process unlocked */
      __HAL_UNLOCK(hcryp);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2250      	movs	r2, #80	; 0x50
 80025f4:	2100      	movs	r1, #0
 80025f6:	5499      	strb	r1, [r3, r2]
 80025f8:	e009      	b.n	800260e <HAL_CRYP_Decrypt+0x142>
    }
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fe:	2208      	movs	r2, #8
 8002600:	431a      	orrs	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
 8002606:	2317      	movs	r3, #23
 8002608:	18fb      	adds	r3, r7, r3
 800260a:	2201      	movs	r2, #1
 800260c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800260e:	2317      	movs	r3, #23
 8002610:	18fb      	adds	r3, r7, r3
 8002612:	781b      	ldrb	r3, [r3, #0]
}
 8002614:	0018      	movs	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	b007      	add	sp, #28
 800261a:	bd90      	pop	{r4, r7, pc}
 800261c:	00010060 	.word	0x00010060

08002620 <HAL_CRYP_ErrorCallback>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module.
  * @retval None
  */
__weak void HAL_CRYP_ErrorCallback(CRYP_HandleTypeDef *hcryp)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  UNUSED(hcryp);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CRYP_ErrorCallback could be implemented in the user file
   */
}
 8002628:	46c0      	nop			; (mov r8, r8)
 800262a:	46bd      	mov	sp, r7
 800262c:	b002      	add	sp, #8
 800262e:	bd80      	pop	{r7, pc}

08002630 <CRYP_AES_Encrypt>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure
  * @param  Timeout specify Timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AES_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint16_t incount;  /* Temporary CrypInCount Value */
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 800263a:	2301      	movs	r3, #1
 800263c:	60bb      	str	r3, [r7, #8]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002642:	2b01      	cmp	r3, #1
 8002644:	d109      	bne.n	800265a <CRYP_AES_Encrypt+0x2a>
  {
    if (hcryp->KeyIVConfig == 1U)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264a:	2b01      	cmp	r3, #1
 800264c:	d102      	bne.n	8002654 <CRYP_AES_Encrypt+0x24>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 800264e:	2300      	movs	r3, #0
 8002650:	60bb      	str	r3, [r7, #8]
 8002652:	e002      	b.n	800265a <CRYP_AES_Encrypt+0x2a>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (DoKeyIVConfig == 1U)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d122      	bne.n	80026a6 <CRYP_AES_Encrypt+0x76>
  {
    /*  Set the Key*/
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	0011      	movs	r1, r2
 8002668:	0018      	movs	r0, r3
 800266a:	f000 fa11 	bl	8002a90 <CRYP_SetKey>

    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d017      	beq.n	80026a6 <CRYP_AES_Encrypt+0x76>
    {
      /* Set the Initialization Vector*/
      hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691a      	ldr	r2, [r3, #16]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6812      	ldr	r2, [r2, #0]
 8002680:	62da      	str	r2, [r3, #44]	; 0x2c
      hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691a      	ldr	r2, [r3, #16]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6852      	ldr	r2, [r2, #4]
 800268c:	629a      	str	r2, [r3, #40]	; 0x28
      hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691a      	ldr	r2, [r3, #16]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6892      	ldr	r2, [r2, #8]
 8002698:	625a      	str	r2, [r3, #36]	; 0x24
      hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	691a      	ldr	r2, [r3, #16]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68d2      	ldr	r2, [r2, #12]
 80026a4:	621a      	str	r2, [r3, #32]
    }
  } /* if (DoKeyIVConfig == 1U) */

  /* Set the phase */
  hcryp->Phase = CRYP_PHASE_PROCESS;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2202      	movs	r2, #2
 80026aa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2101      	movs	r1, #1
 80026b8:	430a      	orrs	r2, r1
 80026ba:	601a      	str	r2, [r3, #0]

  incount = hcryp->CrypInCount;
 80026bc:	230e      	movs	r3, #14
 80026be:	18fb      	adds	r3, r7, r3
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 80026c4:	801a      	strh	r2, [r3, #0]
  outcount = hcryp->CrypOutCount;
 80026c6:	230c      	movs	r3, #12
 80026c8:	18fb      	adds	r3, r7, r3
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	2140      	movs	r1, #64	; 0x40
 80026ce:	5a52      	ldrh	r2, [r2, r1]
 80026d0:	801a      	strh	r2, [r3, #0]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 80026d2:	e010      	b.n	80026f6 <CRYP_AES_Encrypt+0xc6>
  {
    /* Write plain Ddta and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	0011      	movs	r1, r2
 80026da:	0018      	movs	r0, r3
 80026dc:	f000 f920 	bl	8002920 <CRYP_AES_ProcessData>
    incount = hcryp->CrypInCount;
 80026e0:	230e      	movs	r3, #14
 80026e2:	18fb      	adds	r3, r7, r3
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 80026e8:	801a      	strh	r2, [r3, #0]
    outcount = hcryp->CrypOutCount;
 80026ea:	230c      	movs	r3, #12
 80026ec:	18fb      	adds	r3, r7, r3
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	2140      	movs	r1, #64	; 0x40
 80026f2:	5a52      	ldrh	r2, [r2, r1]
 80026f4:	801a      	strh	r2, [r3, #0]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2242      	movs	r2, #66	; 0x42
 80026fa:	5a9b      	ldrh	r3, [r3, r2]
 80026fc:	089b      	lsrs	r3, r3, #2
 80026fe:	b29b      	uxth	r3, r3
 8002700:	220e      	movs	r2, #14
 8002702:	18ba      	adds	r2, r7, r2
 8002704:	8812      	ldrh	r2, [r2, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d209      	bcs.n	800271e <CRYP_AES_Encrypt+0xee>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2242      	movs	r2, #66	; 0x42
 800270e:	5a9b      	ldrh	r3, [r3, r2]
 8002710:	089b      	lsrs	r3, r3, #2
 8002712:	b29b      	uxth	r3, r3
 8002714:	220c      	movs	r2, #12
 8002716:	18ba      	adds	r2, r7, r2
 8002718:	8812      	ldrh	r2, [r2, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d3da      	bcc.n	80026d4 <CRYP_AES_Encrypt+0xa4>
  }

  /* Disable CRYP */
  __HAL_CRYP_DISABLE(hcryp);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2101      	movs	r1, #1
 800272a:	438a      	bics	r2, r1
 800272c:	601a      	str	r2, [r3, #0]

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2251      	movs	r2, #81	; 0x51
 8002732:	2101      	movs	r1, #1
 8002734:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	0018      	movs	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	b004      	add	sp, #16
 800273e:	bd80      	pop	{r7, pc}

08002740 <CRYP_AES_Decrypt>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure
  * @param  Timeout Specify Timeout value
  * @retval HAL status
*/
static HAL_StatusTypeDef CRYP_AES_Decrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint16_t incount;  /* Temporary CrypInCount Value */
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 800274a:	2301      	movs	r3, #1
 800274c:	60bb      	str	r3, [r7, #8]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002752:	2b01      	cmp	r3, #1
 8002754:	d109      	bne.n	800276a <CRYP_AES_Decrypt+0x2a>
  {
    if (hcryp->KeyIVConfig == 1U)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275a:	2b01      	cmp	r3, #1
 800275c:	d102      	bne.n	8002764 <CRYP_AES_Decrypt+0x24>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 800275e:	2300      	movs	r3, #0
 8002760:	60bb      	str	r3, [r7, #8]
 8002762:	e002      	b.n	800276a <CRYP_AES_Decrypt+0x2a>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (DoKeyIVConfig == 1U)
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d000      	beq.n	8002772 <CRYP_AES_Decrypt+0x32>
 8002770:	e089      	b.n	8002886 <CRYP_AES_Decrypt+0x146>
  {
    /*  Key preparation for ECB/CBC */
    if (hcryp->Init.Algorithm != CRYP_AES_CTR)   /*ECB or CBC*/
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	2b40      	cmp	r3, #64	; 0x40
 8002778:	d062      	beq.n	8002840 <CRYP_AES_Decrypt+0x100>
    {
      if (hcryp->AutoKeyDerivation == DISABLE)/*Mode 2 Key preparation*/
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2230      	movs	r2, #48	; 0x30
 800277e:	5c9b      	ldrb	r3, [r3, r2]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d14d      	bne.n	8002820 <CRYP_AES_Decrypt+0xe0>
      {
        /* Set key preparation for decryption operating mode*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2218      	movs	r2, #24
 800278c:	4393      	bics	r3, r2
 800278e:	001a      	movs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2108      	movs	r1, #8
 8002796:	430a      	orrs	r2, r1
 8002798:	601a      	str	r2, [r3, #0]

        /*  Set the Key*/
        CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	0011      	movs	r1, r2
 80027a2:	0018      	movs	r0, r3
 80027a4:	f000 f974 	bl	8002a90 <CRYP_SetKey>

        /* Enable CRYP */
        __HAL_CRYP_ENABLE(hcryp);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2101      	movs	r1, #1
 80027b4:	430a      	orrs	r2, r1
 80027b6:	601a      	str	r2, [r3, #0]

        /* Wait for CCF flag to be raised */
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	0011      	movs	r1, r2
 80027be:	0018      	movs	r0, r3
 80027c0:	f000 ff0c 	bl	80035dc <CRYP_WaitOnCCFlag>
 80027c4:	1e03      	subs	r3, r0, #0
 80027c6:	d017      	beq.n	80027f8 <CRYP_AES_Decrypt+0xb8>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2101      	movs	r1, #1
 80027d4:	438a      	bics	r2, r1
 80027d6:	601a      	str	r2, [r3, #0]

          /* Change state & error code*/
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027dc:	2210      	movs	r2, #16
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	655a      	str	r2, [r3, #84]	; 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2251      	movs	r2, #81	; 0x51
 80027e8:	2101      	movs	r1, #1
 80027ea:	5499      	strb	r1, [r3, r2]

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2250      	movs	r2, #80	; 0x50
 80027f0:	2100      	movs	r1, #0
 80027f2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e08f      	b.n	8002918 <CRYP_AES_Decrypt+0x1d8>
        }
        /* Clear CCF Flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2180      	movs	r1, #128	; 0x80
 8002804:	430a      	orrs	r2, r1
 8002806:	601a      	str	r2, [r3, #0]

        /* Return to decryption operating mode(Mode 3)*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2218      	movs	r2, #24
 8002810:	4393      	bics	r3, r2
 8002812:	001a      	movs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2110      	movs	r1, #16
 800281a:	430a      	orrs	r2, r1
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	e016      	b.n	800284e <CRYP_AES_Decrypt+0x10e>
      }
      else /*Mode 4 : decryption & Key preparation*/
      {
        /*  Set the Key*/
        CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	0011      	movs	r1, r2
 8002828:	0018      	movs	r0, r3
 800282a:	f000 f931 	bl	8002a90 <CRYP_SetKey>

        /* Set decryption & Key preparation operating mode*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION_DECRYPT);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2118      	movs	r1, #24
 800283a:	430a      	orrs	r2, r1
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	e006      	b.n	800284e <CRYP_AES_Decrypt+0x10e>
      }
    }
    else  /*Algorithm CTR */
    {
      /*  Set the Key*/
      CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	0011      	movs	r1, r2
 8002848:	0018      	movs	r0, r3
 800284a:	f000 f921 	bl	8002a90 <CRYP_SetKey>
    }

    /* Set IV */
    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d017      	beq.n	8002886 <CRYP_AES_Decrypt+0x146>
    {
      /* Set the Initialization Vector*/
      hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	691a      	ldr	r2, [r3, #16]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6812      	ldr	r2, [r2, #0]
 8002860:	62da      	str	r2, [r3, #44]	; 0x2c
      hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691a      	ldr	r2, [r3, #16]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6852      	ldr	r2, [r2, #4]
 800286c:	629a      	str	r2, [r3, #40]	; 0x28
      hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691a      	ldr	r2, [r3, #16]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6892      	ldr	r2, [r2, #8]
 8002878:	625a      	str	r2, [r3, #36]	; 0x24
      hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691a      	ldr	r2, [r3, #16]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68d2      	ldr	r2, [r2, #12]
 8002884:	621a      	str	r2, [r3, #32]
    }
  } /* if (DoKeyIVConfig == 1U) */

  /* Set the phase */
  hcryp->Phase = CRYP_PHASE_PROCESS;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2202      	movs	r2, #2
 800288a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2101      	movs	r1, #1
 8002898:	430a      	orrs	r2, r1
 800289a:	601a      	str	r2, [r3, #0]

  incount = hcryp->CrypInCount;
 800289c:	230e      	movs	r3, #14
 800289e:	18fb      	adds	r3, r7, r3
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 80028a4:	801a      	strh	r2, [r3, #0]
  outcount = hcryp->CrypOutCount;
 80028a6:	230c      	movs	r3, #12
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	2140      	movs	r1, #64	; 0x40
 80028ae:	5a52      	ldrh	r2, [r2, r1]
 80028b0:	801a      	strh	r2, [r3, #0]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 80028b2:	e010      	b.n	80028d6 <CRYP_AES_Decrypt+0x196>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	0011      	movs	r1, r2
 80028ba:	0018      	movs	r0, r3
 80028bc:	f000 f830 	bl	8002920 <CRYP_AES_ProcessData>
    incount = hcryp->CrypInCount;
 80028c0:	230e      	movs	r3, #14
 80028c2:	18fb      	adds	r3, r7, r3
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 80028c8:	801a      	strh	r2, [r3, #0]
    outcount = hcryp->CrypOutCount;
 80028ca:	230c      	movs	r3, #12
 80028cc:	18fb      	adds	r3, r7, r3
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	2140      	movs	r1, #64	; 0x40
 80028d2:	5a52      	ldrh	r2, [r2, r1]
 80028d4:	801a      	strh	r2, [r3, #0]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2242      	movs	r2, #66	; 0x42
 80028da:	5a9b      	ldrh	r3, [r3, r2]
 80028dc:	089b      	lsrs	r3, r3, #2
 80028de:	b29b      	uxth	r3, r3
 80028e0:	220e      	movs	r2, #14
 80028e2:	18ba      	adds	r2, r7, r2
 80028e4:	8812      	ldrh	r2, [r2, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d209      	bcs.n	80028fe <CRYP_AES_Decrypt+0x1be>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2242      	movs	r2, #66	; 0x42
 80028ee:	5a9b      	ldrh	r3, [r3, r2]
 80028f0:	089b      	lsrs	r3, r3, #2
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	220c      	movs	r2, #12
 80028f6:	18ba      	adds	r2, r7, r2
 80028f8:	8812      	ldrh	r2, [r2, #0]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d3da      	bcc.n	80028b4 <CRYP_AES_Decrypt+0x174>
  }

  /* Disable CRYP */
  __HAL_CRYP_DISABLE(hcryp);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2101      	movs	r1, #1
 800290a:	438a      	bics	r2, r1
 800290c:	601a      	str	r2, [r3, #0]

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2251      	movs	r2, #81	; 0x51
 8002912:	2101      	movs	r1, #1
 8002914:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	0018      	movs	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	b004      	add	sp, #16
 800291e:	bd80      	pop	{r7, pc}

08002920 <CRYP_AES_ProcessData>:
  *         the configuration information for CRYP module
  * @param  Timeout Specify Timeout value
  * @retval None
  */
static void CRYP_AES_ProcessData(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b088      	sub	sp, #32
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]

  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t i;

  /* Write the input block in the IN FIFO */
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002932:	b29b      	uxth	r3, r3
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	18d2      	adds	r2, r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6812      	ldr	r2, [r2, #0]
 800293e:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002944:	b29b      	uxth	r3, r3
 8002946:	3301      	adds	r3, #1
 8002948:	b29a      	uxth	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002956:	b29b      	uxth	r3, r3
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	18d2      	adds	r2, r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6812      	ldr	r2, [r2, #0]
 8002962:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002968:	b29b      	uxth	r3, r3
 800296a:	3301      	adds	r3, #1
 800296c:	b29a      	uxth	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800297a:	b29b      	uxth	r3, r3
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	18d2      	adds	r2, r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6812      	ldr	r2, [r2, #0]
 8002986:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800298c:	b29b      	uxth	r3, r3
 800298e:	3301      	adds	r3, #1
 8002990:	b29a      	uxth	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800299e:	b29b      	uxth	r3, r3
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	18d2      	adds	r2, r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6812      	ldr	r2, [r2, #0]
 80029aa:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	3301      	adds	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Wait for CCF flag to be raised */
  if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	0011      	movs	r1, r2
 80029c0:	0018      	movs	r0, r3
 80029c2:	f000 fe0b 	bl	80035dc <CRYP_WaitOnCCFlag>
 80029c6:	1e03      	subs	r3, r0, #0
 80029c8:	d019      	beq.n	80029fe <CRYP_AES_ProcessData+0xde>
  {
    /* Disable the CRYP peripheral clock */
    __HAL_CRYP_DISABLE(hcryp);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2101      	movs	r1, #1
 80029d6:	438a      	bics	r2, r1
 80029d8:	601a      	str	r2, [r3, #0]

    /* Change state */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029de:	2210      	movs	r2, #16
 80029e0:	431a      	orrs	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	655a      	str	r2, [r3, #84]	; 0x54
    hcryp->State = HAL_CRYP_STATE_READY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2251      	movs	r2, #81	; 0x51
 80029ea:	2101      	movs	r1, #1
 80029ec:	5499      	strb	r1, [r3, r2]

    /* Process unlocked */
    __HAL_UNLOCK(hcryp);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2250      	movs	r2, #80	; 0x50
 80029f2:	2100      	movs	r1, #0
 80029f4:	5499      	strb	r1, [r3, r2]
    /*Call registered error callback*/
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
    hcryp->ErrorCallback(hcryp);
#else
    /*Call legacy weak error callback*/
    HAL_CRYP_ErrorCallback(hcryp);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	0018      	movs	r0, r3
 80029fa:	f7ff fe11 	bl	8002620 <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
  }

  /* Clear CCF Flag */
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2180      	movs	r1, #128	; 0x80
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	601a      	str	r2, [r3, #0]

  /* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer*/
  for (i = 0U; i < 4U; i++)
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61fb      	str	r3, [r7, #28]
 8002a12:	e00a      	b.n	8002a2a <CRYP_AES_ProcessData+0x10a>
  {
    temp[i] = hcryp->Instance->DOUTR;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68d9      	ldr	r1, [r3, #12]
 8002a1a:	230c      	movs	r3, #12
 8002a1c:	18fb      	adds	r3, r7, r3
 8002a1e:	69fa      	ldr	r2, [r7, #28]
 8002a20:	0092      	lsls	r2, r2, #2
 8002a22:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < 4U; i++)
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	3301      	adds	r3, #1
 8002a28:	61fb      	str	r3, [r7, #28]
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	2b03      	cmp	r3, #3
 8002a2e:	d9f1      	bls.n	8002a14 <CRYP_AES_ProcessData+0xf4>
  }
  i= 0U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	61fb      	str	r3, [r7, #28]
  while((hcryp->CrypOutCount < ((hcryp->Size + 3U)/4U)) && (i<4U))
 8002a34:	e019      	b.n	8002a6a <CRYP_AES_ProcessData+0x14a>
  {
    *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[i];
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2140      	movs	r1, #64	; 0x40
 8002a3e:	5a5b      	ldrh	r3, [r3, r1]
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	18d3      	adds	r3, r2, r3
 8002a46:	220c      	movs	r2, #12
 8002a48:	18ba      	adds	r2, r7, r2
 8002a4a:	69f9      	ldr	r1, [r7, #28]
 8002a4c:	0089      	lsls	r1, r1, #2
 8002a4e:	588a      	ldr	r2, [r1, r2]
 8002a50:	601a      	str	r2, [r3, #0]
    hcryp->CrypOutCount++;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2240      	movs	r2, #64	; 0x40
 8002a56:	5a9b      	ldrh	r3, [r3, r2]
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	b299      	uxth	r1, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2240      	movs	r2, #64	; 0x40
 8002a62:	5299      	strh	r1, [r3, r2]
    i++;
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	3301      	adds	r3, #1
 8002a68:	61fb      	str	r3, [r7, #28]
  while((hcryp->CrypOutCount < ((hcryp->Size + 3U)/4U)) && (i<4U))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2240      	movs	r2, #64	; 0x40
 8002a6e:	5a9b      	ldrh	r3, [r3, r2]
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	0019      	movs	r1, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2242      	movs	r2, #66	; 0x42
 8002a78:	5a9b      	ldrh	r3, [r3, r2]
 8002a7a:	3303      	adds	r3, #3
 8002a7c:	089b      	lsrs	r3, r3, #2
 8002a7e:	4299      	cmp	r1, r3
 8002a80:	d202      	bcs.n	8002a88 <CRYP_AES_ProcessData+0x168>
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	d9d6      	bls.n	8002a36 <CRYP_AES_ProcessData+0x116>
  }
}
 8002a88:	46c0      	nop			; (mov r8, r8)
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	b008      	add	sp, #32
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <CRYP_SetKey>:
  * @note   If pKey is NULL, the Key registers are not written. This configuration
  *         occurs when the key is written out of HAL scope.
  * @retval None
  */
static void CRYP_SetKey(CRYP_HandleTypeDef *hcryp, uint32_t KeySize)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  if (hcryp->Init.pKey != NULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d051      	beq.n	8002b46 <CRYP_SetKey+0xb6>
  {
    switch (KeySize)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d035      	beq.n	8002b14 <CRYP_SetKey+0x84>
 8002aa8:	2280      	movs	r2, #128	; 0x80
 8002aaa:	02d2      	lsls	r2, r2, #11
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d000      	beq.n	8002ab2 <CRYP_SetKey+0x22>
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 2U);
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 3U);

        break;
      default:
        break;
 8002ab0:	e04a      	b.n	8002b48 <CRYP_SetKey+0xb8>
        hcryp->Instance->KEYR7 = *(uint32_t *)(hcryp->Init.pKey);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6812      	ldr	r2, [r2, #0]
 8002abc:	63da      	str	r2, [r3, #60]	; 0x3c
        hcryp->Instance->KEYR6 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68da      	ldr	r2, [r3, #12]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6852      	ldr	r2, [r2, #4]
 8002ac8:	639a      	str	r2, [r3, #56]	; 0x38
        hcryp->Instance->KEYR5 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6892      	ldr	r2, [r2, #8]
 8002ad4:	635a      	str	r2, [r3, #52]	; 0x34
        hcryp->Instance->KEYR4 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68d2      	ldr	r2, [r2, #12]
 8002ae0:	631a      	str	r2, [r3, #48]	; 0x30
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey + 4U);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6912      	ldr	r2, [r2, #16]
 8002aec:	61da      	str	r2, [r3, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 5U);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68da      	ldr	r2, [r3, #12]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6952      	ldr	r2, [r2, #20]
 8002af8:	619a      	str	r2, [r3, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 6U);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6992      	ldr	r2, [r2, #24]
 8002b04:	615a      	str	r2, [r3, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 7U);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	69d2      	ldr	r2, [r2, #28]
 8002b10:	611a      	str	r2, [r3, #16]
        break;
 8002b12:	e019      	b.n	8002b48 <CRYP_SetKey+0xb8>
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6812      	ldr	r2, [r2, #0]
 8002b1e:	61da      	str	r2, [r3, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68da      	ldr	r2, [r3, #12]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6852      	ldr	r2, [r2, #4]
 8002b2a:	619a      	str	r2, [r3, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68da      	ldr	r2, [r3, #12]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6892      	ldr	r2, [r2, #8]
 8002b36:	615a      	str	r2, [r3, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68d2      	ldr	r2, [r2, #12]
 8002b42:	611a      	str	r2, [r3, #16]
        break;
 8002b44:	e000      	b.n	8002b48 <CRYP_SetKey+0xb8>
    }
  }
 8002b46:	46c0      	nop			; (mov r8, r8)
}
 8002b48:	46c0      	nop			; (mov r8, r8)
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b002      	add	sp, #8
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <CRYP_AESGCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESGCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08e      	sub	sp, #56	; 0x38
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U) ;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2242      	movs	r2, #66	; 0x42
 8002b5e:	5a9b      	ldrh	r3, [r3, r2]
 8002b60:	089b      	lsrs	r3, r3, #2
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t index;
  uint32_t lastwordsize;
  uint32_t incount;  /* Temporary CrypInCount Value */
  uint32_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8002b66:	2301      	movs	r3, #1
 8002b68:	623b      	str	r3, [r7, #32]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d118      	bne.n	8002ba4 <CRYP_AESGCM_Process+0x54>
  {
    if (hcryp->KeyIVConfig == 1U)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d10a      	bne.n	8002b90 <CRYP_AESGCM_Process+0x40>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	623b      	str	r3, [r7, #32]
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	2142      	movs	r1, #66	; 0x42
 8002b86:	5a52      	ldrh	r2, [r2, r1]
 8002b88:	189a      	adds	r2, r3, r2
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b8e:	e00f      	b.n	8002bb0 <CRYP_AESGCM_Process+0x60>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	659a      	str	r2, [r3, #88]	; 0x58
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2242      	movs	r2, #66	; 0x42
 8002b9a:	5a9b      	ldrh	r3, [r3, r2]
 8002b9c:	001a      	movs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ba2:	e005      	b.n	8002bb0 <CRYP_AESGCM_Process+0x60>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2242      	movs	r2, #66	; 0x42
 8002ba8:	5a9b      	ldrh	r3, [r3, r2]
 8002baa:	001a      	movs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  if (DoKeyIVConfig == 1U)
 8002bb0:	6a3b      	ldr	r3, [r7, #32]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d171      	bne.n	8002c9a <CRYP_AESGCM_Process+0x14a>
  {

    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	879a      	strh	r2, [r3, #60]	; 0x3c

    /****************************** Init phase **********************************/

    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	49b9      	ldr	r1, [pc, #740]	; (8002eac <CRYP_AESGCM_Process+0x35c>)
 8002bc8:	400a      	ands	r2, r1
 8002bca:	601a      	str	r2, [r3, #0]

    /* Set the key */
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	0011      	movs	r1, r2
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	f7ff ff5b 	bl	8002a90 <CRYP_SetKey>

    /* Set the initialization vector and the counter : Initial Counter Block (ICB)*/
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691a      	ldr	r2, [r3, #16]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6812      	ldr	r2, [r2, #0]
 8002be4:	62da      	str	r2, [r3, #44]	; 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691a      	ldr	r2, [r3, #16]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6852      	ldr	r2, [r2, #4]
 8002bf0:	629a      	str	r2, [r3, #40]	; 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	691a      	ldr	r2, [r3, #16]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6892      	ldr	r2, [r2, #8]
 8002bfc:	625a      	str	r2, [r3, #36]	; 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691a      	ldr	r2, [r3, #16]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68d2      	ldr	r2, [r2, #12]
 8002c08:	621a      	str	r2, [r3, #32]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2101      	movs	r1, #1
 8002c16:	430a      	orrs	r2, r1
 8002c18:	601a      	str	r2, [r3, #0]

    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	0011      	movs	r1, r2
 8002c20:	0018      	movs	r0, r3
 8002c22:	f000 fcdb 	bl	80035dc <CRYP_WaitOnCCFlag>
 8002c26:	1e03      	subs	r3, r0, #0
 8002c28:	d00f      	beq.n	8002c4a <CRYP_AESGCM_Process+0xfa>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2e:	2210      	movs	r2, #16
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2251      	movs	r2, #81	; 0x51
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	5499      	strb	r1, [r3, r2]

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2250      	movs	r2, #80	; 0x50
 8002c42:	2100      	movs	r1, #0
 8002c44:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e12b      	b.n	8002ea2 <CRYP_AESGCM_Process+0x352>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2180      	movs	r1, #128	; 0x80
 8002c56:	430a      	orrs	r2, r1
 8002c58:	601a      	str	r2, [r3, #0]

    /************************ Header phase *************************************/

    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	0011      	movs	r1, r2
 8002c60:	0018      	movs	r0, r3
 8002c62:	f000 fadd 	bl	8003220 <CRYP_GCMCCM_SetHeaderPhase>
 8002c66:	1e03      	subs	r3, r0, #0
 8002c68:	d001      	beq.n	8002c6e <CRYP_AESGCM_Process+0x11e>
    {
      return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e119      	b.n	8002ea2 <CRYP_AESGCM_Process+0x352>
    }

    /*************************Payload phase ************************************/

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2202      	movs	r2, #2
 8002c72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Select payload phase once the header phase is performed */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_PAYLOAD);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a8c      	ldr	r2, [pc, #560]	; (8002eac <CRYP_AESGCM_Process+0x35c>)
 8002c7c:	401a      	ands	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2180      	movs	r1, #128	; 0x80
 8002c84:	01c9      	lsls	r1, r1, #7
 8002c86:	430a      	orrs	r2, r1
 8002c88:	601a      	str	r2, [r3, #0]

    /* Set to 0 the number of non-valid bytes using NPBLB register*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4986      	ldr	r1, [pc, #536]	; (8002eb0 <CRYP_AESGCM_Process+0x360>)
 8002c96:	400a      	ands	r2, r1
 8002c98:	601a      	str	r2, [r3, #0]

  } /* if (DoKeyIVConfig == 1U) */

  if ((hcryp->Size % 16U) != 0U)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2242      	movs	r2, #66	; 0x42
 8002c9e:	5a9b      	ldrh	r3, [r3, r2]
 8002ca0:	220f      	movs	r2, #15
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <CRYP_AESGCM_Process+0x162>
  {
    /* recalculate  wordsize */
    wordsize = ((wordsize / 4U) * 4U) ;
 8002caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cac:	2203      	movs	r2, #3
 8002cae:	4393      	bics	r3, r2
 8002cb0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cb2:	f7ff f939 	bl	8001f28 <HAL_GetTick>
 8002cb6:	0003      	movs	r3, r0
 8002cb8:	61fb      	str	r3, [r7, #28]

  /* Write input data and get output Data */
  incount = hcryp->CrypInCount;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  outcount = hcryp->CrypOutCount;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2240      	movs	r2, #64	; 0x40
 8002cc6:	5a9b      	ldrh	r3, [r3, r2]
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8002ccc:	e034      	b.n	8002d38 <CRYP_AESGCM_Process+0x1e8>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	0011      	movs	r1, r2
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	f7ff fe23 	bl	8002920 <CRYP_AES_ProcessData>

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	d022      	beq.n	8002d26 <CRYP_AESGCM_Process+0x1d6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ce0:	f7ff f922 	bl	8001f28 <HAL_GetTick>
 8002ce4:	0002      	movs	r2, r0
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d302      	bcc.n	8002cf6 <CRYP_AESGCM_Process+0x1a6>
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d117      	bne.n	8002d26 <CRYP_AESGCM_Process+0x1d6>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2101      	movs	r1, #1
 8002d02:	438a      	bics	r2, r1
 8002d04:	601a      	str	r2, [r3, #0]

        /* Change state & error code */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0a:	2210      	movs	r2, #16
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	655a      	str	r2, [r3, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2251      	movs	r2, #81	; 0x51
 8002d16:	2101      	movs	r1, #1
 8002d18:	5499      	strb	r1, [r3, r2]

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2250      	movs	r2, #80	; 0x50
 8002d1e:	2100      	movs	r1, #0
 8002d20:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e0bd      	b.n	8002ea2 <CRYP_AESGCM_Process+0x352>
      }
    }
    incount = hcryp->CrypInCount;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	62bb      	str	r3, [r7, #40]	; 0x28
    outcount = hcryp->CrypOutCount;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2240      	movs	r2, #64	; 0x40
 8002d32:	5a9b      	ldrh	r3, [r3, r2]
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8002d38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d203      	bcs.n	8002d48 <CRYP_AESGCM_Process+0x1f8>
 8002d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d3c2      	bcc.n	8002cce <CRYP_AESGCM_Process+0x17e>
  }

  if ((hcryp->Size % 16U) != 0U)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2242      	movs	r2, #66	; 0x42
 8002d4c:	5a9b      	ldrh	r3, [r3, r2]
 8002d4e:	220f      	movs	r2, #15
 8002d50:	4013      	ands	r3, r2
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d100      	bne.n	8002d5a <CRYP_AESGCM_Process+0x20a>
 8002d58:	e0a2      	b.n	8002ea0 <CRYP_AESGCM_Process+0x350>
  {
    /* Compute the number of padding bytes in last block of payload */
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2242      	movs	r2, #66	; 0x42
 8002d5e:	5a9b      	ldrh	r3, [r3, r2]
 8002d60:	091b      	lsrs	r3, r3, #4
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	3301      	adds	r3, #1
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	2142      	movs	r1, #66	; 0x42
 8002d6c:	5a52      	ldrh	r2, [r2, r1]
 8002d6e:	1a9b      	subs	r3, r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]

    /*  Set Npblb in case of AES GCM payload encryption to get right tag*/
    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_ENCRYPT)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2218      	movs	r2, #24
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d10b      	bne.n	8002d96 <CRYP_AESGCM_Process+0x246>
    {
      /* Set to 0 the number of non-valid bytes using NPBLB register*/
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20U);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a4a      	ldr	r2, [pc, #296]	; (8002eb0 <CRYP_AESGCM_Process+0x360>)
 8002d86:	4013      	ands	r3, r2
 8002d88:	0019      	movs	r1, r3
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	051a      	lsls	r2, r3, #20
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	601a      	str	r2, [r3, #0]
    }
    /* Number of valid words (lastwordsize) in last block */
    if ((npblb % 4U) == 0U)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	2203      	movs	r2, #3
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d105      	bne.n	8002daa <CRYP_AESGCM_Process+0x25a>
    {
      lastwordsize = (16U - npblb) / 4U;
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	2210      	movs	r2, #16
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	089b      	lsrs	r3, r3, #2
 8002da6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002da8:	e005      	b.n	8002db6 <CRYP_AESGCM_Process+0x266>
    }
    else
    {
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	2210      	movs	r2, #16
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	089b      	lsrs	r3, r3, #2
 8002db2:	3301      	adds	r3, #1
 8002db4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /*  last block optionally pad the data with zeros*/
    for (index = 0U; index < lastwordsize; index ++)
 8002db6:	2300      	movs	r3, #0
 8002db8:	633b      	str	r3, [r7, #48]	; 0x30
 8002dba:	e014      	b.n	8002de6 <CRYP_AESGCM_Process+0x296>
    {
      /* Write the last Input block in the IN FIFO */
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	18d2      	adds	r2, r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6812      	ldr	r2, [r2, #0]
 8002dd0:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3301      	adds	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	87da      	strh	r2, [r3, #62]	; 0x3e
    for (index = 0U; index < lastwordsize; index ++)
 8002de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de2:	3301      	adds	r3, #1
 8002de4:	633b      	str	r3, [r7, #48]	; 0x30
 8002de6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d3e6      	bcc.n	8002dbc <CRYP_AESGCM_Process+0x26c>
    }
    while (index < 4U)
 8002dee:	e006      	b.n	8002dfe <CRYP_AESGCM_Process+0x2ae>
    {
      /* pad the data with zeros to have a complete block */
      hcryp->Instance->DINR  = 0U;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2200      	movs	r2, #0
 8002df6:	609a      	str	r2, [r3, #8]
      index++;
 8002df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	633b      	str	r3, [r7, #48]	; 0x30
    while (index < 4U)
 8002dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d9f5      	bls.n	8002df0 <CRYP_AESGCM_Process+0x2a0>
    }
    /* Wait for CCF flag to be raised */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	0011      	movs	r1, r2
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	f000 fbe6 	bl	80035dc <CRYP_WaitOnCCFlag>
 8002e10:	1e03      	subs	r3, r0, #0
 8002e12:	d00b      	beq.n	8002e2c <CRYP_AESGCM_Process+0x2dc>
    {
      hcryp->State = HAL_CRYP_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2251      	movs	r2, #81	; 0x51
 8002e18:	2101      	movs	r1, #1
 8002e1a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hcryp);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2250      	movs	r2, #80	; 0x50
 8002e20:	2100      	movs	r1, #0
 8002e22:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
      /*Call registered error callback*/
      hcryp->ErrorCallback(hcryp);
#else
      /*Call legacy weak error callback*/
      HAL_CRYP_ErrorCallback(hcryp);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	0018      	movs	r0, r3
 8002e28:	f7ff fbfa 	bl	8002620 <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
    }

    /* Clear CCF Flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2180      	movs	r1, #128	; 0x80
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	601a      	str	r2, [r3, #0]

    /*Read the output block from the output FIFO */
    for (index = 0U; index < 4U; index++)
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	633b      	str	r3, [r7, #48]	; 0x30
 8002e40:	e00a      	b.n	8002e58 <CRYP_AESGCM_Process+0x308>
    {
      /* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer */
      temp[index] = hcryp->Instance->DOUTR;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68d9      	ldr	r1, [r3, #12]
 8002e48:	2308      	movs	r3, #8
 8002e4a:	18fb      	adds	r3, r7, r3
 8002e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e4e:	0092      	lsls	r2, r2, #2
 8002e50:	50d1      	str	r1, [r2, r3]
    for (index = 0U; index < 4U; index++)
 8002e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e54:	3301      	adds	r3, #1
 8002e56:	633b      	str	r3, [r7, #48]	; 0x30
 8002e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5a:	2b03      	cmp	r3, #3
 8002e5c:	d9f1      	bls.n	8002e42 <CRYP_AESGCM_Process+0x2f2>
    }
    for (index = 0U; index < lastwordsize; index++)
 8002e5e:	2300      	movs	r3, #0
 8002e60:	633b      	str	r3, [r7, #48]	; 0x30
 8002e62:	e019      	b.n	8002e98 <CRYP_AESGCM_Process+0x348>
    {
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + (hcryp->CrypOutCount)) = temp[index];
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2140      	movs	r1, #64	; 0x40
 8002e6c:	5a5b      	ldrh	r3, [r3, r1]
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	18d3      	adds	r3, r2, r3
 8002e74:	2208      	movs	r2, #8
 8002e76:	18ba      	adds	r2, r7, r2
 8002e78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e7a:	0089      	lsls	r1, r1, #2
 8002e7c:	588a      	ldr	r2, [r1, r2]
 8002e7e:	601a      	str	r2, [r3, #0]
      hcryp->CrypOutCount++;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2240      	movs	r2, #64	; 0x40
 8002e84:	5a9b      	ldrh	r3, [r3, r2]
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	3301      	adds	r3, #1
 8002e8a:	b299      	uxth	r1, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2240      	movs	r2, #64	; 0x40
 8002e90:	5299      	strh	r1, [r3, r2]
    for (index = 0U; index < lastwordsize; index++)
 8002e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e94:	3301      	adds	r3, #1
 8002e96:	633b      	str	r3, [r7, #48]	; 0x30
 8002e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d3e1      	bcc.n	8002e64 <CRYP_AESGCM_Process+0x314>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	b00e      	add	sp, #56	; 0x38
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	ffff9fff 	.word	0xffff9fff
 8002eb0:	ff0fffff 	.word	0xff0fffff

08002eb4 <CRYP_AESCCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESCCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08e      	sub	sp, #56	; 0x38
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U) ;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2242      	movs	r2, #66	; 0x42
 8002ec2:	5a9b      	ldrh	r3, [r3, r2]
 8002ec4:	089b      	lsrs	r3, r3, #2
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t npblb;
  uint32_t lastwordsize;
  uint32_t temp[4] ;  /* Temporary CrypOutBuff */
  uint32_t incount;  /* Temporary CrypInCount Value */
  uint32_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8002eca:	2301      	movs	r3, #1
 8002ecc:	623b      	str	r3, [r7, #32]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d118      	bne.n	8002f08 <CRYP_AESCCM_Process+0x54>
  {
    if (hcryp->KeyIVConfig == 1U)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d10a      	bne.n	8002ef4 <CRYP_AESCCM_Process+0x40>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	623b      	str	r3, [r7, #32]
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	2142      	movs	r1, #66	; 0x42
 8002eea:	5a52      	ldrh	r2, [r2, r1]
 8002eec:	189a      	adds	r2, r3, r2
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ef2:	e00f      	b.n	8002f14 <CRYP_AESCCM_Process+0x60>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	659a      	str	r2, [r3, #88]	; 0x58
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2242      	movs	r2, #66	; 0x42
 8002efe:	5a9b      	ldrh	r3, [r3, r2]
 8002f00:	001a      	movs	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f06:	e005      	b.n	8002f14 <CRYP_AESCCM_Process+0x60>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2242      	movs	r2, #66	; 0x42
 8002f0c:	5a9b      	ldrh	r3, [r3, r2]
 8002f0e:	001a      	movs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  if (DoKeyIVConfig == 1U)
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d171      	bne.n	8002ffe <CRYP_AESCCM_Process+0x14a>
  {
    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	879a      	strh	r2, [r3, #60]	; 0x3c

    /********************** Init phase ******************************************/

    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	49bb      	ldr	r1, [pc, #748]	; (8003218 <CRYP_AESCCM_Process+0x364>)
 8002f2c:	400a      	ands	r2, r1
 8002f2e:	601a      	str	r2, [r3, #0]

    /* Set the key */
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	0011      	movs	r1, r2
 8002f38:	0018      	movs	r0, r3
 8002f3a:	f7ff fda9 	bl	8002a90 <CRYP_SetKey>

    /* Set the initialization vector (IV) with B0 */
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.B0);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a1a      	ldr	r2, [r3, #32]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6812      	ldr	r2, [r2, #0]
 8002f48:	62da      	str	r2, [r3, #44]	; 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.B0 + 1U);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1a      	ldr	r2, [r3, #32]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6852      	ldr	r2, [r2, #4]
 8002f54:	629a      	str	r2, [r3, #40]	; 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.B0 + 2U);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a1a      	ldr	r2, [r3, #32]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6892      	ldr	r2, [r2, #8]
 8002f60:	625a      	str	r2, [r3, #36]	; 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.B0 + 3U);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1a      	ldr	r2, [r3, #32]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68d2      	ldr	r2, [r2, #12]
 8002f6c:	621a      	str	r2, [r3, #32]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2101      	movs	r1, #1
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	601a      	str	r2, [r3, #0]

    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	0011      	movs	r1, r2
 8002f84:	0018      	movs	r0, r3
 8002f86:	f000 fb29 	bl	80035dc <CRYP_WaitOnCCFlag>
 8002f8a:	1e03      	subs	r3, r0, #0
 8002f8c:	d00f      	beq.n	8002fae <CRYP_AESCCM_Process+0xfa>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f92:	2210      	movs	r2, #16
 8002f94:	431a      	orrs	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2251      	movs	r2, #81	; 0x51
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	5499      	strb	r1, [r3, r2]

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2250      	movs	r2, #80	; 0x50
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e130      	b.n	8003210 <CRYP_AESCCM_Process+0x35c>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2180      	movs	r1, #128	; 0x80
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	601a      	str	r2, [r3, #0]

    /************************ Header phase *************************************/
    /* Header block(B1) : associated data length expressed in bytes concatenated
    with Associated Data (A)*/
    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	0011      	movs	r1, r2
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	f000 f92b 	bl	8003220 <CRYP_GCMCCM_SetHeaderPhase>
 8002fca:	1e03      	subs	r3, r0, #0
 8002fcc:	d001      	beq.n	8002fd2 <CRYP_AESCCM_Process+0x11e>
    {
      return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e11e      	b.n	8003210 <CRYP_AESCCM_Process+0x35c>
    }

    /*************************Payload phase ************************************/

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Select payload phase once the header phase is performed */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, CRYP_PHASE_PAYLOAD);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a8e      	ldr	r2, [pc, #568]	; (8003218 <CRYP_AESCCM_Process+0x364>)
 8002fe0:	401a      	ands	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2180      	movs	r1, #128	; 0x80
 8002fe8:	01c9      	lsls	r1, r1, #7
 8002fea:	430a      	orrs	r2, r1
 8002fec:	601a      	str	r2, [r3, #0]

    /* Set to 0 the number of non-valid bytes using NPBLB register*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4988      	ldr	r1, [pc, #544]	; (800321c <CRYP_AESCCM_Process+0x368>)
 8002ffa:	400a      	ands	r2, r1
 8002ffc:	601a      	str	r2, [r3, #0]

  } /* if (DoKeyIVConfig == 1U) */

  if ((hcryp->Size % 16U) != 0U)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2242      	movs	r2, #66	; 0x42
 8003002:	5a9b      	ldrh	r3, [r3, r2]
 8003004:	220f      	movs	r2, #15
 8003006:	4013      	ands	r3, r2
 8003008:	b29b      	uxth	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <CRYP_AESCCM_Process+0x162>
  {
    /* recalculate  wordsize */
    wordsize = ((wordsize / 4U) * 4U) ;
 800300e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003010:	2203      	movs	r2, #3
 8003012:	4393      	bics	r3, r2
 8003014:	637b      	str	r3, [r7, #52]	; 0x34
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8003016:	f7fe ff87 	bl	8001f28 <HAL_GetTick>
 800301a:	0003      	movs	r3, r0
 800301c:	61fb      	str	r3, [r7, #28]

  /* Write input data and get output data */
  incount = hcryp->CrypInCount;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003022:	b29b      	uxth	r3, r3
 8003024:	62bb      	str	r3, [r7, #40]	; 0x28
  outcount = hcryp->CrypOutCount;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2240      	movs	r2, #64	; 0x40
 800302a:	5a9b      	ldrh	r3, [r3, r2]
 800302c:	b29b      	uxth	r3, r3
 800302e:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8003030:	e034      	b.n	800309c <CRYP_AESCCM_Process+0x1e8>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	0011      	movs	r1, r2
 8003038:	0018      	movs	r0, r3
 800303a:	f7ff fc71 	bl	8002920 <CRYP_AES_ProcessData>

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	3301      	adds	r3, #1
 8003042:	d022      	beq.n	800308a <CRYP_AESCCM_Process+0x1d6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) ||(Timeout == 0U))
 8003044:	f7fe ff70 	bl	8001f28 <HAL_GetTick>
 8003048:	0002      	movs	r2, r0
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	429a      	cmp	r2, r3
 8003052:	d302      	bcc.n	800305a <CRYP_AESCCM_Process+0x1a6>
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d117      	bne.n	800308a <CRYP_AESCCM_Process+0x1d6>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2101      	movs	r1, #1
 8003066:	438a      	bics	r2, r1
 8003068:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306e:	2210      	movs	r2, #16
 8003070:	431a      	orrs	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	655a      	str	r2, [r3, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2251      	movs	r2, #81	; 0x51
 800307a:	2101      	movs	r1, #1
 800307c:	5499      	strb	r1, [r3, r2]

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2250      	movs	r2, #80	; 0x50
 8003082:	2100      	movs	r1, #0
 8003084:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e0c2      	b.n	8003210 <CRYP_AESCCM_Process+0x35c>
      }
    }
    incount = hcryp->CrypInCount;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800308e:	b29b      	uxth	r3, r3
 8003090:	62bb      	str	r3, [r7, #40]	; 0x28
    outcount = hcryp->CrypOutCount;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2240      	movs	r2, #64	; 0x40
 8003096:	5a9b      	ldrh	r3, [r3, r2]
 8003098:	b29b      	uxth	r3, r3
 800309a:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 800309c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800309e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d203      	bcs.n	80030ac <CRYP_AESCCM_Process+0x1f8>
 80030a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d3c2      	bcc.n	8003032 <CRYP_AESCCM_Process+0x17e>
  }

  if ((hcryp->Size % 16U) != 0U)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2242      	movs	r2, #66	; 0x42
 80030b0:	5a9b      	ldrh	r3, [r3, r2]
 80030b2:	220f      	movs	r2, #15
 80030b4:	4013      	ands	r3, r2
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d100      	bne.n	80030be <CRYP_AESCCM_Process+0x20a>
 80030bc:	e0a7      	b.n	800320e <CRYP_AESCCM_Process+0x35a>
  {
    /* Compute the number of padding bytes in last block of payload */
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2242      	movs	r2, #66	; 0x42
 80030c2:	5a9b      	ldrh	r3, [r3, r2]
 80030c4:	091b      	lsrs	r3, r3, #4
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	3301      	adds	r3, #1
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	2142      	movs	r1, #66	; 0x42
 80030d0:	5a52      	ldrh	r2, [r2, r1]
 80030d2:	1a9b      	subs	r3, r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]

    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_DECRYPT)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2218      	movs	r2, #24
 80030de:	4013      	ands	r3, r2
 80030e0:	2b10      	cmp	r3, #16
 80030e2:	d10b      	bne.n	80030fc <CRYP_AESCCM_Process+0x248>
    {
      /* Set Npblb in case of AES CCM payload decryption to get right tag  */
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a4c      	ldr	r2, [pc, #304]	; (800321c <CRYP_AESCCM_Process+0x368>)
 80030ec:	4013      	ands	r3, r2
 80030ee:	0019      	movs	r1, r3
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	051a      	lsls	r2, r3, #20
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	601a      	str	r2, [r3, #0]

    }
    /* Number of valid words (lastwordsize) in last block */
    if ((npblb % 4U) == 0U)
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	2203      	movs	r2, #3
 8003100:	4013      	ands	r3, r2
 8003102:	d105      	bne.n	8003110 <CRYP_AESCCM_Process+0x25c>
    {
      lastwordsize = (16U - npblb) / 4U;
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	2210      	movs	r2, #16
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	089b      	lsrs	r3, r3, #2
 800310c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800310e:	e005      	b.n	800311c <CRYP_AESCCM_Process+0x268>
    }
    else
    {
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	2210      	movs	r2, #16
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	089b      	lsrs	r3, r3, #2
 8003118:	3301      	adds	r3, #1
 800311a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Write the last input block in the IN FIFO */
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 800311c:	2300      	movs	r3, #0
 800311e:	633b      	str	r3, [r7, #48]	; 0x30
 8003120:	e014      	b.n	800314c <CRYP_AESCCM_Process+0x298>
    {
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800312a:	b29b      	uxth	r3, r3
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	18d2      	adds	r2, r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6812      	ldr	r2, [r2, #0]
 8003136:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800313c:	b29b      	uxth	r3, r3
 800313e:	3301      	adds	r3, #1
 8003140:	b29a      	uxth	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	87da      	strh	r2, [r3, #62]	; 0x3e
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 8003146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003148:	3301      	adds	r3, #1
 800314a:	633b      	str	r3, [r7, #48]	; 0x30
 800314c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800314e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003150:	429a      	cmp	r2, r3
 8003152:	d3e6      	bcc.n	8003122 <CRYP_AESCCM_Process+0x26e>
    }

    /* Pad the data with zeros to have a complete block */
    while (loopcounter < 4U)
 8003154:	e006      	b.n	8003164 <CRYP_AESCCM_Process+0x2b0>
    {
      hcryp->Instance->DINR  = 0U;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2200      	movs	r2, #0
 800315c:	609a      	str	r2, [r3, #8]
      loopcounter++;
 800315e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003160:	3301      	adds	r3, #1
 8003162:	633b      	str	r3, [r7, #48]	; 0x30
    while (loopcounter < 4U)
 8003164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003166:	2b03      	cmp	r3, #3
 8003168:	d9f5      	bls.n	8003156 <CRYP_AESCCM_Process+0x2a2>
    }
    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	0011      	movs	r1, r2
 8003170:	0018      	movs	r0, r3
 8003172:	f000 fa33 	bl	80035dc <CRYP_WaitOnCCFlag>
 8003176:	1e03      	subs	r3, r0, #0
 8003178:	d00f      	beq.n	800319a <CRYP_AESCCM_Process+0x2e6>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800317e:	2210      	movs	r2, #16
 8003180:	431a      	orrs	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2251      	movs	r2, #81	; 0x51
 800318a:	2101      	movs	r1, #1
 800318c:	5499      	strb	r1, [r3, r2]

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2250      	movs	r2, #80	; 0x50
 8003192:	2100      	movs	r1, #0
 8003194:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e03a      	b.n	8003210 <CRYP_AESCCM_Process+0x35c>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2180      	movs	r1, #128	; 0x80
 80031a6:	430a      	orrs	r2, r1
 80031a8:	601a      	str	r2, [r3, #0]

    for (loopcounter = 0U; loopcounter < 4U; loopcounter++)
 80031aa:	2300      	movs	r3, #0
 80031ac:	633b      	str	r3, [r7, #48]	; 0x30
 80031ae:	e00a      	b.n	80031c6 <CRYP_AESCCM_Process+0x312>
    {
      /* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer */
      temp[loopcounter] = hcryp->Instance->DOUTR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68d9      	ldr	r1, [r3, #12]
 80031b6:	2308      	movs	r3, #8
 80031b8:	18fb      	adds	r3, r7, r3
 80031ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031bc:	0092      	lsls	r2, r2, #2
 80031be:	50d1      	str	r1, [r2, r3]
    for (loopcounter = 0U; loopcounter < 4U; loopcounter++)
 80031c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c2:	3301      	adds	r3, #1
 80031c4:	633b      	str	r3, [r7, #48]	; 0x30
 80031c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c8:	2b03      	cmp	r3, #3
 80031ca:	d9f1      	bls.n	80031b0 <CRYP_AESCCM_Process+0x2fc>
    }
    for (loopcounter = 0U; loopcounter<lastwordsize; loopcounter++)
 80031cc:	2300      	movs	r3, #0
 80031ce:	633b      	str	r3, [r7, #48]	; 0x30
 80031d0:	e019      	b.n	8003206 <CRYP_AESCCM_Process+0x352>
    {
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[loopcounter];
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2140      	movs	r1, #64	; 0x40
 80031da:	5a5b      	ldrh	r3, [r3, r1]
 80031dc:	b29b      	uxth	r3, r3
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	18d3      	adds	r3, r2, r3
 80031e2:	2208      	movs	r2, #8
 80031e4:	18ba      	adds	r2, r7, r2
 80031e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031e8:	0089      	lsls	r1, r1, #2
 80031ea:	588a      	ldr	r2, [r1, r2]
 80031ec:	601a      	str	r2, [r3, #0]
      hcryp->CrypOutCount++;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2240      	movs	r2, #64	; 0x40
 80031f2:	5a9b      	ldrh	r3, [r3, r2]
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	3301      	adds	r3, #1
 80031f8:	b299      	uxth	r1, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2240      	movs	r2, #64	; 0x40
 80031fe:	5299      	strh	r1, [r3, r2]
    for (loopcounter = 0U; loopcounter<lastwordsize; loopcounter++)
 8003200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003202:	3301      	adds	r3, #1
 8003204:	633b      	str	r3, [r7, #48]	; 0x30
 8003206:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320a:	429a      	cmp	r2, r3
 800320c:	d3e1      	bcc.n	80031d2 <CRYP_AESCCM_Process+0x31e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	0018      	movs	r0, r3
 8003212:	46bd      	mov	sp, r7
 8003214:	b00e      	add	sp, #56	; 0x38
 8003216:	bd80      	pop	{r7, pc}
 8003218:	ffff9fff 	.word	0xffff9fff
 800321c:	ff0fffff 	.word	0xff0fffff

08003220 <CRYP_GCMCCM_SetHeaderPhase>:
  *         the configuration information for CRYP module(Header & HeaderSize)
  * @param  Timeout Timeout value
  * @retval state
  */
static HAL_StatusTypeDef CRYP_GCMCCM_SetHeaderPhase(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8003220:	b590      	push	{r4, r7, lr}
 8003222:	b093      	sub	sp, #76	; 0x4c
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t loopcounter;
  uint32_t size_in_bytes;
  uint32_t tmp;
  uint32_t mask[12] = {0x0U, 0xFF000000U, 0xFFFF0000U, 0xFFFFFF00U,  /* 32-bit data type */
 800322a:	230c      	movs	r3, #12
 800322c:	18fb      	adds	r3, r7, r3
 800322e:	4ad6      	ldr	r2, [pc, #856]	; (8003588 <CRYP_GCMCCM_SetHeaderPhase+0x368>)
 8003230:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003232:	c313      	stmia	r3!, {r0, r1, r4}
 8003234:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003236:	c313      	stmia	r3!, {r0, r1, r4}
 8003238:	ca13      	ldmia	r2!, {r0, r1, r4}
 800323a:	c313      	stmia	r3!, {r0, r1, r4}
 800323c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800323e:	c313      	stmia	r3!, {r0, r1, r4}
                       0x0U, 0x0000FF00U, 0x0000FFFFU, 0xFF00FFFFU,  /* 16-bit data type */
                       0x0U, 0x000000FFU, 0x0000FFFFU, 0x00FFFFFFU}; /*  8-bit data type */

  /***************************** Header phase for GCM/GMAC or CCM *********************************/
  if (hcryp->Init.HeaderWidthUnit == CRYP_HEADERWIDTHUNIT_WORD)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003244:	2b00      	cmp	r3, #0
 8003246:	d104      	bne.n	8003252 <CRYP_GCMCCM_SetHeaderPhase+0x32>
  {
    size_in_bytes = hcryp->Init.HeaderSize * 4U;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	643b      	str	r3, [r7, #64]	; 0x40
 8003250:	e002      	b.n	8003258 <CRYP_GCMCCM_SetHeaderPhase+0x38>
  }
  else
  {
    size_in_bytes = hcryp->Init.HeaderSize;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	643b      	str	r3, [r7, #64]	; 0x40
  }

  if ((size_in_bytes != 0U))
 8003258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800325a:	2b00      	cmp	r3, #0
 800325c:	d100      	bne.n	8003260 <CRYP_GCMCCM_SetHeaderPhase+0x40>
 800325e:	e197      	b.n	8003590 <CRYP_GCMCCM_SetHeaderPhase+0x370>
  {
    /* Select header phase */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4ac9      	ldr	r2, [pc, #804]	; (800358c <CRYP_GCMCCM_SetHeaderPhase+0x36c>)
 8003268:	401a      	ands	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2180      	movs	r1, #128	; 0x80
 8003270:	0189      	lsls	r1, r1, #6
 8003272:	430a      	orrs	r2, r1
 8003274:	601a      	str	r2, [r3, #0]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2101      	movs	r1, #1
 8003282:	430a      	orrs	r2, r1
 8003284:	601a      	str	r2, [r3, #0]

    /* If size_in_bytes is a multiple of blocks (a multiple of four 32-bits words ) */
    if ((size_in_bytes % 16U) == 0U)
 8003286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003288:	220f      	movs	r2, #15
 800328a:	4013      	ands	r3, r2
 800328c:	d000      	beq.n	8003290 <CRYP_GCMCCM_SetHeaderPhase+0x70>
 800328e:	e07c      	b.n	800338a <CRYP_GCMCCM_SetHeaderPhase+0x16a>
    {
      /*  No padding */
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 8003290:	2300      	movs	r3, #0
 8003292:	647b      	str	r3, [r7, #68]	; 0x44
 8003294:	e072      	b.n	800337c <CRYP_GCMCCM_SetHeaderPhase+0x15c>
      {
        /* Write the input block in the data input register */
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	699a      	ldr	r2, [r3, #24]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800329e:	b29b      	uxth	r3, r3
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	18d2      	adds	r2, r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6812      	ldr	r2, [r2, #0]
 80032aa:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	3301      	adds	r3, #1
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699a      	ldr	r2, [r3, #24]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	18d2      	adds	r2, r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6812      	ldr	r2, [r2, #0]
 80032ce:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	3301      	adds	r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699a      	ldr	r2, [r3, #24]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	18d2      	adds	r2, r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6812      	ldr	r2, [r2, #0]
 80032f2:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	3301      	adds	r3, #1
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800330a:	b29b      	uxth	r3, r3
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	18d2      	adds	r2, r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6812      	ldr	r2, [r2, #0]
 8003316:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800331c:	b29b      	uxth	r3, r3
 800331e:	3301      	adds	r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	879a      	strh	r2, [r3, #60]	; 0x3c

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	0011      	movs	r1, r2
 800332c:	0018      	movs	r0, r3
 800332e:	f000 f955 	bl	80035dc <CRYP_WaitOnCCFlag>
 8003332:	1e03      	subs	r3, r0, #0
 8003334:	d017      	beq.n	8003366 <CRYP_GCMCCM_SetHeaderPhase+0x146>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2101      	movs	r1, #1
 8003342:	438a      	bics	r2, r1
 8003344:	601a      	str	r2, [r3, #0]

          /* Change state */
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800334a:	2210      	movs	r2, #16
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	655a      	str	r2, [r3, #84]	; 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2251      	movs	r2, #81	; 0x51
 8003356:	2101      	movs	r1, #1
 8003358:	5499      	strb	r1, [r3, r2]

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2250      	movs	r2, #80	; 0x50
 800335e:	2100      	movs	r1, #0
 8003360:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e134      	b.n	80035d0 <CRYP_GCMCCM_SetHeaderPhase+0x3b0>
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2180      	movs	r1, #128	; 0x80
 8003372:	430a      	orrs	r2, r1
 8003374:	601a      	str	r2, [r3, #0]
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 8003376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003378:	3304      	adds	r3, #4
 800337a:	647b      	str	r3, [r7, #68]	; 0x44
 800337c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800337e:	089b      	lsrs	r3, r3, #2
 8003380:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003382:	429a      	cmp	r2, r3
 8003384:	d200      	bcs.n	8003388 <CRYP_GCMCCM_SetHeaderPhase+0x168>
 8003386:	e786      	b.n	8003296 <CRYP_GCMCCM_SetHeaderPhase+0x76>
 8003388:	e121      	b.n	80035ce <CRYP_GCMCCM_SetHeaderPhase+0x3ae>
      }
    }
    else
    {
      /* Write header block in the IN FIFO without last block */
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 800338a:	2300      	movs	r3, #0
 800338c:	647b      	str	r3, [r7, #68]	; 0x44
 800338e:	e072      	b.n	8003476 <CRYP_GCMCCM_SetHeaderPhase+0x256>
      {
        /* Write the input block in the data input register */
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	699a      	ldr	r2, [r3, #24]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003398:	b29b      	uxth	r3, r3
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	18d2      	adds	r2, r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6812      	ldr	r2, [r2, #0]
 80033a4:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	3301      	adds	r3, #1
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	699a      	ldr	r2, [r3, #24]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80033bc:	b29b      	uxth	r3, r3
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	18d2      	adds	r2, r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6812      	ldr	r2, [r2, #0]
 80033c8:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	3301      	adds	r3, #1
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	699a      	ldr	r2, [r3, #24]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	18d2      	adds	r2, r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6812      	ldr	r2, [r2, #0]
 80033ec:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	3301      	adds	r3, #1
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	699a      	ldr	r2, [r3, #24]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003404:	b29b      	uxth	r3, r3
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	18d2      	adds	r2, r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6812      	ldr	r2, [r2, #0]
 8003410:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003416:	b29b      	uxth	r3, r3
 8003418:	3301      	adds	r3, #1
 800341a:	b29a      	uxth	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	879a      	strh	r2, [r3, #60]	; 0x3c

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	0011      	movs	r1, r2
 8003426:	0018      	movs	r0, r3
 8003428:	f000 f8d8 	bl	80035dc <CRYP_WaitOnCCFlag>
 800342c:	1e03      	subs	r3, r0, #0
 800342e:	d017      	beq.n	8003460 <CRYP_GCMCCM_SetHeaderPhase+0x240>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2101      	movs	r1, #1
 800343c:	438a      	bics	r2, r1
 800343e:	601a      	str	r2, [r3, #0]

          /* Change state */
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003444:	2210      	movs	r2, #16
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	655a      	str	r2, [r3, #84]	; 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2251      	movs	r2, #81	; 0x51
 8003450:	2101      	movs	r1, #1
 8003452:	5499      	strb	r1, [r3, r2]

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2250      	movs	r2, #80	; 0x50
 8003458:	2100      	movs	r1, #0
 800345a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e0b7      	b.n	80035d0 <CRYP_GCMCCM_SetHeaderPhase+0x3b0>
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2180      	movs	r1, #128	; 0x80
 800346c:	430a      	orrs	r2, r1
 800346e:	601a      	str	r2, [r3, #0]
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 8003470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003472:	3304      	adds	r3, #4
 8003474:	647b      	str	r3, [r7, #68]	; 0x44
 8003476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003478:	091b      	lsrs	r3, r3, #4
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800347e:	429a      	cmp	r2, r3
 8003480:	d200      	bcs.n	8003484 <CRYP_GCMCCM_SetHeaderPhase+0x264>
 8003482:	e785      	b.n	8003390 <CRYP_GCMCCM_SetHeaderPhase+0x170>
      }
      /* Write last complete words */
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 8003484:	2300      	movs	r3, #0
 8003486:	647b      	str	r3, [r7, #68]	; 0x44
 8003488:	e014      	b.n	80034b4 <CRYP_GCMCCM_SetHeaderPhase+0x294>
      {
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699a      	ldr	r2, [r3, #24]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003492:	b29b      	uxth	r3, r3
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	18d2      	adds	r2, r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6812      	ldr	r2, [r2, #0]
 800349e:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	3301      	adds	r3, #1
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	879a      	strh	r2, [r3, #60]	; 0x3c
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 80034ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034b0:	3301      	adds	r3, #1
 80034b2:	647b      	str	r3, [r7, #68]	; 0x44
 80034b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034b6:	089b      	lsrs	r3, r3, #2
 80034b8:	2203      	movs	r2, #3
 80034ba:	4013      	ands	r3, r2
 80034bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034be:	429a      	cmp	r2, r3
 80034c0:	d3e3      	bcc.n	800348a <CRYP_GCMCCM_SetHeaderPhase+0x26a>
      }
      /* If the header size is a multiple of words */
      if ((size_in_bytes % 4U) == 0U)
 80034c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034c4:	2203      	movs	r2, #3
 80034c6:	4013      	ands	r3, r2
 80034c8:	d10b      	bne.n	80034e2 <CRYP_GCMCCM_SetHeaderPhase+0x2c2>
      {
        /* Pad the data with zeros to have a complete block */
        while (loopcounter < 4U)
 80034ca:	e006      	b.n	80034da <CRYP_GCMCCM_SetHeaderPhase+0x2ba>
        {
          hcryp->Instance->DINR = 0x0U;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2200      	movs	r2, #0
 80034d2:	609a      	str	r2, [r3, #8]
          loopcounter++;
 80034d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034d6:	3301      	adds	r3, #1
 80034d8:	647b      	str	r3, [r7, #68]	; 0x44
        while (loopcounter < 4U)
 80034da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034dc:	2b03      	cmp	r3, #3
 80034de:	d9f5      	bls.n	80034cc <CRYP_GCMCCM_SetHeaderPhase+0x2ac>
 80034e0:	e028      	b.n	8003534 <CRYP_GCMCCM_SetHeaderPhase+0x314>
        }
      }
      else
      {
         /* Enter last bytes, padded with zeros */
         tmp =  *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699a      	ldr	r2, [r3, #24]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	18d3      	adds	r3, r2, r3
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         tmp &= mask[(hcryp->Init.DataType * 2U) + (size_in_bytes % 4U)];
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	005a      	lsls	r2, r3, #1
 80034fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034fc:	2103      	movs	r1, #3
 80034fe:	400b      	ands	r3, r1
 8003500:	18d2      	adds	r2, r2, r3
 8003502:	230c      	movs	r3, #12
 8003504:	18fb      	adds	r3, r7, r3
 8003506:	0092      	lsls	r2, r2, #2
 8003508:	58d2      	ldr	r2, [r2, r3]
 800350a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800350c:	4013      	ands	r3, r2
 800350e:	63fb      	str	r3, [r7, #60]	; 0x3c
         hcryp->Instance->DINR = tmp;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003516:	609a      	str	r2, [r3, #8]
         loopcounter++;
 8003518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800351a:	3301      	adds	r3, #1
 800351c:	647b      	str	r3, [r7, #68]	; 0x44
         /* Pad the data with zeros to have a complete block */
         while (loopcounter < 4U)
 800351e:	e006      	b.n	800352e <CRYP_GCMCCM_SetHeaderPhase+0x30e>
         {
           hcryp->Instance->DINR = 0x0U;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2200      	movs	r2, #0
 8003526:	609a      	str	r2, [r3, #8]
           loopcounter++;
 8003528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800352a:	3301      	adds	r3, #1
 800352c:	647b      	str	r3, [r7, #68]	; 0x44
         while (loopcounter < 4U)
 800352e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003530:	2b03      	cmp	r3, #3
 8003532:	d9f5      	bls.n	8003520 <CRYP_GCMCCM_SetHeaderPhase+0x300>
         }
      }

      if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	0011      	movs	r1, r2
 800353a:	0018      	movs	r0, r3
 800353c:	f000 f84e 	bl	80035dc <CRYP_WaitOnCCFlag>
 8003540:	1e03      	subs	r3, r0, #0
 8003542:	d017      	beq.n	8003574 <CRYP_GCMCCM_SetHeaderPhase+0x354>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2101      	movs	r1, #1
 8003550:	438a      	bics	r2, r1
 8003552:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003558:	2210      	movs	r2, #16
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	655a      	str	r2, [r3, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2251      	movs	r2, #81	; 0x51
 8003564:	2101      	movs	r1, #1
 8003566:	5499      	strb	r1, [r3, r2]

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2250      	movs	r2, #80	; 0x50
 800356c:	2100      	movs	r1, #0
 800356e:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e02d      	b.n	80035d0 <CRYP_GCMCCM_SetHeaderPhase+0x3b0>
      }
      /* Clear CCF flag */
      __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2180      	movs	r1, #128	; 0x80
 8003580:	430a      	orrs	r2, r1
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	e023      	b.n	80035ce <CRYP_GCMCCM_SetHeaderPhase+0x3ae>
 8003586:	46c0      	nop			; (mov r8, r8)
 8003588:	080092e8 	.word	0x080092e8
 800358c:	ffff9fff 	.word	0xffff9fff
    }
  }
  else
  {
    /*Workaround 1: only AES, before re-enabling the peripheral, datatype can be configured.*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE, hcryp->Init.DataType);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2206      	movs	r2, #6
 8003598:	4393      	bics	r3, r2
 800359a:	0019      	movs	r1, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	601a      	str	r2, [r3, #0]

    /* Select header phase */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a0a      	ldr	r2, [pc, #40]	; (80035d8 <CRYP_GCMCCM_SetHeaderPhase+0x3b8>)
 80035b0:	401a      	ands	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2180      	movs	r1, #128	; 0x80
 80035b8:	0189      	lsls	r1, r1, #6
 80035ba:	430a      	orrs	r2, r1
 80035bc:	601a      	str	r2, [r3, #0]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2101      	movs	r1, #1
 80035ca:	430a      	orrs	r2, r1
 80035cc:	601a      	str	r2, [r3, #0]
  }
  /* Return function status */
  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	0018      	movs	r0, r3
 80035d2:	46bd      	mov	sp, r7
 80035d4:	b013      	add	sp, #76	; 0x4c
 80035d6:	bd90      	pop	{r4, r7, pc}
 80035d8:	ffff9fff 	.word	0xffff9fff

080035dc <CRYP_WaitOnCCFlag>:
  * @param  Timeout Timeout duration.
  * @note   This function can only be used in thread mode.
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_WaitOnCCFlag(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 80035e6:	f7fe fc9f 	bl	8001f28 <HAL_GetTick>
 80035ea:	0003      	movs	r3, r0
 80035ec:	60fb      	str	r3, [r7, #12]

  while (HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 80035ee:	e00f      	b.n	8003610 <CRYP_WaitOnCCFlag+0x34>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	3301      	adds	r3, #1
 80035f4:	d00c      	beq.n	8003610 <CRYP_WaitOnCCFlag+0x34>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035f6:	f7fe fc97 	bl	8001f28 <HAL_GetTick>
 80035fa:	0002      	movs	r2, r0
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	429a      	cmp	r2, r3
 8003604:	d302      	bcc.n	800360c <CRYP_WaitOnCCFlag+0x30>
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <CRYP_WaitOnCCFlag+0x34>
      {
        return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e006      	b.n	800361e <CRYP_WaitOnCCFlag+0x42>
  while (HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	4013      	ands	r3, r2
 800361a:	d0e9      	beq.n	80035f0 <CRYP_WaitOnCCFlag+0x14>
      }
    }
  }
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	0018      	movs	r0, r3
 8003620:	46bd      	mov	sp, r7
 8003622:	b004      	add	sp, #16
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <HAL_FLASH_Program>:
  *               are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003628:	b5b0      	push	{r4, r5, r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	603a      	str	r2, [r7, #0]
 8003634:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003636:	4b22      	ldr	r3, [pc, #136]	; (80036c0 <HAL_FLASH_Program+0x98>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d101      	bne.n	8003642 <HAL_FLASH_Program+0x1a>
 800363e:	2302      	movs	r3, #2
 8003640:	e03a      	b.n	80036b8 <HAL_FLASH_Program+0x90>
 8003642:	4b1f      	ldr	r3, [pc, #124]	; (80036c0 <HAL_FLASH_Program+0x98>)
 8003644:	2201      	movs	r2, #1
 8003646:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003648:	4b1d      	ldr	r3, [pc, #116]	; (80036c0 <HAL_FLASH_Program+0x98>)
 800364a:	2200      	movs	r2, #0
 800364c:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800364e:	2517      	movs	r5, #23
 8003650:	197c      	adds	r4, r7, r5
 8003652:	23fa      	movs	r3, #250	; 0xfa
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	0018      	movs	r0, r3
 8003658:	f000 f876 	bl	8003748 <FLASH_WaitForLastOperation>
 800365c:	0003      	movs	r3, r0
 800365e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8003660:	197b      	adds	r3, r7, r5
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d121      	bne.n	80036ac <HAL_FLASH_Program+0x84>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d108      	bne.n	8003680 <HAL_FLASH_Program+0x58>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	687c      	ldr	r4, [r7, #4]
 8003672:	68b9      	ldr	r1, [r7, #8]
 8003674:	001a      	movs	r2, r3
 8003676:	0023      	movs	r3, r4
 8003678:	0008      	movs	r0, r1
 800367a:	f000 f8b3 	bl	80037e4 <FLASH_Program_DoubleWord>
 800367e:	e005      	b.n	800368c <HAL_FLASH_Program+0x64>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	0011      	movs	r1, r2
 8003686:	0018      	movs	r0, r3
 8003688:	f005 fd8e 	bl	80091a8 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800368c:	2317      	movs	r3, #23
 800368e:	18fc      	adds	r4, r7, r3
 8003690:	23fa      	movs	r3, #250	; 0xfa
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	0018      	movs	r0, r3
 8003696:	f000 f857 	bl	8003748 <FLASH_WaitForLastOperation>
 800369a:	0003      	movs	r3, r0
 800369c:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800369e:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <HAL_FLASH_Program+0x9c>)
 80036a0:	695a      	ldr	r2, [r3, #20]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	43d9      	mvns	r1, r3
 80036a6:	4b07      	ldr	r3, [pc, #28]	; (80036c4 <HAL_FLASH_Program+0x9c>)
 80036a8:	400a      	ands	r2, r1
 80036aa:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80036ac:	4b04      	ldr	r3, [pc, #16]	; (80036c0 <HAL_FLASH_Program+0x98>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80036b2:	2317      	movs	r3, #23
 80036b4:	18fb      	adds	r3, r7, r3
 80036b6:	781b      	ldrb	r3, [r3, #0]
}
 80036b8:	0018      	movs	r0, r3
 80036ba:	46bd      	mov	sp, r7
 80036bc:	b006      	add	sp, #24
 80036be:	bdb0      	pop	{r4, r5, r7, pc}
 80036c0:	20000528 	.word	0x20000528
 80036c4:	40022000 	.word	0x40022000

080036c8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80036ce:	1dfb      	adds	r3, r7, #7
 80036d0:	2200      	movs	r2, #0
 80036d2:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80036d4:	4b0b      	ldr	r3, [pc, #44]	; (8003704 <HAL_FLASH_Unlock+0x3c>)
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	da0c      	bge.n	80036f6 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80036dc:	4b09      	ldr	r3, [pc, #36]	; (8003704 <HAL_FLASH_Unlock+0x3c>)
 80036de:	4a0a      	ldr	r2, [pc, #40]	; (8003708 <HAL_FLASH_Unlock+0x40>)
 80036e0:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80036e2:	4b08      	ldr	r3, [pc, #32]	; (8003704 <HAL_FLASH_Unlock+0x3c>)
 80036e4:	4a09      	ldr	r2, [pc, #36]	; (800370c <HAL_FLASH_Unlock+0x44>)
 80036e6:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80036e8:	4b06      	ldr	r3, [pc, #24]	; (8003704 <HAL_FLASH_Unlock+0x3c>)
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	da02      	bge.n	80036f6 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 80036f0:	1dfb      	adds	r3, r7, #7
 80036f2:	2201      	movs	r2, #1
 80036f4:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80036f6:	1dfb      	adds	r3, r7, #7
 80036f8:	781b      	ldrb	r3, [r3, #0]
}
 80036fa:	0018      	movs	r0, r3
 80036fc:	46bd      	mov	sp, r7
 80036fe:	b002      	add	sp, #8
 8003700:	bd80      	pop	{r7, pc}
 8003702:	46c0      	nop			; (mov r8, r8)
 8003704:	40022000 	.word	0x40022000
 8003708:	45670123 	.word	0x45670123
 800370c:	cdef89ab 	.word	0xcdef89ab

08003710 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8003716:	1dfb      	adds	r3, r7, #7
 8003718:	2201      	movs	r2, #1
 800371a:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800371c:	4b09      	ldr	r3, [pc, #36]	; (8003744 <HAL_FLASH_Lock+0x34>)
 800371e:	695a      	ldr	r2, [r3, #20]
 8003720:	4b08      	ldr	r3, [pc, #32]	; (8003744 <HAL_FLASH_Lock+0x34>)
 8003722:	2180      	movs	r1, #128	; 0x80
 8003724:	0609      	lsls	r1, r1, #24
 8003726:	430a      	orrs	r2, r1
 8003728:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 800372a:	4b06      	ldr	r3, [pc, #24]	; (8003744 <HAL_FLASH_Lock+0x34>)
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	2b00      	cmp	r3, #0
 8003730:	da02      	bge.n	8003738 <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 8003732:	1dfb      	adds	r3, r7, #7
 8003734:	2200      	movs	r2, #0
 8003736:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003738:	1dfb      	adds	r3, r7, #7
 800373a:	781b      	ldrb	r3, [r3, #0]
}
 800373c:	0018      	movs	r0, r3
 800373e:	46bd      	mov	sp, r7
 8003740:	b002      	add	sp, #8
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40022000 	.word	0x40022000

08003748 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 8003750:	f7fe fbea 	bl	8001f28 <HAL_GetTick>
 8003754:	0002      	movs	r2, r0
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	189b      	adds	r3, r3, r2
 800375a:	60fb      	str	r3, [r7, #12]

  /* Wait if any operation is ongoing */
#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 800375c:	2380      	movs	r3, #128	; 0x80
 800375e:	025b      	lsls	r3, r3, #9
 8003760:	60bb      	str	r3, [r7, #8]
#endif

  while ((FLASH->SR & error) != 0x00U)
 8003762:	e007      	b.n	8003774 <FLASH_WaitForLastOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
 8003764:	f7fe fbe0 	bl	8001f28 <HAL_GetTick>
 8003768:	0002      	movs	r2, r0
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4293      	cmp	r3, r2
 800376e:	d801      	bhi.n	8003774 <FLASH_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e02a      	b.n	80037ca <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & error) != 0x00U)
 8003774:	4b17      	ldr	r3, [pc, #92]	; (80037d4 <FLASH_WaitForLastOperation+0x8c>)
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	4013      	ands	r3, r2
 800377c:	d1f2      	bne.n	8003764 <FLASH_WaitForLastOperation+0x1c>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 800377e:	4b15      	ldr	r3, [pc, #84]	; (80037d4 <FLASH_WaitForLastOperation+0x8c>)
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	4a15      	ldr	r2, [pc, #84]	; (80037d8 <FLASH_WaitForLastOperation+0x90>)
 8003784:	4013      	ands	r3, r2
 8003786:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 8003788:	4b12      	ldr	r3, [pc, #72]	; (80037d4 <FLASH_WaitForLastOperation+0x8c>)
 800378a:	4a14      	ldr	r2, [pc, #80]	; (80037dc <FLASH_WaitForLastOperation+0x94>)
 800378c:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d004      	beq.n	800379e <FLASH_WaitForLastOperation+0x56>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8003794:	4b12      	ldr	r3, [pc, #72]	; (80037e0 <FLASH_WaitForLastOperation+0x98>)
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e015      	b.n	80037ca <FLASH_WaitForLastOperation+0x82>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 800379e:	f7fe fbc3 	bl	8001f28 <HAL_GetTick>
 80037a2:	0002      	movs	r2, r0
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	189b      	adds	r3, r3, r2
 80037a8:	60fb      	str	r3, [r7, #12]

  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 80037aa:	e007      	b.n	80037bc <FLASH_WaitForLastOperation+0x74>
  {
    if (HAL_GetTick() >= timeout)
 80037ac:	f7fe fbbc 	bl	8001f28 <HAL_GetTick>
 80037b0:	0002      	movs	r2, r0
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d801      	bhi.n	80037bc <FLASH_WaitForLastOperation+0x74>
    {
      return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e006      	b.n	80037ca <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 80037bc:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <FLASH_WaitForLastOperation+0x8c>)
 80037be:	691a      	ldr	r2, [r3, #16]
 80037c0:	2380      	movs	r3, #128	; 0x80
 80037c2:	02db      	lsls	r3, r3, #11
 80037c4:	4013      	ands	r3, r2
 80037c6:	d1f1      	bne.n	80037ac <FLASH_WaitForLastOperation+0x64>
    }
  }

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	0018      	movs	r0, r3
 80037cc:	46bd      	mov	sp, r7
 80037ce:	b004      	add	sp, #16
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	46c0      	nop			; (mov r8, r8)
 80037d4:	40022000 	.word	0x40022000
 80037d8:	0000c3fa 	.word	0x0000c3fa
 80037dc:	0000c3fb 	.word	0x0000c3fb
 80037e0:	20000528 	.word	0x20000528

080037e4 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80037e4:	b5b0      	push	{r4, r5, r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	603a      	str	r2, [r7, #0]
 80037ee:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80037f0:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <FLASH_Program_DoubleWord+0x3c>)
 80037f2:	695a      	ldr	r2, [r3, #20]
 80037f4:	4b0a      	ldr	r3, [pc, #40]	; (8003820 <FLASH_Program_DoubleWord+0x3c>)
 80037f6:	2101      	movs	r1, #1
 80037f8:	430a      	orrs	r2, r1
 80037fa:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003802:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	001c      	movs	r4, r3
 800380a:	2300      	movs	r3, #0
 800380c:	001d      	movs	r5, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	3304      	adds	r3, #4
 8003812:	0022      	movs	r2, r4
 8003814:	601a      	str	r2, [r3, #0]
}
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	46bd      	mov	sp, r7
 800381a:	b004      	add	sp, #16
 800381c:	bdb0      	pop	{r4, r5, r7, pc}
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	40022000 	.word	0x40022000

08003824 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003824:	b5b0      	push	{r4, r5, r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800382e:	4b35      	ldr	r3, [pc, #212]	; (8003904 <HAL_FLASHEx_Erase+0xe0>)
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d101      	bne.n	800383a <HAL_FLASHEx_Erase+0x16>
 8003836:	2302      	movs	r3, #2
 8003838:	e05f      	b.n	80038fa <HAL_FLASHEx_Erase+0xd6>
 800383a:	4b32      	ldr	r3, [pc, #200]	; (8003904 <HAL_FLASHEx_Erase+0xe0>)
 800383c:	2201      	movs	r2, #1
 800383e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003840:	4b30      	ldr	r3, [pc, #192]	; (8003904 <HAL_FLASHEx_Erase+0xe0>)
 8003842:	2200      	movs	r2, #0
 8003844:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003846:	250f      	movs	r5, #15
 8003848:	197c      	adds	r4, r7, r5
 800384a:	23fa      	movs	r3, #250	; 0xfa
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	0018      	movs	r0, r3
 8003850:	f7ff ff7a 	bl	8003748 <FLASH_WaitForLastOperation>
 8003854:	0003      	movs	r3, r0
 8003856:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8003858:	197b      	adds	r3, r7, r5
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d146      	bne.n	80038ee <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2204      	movs	r2, #4
 8003864:	605a      	str	r2, [r3, #4]
#endif

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b04      	cmp	r3, #4
 800386c:	d10e      	bne.n	800388c <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	0018      	movs	r0, r3
 8003874:	f000 f84a 	bl	800390c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003878:	230f      	movs	r3, #15
 800387a:	18fc      	adds	r4, r7, r3
 800387c:	23fa      	movs	r3, #250	; 0xfa
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	0018      	movs	r0, r3
 8003882:	f7ff ff61 	bl	8003748 <FLASH_WaitForLastOperation>
 8003886:	0003      	movs	r3, r0
 8003888:	7023      	strb	r3, [r4, #0]
 800388a:	e030      	b.n	80038ee <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	2201      	movs	r2, #1
 8003890:	4252      	negs	r2, r2
 8003892:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	60bb      	str	r3, [r7, #8]
 800389a:	e01a      	b.n	80038d2 <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	0011      	movs	r1, r2
 80038a4:	0018      	movs	r0, r3
 80038a6:	f000 f845 	bl	8003934 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80038aa:	250f      	movs	r5, #15
 80038ac:	197c      	adds	r4, r7, r5
 80038ae:	23fa      	movs	r3, #250	; 0xfa
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	0018      	movs	r0, r3
 80038b4:	f7ff ff48 	bl	8003748 <FLASH_WaitForLastOperation>
 80038b8:	0003      	movs	r3, r0
 80038ba:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 80038bc:	197b      	adds	r3, r7, r5
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	601a      	str	r2, [r3, #0]
          break;
 80038ca:	e00a      	b.n	80038e2 <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	3301      	adds	r3, #1
 80038d0:	60bb      	str	r3, [r7, #8]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689a      	ldr	r2, [r3, #8]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	18d3      	adds	r3, r2, r3
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d3dc      	bcc.n	800389c <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80038e2:	4b09      	ldr	r3, [pc, #36]	; (8003908 <HAL_FLASHEx_Erase+0xe4>)
 80038e4:	695a      	ldr	r2, [r3, #20]
 80038e6:	4b08      	ldr	r3, [pc, #32]	; (8003908 <HAL_FLASHEx_Erase+0xe4>)
 80038e8:	2102      	movs	r1, #2
 80038ea:	438a      	bics	r2, r1
 80038ec:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80038ee:	4b05      	ldr	r3, [pc, #20]	; (8003904 <HAL_FLASHEx_Erase+0xe0>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80038f4:	230f      	movs	r3, #15
 80038f6:	18fb      	adds	r3, r7, r3
 80038f8:	781b      	ldrb	r3, [r3, #0]
}
 80038fa:	0018      	movs	r0, r3
 80038fc:	46bd      	mov	sp, r7
 80038fe:	b004      	add	sp, #16
 8003900:	bdb0      	pop	{r4, r5, r7, pc}
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	20000528 	.word	0x20000528
 8003908:	40022000 	.word	0x40022000

0800390c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8003914:	4b06      	ldr	r3, [pc, #24]	; (8003930 <FLASH_MassErase+0x24>)
 8003916:	695a      	ldr	r2, [r3, #20]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	431a      	orrs	r2, r3
 800391c:	4b04      	ldr	r3, [pc, #16]	; (8003930 <FLASH_MassErase+0x24>)
 800391e:	2180      	movs	r1, #128	; 0x80
 8003920:	0249      	lsls	r1, r1, #9
 8003922:	430a      	orrs	r2, r1
 8003924:	615a      	str	r2, [r3, #20]
}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	46bd      	mov	sp, r7
 800392a:	b002      	add	sp, #8
 800392c:	bd80      	pop	{r7, pc}
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	40022000 	.word	0x40022000

08003934 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 800393e:	4b08      	ldr	r3, [pc, #32]	; (8003960 <FLASH_PageErase+0x2c>)
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	4a08      	ldr	r2, [pc, #32]	; (8003964 <FLASH_PageErase+0x30>)
 8003944:	4013      	ands	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]
    tmp &= ~FLASH_CR_BKER;
  }
#endif

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	00da      	lsls	r2, r3, #3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	431a      	orrs	r2, r3
 8003950:	4b03      	ldr	r3, [pc, #12]	; (8003960 <FLASH_PageErase+0x2c>)
 8003952:	4905      	ldr	r1, [pc, #20]	; (8003968 <FLASH_PageErase+0x34>)
 8003954:	430a      	orrs	r2, r1
 8003956:	615a      	str	r2, [r3, #20]
}
 8003958:	46c0      	nop			; (mov r8, r8)
 800395a:	46bd      	mov	sp, r7
 800395c:	b004      	add	sp, #16
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40022000 	.word	0x40022000
 8003964:	fffffe07 	.word	0xfffffe07
 8003968:	00010002 	.word	0x00010002

0800396c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003976:	2300      	movs	r3, #0
 8003978:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800397a:	e147      	b.n	8003c0c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2101      	movs	r1, #1
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	4091      	lsls	r1, r2
 8003986:	000a      	movs	r2, r1
 8003988:	4013      	ands	r3, r2
 800398a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d100      	bne.n	8003994 <HAL_GPIO_Init+0x28>
 8003992:	e138      	b.n	8003c06 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d00b      	beq.n	80039b4 <HAL_GPIO_Init+0x48>
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d007      	beq.n	80039b4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039a8:	2b11      	cmp	r3, #17
 80039aa:	d003      	beq.n	80039b4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	2b12      	cmp	r3, #18
 80039b2:	d130      	bne.n	8003a16 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	2203      	movs	r2, #3
 80039c0:	409a      	lsls	r2, r3
 80039c2:	0013      	movs	r3, r2
 80039c4:	43da      	mvns	r2, r3
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	4013      	ands	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	68da      	ldr	r2, [r3, #12]
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	409a      	lsls	r2, r3
 80039d6:	0013      	movs	r3, r2
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	4313      	orrs	r3, r2
 80039dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039ea:	2201      	movs	r2, #1
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	409a      	lsls	r2, r3
 80039f0:	0013      	movs	r3, r2
 80039f2:	43da      	mvns	r2, r3
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	4013      	ands	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	091b      	lsrs	r3, r3, #4
 8003a00:	2201      	movs	r2, #1
 8003a02:	401a      	ands	r2, r3
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	409a      	lsls	r2, r3
 8003a08:	0013      	movs	r3, r2
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	2203      	movs	r2, #3
 8003a22:	409a      	lsls	r2, r3
 8003a24:	0013      	movs	r3, r2
 8003a26:	43da      	mvns	r2, r3
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	409a      	lsls	r2, r3
 8003a38:	0013      	movs	r3, r2
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d003      	beq.n	8003a56 <HAL_GPIO_Init+0xea>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b12      	cmp	r3, #18
 8003a54:	d123      	bne.n	8003a9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	08da      	lsrs	r2, r3, #3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	3208      	adds	r2, #8
 8003a5e:	0092      	lsls	r2, r2, #2
 8003a60:	58d3      	ldr	r3, [r2, r3]
 8003a62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	2207      	movs	r2, #7
 8003a68:	4013      	ands	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	220f      	movs	r2, #15
 8003a6e:	409a      	lsls	r2, r3
 8003a70:	0013      	movs	r3, r2
 8003a72:	43da      	mvns	r2, r3
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	4013      	ands	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	691a      	ldr	r2, [r3, #16]
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	2107      	movs	r1, #7
 8003a82:	400b      	ands	r3, r1
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	409a      	lsls	r2, r3
 8003a88:	0013      	movs	r3, r2
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	08da      	lsrs	r2, r3, #3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3208      	adds	r2, #8
 8003a98:	0092      	lsls	r2, r2, #2
 8003a9a:	6939      	ldr	r1, [r7, #16]
 8003a9c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	2203      	movs	r2, #3
 8003aaa:	409a      	lsls	r2, r3
 8003aac:	0013      	movs	r3, r2
 8003aae:	43da      	mvns	r2, r3
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2203      	movs	r2, #3
 8003abc:	401a      	ands	r2, r3
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	409a      	lsls	r2, r3
 8003ac4:	0013      	movs	r3, r2
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	2380      	movs	r3, #128	; 0x80
 8003ad8:	055b      	lsls	r3, r3, #21
 8003ada:	4013      	ands	r3, r2
 8003adc:	d100      	bne.n	8003ae0 <HAL_GPIO_Init+0x174>
 8003ade:	e092      	b.n	8003c06 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003ae0:	4a50      	ldr	r2, [pc, #320]	; (8003c24 <HAL_GPIO_Init+0x2b8>)
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	089b      	lsrs	r3, r3, #2
 8003ae6:	3318      	adds	r3, #24
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	589b      	ldr	r3, [r3, r2]
 8003aec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	2203      	movs	r2, #3
 8003af2:	4013      	ands	r3, r2
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	220f      	movs	r2, #15
 8003af8:	409a      	lsls	r2, r3
 8003afa:	0013      	movs	r3, r2
 8003afc:	43da      	mvns	r2, r3
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	4013      	ands	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	23a0      	movs	r3, #160	; 0xa0
 8003b08:	05db      	lsls	r3, r3, #23
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d013      	beq.n	8003b36 <HAL_GPIO_Init+0x1ca>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a45      	ldr	r2, [pc, #276]	; (8003c28 <HAL_GPIO_Init+0x2bc>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d00d      	beq.n	8003b32 <HAL_GPIO_Init+0x1c6>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a44      	ldr	r2, [pc, #272]	; (8003c2c <HAL_GPIO_Init+0x2c0>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d007      	beq.n	8003b2e <HAL_GPIO_Init+0x1c2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a43      	ldr	r2, [pc, #268]	; (8003c30 <HAL_GPIO_Init+0x2c4>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d101      	bne.n	8003b2a <HAL_GPIO_Init+0x1be>
 8003b26:	2303      	movs	r3, #3
 8003b28:	e006      	b.n	8003b38 <HAL_GPIO_Init+0x1cc>
 8003b2a:	2305      	movs	r3, #5
 8003b2c:	e004      	b.n	8003b38 <HAL_GPIO_Init+0x1cc>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e002      	b.n	8003b38 <HAL_GPIO_Init+0x1cc>
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <HAL_GPIO_Init+0x1cc>
 8003b36:	2300      	movs	r3, #0
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	2103      	movs	r1, #3
 8003b3c:	400a      	ands	r2, r1
 8003b3e:	00d2      	lsls	r2, r2, #3
 8003b40:	4093      	lsls	r3, r2
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003b48:	4936      	ldr	r1, [pc, #216]	; (8003c24 <HAL_GPIO_Init+0x2b8>)
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	089b      	lsrs	r3, r3, #2
 8003b4e:	3318      	adds	r3, #24
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003b56:	4a33      	ldr	r2, [pc, #204]	; (8003c24 <HAL_GPIO_Init+0x2b8>)
 8003b58:	2380      	movs	r3, #128	; 0x80
 8003b5a:	58d3      	ldr	r3, [r2, r3]
 8003b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	43da      	mvns	r2, r3
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	4013      	ands	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	2380      	movs	r3, #128	; 0x80
 8003b6e:	025b      	lsls	r3, r3, #9
 8003b70:	4013      	ands	r3, r2
 8003b72:	d003      	beq.n	8003b7c <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b7c:	4929      	ldr	r1, [pc, #164]	; (8003c24 <HAL_GPIO_Init+0x2b8>)
 8003b7e:	2280      	movs	r2, #128	; 0x80
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8003b84:	4a27      	ldr	r2, [pc, #156]	; (8003c24 <HAL_GPIO_Init+0x2b8>)
 8003b86:	2384      	movs	r3, #132	; 0x84
 8003b88:	58d3      	ldr	r3, [r2, r3]
 8003b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	43da      	mvns	r2, r3
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	4013      	ands	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	2380      	movs	r3, #128	; 0x80
 8003b9c:	029b      	lsls	r3, r3, #10
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	d003      	beq.n	8003baa <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003baa:	491e      	ldr	r1, [pc, #120]	; (8003c24 <HAL_GPIO_Init+0x2b8>)
 8003bac:	2284      	movs	r2, #132	; 0x84
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bb2:	4b1c      	ldr	r3, [pc, #112]	; (8003c24 <HAL_GPIO_Init+0x2b8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	43da      	mvns	r2, r3
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	2380      	movs	r3, #128	; 0x80
 8003bc8:	035b      	lsls	r3, r3, #13
 8003bca:	4013      	ands	r3, r2
 8003bcc:	d003      	beq.n	8003bd6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bd6:	4b13      	ldr	r3, [pc, #76]	; (8003c24 <HAL_GPIO_Init+0x2b8>)
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003bdc:	4b11      	ldr	r3, [pc, #68]	; (8003c24 <HAL_GPIO_Init+0x2b8>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	43da      	mvns	r2, r3
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	4013      	ands	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	2380      	movs	r3, #128	; 0x80
 8003bf2:	039b      	lsls	r3, r3, #14
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	d003      	beq.n	8003c00 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c00:	4b08      	ldr	r3, [pc, #32]	; (8003c24 <HAL_GPIO_Init+0x2b8>)
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	40da      	lsrs	r2, r3
 8003c14:	1e13      	subs	r3, r2, #0
 8003c16:	d000      	beq.n	8003c1a <HAL_GPIO_Init+0x2ae>
 8003c18:	e6b0      	b.n	800397c <HAL_GPIO_Init+0x10>
  }
}
 8003c1a:	46c0      	nop			; (mov r8, r8)
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	b006      	add	sp, #24
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	46c0      	nop			; (mov r8, r8)
 8003c24:	40021800 	.word	0x40021800
 8003c28:	50000400 	.word	0x50000400
 8003c2c:	50000800 	.word	0x50000800
 8003c30:	50000c00 	.word	0x50000c00

08003c34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	000a      	movs	r2, r1
 8003c3e:	1cbb      	adds	r3, r7, #2
 8003c40:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	1cba      	adds	r2, r7, #2
 8003c48:	8812      	ldrh	r2, [r2, #0]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	d004      	beq.n	8003c58 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003c4e:	230f      	movs	r3, #15
 8003c50:	18fb      	adds	r3, r7, r3
 8003c52:	2201      	movs	r2, #1
 8003c54:	701a      	strb	r2, [r3, #0]
 8003c56:	e003      	b.n	8003c60 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c58:	230f      	movs	r3, #15
 8003c5a:	18fb      	adds	r3, r7, r3
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003c60:	230f      	movs	r3, #15
 8003c62:	18fb      	adds	r3, r7, r3
 8003c64:	781b      	ldrb	r3, [r3, #0]
}
 8003c66:	0018      	movs	r0, r3
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	b004      	add	sp, #16
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b082      	sub	sp, #8
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
 8003c76:	0008      	movs	r0, r1
 8003c78:	0011      	movs	r1, r2
 8003c7a:	1cbb      	adds	r3, r7, #2
 8003c7c:	1c02      	adds	r2, r0, #0
 8003c7e:	801a      	strh	r2, [r3, #0]
 8003c80:	1c7b      	adds	r3, r7, #1
 8003c82:	1c0a      	adds	r2, r1, #0
 8003c84:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c86:	1c7b      	adds	r3, r7, #1
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d004      	beq.n	8003c98 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c8e:	1cbb      	adds	r3, r7, #2
 8003c90:	881a      	ldrh	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c96:	e003      	b.n	8003ca0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c98:	1cbb      	adds	r3, r7, #2
 8003c9a:	881a      	ldrh	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ca0:	46c0      	nop			; (mov r8, r8)
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	b002      	add	sp, #8
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	000a      	movs	r2, r1
 8003cb2:	1cbb      	adds	r3, r7, #2
 8003cb4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003cbc:	1cbb      	adds	r3, r7, #2
 8003cbe:	881b      	ldrh	r3, [r3, #0]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	041a      	lsls	r2, r3, #16
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	1cb9      	adds	r1, r7, #2
 8003ccc:	8809      	ldrh	r1, [r1, #0]
 8003cce:	400b      	ands	r3, r1
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	619a      	str	r2, [r3, #24]
}
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	b004      	add	sp, #16
 8003cdc:	bd80      	pop	{r7, pc}
	...

08003ce0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	0002      	movs	r2, r0
 8003ce8:	1dbb      	adds	r3, r7, #6
 8003cea:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003cec:	4b10      	ldr	r3, [pc, #64]	; (8003d30 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	1dba      	adds	r2, r7, #6
 8003cf2:	8812      	ldrh	r2, [r2, #0]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	d008      	beq.n	8003d0a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003cf8:	4b0d      	ldr	r3, [pc, #52]	; (8003d30 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003cfa:	1dba      	adds	r2, r7, #6
 8003cfc:	8812      	ldrh	r2, [r2, #0]
 8003cfe:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003d00:	1dbb      	adds	r3, r7, #6
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	0018      	movs	r0, r3
 8003d06:	f7fc ffd9 	bl	8000cbc <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8003d0a:	4b09      	ldr	r3, [pc, #36]	; (8003d30 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	1dba      	adds	r2, r7, #6
 8003d10:	8812      	ldrh	r2, [r2, #0]
 8003d12:	4013      	ands	r3, r2
 8003d14:	d008      	beq.n	8003d28 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003d16:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003d18:	1dba      	adds	r2, r7, #6
 8003d1a:	8812      	ldrh	r2, [r2, #0]
 8003d1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003d1e:	1dbb      	adds	r3, r7, #6
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	0018      	movs	r0, r3
 8003d24:	f7fc ff88 	bl	8000c38 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003d28:	46c0      	nop			; (mov r8, r8)
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	b002      	add	sp, #8
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40021800 	.word	0x40021800

08003d34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003d3c:	4b19      	ldr	r3, [pc, #100]	; (8003da4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a19      	ldr	r2, [pc, #100]	; (8003da8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003d42:	4013      	ands	r3, r2
 8003d44:	0019      	movs	r1, r3
 8003d46:	4b17      	ldr	r3, [pc, #92]	; (8003da4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	2380      	movs	r3, #128	; 0x80
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d11f      	bne.n	8003d98 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8003d58:	4b14      	ldr	r3, [pc, #80]	; (8003dac <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	0013      	movs	r3, r2
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	189b      	adds	r3, r3, r2
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	4912      	ldr	r1, [pc, #72]	; (8003db0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003d66:	0018      	movs	r0, r3
 8003d68:	f7fc f9ce 	bl	8000108 <__udivsi3>
 8003d6c:	0003      	movs	r3, r0
 8003d6e:	3301      	adds	r3, #1
 8003d70:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d72:	e008      	b.n	8003d86 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	e001      	b.n	8003d86 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e009      	b.n	8003d9a <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d86:	4b07      	ldr	r3, [pc, #28]	; (8003da4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003d88:	695a      	ldr	r2, [r3, #20]
 8003d8a:	2380      	movs	r3, #128	; 0x80
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	401a      	ands	r2, r3
 8003d90:	2380      	movs	r3, #128	; 0x80
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d0ed      	beq.n	8003d74 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	b004      	add	sp, #16
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	46c0      	nop			; (mov r8, r8)
 8003da4:	40007000 	.word	0x40007000
 8003da8:	fffff9ff 	.word	0xfffff9ff
 8003dac:	20000000 	.word	0x20000000
 8003db0:	000f4240 	.word	0x000f4240

08003db4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b088      	sub	sp, #32
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e304      	b.n	80043d0 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	4013      	ands	r3, r2
 8003dce:	d100      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x1e>
 8003dd0:	e07c      	b.n	8003ecc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dd2:	4bc3      	ldr	r3, [pc, #780]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	2238      	movs	r2, #56	; 0x38
 8003dd8:	4013      	ands	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ddc:	4bc0      	ldr	r3, [pc, #768]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	2203      	movs	r2, #3
 8003de2:	4013      	ands	r3, r2
 8003de4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	2b10      	cmp	r3, #16
 8003dea:	d102      	bne.n	8003df2 <HAL_RCC_OscConfig+0x3e>
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	2b03      	cmp	r3, #3
 8003df0:	d002      	beq.n	8003df8 <HAL_RCC_OscConfig+0x44>
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d10b      	bne.n	8003e10 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df8:	4bb9      	ldr	r3, [pc, #740]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	2380      	movs	r3, #128	; 0x80
 8003dfe:	029b      	lsls	r3, r3, #10
 8003e00:	4013      	ands	r3, r2
 8003e02:	d062      	beq.n	8003eca <HAL_RCC_OscConfig+0x116>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d15e      	bne.n	8003eca <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e2df      	b.n	80043d0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	2380      	movs	r3, #128	; 0x80
 8003e16:	025b      	lsls	r3, r3, #9
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d107      	bne.n	8003e2c <HAL_RCC_OscConfig+0x78>
 8003e1c:	4bb0      	ldr	r3, [pc, #704]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	4baf      	ldr	r3, [pc, #700]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 8003e22:	2180      	movs	r1, #128	; 0x80
 8003e24:	0249      	lsls	r1, r1, #9
 8003e26:	430a      	orrs	r2, r1
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	e020      	b.n	8003e6e <HAL_RCC_OscConfig+0xba>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	23a0      	movs	r3, #160	; 0xa0
 8003e32:	02db      	lsls	r3, r3, #11
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d10e      	bne.n	8003e56 <HAL_RCC_OscConfig+0xa2>
 8003e38:	4ba9      	ldr	r3, [pc, #676]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	4ba8      	ldr	r3, [pc, #672]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 8003e3e:	2180      	movs	r1, #128	; 0x80
 8003e40:	02c9      	lsls	r1, r1, #11
 8003e42:	430a      	orrs	r2, r1
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	4ba6      	ldr	r3, [pc, #664]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	4ba5      	ldr	r3, [pc, #660]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 8003e4c:	2180      	movs	r1, #128	; 0x80
 8003e4e:	0249      	lsls	r1, r1, #9
 8003e50:	430a      	orrs	r2, r1
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	e00b      	b.n	8003e6e <HAL_RCC_OscConfig+0xba>
 8003e56:	4ba2      	ldr	r3, [pc, #648]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	4ba1      	ldr	r3, [pc, #644]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 8003e5c:	49a1      	ldr	r1, [pc, #644]	; (80040e4 <HAL_RCC_OscConfig+0x330>)
 8003e5e:	400a      	ands	r2, r1
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	4b9f      	ldr	r3, [pc, #636]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	4b9e      	ldr	r3, [pc, #632]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 8003e68:	499f      	ldr	r1, [pc, #636]	; (80040e8 <HAL_RCC_OscConfig+0x334>)
 8003e6a:	400a      	ands	r2, r1
 8003e6c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d014      	beq.n	8003ea0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e76:	f7fe f857 	bl	8001f28 <HAL_GetTick>
 8003e7a:	0003      	movs	r3, r0
 8003e7c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e80:	f7fe f852 	bl	8001f28 <HAL_GetTick>
 8003e84:	0002      	movs	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b64      	cmp	r3, #100	; 0x64
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e29e      	b.n	80043d0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e92:	4b93      	ldr	r3, [pc, #588]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	2380      	movs	r3, #128	; 0x80
 8003e98:	029b      	lsls	r3, r3, #10
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	d0f0      	beq.n	8003e80 <HAL_RCC_OscConfig+0xcc>
 8003e9e:	e015      	b.n	8003ecc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea0:	f7fe f842 	bl	8001f28 <HAL_GetTick>
 8003ea4:	0003      	movs	r3, r0
 8003ea6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ea8:	e008      	b.n	8003ebc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eaa:	f7fe f83d 	bl	8001f28 <HAL_GetTick>
 8003eae:	0002      	movs	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b64      	cmp	r3, #100	; 0x64
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e289      	b.n	80043d0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ebc:	4b88      	ldr	r3, [pc, #544]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	2380      	movs	r3, #128	; 0x80
 8003ec2:	029b      	lsls	r3, r3, #10
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	d1f0      	bne.n	8003eaa <HAL_RCC_OscConfig+0xf6>
 8003ec8:	e000      	b.n	8003ecc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2202      	movs	r2, #2
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	d100      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x124>
 8003ed6:	e099      	b.n	800400c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ed8:	4b81      	ldr	r3, [pc, #516]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	2238      	movs	r2, #56	; 0x38
 8003ede:	4013      	ands	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ee2:	4b7f      	ldr	r3, [pc, #508]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	2203      	movs	r2, #3
 8003ee8:	4013      	ands	r3, r2
 8003eea:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	2b10      	cmp	r3, #16
 8003ef0:	d102      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x144>
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d002      	beq.n	8003efe <HAL_RCC_OscConfig+0x14a>
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d135      	bne.n	8003f6a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003efe:	4b78      	ldr	r3, [pc, #480]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	2380      	movs	r3, #128	; 0x80
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	4013      	ands	r3, r2
 8003f08:	d005      	beq.n	8003f16 <HAL_RCC_OscConfig+0x162>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e25c      	b.n	80043d0 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f16:	4b72      	ldr	r3, [pc, #456]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	4a74      	ldr	r2, [pc, #464]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	0019      	movs	r1, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	021a      	lsls	r2, r3, #8
 8003f26:	4b6e      	ldr	r3, [pc, #440]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d112      	bne.n	8003f58 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003f32:	4b6b      	ldr	r3, [pc, #428]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a6e      	ldr	r2, [pc, #440]	; (80040f0 <HAL_RCC_OscConfig+0x33c>)
 8003f38:	4013      	ands	r3, r2
 8003f3a:	0019      	movs	r1, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691a      	ldr	r2, [r3, #16]
 8003f40:	4b67      	ldr	r3, [pc, #412]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 8003f42:	430a      	orrs	r2, r1
 8003f44:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003f46:	4b66      	ldr	r3, [pc, #408]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	0adb      	lsrs	r3, r3, #11
 8003f4c:	2207      	movs	r2, #7
 8003f4e:	4013      	ands	r3, r2
 8003f50:	4a68      	ldr	r2, [pc, #416]	; (80040f4 <HAL_RCC_OscConfig+0x340>)
 8003f52:	40da      	lsrs	r2, r3
 8003f54:	4b68      	ldr	r3, [pc, #416]	; (80040f8 <HAL_RCC_OscConfig+0x344>)
 8003f56:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003f58:	4b68      	ldr	r3, [pc, #416]	; (80040fc <HAL_RCC_OscConfig+0x348>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	f7fd ff87 	bl	8001e70 <HAL_InitTick>
 8003f62:	1e03      	subs	r3, r0, #0
 8003f64:	d051      	beq.n	800400a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e232      	b.n	80043d0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d030      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003f72:	4b5b      	ldr	r3, [pc, #364]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a5e      	ldr	r2, [pc, #376]	; (80040f0 <HAL_RCC_OscConfig+0x33c>)
 8003f78:	4013      	ands	r3, r2
 8003f7a:	0019      	movs	r1, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	691a      	ldr	r2, [r3, #16]
 8003f80:	4b57      	ldr	r3, [pc, #348]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 8003f82:	430a      	orrs	r2, r1
 8003f84:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003f86:	4b56      	ldr	r3, [pc, #344]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	4b55      	ldr	r3, [pc, #340]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 8003f8c:	2180      	movs	r1, #128	; 0x80
 8003f8e:	0049      	lsls	r1, r1, #1
 8003f90:	430a      	orrs	r2, r1
 8003f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f94:	f7fd ffc8 	bl	8001f28 <HAL_GetTick>
 8003f98:	0003      	movs	r3, r0
 8003f9a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f9c:	e008      	b.n	8003fb0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f9e:	f7fd ffc3 	bl	8001f28 <HAL_GetTick>
 8003fa2:	0002      	movs	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e20f      	b.n	80043d0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fb0:	4b4b      	ldr	r3, [pc, #300]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	2380      	movs	r3, #128	; 0x80
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	4013      	ands	r3, r2
 8003fba:	d0f0      	beq.n	8003f9e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fbc:	4b48      	ldr	r3, [pc, #288]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	4a4a      	ldr	r2, [pc, #296]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	0019      	movs	r1, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	021a      	lsls	r2, r3, #8
 8003fcc:	4b44      	ldr	r3, [pc, #272]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	605a      	str	r2, [r3, #4]
 8003fd2:	e01b      	b.n	800400c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003fd4:	4b42      	ldr	r3, [pc, #264]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	4b41      	ldr	r3, [pc, #260]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 8003fda:	4949      	ldr	r1, [pc, #292]	; (8004100 <HAL_RCC_OscConfig+0x34c>)
 8003fdc:	400a      	ands	r2, r1
 8003fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe0:	f7fd ffa2 	bl	8001f28 <HAL_GetTick>
 8003fe4:	0003      	movs	r3, r0
 8003fe6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fe8:	e008      	b.n	8003ffc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fea:	f7fd ff9d 	bl	8001f28 <HAL_GetTick>
 8003fee:	0002      	movs	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e1e9      	b.n	80043d0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ffc:	4b38      	ldr	r3, [pc, #224]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	2380      	movs	r3, #128	; 0x80
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	4013      	ands	r3, r2
 8004006:	d1f0      	bne.n	8003fea <HAL_RCC_OscConfig+0x236>
 8004008:	e000      	b.n	800400c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800400a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2208      	movs	r2, #8
 8004012:	4013      	ands	r3, r2
 8004014:	d047      	beq.n	80040a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004016:	4b32      	ldr	r3, [pc, #200]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	2238      	movs	r2, #56	; 0x38
 800401c:	4013      	ands	r3, r2
 800401e:	2b18      	cmp	r3, #24
 8004020:	d10a      	bne.n	8004038 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004022:	4b2f      	ldr	r3, [pc, #188]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 8004024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004026:	2202      	movs	r2, #2
 8004028:	4013      	ands	r3, r2
 800402a:	d03c      	beq.n	80040a6 <HAL_RCC_OscConfig+0x2f2>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d138      	bne.n	80040a6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e1cb      	b.n	80043d0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d019      	beq.n	8004074 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004040:	4b27      	ldr	r3, [pc, #156]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 8004042:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004044:	4b26      	ldr	r3, [pc, #152]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 8004046:	2101      	movs	r1, #1
 8004048:	430a      	orrs	r2, r1
 800404a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404c:	f7fd ff6c 	bl	8001f28 <HAL_GetTick>
 8004050:	0003      	movs	r3, r0
 8004052:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004054:	e008      	b.n	8004068 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004056:	f7fd ff67 	bl	8001f28 <HAL_GetTick>
 800405a:	0002      	movs	r2, r0
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d901      	bls.n	8004068 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e1b3      	b.n	80043d0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004068:	4b1d      	ldr	r3, [pc, #116]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 800406a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800406c:	2202      	movs	r2, #2
 800406e:	4013      	ands	r3, r2
 8004070:	d0f1      	beq.n	8004056 <HAL_RCC_OscConfig+0x2a2>
 8004072:	e018      	b.n	80040a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004074:	4b1a      	ldr	r3, [pc, #104]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 8004076:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004078:	4b19      	ldr	r3, [pc, #100]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 800407a:	2101      	movs	r1, #1
 800407c:	438a      	bics	r2, r1
 800407e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004080:	f7fd ff52 	bl	8001f28 <HAL_GetTick>
 8004084:	0003      	movs	r3, r0
 8004086:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004088:	e008      	b.n	800409c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800408a:	f7fd ff4d 	bl	8001f28 <HAL_GetTick>
 800408e:	0002      	movs	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d901      	bls.n	800409c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e199      	b.n	80043d0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800409c:	4b10      	ldr	r3, [pc, #64]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 800409e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040a0:	2202      	movs	r2, #2
 80040a2:	4013      	ands	r3, r2
 80040a4:	d1f1      	bne.n	800408a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2204      	movs	r2, #4
 80040ac:	4013      	ands	r3, r2
 80040ae:	d100      	bne.n	80040b2 <HAL_RCC_OscConfig+0x2fe>
 80040b0:	e0c6      	b.n	8004240 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040b2:	231f      	movs	r3, #31
 80040b4:	18fb      	adds	r3, r7, r3
 80040b6:	2200      	movs	r2, #0
 80040b8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80040ba:	4b09      	ldr	r3, [pc, #36]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	2238      	movs	r2, #56	; 0x38
 80040c0:	4013      	ands	r3, r2
 80040c2:	2b20      	cmp	r3, #32
 80040c4:	d11e      	bne.n	8004104 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80040c6:	4b06      	ldr	r3, [pc, #24]	; (80040e0 <HAL_RCC_OscConfig+0x32c>)
 80040c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ca:	2202      	movs	r2, #2
 80040cc:	4013      	ands	r3, r2
 80040ce:	d100      	bne.n	80040d2 <HAL_RCC_OscConfig+0x31e>
 80040d0:	e0b6      	b.n	8004240 <HAL_RCC_OscConfig+0x48c>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d000      	beq.n	80040dc <HAL_RCC_OscConfig+0x328>
 80040da:	e0b1      	b.n	8004240 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e177      	b.n	80043d0 <HAL_RCC_OscConfig+0x61c>
 80040e0:	40021000 	.word	0x40021000
 80040e4:	fffeffff 	.word	0xfffeffff
 80040e8:	fffbffff 	.word	0xfffbffff
 80040ec:	ffff80ff 	.word	0xffff80ff
 80040f0:	ffffc7ff 	.word	0xffffc7ff
 80040f4:	00f42400 	.word	0x00f42400
 80040f8:	20000000 	.word	0x20000000
 80040fc:	20000004 	.word	0x20000004
 8004100:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004104:	4bb4      	ldr	r3, [pc, #720]	; (80043d8 <HAL_RCC_OscConfig+0x624>)
 8004106:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004108:	2380      	movs	r3, #128	; 0x80
 800410a:	055b      	lsls	r3, r3, #21
 800410c:	4013      	ands	r3, r2
 800410e:	d101      	bne.n	8004114 <HAL_RCC_OscConfig+0x360>
 8004110:	2301      	movs	r3, #1
 8004112:	e000      	b.n	8004116 <HAL_RCC_OscConfig+0x362>
 8004114:	2300      	movs	r3, #0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d011      	beq.n	800413e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800411a:	4baf      	ldr	r3, [pc, #700]	; (80043d8 <HAL_RCC_OscConfig+0x624>)
 800411c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800411e:	4bae      	ldr	r3, [pc, #696]	; (80043d8 <HAL_RCC_OscConfig+0x624>)
 8004120:	2180      	movs	r1, #128	; 0x80
 8004122:	0549      	lsls	r1, r1, #21
 8004124:	430a      	orrs	r2, r1
 8004126:	63da      	str	r2, [r3, #60]	; 0x3c
 8004128:	4bab      	ldr	r3, [pc, #684]	; (80043d8 <HAL_RCC_OscConfig+0x624>)
 800412a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800412c:	2380      	movs	r3, #128	; 0x80
 800412e:	055b      	lsls	r3, r3, #21
 8004130:	4013      	ands	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]
 8004134:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004136:	231f      	movs	r3, #31
 8004138:	18fb      	adds	r3, r7, r3
 800413a:	2201      	movs	r2, #1
 800413c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800413e:	4ba7      	ldr	r3, [pc, #668]	; (80043dc <HAL_RCC_OscConfig+0x628>)
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	2380      	movs	r3, #128	; 0x80
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	4013      	ands	r3, r2
 8004148:	d11a      	bne.n	8004180 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800414a:	4ba4      	ldr	r3, [pc, #656]	; (80043dc <HAL_RCC_OscConfig+0x628>)
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	4ba3      	ldr	r3, [pc, #652]	; (80043dc <HAL_RCC_OscConfig+0x628>)
 8004150:	2180      	movs	r1, #128	; 0x80
 8004152:	0049      	lsls	r1, r1, #1
 8004154:	430a      	orrs	r2, r1
 8004156:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004158:	f7fd fee6 	bl	8001f28 <HAL_GetTick>
 800415c:	0003      	movs	r3, r0
 800415e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004160:	e008      	b.n	8004174 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004162:	f7fd fee1 	bl	8001f28 <HAL_GetTick>
 8004166:	0002      	movs	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e12d      	b.n	80043d0 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004174:	4b99      	ldr	r3, [pc, #612]	; (80043dc <HAL_RCC_OscConfig+0x628>)
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	2380      	movs	r3, #128	; 0x80
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	4013      	ands	r3, r2
 800417e:	d0f0      	beq.n	8004162 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d106      	bne.n	8004196 <HAL_RCC_OscConfig+0x3e2>
 8004188:	4b93      	ldr	r3, [pc, #588]	; (80043d8 <HAL_RCC_OscConfig+0x624>)
 800418a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800418c:	4b92      	ldr	r3, [pc, #584]	; (80043d8 <HAL_RCC_OscConfig+0x624>)
 800418e:	2101      	movs	r1, #1
 8004190:	430a      	orrs	r2, r1
 8004192:	65da      	str	r2, [r3, #92]	; 0x5c
 8004194:	e01c      	b.n	80041d0 <HAL_RCC_OscConfig+0x41c>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	2b05      	cmp	r3, #5
 800419c:	d10c      	bne.n	80041b8 <HAL_RCC_OscConfig+0x404>
 800419e:	4b8e      	ldr	r3, [pc, #568]	; (80043d8 <HAL_RCC_OscConfig+0x624>)
 80041a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041a2:	4b8d      	ldr	r3, [pc, #564]	; (80043d8 <HAL_RCC_OscConfig+0x624>)
 80041a4:	2104      	movs	r1, #4
 80041a6:	430a      	orrs	r2, r1
 80041a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80041aa:	4b8b      	ldr	r3, [pc, #556]	; (80043d8 <HAL_RCC_OscConfig+0x624>)
 80041ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041ae:	4b8a      	ldr	r3, [pc, #552]	; (80043d8 <HAL_RCC_OscConfig+0x624>)
 80041b0:	2101      	movs	r1, #1
 80041b2:	430a      	orrs	r2, r1
 80041b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80041b6:	e00b      	b.n	80041d0 <HAL_RCC_OscConfig+0x41c>
 80041b8:	4b87      	ldr	r3, [pc, #540]	; (80043d8 <HAL_RCC_OscConfig+0x624>)
 80041ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041bc:	4b86      	ldr	r3, [pc, #536]	; (80043d8 <HAL_RCC_OscConfig+0x624>)
 80041be:	2101      	movs	r1, #1
 80041c0:	438a      	bics	r2, r1
 80041c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80041c4:	4b84      	ldr	r3, [pc, #528]	; (80043d8 <HAL_RCC_OscConfig+0x624>)
 80041c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041c8:	4b83      	ldr	r3, [pc, #524]	; (80043d8 <HAL_RCC_OscConfig+0x624>)
 80041ca:	2104      	movs	r1, #4
 80041cc:	438a      	bics	r2, r1
 80041ce:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d014      	beq.n	8004202 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d8:	f7fd fea6 	bl	8001f28 <HAL_GetTick>
 80041dc:	0003      	movs	r3, r0
 80041de:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041e0:	e009      	b.n	80041f6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041e2:	f7fd fea1 	bl	8001f28 <HAL_GetTick>
 80041e6:	0002      	movs	r2, r0
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	4a7c      	ldr	r2, [pc, #496]	; (80043e0 <HAL_RCC_OscConfig+0x62c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e0ec      	b.n	80043d0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041f6:	4b78      	ldr	r3, [pc, #480]	; (80043d8 <HAL_RCC_OscConfig+0x624>)
 80041f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041fa:	2202      	movs	r2, #2
 80041fc:	4013      	ands	r3, r2
 80041fe:	d0f0      	beq.n	80041e2 <HAL_RCC_OscConfig+0x42e>
 8004200:	e013      	b.n	800422a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004202:	f7fd fe91 	bl	8001f28 <HAL_GetTick>
 8004206:	0003      	movs	r3, r0
 8004208:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800420a:	e009      	b.n	8004220 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800420c:	f7fd fe8c 	bl	8001f28 <HAL_GetTick>
 8004210:	0002      	movs	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	4a72      	ldr	r2, [pc, #456]	; (80043e0 <HAL_RCC_OscConfig+0x62c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e0d7      	b.n	80043d0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004220:	4b6d      	ldr	r3, [pc, #436]	; (80043d8 <HAL_RCC_OscConfig+0x624>)
 8004222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004224:	2202      	movs	r2, #2
 8004226:	4013      	ands	r3, r2
 8004228:	d1f0      	bne.n	800420c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800422a:	231f      	movs	r3, #31
 800422c:	18fb      	adds	r3, r7, r3
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d105      	bne.n	8004240 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004234:	4b68      	ldr	r3, [pc, #416]	; (80043d8 <HAL_RCC_OscConfig+0x624>)
 8004236:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004238:	4b67      	ldr	r3, [pc, #412]	; (80043d8 <HAL_RCC_OscConfig+0x624>)
 800423a:	496a      	ldr	r1, [pc, #424]	; (80043e4 <HAL_RCC_OscConfig+0x630>)
 800423c:	400a      	ands	r2, r1
 800423e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d100      	bne.n	800424a <HAL_RCC_OscConfig+0x496>
 8004248:	e0c1      	b.n	80043ce <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800424a:	4b63      	ldr	r3, [pc, #396]	; (80043d8 <HAL_RCC_OscConfig+0x624>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	2238      	movs	r2, #56	; 0x38
 8004250:	4013      	ands	r3, r2
 8004252:	2b10      	cmp	r3, #16
 8004254:	d100      	bne.n	8004258 <HAL_RCC_OscConfig+0x4a4>
 8004256:	e081      	b.n	800435c <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	69db      	ldr	r3, [r3, #28]
 800425c:	2b02      	cmp	r3, #2
 800425e:	d156      	bne.n	800430e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004260:	4b5d      	ldr	r3, [pc, #372]	; (80043d8 <HAL_RCC_OscConfig+0x624>)
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	4b5c      	ldr	r3, [pc, #368]	; (80043d8 <HAL_RCC_OscConfig+0x624>)
 8004266:	4960      	ldr	r1, [pc, #384]	; (80043e8 <HAL_RCC_OscConfig+0x634>)
 8004268:	400a      	ands	r2, r1
 800426a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426c:	f7fd fe5c 	bl	8001f28 <HAL_GetTick>
 8004270:	0003      	movs	r3, r0
 8004272:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004274:	e008      	b.n	8004288 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004276:	f7fd fe57 	bl	8001f28 <HAL_GetTick>
 800427a:	0002      	movs	r2, r0
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	2b02      	cmp	r3, #2
 8004282:	d901      	bls.n	8004288 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e0a3      	b.n	80043d0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004288:	4b53      	ldr	r3, [pc, #332]	; (80043d8 <HAL_RCC_OscConfig+0x624>)
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	2380      	movs	r3, #128	; 0x80
 800428e:	049b      	lsls	r3, r3, #18
 8004290:	4013      	ands	r3, r2
 8004292:	d1f0      	bne.n	8004276 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004294:	4b50      	ldr	r3, [pc, #320]	; (80043d8 <HAL_RCC_OscConfig+0x624>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	4a54      	ldr	r2, [pc, #336]	; (80043ec <HAL_RCC_OscConfig+0x638>)
 800429a:	4013      	ands	r3, r2
 800429c:	0019      	movs	r1, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a1a      	ldr	r2, [r3, #32]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	431a      	orrs	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ac:	021b      	lsls	r3, r3, #8
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b4:	431a      	orrs	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c0:	431a      	orrs	r2, r3
 80042c2:	4b45      	ldr	r3, [pc, #276]	; (80043d8 <HAL_RCC_OscConfig+0x624>)
 80042c4:	430a      	orrs	r2, r1
 80042c6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042c8:	4b43      	ldr	r3, [pc, #268]	; (80043d8 <HAL_RCC_OscConfig+0x624>)
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	4b42      	ldr	r3, [pc, #264]	; (80043d8 <HAL_RCC_OscConfig+0x624>)
 80042ce:	2180      	movs	r1, #128	; 0x80
 80042d0:	0449      	lsls	r1, r1, #17
 80042d2:	430a      	orrs	r2, r1
 80042d4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80042d6:	4b40      	ldr	r3, [pc, #256]	; (80043d8 <HAL_RCC_OscConfig+0x624>)
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	4b3f      	ldr	r3, [pc, #252]	; (80043d8 <HAL_RCC_OscConfig+0x624>)
 80042dc:	2180      	movs	r1, #128	; 0x80
 80042de:	0549      	lsls	r1, r1, #21
 80042e0:	430a      	orrs	r2, r1
 80042e2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e4:	f7fd fe20 	bl	8001f28 <HAL_GetTick>
 80042e8:	0003      	movs	r3, r0
 80042ea:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ec:	e008      	b.n	8004300 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ee:	f7fd fe1b 	bl	8001f28 <HAL_GetTick>
 80042f2:	0002      	movs	r2, r0
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e067      	b.n	80043d0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004300:	4b35      	ldr	r3, [pc, #212]	; (80043d8 <HAL_RCC_OscConfig+0x624>)
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	2380      	movs	r3, #128	; 0x80
 8004306:	049b      	lsls	r3, r3, #18
 8004308:	4013      	ands	r3, r2
 800430a:	d0f0      	beq.n	80042ee <HAL_RCC_OscConfig+0x53a>
 800430c:	e05f      	b.n	80043ce <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800430e:	4b32      	ldr	r3, [pc, #200]	; (80043d8 <HAL_RCC_OscConfig+0x624>)
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	4b31      	ldr	r3, [pc, #196]	; (80043d8 <HAL_RCC_OscConfig+0x624>)
 8004314:	4934      	ldr	r1, [pc, #208]	; (80043e8 <HAL_RCC_OscConfig+0x634>)
 8004316:	400a      	ands	r2, r1
 8004318:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800431a:	4b2f      	ldr	r3, [pc, #188]	; (80043d8 <HAL_RCC_OscConfig+0x624>)
 800431c:	68da      	ldr	r2, [r3, #12]
 800431e:	4b2e      	ldr	r3, [pc, #184]	; (80043d8 <HAL_RCC_OscConfig+0x624>)
 8004320:	2103      	movs	r1, #3
 8004322:	438a      	bics	r2, r1
 8004324:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004326:	4b2c      	ldr	r3, [pc, #176]	; (80043d8 <HAL_RCC_OscConfig+0x624>)
 8004328:	68da      	ldr	r2, [r3, #12]
 800432a:	4b2b      	ldr	r3, [pc, #172]	; (80043d8 <HAL_RCC_OscConfig+0x624>)
 800432c:	4930      	ldr	r1, [pc, #192]	; (80043f0 <HAL_RCC_OscConfig+0x63c>)
 800432e:	400a      	ands	r2, r1
 8004330:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004332:	f7fd fdf9 	bl	8001f28 <HAL_GetTick>
 8004336:	0003      	movs	r3, r0
 8004338:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800433c:	f7fd fdf4 	bl	8001f28 <HAL_GetTick>
 8004340:	0002      	movs	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e040      	b.n	80043d0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800434e:	4b22      	ldr	r3, [pc, #136]	; (80043d8 <HAL_RCC_OscConfig+0x624>)
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	2380      	movs	r3, #128	; 0x80
 8004354:	049b      	lsls	r3, r3, #18
 8004356:	4013      	ands	r3, r2
 8004358:	d1f0      	bne.n	800433c <HAL_RCC_OscConfig+0x588>
 800435a:	e038      	b.n	80043ce <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	69db      	ldr	r3, [r3, #28]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d101      	bne.n	8004368 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e033      	b.n	80043d0 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004368:	4b1b      	ldr	r3, [pc, #108]	; (80043d8 <HAL_RCC_OscConfig+0x624>)
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2203      	movs	r2, #3
 8004372:	401a      	ands	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	429a      	cmp	r2, r3
 800437a:	d126      	bne.n	80043ca <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	2270      	movs	r2, #112	; 0x70
 8004380:	401a      	ands	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004386:	429a      	cmp	r2, r3
 8004388:	d11f      	bne.n	80043ca <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	23fe      	movs	r3, #254	; 0xfe
 800438e:	01db      	lsls	r3, r3, #7
 8004390:	401a      	ands	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004396:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004398:	429a      	cmp	r2, r3
 800439a:	d116      	bne.n	80043ca <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	23f8      	movs	r3, #248	; 0xf8
 80043a0:	039b      	lsls	r3, r3, #14
 80043a2:	401a      	ands	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d10e      	bne.n	80043ca <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	23e0      	movs	r3, #224	; 0xe0
 80043b0:	051b      	lsls	r3, r3, #20
 80043b2:	401a      	ands	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d106      	bne.n	80043ca <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	0f5b      	lsrs	r3, r3, #29
 80043c0:	075a      	lsls	r2, r3, #29
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d001      	beq.n	80043ce <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e000      	b.n	80043d0 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	0018      	movs	r0, r3
 80043d2:	46bd      	mov	sp, r7
 80043d4:	b008      	add	sp, #32
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	40021000 	.word	0x40021000
 80043dc:	40007000 	.word	0x40007000
 80043e0:	00001388 	.word	0x00001388
 80043e4:	efffffff 	.word	0xefffffff
 80043e8:	feffffff 	.word	0xfeffffff
 80043ec:	11c1808c 	.word	0x11c1808c
 80043f0:	eefeffff 	.word	0xeefeffff

080043f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e0e9      	b.n	80045dc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004408:	4b76      	ldr	r3, [pc, #472]	; (80045e4 <HAL_RCC_ClockConfig+0x1f0>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2207      	movs	r2, #7
 800440e:	4013      	ands	r3, r2
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	429a      	cmp	r2, r3
 8004414:	d91e      	bls.n	8004454 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004416:	4b73      	ldr	r3, [pc, #460]	; (80045e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2207      	movs	r2, #7
 800441c:	4393      	bics	r3, r2
 800441e:	0019      	movs	r1, r3
 8004420:	4b70      	ldr	r3, [pc, #448]	; (80045e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004428:	f7fd fd7e 	bl	8001f28 <HAL_GetTick>
 800442c:	0003      	movs	r3, r0
 800442e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004430:	e009      	b.n	8004446 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004432:	f7fd fd79 	bl	8001f28 <HAL_GetTick>
 8004436:	0002      	movs	r2, r0
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	4a6a      	ldr	r2, [pc, #424]	; (80045e8 <HAL_RCC_ClockConfig+0x1f4>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e0ca      	b.n	80045dc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004446:	4b67      	ldr	r3, [pc, #412]	; (80045e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2207      	movs	r2, #7
 800444c:	4013      	ands	r3, r2
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	429a      	cmp	r2, r3
 8004452:	d1ee      	bne.n	8004432 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2202      	movs	r2, #2
 800445a:	4013      	ands	r3, r2
 800445c:	d015      	beq.n	800448a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2204      	movs	r2, #4
 8004464:	4013      	ands	r3, r2
 8004466:	d006      	beq.n	8004476 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004468:	4b60      	ldr	r3, [pc, #384]	; (80045ec <HAL_RCC_ClockConfig+0x1f8>)
 800446a:	689a      	ldr	r2, [r3, #8]
 800446c:	4b5f      	ldr	r3, [pc, #380]	; (80045ec <HAL_RCC_ClockConfig+0x1f8>)
 800446e:	21e0      	movs	r1, #224	; 0xe0
 8004470:	01c9      	lsls	r1, r1, #7
 8004472:	430a      	orrs	r2, r1
 8004474:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004476:	4b5d      	ldr	r3, [pc, #372]	; (80045ec <HAL_RCC_ClockConfig+0x1f8>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	4a5d      	ldr	r2, [pc, #372]	; (80045f0 <HAL_RCC_ClockConfig+0x1fc>)
 800447c:	4013      	ands	r3, r2
 800447e:	0019      	movs	r1, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	4b59      	ldr	r3, [pc, #356]	; (80045ec <HAL_RCC_ClockConfig+0x1f8>)
 8004486:	430a      	orrs	r2, r1
 8004488:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2201      	movs	r2, #1
 8004490:	4013      	ands	r3, r2
 8004492:	d057      	beq.n	8004544 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d107      	bne.n	80044ac <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800449c:	4b53      	ldr	r3, [pc, #332]	; (80045ec <HAL_RCC_ClockConfig+0x1f8>)
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	2380      	movs	r3, #128	; 0x80
 80044a2:	029b      	lsls	r3, r3, #10
 80044a4:	4013      	ands	r3, r2
 80044a6:	d12b      	bne.n	8004500 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e097      	b.n	80045dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d107      	bne.n	80044c4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044b4:	4b4d      	ldr	r3, [pc, #308]	; (80045ec <HAL_RCC_ClockConfig+0x1f8>)
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	2380      	movs	r3, #128	; 0x80
 80044ba:	049b      	lsls	r3, r3, #18
 80044bc:	4013      	ands	r3, r2
 80044be:	d11f      	bne.n	8004500 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e08b      	b.n	80045dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d107      	bne.n	80044dc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044cc:	4b47      	ldr	r3, [pc, #284]	; (80045ec <HAL_RCC_ClockConfig+0x1f8>)
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	2380      	movs	r3, #128	; 0x80
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	4013      	ands	r3, r2
 80044d6:	d113      	bne.n	8004500 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e07f      	b.n	80045dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b03      	cmp	r3, #3
 80044e2:	d106      	bne.n	80044f2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044e4:	4b41      	ldr	r3, [pc, #260]	; (80045ec <HAL_RCC_ClockConfig+0x1f8>)
 80044e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044e8:	2202      	movs	r2, #2
 80044ea:	4013      	ands	r3, r2
 80044ec:	d108      	bne.n	8004500 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e074      	b.n	80045dc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044f2:	4b3e      	ldr	r3, [pc, #248]	; (80045ec <HAL_RCC_ClockConfig+0x1f8>)
 80044f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f6:	2202      	movs	r2, #2
 80044f8:	4013      	ands	r3, r2
 80044fa:	d101      	bne.n	8004500 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e06d      	b.n	80045dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004500:	4b3a      	ldr	r3, [pc, #232]	; (80045ec <HAL_RCC_ClockConfig+0x1f8>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	2207      	movs	r2, #7
 8004506:	4393      	bics	r3, r2
 8004508:	0019      	movs	r1, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	4b37      	ldr	r3, [pc, #220]	; (80045ec <HAL_RCC_ClockConfig+0x1f8>)
 8004510:	430a      	orrs	r2, r1
 8004512:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004514:	f7fd fd08 	bl	8001f28 <HAL_GetTick>
 8004518:	0003      	movs	r3, r0
 800451a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800451c:	e009      	b.n	8004532 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800451e:	f7fd fd03 	bl	8001f28 <HAL_GetTick>
 8004522:	0002      	movs	r2, r0
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	4a2f      	ldr	r2, [pc, #188]	; (80045e8 <HAL_RCC_ClockConfig+0x1f4>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e054      	b.n	80045dc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004532:	4b2e      	ldr	r3, [pc, #184]	; (80045ec <HAL_RCC_ClockConfig+0x1f8>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	2238      	movs	r2, #56	; 0x38
 8004538:	401a      	ands	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	429a      	cmp	r2, r3
 8004542:	d1ec      	bne.n	800451e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004544:	4b27      	ldr	r3, [pc, #156]	; (80045e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2207      	movs	r2, #7
 800454a:	4013      	ands	r3, r2
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	429a      	cmp	r2, r3
 8004550:	d21e      	bcs.n	8004590 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004552:	4b24      	ldr	r3, [pc, #144]	; (80045e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2207      	movs	r2, #7
 8004558:	4393      	bics	r3, r2
 800455a:	0019      	movs	r1, r3
 800455c:	4b21      	ldr	r3, [pc, #132]	; (80045e4 <HAL_RCC_ClockConfig+0x1f0>)
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004564:	f7fd fce0 	bl	8001f28 <HAL_GetTick>
 8004568:	0003      	movs	r3, r0
 800456a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800456c:	e009      	b.n	8004582 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800456e:	f7fd fcdb 	bl	8001f28 <HAL_GetTick>
 8004572:	0002      	movs	r2, r0
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	4a1b      	ldr	r2, [pc, #108]	; (80045e8 <HAL_RCC_ClockConfig+0x1f4>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e02c      	b.n	80045dc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004582:	4b18      	ldr	r3, [pc, #96]	; (80045e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2207      	movs	r2, #7
 8004588:	4013      	ands	r3, r2
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	429a      	cmp	r2, r3
 800458e:	d1ee      	bne.n	800456e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2204      	movs	r2, #4
 8004596:	4013      	ands	r3, r2
 8004598:	d009      	beq.n	80045ae <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800459a:	4b14      	ldr	r3, [pc, #80]	; (80045ec <HAL_RCC_ClockConfig+0x1f8>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	4a15      	ldr	r2, [pc, #84]	; (80045f4 <HAL_RCC_ClockConfig+0x200>)
 80045a0:	4013      	ands	r3, r2
 80045a2:	0019      	movs	r1, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68da      	ldr	r2, [r3, #12]
 80045a8:	4b10      	ldr	r3, [pc, #64]	; (80045ec <HAL_RCC_ClockConfig+0x1f8>)
 80045aa:	430a      	orrs	r2, r1
 80045ac:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80045ae:	f000 f829 	bl	8004604 <HAL_RCC_GetSysClockFreq>
 80045b2:	0001      	movs	r1, r0
 80045b4:	4b0d      	ldr	r3, [pc, #52]	; (80045ec <HAL_RCC_ClockConfig+0x1f8>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	0a1b      	lsrs	r3, r3, #8
 80045ba:	220f      	movs	r2, #15
 80045bc:	401a      	ands	r2, r3
 80045be:	4b0e      	ldr	r3, [pc, #56]	; (80045f8 <HAL_RCC_ClockConfig+0x204>)
 80045c0:	0092      	lsls	r2, r2, #2
 80045c2:	58d3      	ldr	r3, [r2, r3]
 80045c4:	221f      	movs	r2, #31
 80045c6:	4013      	ands	r3, r2
 80045c8:	000a      	movs	r2, r1
 80045ca:	40da      	lsrs	r2, r3
 80045cc:	4b0b      	ldr	r3, [pc, #44]	; (80045fc <HAL_RCC_ClockConfig+0x208>)
 80045ce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80045d0:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <HAL_RCC_ClockConfig+0x20c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	0018      	movs	r0, r3
 80045d6:	f7fd fc4b 	bl	8001e70 <HAL_InitTick>
 80045da:	0003      	movs	r3, r0
}
 80045dc:	0018      	movs	r0, r3
 80045de:	46bd      	mov	sp, r7
 80045e0:	b004      	add	sp, #16
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	40022000 	.word	0x40022000
 80045e8:	00001388 	.word	0x00001388
 80045ec:	40021000 	.word	0x40021000
 80045f0:	fffff0ff 	.word	0xfffff0ff
 80045f4:	ffff8fff 	.word	0xffff8fff
 80045f8:	08009334 	.word	0x08009334
 80045fc:	20000000 	.word	0x20000000
 8004600:	20000004 	.word	0x20000004

08004604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800460a:	4b3c      	ldr	r3, [pc, #240]	; (80046fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	2238      	movs	r2, #56	; 0x38
 8004610:	4013      	ands	r3, r2
 8004612:	d10f      	bne.n	8004634 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004614:	4b39      	ldr	r3, [pc, #228]	; (80046fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	0adb      	lsrs	r3, r3, #11
 800461a:	2207      	movs	r2, #7
 800461c:	4013      	ands	r3, r2
 800461e:	2201      	movs	r2, #1
 8004620:	409a      	lsls	r2, r3
 8004622:	0013      	movs	r3, r2
 8004624:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004626:	6839      	ldr	r1, [r7, #0]
 8004628:	4835      	ldr	r0, [pc, #212]	; (8004700 <HAL_RCC_GetSysClockFreq+0xfc>)
 800462a:	f7fb fd6d 	bl	8000108 <__udivsi3>
 800462e:	0003      	movs	r3, r0
 8004630:	613b      	str	r3, [r7, #16]
 8004632:	e05d      	b.n	80046f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004634:	4b31      	ldr	r3, [pc, #196]	; (80046fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	2238      	movs	r2, #56	; 0x38
 800463a:	4013      	ands	r3, r2
 800463c:	2b08      	cmp	r3, #8
 800463e:	d102      	bne.n	8004646 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004640:	4b30      	ldr	r3, [pc, #192]	; (8004704 <HAL_RCC_GetSysClockFreq+0x100>)
 8004642:	613b      	str	r3, [r7, #16]
 8004644:	e054      	b.n	80046f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004646:	4b2d      	ldr	r3, [pc, #180]	; (80046fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	2238      	movs	r2, #56	; 0x38
 800464c:	4013      	ands	r3, r2
 800464e:	2b10      	cmp	r3, #16
 8004650:	d138      	bne.n	80046c4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004652:	4b2a      	ldr	r3, [pc, #168]	; (80046fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	2203      	movs	r2, #3
 8004658:	4013      	ands	r3, r2
 800465a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800465c:	4b27      	ldr	r3, [pc, #156]	; (80046fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	091b      	lsrs	r3, r3, #4
 8004662:	2207      	movs	r2, #7
 8004664:	4013      	ands	r3, r2
 8004666:	3301      	adds	r3, #1
 8004668:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2b03      	cmp	r3, #3
 800466e:	d10d      	bne.n	800468c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004670:	68b9      	ldr	r1, [r7, #8]
 8004672:	4824      	ldr	r0, [pc, #144]	; (8004704 <HAL_RCC_GetSysClockFreq+0x100>)
 8004674:	f7fb fd48 	bl	8000108 <__udivsi3>
 8004678:	0003      	movs	r3, r0
 800467a:	0019      	movs	r1, r3
 800467c:	4b1f      	ldr	r3, [pc, #124]	; (80046fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	0a1b      	lsrs	r3, r3, #8
 8004682:	227f      	movs	r2, #127	; 0x7f
 8004684:	4013      	ands	r3, r2
 8004686:	434b      	muls	r3, r1
 8004688:	617b      	str	r3, [r7, #20]
        break;
 800468a:	e00d      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800468c:	68b9      	ldr	r1, [r7, #8]
 800468e:	481c      	ldr	r0, [pc, #112]	; (8004700 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004690:	f7fb fd3a 	bl	8000108 <__udivsi3>
 8004694:	0003      	movs	r3, r0
 8004696:	0019      	movs	r1, r3
 8004698:	4b18      	ldr	r3, [pc, #96]	; (80046fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	0a1b      	lsrs	r3, r3, #8
 800469e:	227f      	movs	r2, #127	; 0x7f
 80046a0:	4013      	ands	r3, r2
 80046a2:	434b      	muls	r3, r1
 80046a4:	617b      	str	r3, [r7, #20]
        break;
 80046a6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80046a8:	4b14      	ldr	r3, [pc, #80]	; (80046fc <HAL_RCC_GetSysClockFreq+0xf8>)
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	0f5b      	lsrs	r3, r3, #29
 80046ae:	2207      	movs	r2, #7
 80046b0:	4013      	ands	r3, r2
 80046b2:	3301      	adds	r3, #1
 80046b4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80046b6:	6879      	ldr	r1, [r7, #4]
 80046b8:	6978      	ldr	r0, [r7, #20]
 80046ba:	f7fb fd25 	bl	8000108 <__udivsi3>
 80046be:	0003      	movs	r3, r0
 80046c0:	613b      	str	r3, [r7, #16]
 80046c2:	e015      	b.n	80046f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80046c4:	4b0d      	ldr	r3, [pc, #52]	; (80046fc <HAL_RCC_GetSysClockFreq+0xf8>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	2238      	movs	r2, #56	; 0x38
 80046ca:	4013      	ands	r3, r2
 80046cc:	2b20      	cmp	r3, #32
 80046ce:	d103      	bne.n	80046d8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80046d0:	2380      	movs	r3, #128	; 0x80
 80046d2:	021b      	lsls	r3, r3, #8
 80046d4:	613b      	str	r3, [r7, #16]
 80046d6:	e00b      	b.n	80046f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80046d8:	4b08      	ldr	r3, [pc, #32]	; (80046fc <HAL_RCC_GetSysClockFreq+0xf8>)
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	2238      	movs	r2, #56	; 0x38
 80046de:	4013      	ands	r3, r2
 80046e0:	2b18      	cmp	r3, #24
 80046e2:	d103      	bne.n	80046ec <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80046e4:	23fa      	movs	r3, #250	; 0xfa
 80046e6:	01db      	lsls	r3, r3, #7
 80046e8:	613b      	str	r3, [r7, #16]
 80046ea:	e001      	b.n	80046f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80046ec:	2300      	movs	r3, #0
 80046ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80046f0:	693b      	ldr	r3, [r7, #16]
}
 80046f2:	0018      	movs	r0, r3
 80046f4:	46bd      	mov	sp, r7
 80046f6:	b006      	add	sp, #24
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	46c0      	nop			; (mov r8, r8)
 80046fc:	40021000 	.word	0x40021000
 8004700:	00f42400 	.word	0x00f42400
 8004704:	007a1200 	.word	0x007a1200

08004708 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004710:	2313      	movs	r3, #19
 8004712:	18fb      	adds	r3, r7, r3
 8004714:	2200      	movs	r2, #0
 8004716:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004718:	2312      	movs	r3, #18
 800471a:	18fb      	adds	r3, r7, r3
 800471c:	2200      	movs	r2, #0
 800471e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	2380      	movs	r3, #128	; 0x80
 8004726:	029b      	lsls	r3, r3, #10
 8004728:	4013      	ands	r3, r2
 800472a:	d100      	bne.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800472c:	e0af      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    FlagStatus       pwrclkchanged = RESET;
 800472e:	2311      	movs	r3, #17
 8004730:	18fb      	adds	r3, r7, r3
 8004732:	2200      	movs	r2, #0
 8004734:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004736:	4b48      	ldr	r3, [pc, #288]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004738:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800473a:	2380      	movs	r3, #128	; 0x80
 800473c:	055b      	lsls	r3, r3, #21
 800473e:	4013      	ands	r3, r2
 8004740:	d111      	bne.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004742:	4b45      	ldr	r3, [pc, #276]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004744:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004746:	4b44      	ldr	r3, [pc, #272]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004748:	2180      	movs	r1, #128	; 0x80
 800474a:	0549      	lsls	r1, r1, #21
 800474c:	430a      	orrs	r2, r1
 800474e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004750:	4b41      	ldr	r3, [pc, #260]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004752:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004754:	2380      	movs	r3, #128	; 0x80
 8004756:	055b      	lsls	r3, r3, #21
 8004758:	4013      	ands	r3, r2
 800475a:	60bb      	str	r3, [r7, #8]
 800475c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800475e:	2311      	movs	r3, #17
 8004760:	18fb      	adds	r3, r7, r3
 8004762:	2201      	movs	r2, #1
 8004764:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004766:	4b3d      	ldr	r3, [pc, #244]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	4b3c      	ldr	r3, [pc, #240]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800476c:	2180      	movs	r1, #128	; 0x80
 800476e:	0049      	lsls	r1, r1, #1
 8004770:	430a      	orrs	r2, r1
 8004772:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004774:	f7fd fbd8 	bl	8001f28 <HAL_GetTick>
 8004778:	0003      	movs	r3, r0
 800477a:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800477c:	e00b      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800477e:	f7fd fbd3 	bl	8001f28 <HAL_GetTick>
 8004782:	0002      	movs	r2, r0
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d904      	bls.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 800478c:	2313      	movs	r3, #19
 800478e:	18fb      	adds	r3, r7, r3
 8004790:	2203      	movs	r2, #3
 8004792:	701a      	strb	r2, [r3, #0]
        break;
 8004794:	e005      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004796:	4b31      	ldr	r3, [pc, #196]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	2380      	movs	r3, #128	; 0x80
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	4013      	ands	r3, r2
 80047a0:	d0ed      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 80047a2:	2313      	movs	r3, #19
 80047a4:	18fb      	adds	r3, r7, r3
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d15f      	bne.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047ac:	4b2a      	ldr	r3, [pc, #168]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80047ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80047b0:	23c0      	movs	r3, #192	; 0xc0
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4013      	ands	r3, r2
 80047b6:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d019      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xea>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d014      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047c8:	4b23      	ldr	r3, [pc, #140]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80047ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047cc:	4a24      	ldr	r2, [pc, #144]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80047ce:	4013      	ands	r3, r2
 80047d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047d2:	4b21      	ldr	r3, [pc, #132]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80047d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80047d6:	4b20      	ldr	r3, [pc, #128]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80047d8:	2180      	movs	r1, #128	; 0x80
 80047da:	0249      	lsls	r1, r1, #9
 80047dc:	430a      	orrs	r2, r1
 80047de:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047e0:	4b1d      	ldr	r3, [pc, #116]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80047e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80047e4:	4b1c      	ldr	r3, [pc, #112]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80047e6:	491f      	ldr	r1, [pc, #124]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80047e8:	400a      	ands	r2, r1
 80047ea:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047ec:	4b1a      	ldr	r3, [pc, #104]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	2201      	movs	r2, #1
 80047f6:	4013      	ands	r3, r2
 80047f8:	d016      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fa:	f7fd fb95 	bl	8001f28 <HAL_GetTick>
 80047fe:	0003      	movs	r3, r0
 8004800:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004802:	e00c      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004804:	f7fd fb90 	bl	8001f28 <HAL_GetTick>
 8004808:	0002      	movs	r2, r0
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	4a16      	ldr	r2, [pc, #88]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d904      	bls.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8004814:	2313      	movs	r3, #19
 8004816:	18fb      	adds	r3, r7, r3
 8004818:	2203      	movs	r2, #3
 800481a:	701a      	strb	r2, [r3, #0]
            break;
 800481c:	e004      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800481e:	4b0e      	ldr	r3, [pc, #56]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004822:	2202      	movs	r2, #2
 8004824:	4013      	ands	r3, r2
 8004826:	d0ed      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8004828:	2313      	movs	r3, #19
 800482a:	18fb      	adds	r3, r7, r3
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10a      	bne.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004832:	4b09      	ldr	r3, [pc, #36]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004836:	4a0a      	ldr	r2, [pc, #40]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8004838:	4013      	ands	r3, r2
 800483a:	0019      	movs	r1, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004840:	4b05      	ldr	r3, [pc, #20]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004842:	430a      	orrs	r2, r1
 8004844:	65da      	str	r2, [r3, #92]	; 0x5c
 8004846:	e017      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x170>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004848:	2312      	movs	r3, #18
 800484a:	18fb      	adds	r3, r7, r3
 800484c:	2213      	movs	r2, #19
 800484e:	18ba      	adds	r2, r7, r2
 8004850:	7812      	ldrb	r2, [r2, #0]
 8004852:	701a      	strb	r2, [r3, #0]
 8004854:	e010      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8004856:	46c0      	nop			; (mov r8, r8)
 8004858:	40021000 	.word	0x40021000
 800485c:	40007000 	.word	0x40007000
 8004860:	fffffcff 	.word	0xfffffcff
 8004864:	fffeffff 	.word	0xfffeffff
 8004868:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800486c:	2312      	movs	r3, #18
 800486e:	18fb      	adds	r3, r7, r3
 8004870:	2213      	movs	r2, #19
 8004872:	18ba      	adds	r2, r7, r2
 8004874:	7812      	ldrb	r2, [r2, #0]
 8004876:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004878:	2311      	movs	r3, #17
 800487a:	18fb      	adds	r3, r7, r3
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d105      	bne.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004882:	4b84      	ldr	r3, [pc, #528]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004884:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004886:	4b83      	ldr	r3, [pc, #524]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004888:	4983      	ldr	r1, [pc, #524]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800488a:	400a      	ands	r2, r1
 800488c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2201      	movs	r2, #1
 8004894:	4013      	ands	r3, r2
 8004896:	d009      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004898:	4b7e      	ldr	r3, [pc, #504]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800489a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800489c:	2203      	movs	r2, #3
 800489e:	4393      	bics	r3, r2
 80048a0:	0019      	movs	r1, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	4b7b      	ldr	r3, [pc, #492]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80048a8:	430a      	orrs	r2, r1
 80048aa:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2202      	movs	r2, #2
 80048b2:	4013      	ands	r3, r2
 80048b4:	d009      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048b6:	4b77      	ldr	r3, [pc, #476]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80048b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ba:	220c      	movs	r2, #12
 80048bc:	4393      	bics	r3, r2
 80048be:	0019      	movs	r1, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	4b73      	ldr	r3, [pc, #460]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80048c6:	430a      	orrs	r2, r1
 80048c8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2210      	movs	r2, #16
 80048d0:	4013      	ands	r3, r2
 80048d2:	d009      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048d4:	4b6f      	ldr	r3, [pc, #444]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80048d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d8:	4a70      	ldr	r2, [pc, #448]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80048da:	4013      	ands	r3, r2
 80048dc:	0019      	movs	r1, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	4b6c      	ldr	r3, [pc, #432]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80048e4:	430a      	orrs	r2, r1
 80048e6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	2380      	movs	r3, #128	; 0x80
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4013      	ands	r3, r2
 80048f2:	d009      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048f4:	4b67      	ldr	r3, [pc, #412]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80048f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f8:	4a69      	ldr	r2, [pc, #420]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80048fa:	4013      	ands	r3, r2
 80048fc:	0019      	movs	r1, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699a      	ldr	r2, [r3, #24]
 8004902:	4b64      	ldr	r3, [pc, #400]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004904:	430a      	orrs	r2, r1
 8004906:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	2380      	movs	r3, #128	; 0x80
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	4013      	ands	r3, r2
 8004912:	d009      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x220>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004914:	4b5f      	ldr	r3, [pc, #380]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004918:	4a62      	ldr	r2, [pc, #392]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800491a:	4013      	ands	r3, r2
 800491c:	0019      	movs	r1, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	69da      	ldr	r2, [r3, #28]
 8004922:	4b5c      	ldr	r3, [pc, #368]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004924:	430a      	orrs	r2, r1
 8004926:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2220      	movs	r2, #32
 800492e:	4013      	ands	r3, r2
 8004930:	d009      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x23e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004932:	4b58      	ldr	r3, [pc, #352]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004936:	4a5c      	ldr	r2, [pc, #368]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8004938:	4013      	ands	r3, r2
 800493a:	0019      	movs	r1, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	691a      	ldr	r2, [r3, #16]
 8004940:	4b54      	ldr	r3, [pc, #336]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004942:	430a      	orrs	r2, r1
 8004944:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* (RCC_CCIPR_I2C2SEL */

#if defined(RNG)
  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	2380      	movs	r3, #128	; 0x80
 800494c:	02db      	lsls	r3, r3, #11
 800494e:	4013      	ands	r3, r2
 8004950:	d016      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004952:	4b50      	ldr	r3, [pc, #320]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004956:	4a55      	ldr	r2, [pc, #340]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8004958:	4013      	ands	r3, r2
 800495a:	0019      	movs	r1, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a1a      	ldr	r2, [r3, #32]
 8004960:	4b4c      	ldr	r3, [pc, #304]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004962:	430a      	orrs	r2, r1
 8004964:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1a      	ldr	r2, [r3, #32]
 800496a:	23c0      	movs	r3, #192	; 0xc0
 800496c:	051b      	lsls	r3, r3, #20
 800496e:	429a      	cmp	r2, r3
 8004970:	d106      	bne.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x278>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004972:	4b48      	ldr	r3, [pc, #288]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004974:	68da      	ldr	r2, [r3, #12]
 8004976:	4b47      	ldr	r3, [pc, #284]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004978:	2180      	movs	r1, #128	; 0x80
 800497a:	0449      	lsls	r1, r1, #17
 800497c:	430a      	orrs	r2, r1
 800497e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	2380      	movs	r3, #128	; 0x80
 8004986:	01db      	lsls	r3, r3, #7
 8004988:	4013      	ands	r3, r2
 800498a:	d015      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800498c:	4b41      	ldr	r3, [pc, #260]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800498e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	0899      	lsrs	r1, r3, #2
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004998:	4b3e      	ldr	r3, [pc, #248]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800499a:	430a      	orrs	r2, r1
 800499c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049a2:	2380      	movs	r3, #128	; 0x80
 80049a4:	05db      	lsls	r3, r3, #23
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d106      	bne.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80049aa:	4b3a      	ldr	r3, [pc, #232]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80049ac:	68da      	ldr	r2, [r3, #12]
 80049ae:	4b39      	ldr	r3, [pc, #228]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80049b0:	2180      	movs	r1, #128	; 0x80
 80049b2:	0249      	lsls	r1, r1, #9
 80049b4:	430a      	orrs	r2, r1
 80049b6:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	2380      	movs	r3, #128	; 0x80
 80049be:	031b      	lsls	r3, r3, #12
 80049c0:	4013      	ands	r3, r2
 80049c2:	d009      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80049c4:	4b33      	ldr	r3, [pc, #204]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80049c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c8:	2240      	movs	r2, #64	; 0x40
 80049ca:	4393      	bics	r3, r2
 80049cc:	0019      	movs	r1, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049d2:	4b30      	ldr	r3, [pc, #192]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80049d4:	430a      	orrs	r2, r1
 80049d6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	2380      	movs	r3, #128	; 0x80
 80049de:	039b      	lsls	r3, r3, #14
 80049e0:	4013      	ands	r3, r2
 80049e2:	d016      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x30a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80049e4:	4b2b      	ldr	r3, [pc, #172]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80049e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e8:	4a31      	ldr	r2, [pc, #196]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80049ea:	4013      	ands	r3, r2
 80049ec:	0019      	movs	r1, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f2:	4b28      	ldr	r3, [pc, #160]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80049f4:	430a      	orrs	r2, r1
 80049f6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049fc:	2380      	movs	r3, #128	; 0x80
 80049fe:	03db      	lsls	r3, r3, #15
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d106      	bne.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x30a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004a04:	4b23      	ldr	r3, [pc, #140]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004a06:	68da      	ldr	r2, [r3, #12]
 8004a08:	4b22      	ldr	r3, [pc, #136]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004a0a:	2180      	movs	r1, #128	; 0x80
 8004a0c:	0449      	lsls	r1, r1, #17
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	2380      	movs	r3, #128	; 0x80
 8004a18:	03db      	lsls	r3, r3, #15
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	d016      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x344>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004a1e:	4b1d      	ldr	r3, [pc, #116]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a22:	4a24      	ldr	r2, [pc, #144]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8004a24:	4013      	ands	r3, r2
 8004a26:	0019      	movs	r1, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a2c:	4b19      	ldr	r3, [pc, #100]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a36:	2380      	movs	r3, #128	; 0x80
 8004a38:	045b      	lsls	r3, r3, #17
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d106      	bne.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004a3e:	4b15      	ldr	r3, [pc, #84]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004a40:	68da      	ldr	r2, [r3, #12]
 8004a42:	4b14      	ldr	r3, [pc, #80]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004a44:	2180      	movs	r1, #128	; 0x80
 8004a46:	0449      	lsls	r1, r1, #17
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	2380      	movs	r3, #128	; 0x80
 8004a52:	011b      	lsls	r3, r3, #4
 8004a54:	4013      	ands	r3, r2
 8004a56:	d016      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x37e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004a58:	4b0e      	ldr	r3, [pc, #56]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5c:	4a16      	ldr	r2, [pc, #88]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8004a5e:	4013      	ands	r3, r2
 8004a60:	0019      	movs	r1, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	695a      	ldr	r2, [r3, #20]
 8004a66:	4b0b      	ldr	r3, [pc, #44]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	695a      	ldr	r2, [r3, #20]
 8004a70:	2380      	movs	r3, #128	; 0x80
 8004a72:	01db      	lsls	r3, r3, #7
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d106      	bne.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x37e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004a78:	4b06      	ldr	r3, [pc, #24]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004a7a:	68da      	ldr	r2, [r3, #12]
 8004a7c:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004a7e:	2180      	movs	r1, #128	; 0x80
 8004a80:	0249      	lsls	r1, r1, #9
 8004a82:	430a      	orrs	r2, r1
 8004a84:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004a86:	2312      	movs	r3, #18
 8004a88:	18fb      	adds	r3, r7, r3
 8004a8a:	781b      	ldrb	r3, [r3, #0]
}
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	b006      	add	sp, #24
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	40021000 	.word	0x40021000
 8004a98:	efffffff 	.word	0xefffffff
 8004a9c:	fffff3ff 	.word	0xfffff3ff
 8004aa0:	fff3ffff 	.word	0xfff3ffff
 8004aa4:	ffcfffff 	.word	0xffcfffff
 8004aa8:	ffffcfff 	.word	0xffffcfff
 8004aac:	f3ffffff 	.word	0xf3ffffff
 8004ab0:	ffbfffff 	.word	0xffbfffff
 8004ab4:	feffffff 	.word	0xfeffffff
 8004ab8:	ffff3fff 	.word	0xffff3fff

08004abc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e029      	b.n	8004b22 <HAL_RNG_Init+0x66>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	7a5b      	ldrb	r3, [r3, #9]
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d106      	bne.n	8004ae6 <HAL_RNG_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	f7fc ff83 	bl	80019ec <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2202      	movs	r2, #2
 8004aea:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2220      	movs	r2, #32
 8004af4:	4393      	bics	r3, r2
 8004af6:	0019      	movs	r1, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	430a      	orrs	r2, r1
 8004b02:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2104      	movs	r1, #4
 8004b10:	430a      	orrs	r2, r1
 8004b12:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	0018      	movs	r0, r3
 8004b24:	46bd      	mov	sp, r7
 8004b26:	b002      	add	sp, #8
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b084      	sub	sp, #16
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
 8004b32:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b34:	230f      	movs	r3, #15
 8004b36:	18fb      	adds	r3, r7, r3
 8004b38:	2200      	movs	r2, #0
 8004b3a:	701a      	strb	r2, [r3, #0]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	7a1b      	ldrb	r3, [r3, #8]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d101      	bne.n	8004b48 <HAL_RNG_GenerateRandomNumber+0x1e>
 8004b44:	2302      	movs	r3, #2
 8004b46:	e042      	b.n	8004bce <HAL_RNG_GenerateRandomNumber+0xa4>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	7a5b      	ldrb	r3, [r3, #9]
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d12d      	bne.n	8004bb4 <HAL_RNG_GenerateRandomNumber+0x8a>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b5e:	f7fd f9e3 	bl	8001f28 <HAL_GetTick>
 8004b62:	0003      	movs	r3, r0
 8004b64:	60bb      	str	r3, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004b66:	e011      	b.n	8004b8c <HAL_RNG_GenerateRandomNumber+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004b68:	f7fd f9de 	bl	8001f28 <HAL_GetTick>
 8004b6c:	0002      	movs	r2, r0
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d90a      	bls.n	8004b8c <HAL_RNG_GenerateRandomNumber+0x62>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2202      	movs	r2, #2
 8004b80:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	721a      	strb	r2, [r3, #8]
        return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e020      	b.n	8004bce <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	4013      	ands	r3, r2
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d1e6      	bne.n	8004b68 <HAL_RNG_GenerateRandomNumber+0x3e>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689a      	ldr	r2, [r3, #8]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691a      	ldr	r2, [r3, #16]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	725a      	strb	r2, [r3, #9]
 8004bb2:	e006      	b.n	8004bc2 <HAL_RNG_GenerateRandomNumber+0x98>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2204      	movs	r2, #4
 8004bb8:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 8004bba:	230f      	movs	r3, #15
 8004bbc:	18fb      	adds	r3, r7, r3
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	701a      	strb	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	721a      	strb	r2, [r3, #8]

  return status;
 8004bc8:	230f      	movs	r3, #15
 8004bca:	18fb      	adds	r3, r7, r3
 8004bcc:	781b      	ldrb	r3, [r3, #0]
}
 8004bce:	0018      	movs	r0, r3
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	b004      	add	sp, #16
 8004bd4:	bd80      	pop	{r7, pc}
	...

08004bd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e0a8      	b.n	8004d3c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d109      	bne.n	8004c06 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	2382      	movs	r3, #130	; 0x82
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d009      	beq.n	8004c12 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	61da      	str	r2, [r3, #28]
 8004c04:	e005      	b.n	8004c12 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	225d      	movs	r2, #93	; 0x5d
 8004c1c:	5c9b      	ldrb	r3, [r3, r2]
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d107      	bne.n	8004c34 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	225c      	movs	r2, #92	; 0x5c
 8004c28:	2100      	movs	r1, #0
 8004c2a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	0018      	movs	r0, r3
 8004c30:	f7fc fefc 	bl	8001a2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	225d      	movs	r2, #93	; 0x5d
 8004c38:	2102      	movs	r1, #2
 8004c3a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2140      	movs	r1, #64	; 0x40
 8004c48:	438a      	bics	r2, r1
 8004c4a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68da      	ldr	r2, [r3, #12]
 8004c50:	23e0      	movs	r3, #224	; 0xe0
 8004c52:	00db      	lsls	r3, r3, #3
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d902      	bls.n	8004c5e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	60fb      	str	r3, [r7, #12]
 8004c5c:	e002      	b.n	8004c64 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c5e:	2380      	movs	r3, #128	; 0x80
 8004c60:	015b      	lsls	r3, r3, #5
 8004c62:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68da      	ldr	r2, [r3, #12]
 8004c68:	23f0      	movs	r3, #240	; 0xf0
 8004c6a:	011b      	lsls	r3, r3, #4
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d008      	beq.n	8004c82 <HAL_SPI_Init+0xaa>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68da      	ldr	r2, [r3, #12]
 8004c74:	23e0      	movs	r3, #224	; 0xe0
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d002      	beq.n	8004c82 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	2382      	movs	r3, #130	; 0x82
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	401a      	ands	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6899      	ldr	r1, [r3, #8]
 8004c90:	2384      	movs	r3, #132	; 0x84
 8004c92:	021b      	lsls	r3, r3, #8
 8004c94:	400b      	ands	r3, r1
 8004c96:	431a      	orrs	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	2102      	movs	r1, #2
 8004c9e:	400b      	ands	r3, r1
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	400b      	ands	r3, r1
 8004caa:	431a      	orrs	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6999      	ldr	r1, [r3, #24]
 8004cb0:	2380      	movs	r3, #128	; 0x80
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	400b      	ands	r3, r1
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	69db      	ldr	r3, [r3, #28]
 8004cbc:	2138      	movs	r1, #56	; 0x38
 8004cbe:	400b      	ands	r3, r1
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	2180      	movs	r1, #128	; 0x80
 8004cc8:	400b      	ands	r3, r1
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	0011      	movs	r1, r2
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cd2:	2380      	movs	r3, #128	; 0x80
 8004cd4:	019b      	lsls	r3, r3, #6
 8004cd6:	401a      	ands	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	0c1b      	lsrs	r3, r3, #16
 8004ce6:	2204      	movs	r2, #4
 8004ce8:	401a      	ands	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	2110      	movs	r1, #16
 8004cf0:	400b      	ands	r3, r1
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf8:	2108      	movs	r1, #8
 8004cfa:	400b      	ands	r3, r1
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68d9      	ldr	r1, [r3, #12]
 8004d02:	23f0      	movs	r3, #240	; 0xf0
 8004d04:	011b      	lsls	r3, r3, #4
 8004d06:	400b      	ands	r3, r1
 8004d08:	431a      	orrs	r2, r3
 8004d0a:	0011      	movs	r1, r2
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	2380      	movs	r3, #128	; 0x80
 8004d10:	015b      	lsls	r3, r3, #5
 8004d12:	401a      	ands	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	69da      	ldr	r2, [r3, #28]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4907      	ldr	r1, [pc, #28]	; (8004d44 <HAL_SPI_Init+0x16c>)
 8004d28:	400a      	ands	r2, r1
 8004d2a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	225d      	movs	r2, #93	; 0x5d
 8004d36:	2101      	movs	r1, #1
 8004d38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	b004      	add	sp, #16
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	fffff7ff 	.word	0xfffff7ff

08004d48 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b088      	sub	sp, #32
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	603b      	str	r3, [r7, #0]
 8004d54:	1dbb      	adds	r3, r7, #6
 8004d56:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d58:	231f      	movs	r3, #31
 8004d5a:	18fb      	adds	r3, r7, r3
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	225c      	movs	r2, #92	; 0x5c
 8004d64:	5c9b      	ldrb	r3, [r3, r2]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d101      	bne.n	8004d6e <HAL_SPI_Transmit+0x26>
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	e140      	b.n	8004ff0 <HAL_SPI_Transmit+0x2a8>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	225c      	movs	r2, #92	; 0x5c
 8004d72:	2101      	movs	r1, #1
 8004d74:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d76:	f7fd f8d7 	bl	8001f28 <HAL_GetTick>
 8004d7a:	0003      	movs	r3, r0
 8004d7c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004d7e:	2316      	movs	r3, #22
 8004d80:	18fb      	adds	r3, r7, r3
 8004d82:	1dba      	adds	r2, r7, #6
 8004d84:	8812      	ldrh	r2, [r2, #0]
 8004d86:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	225d      	movs	r2, #93	; 0x5d
 8004d8c:	5c9b      	ldrb	r3, [r3, r2]
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d004      	beq.n	8004d9e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004d94:	231f      	movs	r3, #31
 8004d96:	18fb      	adds	r3, r7, r3
 8004d98:	2202      	movs	r2, #2
 8004d9a:	701a      	strb	r2, [r3, #0]
    goto error;
 8004d9c:	e11d      	b.n	8004fda <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d003      	beq.n	8004dac <HAL_SPI_Transmit+0x64>
 8004da4:	1dbb      	adds	r3, r7, #6
 8004da6:	881b      	ldrh	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d104      	bne.n	8004db6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004dac:	231f      	movs	r3, #31
 8004dae:	18fb      	adds	r3, r7, r3
 8004db0:	2201      	movs	r2, #1
 8004db2:	701a      	strb	r2, [r3, #0]
    goto error;
 8004db4:	e111      	b.n	8004fda <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	225d      	movs	r2, #93	; 0x5d
 8004dba:	2103      	movs	r1, #3
 8004dbc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	68ba      	ldr	r2, [r7, #8]
 8004dc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	1dba      	adds	r2, r7, #6
 8004dce:	8812      	ldrh	r2, [r2, #0]
 8004dd0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	1dba      	adds	r2, r7, #6
 8004dd6:	8812      	ldrh	r2, [r2, #0]
 8004dd8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2244      	movs	r2, #68	; 0x44
 8004de4:	2100      	movs	r1, #0
 8004de6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2246      	movs	r2, #70	; 0x46
 8004dec:	2100      	movs	r1, #0
 8004dee:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	2380      	movs	r3, #128	; 0x80
 8004e02:	021b      	lsls	r3, r3, #8
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d110      	bne.n	8004e2a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2140      	movs	r1, #64	; 0x40
 8004e14:	438a      	bics	r2, r1
 8004e16:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2180      	movs	r1, #128	; 0x80
 8004e24:	01c9      	lsls	r1, r1, #7
 8004e26:	430a      	orrs	r2, r1
 8004e28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2240      	movs	r2, #64	; 0x40
 8004e32:	4013      	ands	r3, r2
 8004e34:	2b40      	cmp	r3, #64	; 0x40
 8004e36:	d007      	beq.n	8004e48 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2140      	movs	r1, #64	; 0x40
 8004e44:	430a      	orrs	r2, r1
 8004e46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	68da      	ldr	r2, [r3, #12]
 8004e4c:	23e0      	movs	r3, #224	; 0xe0
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d94e      	bls.n	8004ef2 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d004      	beq.n	8004e66 <HAL_SPI_Transmit+0x11e>
 8004e5c:	2316      	movs	r3, #22
 8004e5e:	18fb      	adds	r3, r7, r3
 8004e60:	881b      	ldrh	r3, [r3, #0]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d13f      	bne.n	8004ee6 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6a:	881a      	ldrh	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e76:	1c9a      	adds	r2, r3, #2
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	3b01      	subs	r3, #1
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e8a:	e02c      	b.n	8004ee6 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	2202      	movs	r2, #2
 8004e94:	4013      	ands	r3, r2
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d112      	bne.n	8004ec0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9e:	881a      	ldrh	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eaa:	1c9a      	adds	r2, r3, #2
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ebe:	e012      	b.n	8004ee6 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ec0:	f7fd f832 	bl	8001f28 <HAL_GetTick>
 8004ec4:	0002      	movs	r2, r0
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d802      	bhi.n	8004ed6 <HAL_SPI_Transmit+0x18e>
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	d102      	bne.n	8004edc <HAL_SPI_Transmit+0x194>
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d104      	bne.n	8004ee6 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8004edc:	231f      	movs	r3, #31
 8004ede:	18fb      	adds	r3, r7, r3
 8004ee0:	2203      	movs	r2, #3
 8004ee2:	701a      	strb	r2, [r3, #0]
          goto error;
 8004ee4:	e079      	b.n	8004fda <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1cd      	bne.n	8004e8c <HAL_SPI_Transmit+0x144>
 8004ef0:	e04f      	b.n	8004f92 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d004      	beq.n	8004f04 <HAL_SPI_Transmit+0x1bc>
 8004efa:	2316      	movs	r3, #22
 8004efc:	18fb      	adds	r3, r7, r3
 8004efe:	881b      	ldrh	r3, [r3, #0]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d141      	bne.n	8004f88 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	330c      	adds	r3, #12
 8004f0e:	7812      	ldrb	r2, [r2, #0]
 8004f10:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f16:	1c5a      	adds	r2, r3, #1
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	3b01      	subs	r3, #1
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8004f2a:	e02d      	b.n	8004f88 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	2202      	movs	r2, #2
 8004f34:	4013      	ands	r3, r2
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d113      	bne.n	8004f62 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	330c      	adds	r3, #12
 8004f44:	7812      	ldrb	r2, [r2, #0]
 8004f46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4c:	1c5a      	adds	r2, r3, #1
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f60:	e012      	b.n	8004f88 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f62:	f7fc ffe1 	bl	8001f28 <HAL_GetTick>
 8004f66:	0002      	movs	r2, r0
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d802      	bhi.n	8004f78 <HAL_SPI_Transmit+0x230>
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	3301      	adds	r3, #1
 8004f76:	d102      	bne.n	8004f7e <HAL_SPI_Transmit+0x236>
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d104      	bne.n	8004f88 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8004f7e:	231f      	movs	r3, #31
 8004f80:	18fb      	adds	r3, r7, r3
 8004f82:	2203      	movs	r2, #3
 8004f84:	701a      	strb	r2, [r3, #0]
          goto error;
 8004f86:	e028      	b.n	8004fda <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1cc      	bne.n	8004f2c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	6839      	ldr	r1, [r7, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	0018      	movs	r0, r3
 8004f9a:	f000 fccf 	bl	800593c <SPI_EndRxTxTransaction>
 8004f9e:	1e03      	subs	r3, r0, #0
 8004fa0:	d002      	beq.n	8004fa8 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10a      	bne.n	8004fc6 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	613b      	str	r3, [r7, #16]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	613b      	str	r3, [r7, #16]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	613b      	str	r3, [r7, #16]
 8004fc4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d004      	beq.n	8004fd8 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8004fce:	231f      	movs	r3, #31
 8004fd0:	18fb      	adds	r3, r7, r3
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	701a      	strb	r2, [r3, #0]
 8004fd6:	e000      	b.n	8004fda <HAL_SPI_Transmit+0x292>
  }

error:
 8004fd8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	225d      	movs	r2, #93	; 0x5d
 8004fde:	2101      	movs	r1, #1
 8004fe0:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	225c      	movs	r2, #92	; 0x5c
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004fea:	231f      	movs	r3, #31
 8004fec:	18fb      	adds	r3, r7, r3
 8004fee:	781b      	ldrb	r3, [r3, #0]
}
 8004ff0:	0018      	movs	r0, r3
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	b008      	add	sp, #32
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ff8:	b590      	push	{r4, r7, lr}
 8004ffa:	b089      	sub	sp, #36	; 0x24
 8004ffc:	af02      	add	r7, sp, #8
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	603b      	str	r3, [r7, #0]
 8005004:	1dbb      	adds	r3, r7, #6
 8005006:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005008:	2317      	movs	r3, #23
 800500a:	18fb      	adds	r3, r7, r3
 800500c:	2200      	movs	r2, #0
 800500e:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	2382      	movs	r3, #130	; 0x82
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	429a      	cmp	r2, r3
 800501a:	d113      	bne.n	8005044 <HAL_SPI_Receive+0x4c>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10f      	bne.n	8005044 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	225d      	movs	r2, #93	; 0x5d
 8005028:	2104      	movs	r1, #4
 800502a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800502c:	1dbb      	adds	r3, r7, #6
 800502e:	881c      	ldrh	r4, [r3, #0]
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	68b9      	ldr	r1, [r7, #8]
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	0023      	movs	r3, r4
 800503c:	f000 f928 	bl	8005290 <HAL_SPI_TransmitReceive>
 8005040:	0003      	movs	r3, r0
 8005042:	e11c      	b.n	800527e <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	225c      	movs	r2, #92	; 0x5c
 8005048:	5c9b      	ldrb	r3, [r3, r2]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d101      	bne.n	8005052 <HAL_SPI_Receive+0x5a>
 800504e:	2302      	movs	r3, #2
 8005050:	e115      	b.n	800527e <HAL_SPI_Receive+0x286>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	225c      	movs	r2, #92	; 0x5c
 8005056:	2101      	movs	r1, #1
 8005058:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800505a:	f7fc ff65 	bl	8001f28 <HAL_GetTick>
 800505e:	0003      	movs	r3, r0
 8005060:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	225d      	movs	r2, #93	; 0x5d
 8005066:	5c9b      	ldrb	r3, [r3, r2]
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b01      	cmp	r3, #1
 800506c:	d004      	beq.n	8005078 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800506e:	2317      	movs	r3, #23
 8005070:	18fb      	adds	r3, r7, r3
 8005072:	2202      	movs	r2, #2
 8005074:	701a      	strb	r2, [r3, #0]
    goto error;
 8005076:	e0f7      	b.n	8005268 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <HAL_SPI_Receive+0x8e>
 800507e:	1dbb      	adds	r3, r7, #6
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d104      	bne.n	8005090 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8005086:	2317      	movs	r3, #23
 8005088:	18fb      	adds	r3, r7, r3
 800508a:	2201      	movs	r2, #1
 800508c:	701a      	strb	r2, [r3, #0]
    goto error;
 800508e:	e0eb      	b.n	8005268 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	225d      	movs	r2, #93	; 0x5d
 8005094:	2104      	movs	r1, #4
 8005096:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	1dba      	adds	r2, r7, #6
 80050a8:	2144      	movs	r1, #68	; 0x44
 80050aa:	8812      	ldrh	r2, [r2, #0]
 80050ac:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	1dba      	adds	r2, r7, #6
 80050b2:	2146      	movs	r1, #70	; 0x46
 80050b4:	8812      	ldrh	r2, [r2, #0]
 80050b6:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	23e0      	movs	r3, #224	; 0xe0
 80050dc:	00db      	lsls	r3, r3, #3
 80050de:	429a      	cmp	r2, r3
 80050e0:	d908      	bls.n	80050f4 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4966      	ldr	r1, [pc, #408]	; (8005288 <HAL_SPI_Receive+0x290>)
 80050ee:	400a      	ands	r2, r1
 80050f0:	605a      	str	r2, [r3, #4]
 80050f2:	e008      	b.n	8005106 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2180      	movs	r1, #128	; 0x80
 8005100:	0149      	lsls	r1, r1, #5
 8005102:	430a      	orrs	r2, r1
 8005104:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	689a      	ldr	r2, [r3, #8]
 800510a:	2380      	movs	r3, #128	; 0x80
 800510c:	021b      	lsls	r3, r3, #8
 800510e:	429a      	cmp	r2, r3
 8005110:	d10f      	bne.n	8005132 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2140      	movs	r1, #64	; 0x40
 800511e:	438a      	bics	r2, r1
 8005120:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4957      	ldr	r1, [pc, #348]	; (800528c <HAL_SPI_Receive+0x294>)
 800512e:	400a      	ands	r2, r1
 8005130:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2240      	movs	r2, #64	; 0x40
 800513a:	4013      	ands	r3, r2
 800513c:	2b40      	cmp	r3, #64	; 0x40
 800513e:	d007      	beq.n	8005150 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2140      	movs	r1, #64	; 0x40
 800514c:	430a      	orrs	r2, r1
 800514e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	68da      	ldr	r2, [r3, #12]
 8005154:	23e0      	movs	r3, #224	; 0xe0
 8005156:	00db      	lsls	r3, r3, #3
 8005158:	429a      	cmp	r2, r3
 800515a:	d900      	bls.n	800515e <HAL_SPI_Receive+0x166>
 800515c:	e069      	b.n	8005232 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800515e:	e031      	b.n	80051c4 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	2201      	movs	r2, #1
 8005168:	4013      	ands	r3, r2
 800516a:	2b01      	cmp	r3, #1
 800516c:	d117      	bne.n	800519e <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	330c      	adds	r3, #12
 8005174:	001a      	movs	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517a:	7812      	ldrb	r2, [r2, #0]
 800517c:	b2d2      	uxtb	r2, r2
 800517e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005184:	1c5a      	adds	r2, r3, #1
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2246      	movs	r2, #70	; 0x46
 800518e:	5a9b      	ldrh	r3, [r3, r2]
 8005190:	b29b      	uxth	r3, r3
 8005192:	3b01      	subs	r3, #1
 8005194:	b299      	uxth	r1, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2246      	movs	r2, #70	; 0x46
 800519a:	5299      	strh	r1, [r3, r2]
 800519c:	e012      	b.n	80051c4 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800519e:	f7fc fec3 	bl	8001f28 <HAL_GetTick>
 80051a2:	0002      	movs	r2, r0
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d802      	bhi.n	80051b4 <HAL_SPI_Receive+0x1bc>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	3301      	adds	r3, #1
 80051b2:	d102      	bne.n	80051ba <HAL_SPI_Receive+0x1c2>
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d104      	bne.n	80051c4 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 80051ba:	2317      	movs	r3, #23
 80051bc:	18fb      	adds	r3, r7, r3
 80051be:	2203      	movs	r2, #3
 80051c0:	701a      	strb	r2, [r3, #0]
          goto error;
 80051c2:	e051      	b.n	8005268 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2246      	movs	r2, #70	; 0x46
 80051c8:	5a9b      	ldrh	r3, [r3, r2]
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1c7      	bne.n	8005160 <HAL_SPI_Receive+0x168>
 80051d0:	e035      	b.n	800523e <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	2201      	movs	r2, #1
 80051da:	4013      	ands	r3, r2
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d115      	bne.n	800520c <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68da      	ldr	r2, [r3, #12]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	b292      	uxth	r2, r2
 80051ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f2:	1c9a      	adds	r2, r3, #2
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2246      	movs	r2, #70	; 0x46
 80051fc:	5a9b      	ldrh	r3, [r3, r2]
 80051fe:	b29b      	uxth	r3, r3
 8005200:	3b01      	subs	r3, #1
 8005202:	b299      	uxth	r1, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2246      	movs	r2, #70	; 0x46
 8005208:	5299      	strh	r1, [r3, r2]
 800520a:	e012      	b.n	8005232 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800520c:	f7fc fe8c 	bl	8001f28 <HAL_GetTick>
 8005210:	0002      	movs	r2, r0
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	429a      	cmp	r2, r3
 800521a:	d802      	bhi.n	8005222 <HAL_SPI_Receive+0x22a>
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	3301      	adds	r3, #1
 8005220:	d102      	bne.n	8005228 <HAL_SPI_Receive+0x230>
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d104      	bne.n	8005232 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8005228:	2317      	movs	r3, #23
 800522a:	18fb      	adds	r3, r7, r3
 800522c:	2203      	movs	r2, #3
 800522e:	701a      	strb	r2, [r3, #0]
          goto error;
 8005230:	e01a      	b.n	8005268 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2246      	movs	r2, #70	; 0x46
 8005236:	5a9b      	ldrh	r3, [r3, r2]
 8005238:	b29b      	uxth	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1c9      	bne.n	80051d2 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	6839      	ldr	r1, [r7, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	0018      	movs	r0, r3
 8005246:	f000 fb1b 	bl	8005880 <SPI_EndRxTransaction>
 800524a:	1e03      	subs	r3, r0, #0
 800524c:	d002      	beq.n	8005254 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2220      	movs	r2, #32
 8005252:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005258:	2b00      	cmp	r3, #0
 800525a:	d004      	beq.n	8005266 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 800525c:	2317      	movs	r3, #23
 800525e:	18fb      	adds	r3, r7, r3
 8005260:	2201      	movs	r2, #1
 8005262:	701a      	strb	r2, [r3, #0]
 8005264:	e000      	b.n	8005268 <HAL_SPI_Receive+0x270>
  }

error :
 8005266:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	225d      	movs	r2, #93	; 0x5d
 800526c:	2101      	movs	r1, #1
 800526e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	225c      	movs	r2, #92	; 0x5c
 8005274:	2100      	movs	r1, #0
 8005276:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005278:	2317      	movs	r3, #23
 800527a:	18fb      	adds	r3, r7, r3
 800527c:	781b      	ldrb	r3, [r3, #0]
}
 800527e:	0018      	movs	r0, r3
 8005280:	46bd      	mov	sp, r7
 8005282:	b007      	add	sp, #28
 8005284:	bd90      	pop	{r4, r7, pc}
 8005286:	46c0      	nop			; (mov r8, r8)
 8005288:	ffffefff 	.word	0xffffefff
 800528c:	ffffbfff 	.word	0xffffbfff

08005290 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b08a      	sub	sp, #40	; 0x28
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
 800529c:	001a      	movs	r2, r3
 800529e:	1cbb      	adds	r3, r7, #2
 80052a0:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80052a2:	2301      	movs	r3, #1
 80052a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80052a6:	2323      	movs	r3, #35	; 0x23
 80052a8:	18fb      	adds	r3, r7, r3
 80052aa:	2200      	movs	r2, #0
 80052ac:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	225c      	movs	r2, #92	; 0x5c
 80052b2:	5c9b      	ldrb	r3, [r3, r2]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d101      	bne.n	80052bc <HAL_SPI_TransmitReceive+0x2c>
 80052b8:	2302      	movs	r3, #2
 80052ba:	e1b6      	b.n	800562a <HAL_SPI_TransmitReceive+0x39a>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	225c      	movs	r2, #92	; 0x5c
 80052c0:	2101      	movs	r1, #1
 80052c2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052c4:	f7fc fe30 	bl	8001f28 <HAL_GetTick>
 80052c8:	0003      	movs	r3, r0
 80052ca:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80052cc:	201b      	movs	r0, #27
 80052ce:	183b      	adds	r3, r7, r0
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	215d      	movs	r1, #93	; 0x5d
 80052d4:	5c52      	ldrb	r2, [r2, r1]
 80052d6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80052de:	2312      	movs	r3, #18
 80052e0:	18fb      	adds	r3, r7, r3
 80052e2:	1cba      	adds	r2, r7, #2
 80052e4:	8812      	ldrh	r2, [r2, #0]
 80052e6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80052e8:	183b      	adds	r3, r7, r0
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d012      	beq.n	8005316 <HAL_SPI_TransmitReceive+0x86>
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	2382      	movs	r3, #130	; 0x82
 80052f4:	005b      	lsls	r3, r3, #1
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d108      	bne.n	800530c <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d104      	bne.n	800530c <HAL_SPI_TransmitReceive+0x7c>
 8005302:	231b      	movs	r3, #27
 8005304:	18fb      	adds	r3, r7, r3
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	2b04      	cmp	r3, #4
 800530a:	d004      	beq.n	8005316 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800530c:	2323      	movs	r3, #35	; 0x23
 800530e:	18fb      	adds	r3, r7, r3
 8005310:	2202      	movs	r2, #2
 8005312:	701a      	strb	r2, [r3, #0]
    goto error;
 8005314:	e17e      	b.n	8005614 <HAL_SPI_TransmitReceive+0x384>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d006      	beq.n	800532a <HAL_SPI_TransmitReceive+0x9a>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <HAL_SPI_TransmitReceive+0x9a>
 8005322:	1cbb      	adds	r3, r7, #2
 8005324:	881b      	ldrh	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d104      	bne.n	8005334 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 800532a:	2323      	movs	r3, #35	; 0x23
 800532c:	18fb      	adds	r3, r7, r3
 800532e:	2201      	movs	r2, #1
 8005330:	701a      	strb	r2, [r3, #0]
    goto error;
 8005332:	e16f      	b.n	8005614 <HAL_SPI_TransmitReceive+0x384>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	225d      	movs	r2, #93	; 0x5d
 8005338:	5c9b      	ldrb	r3, [r3, r2]
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b04      	cmp	r3, #4
 800533e:	d003      	beq.n	8005348 <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	225d      	movs	r2, #93	; 0x5d
 8005344:	2105      	movs	r1, #5
 8005346:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	1cba      	adds	r2, r7, #2
 8005358:	2146      	movs	r1, #70	; 0x46
 800535a:	8812      	ldrh	r2, [r2, #0]
 800535c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	1cba      	adds	r2, r7, #2
 8005362:	2144      	movs	r1, #68	; 0x44
 8005364:	8812      	ldrh	r2, [r2, #0]
 8005366:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	1cba      	adds	r2, r7, #2
 8005372:	8812      	ldrh	r2, [r2, #0]
 8005374:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	1cba      	adds	r2, r7, #2
 800537a:	8812      	ldrh	r2, [r2, #0]
 800537c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	68da      	ldr	r2, [r3, #12]
 800538e:	23e0      	movs	r3, #224	; 0xe0
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	429a      	cmp	r2, r3
 8005394:	d908      	bls.n	80053a8 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	49a4      	ldr	r1, [pc, #656]	; (8005634 <HAL_SPI_TransmitReceive+0x3a4>)
 80053a2:	400a      	ands	r2, r1
 80053a4:	605a      	str	r2, [r3, #4]
 80053a6:	e008      	b.n	80053ba <HAL_SPI_TransmitReceive+0x12a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2180      	movs	r1, #128	; 0x80
 80053b4:	0149      	lsls	r1, r1, #5
 80053b6:	430a      	orrs	r2, r1
 80053b8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2240      	movs	r2, #64	; 0x40
 80053c2:	4013      	ands	r3, r2
 80053c4:	2b40      	cmp	r3, #64	; 0x40
 80053c6:	d007      	beq.n	80053d8 <HAL_SPI_TransmitReceive+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2140      	movs	r1, #64	; 0x40
 80053d4:	430a      	orrs	r2, r1
 80053d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	68da      	ldr	r2, [r3, #12]
 80053dc:	23e0      	movs	r3, #224	; 0xe0
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d800      	bhi.n	80053e6 <HAL_SPI_TransmitReceive+0x156>
 80053e4:	e07f      	b.n	80054e6 <HAL_SPI_TransmitReceive+0x256>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d005      	beq.n	80053fa <HAL_SPI_TransmitReceive+0x16a>
 80053ee:	2312      	movs	r3, #18
 80053f0:	18fb      	adds	r3, r7, r3
 80053f2:	881b      	ldrh	r3, [r3, #0]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d000      	beq.n	80053fa <HAL_SPI_TransmitReceive+0x16a>
 80053f8:	e069      	b.n	80054ce <HAL_SPI_TransmitReceive+0x23e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fe:	881a      	ldrh	r2, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540a:	1c9a      	adds	r2, r3, #2
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005414:	b29b      	uxth	r3, r3
 8005416:	3b01      	subs	r3, #1
 8005418:	b29a      	uxth	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800541e:	e056      	b.n	80054ce <HAL_SPI_TransmitReceive+0x23e>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	2202      	movs	r2, #2
 8005428:	4013      	ands	r3, r2
 800542a:	2b02      	cmp	r3, #2
 800542c:	d11b      	bne.n	8005466 <HAL_SPI_TransmitReceive+0x1d6>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005432:	b29b      	uxth	r3, r3
 8005434:	2b00      	cmp	r3, #0
 8005436:	d016      	beq.n	8005466 <HAL_SPI_TransmitReceive+0x1d6>
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	2b01      	cmp	r3, #1
 800543c:	d113      	bne.n	8005466 <HAL_SPI_TransmitReceive+0x1d6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005442:	881a      	ldrh	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544e:	1c9a      	adds	r2, r3, #2
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005458:	b29b      	uxth	r3, r3
 800545a:	3b01      	subs	r3, #1
 800545c:	b29a      	uxth	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005462:	2300      	movs	r3, #0
 8005464:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	2201      	movs	r2, #1
 800546e:	4013      	ands	r3, r2
 8005470:	2b01      	cmp	r3, #1
 8005472:	d11c      	bne.n	80054ae <HAL_SPI_TransmitReceive+0x21e>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2246      	movs	r2, #70	; 0x46
 8005478:	5a9b      	ldrh	r3, [r3, r2]
 800547a:	b29b      	uxth	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	d016      	beq.n	80054ae <HAL_SPI_TransmitReceive+0x21e>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68da      	ldr	r2, [r3, #12]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	b292      	uxth	r2, r2
 800548c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005492:	1c9a      	adds	r2, r3, #2
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2246      	movs	r2, #70	; 0x46
 800549c:	5a9b      	ldrh	r3, [r3, r2]
 800549e:	b29b      	uxth	r3, r3
 80054a0:	3b01      	subs	r3, #1
 80054a2:	b299      	uxth	r1, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2246      	movs	r2, #70	; 0x46
 80054a8:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054aa:	2301      	movs	r3, #1
 80054ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80054ae:	f7fc fd3b 	bl	8001f28 <HAL_GetTick>
 80054b2:	0002      	movs	r2, r0
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d807      	bhi.n	80054ce <HAL_SPI_TransmitReceive+0x23e>
 80054be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c0:	3301      	adds	r3, #1
 80054c2:	d004      	beq.n	80054ce <HAL_SPI_TransmitReceive+0x23e>
      {
        errorcode = HAL_TIMEOUT;
 80054c4:	2323      	movs	r3, #35	; 0x23
 80054c6:	18fb      	adds	r3, r7, r3
 80054c8:	2203      	movs	r2, #3
 80054ca:	701a      	strb	r2, [r3, #0]
        goto error;
 80054cc:	e0a2      	b.n	8005614 <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1a3      	bne.n	8005420 <HAL_SPI_TransmitReceive+0x190>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2246      	movs	r2, #70	; 0x46
 80054dc:	5a9b      	ldrh	r3, [r3, r2]
 80054de:	b29b      	uxth	r3, r3
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d19d      	bne.n	8005420 <HAL_SPI_TransmitReceive+0x190>
 80054e4:	e085      	b.n	80055f2 <HAL_SPI_TransmitReceive+0x362>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d005      	beq.n	80054fa <HAL_SPI_TransmitReceive+0x26a>
 80054ee:	2312      	movs	r3, #18
 80054f0:	18fb      	adds	r3, r7, r3
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d000      	beq.n	80054fa <HAL_SPI_TransmitReceive+0x26a>
 80054f8:	e070      	b.n	80055dc <HAL_SPI_TransmitReceive+0x34c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	330c      	adds	r3, #12
 8005504:	7812      	ldrb	r2, [r2, #0]
 8005506:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550c:	1c5a      	adds	r2, r3, #1
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005516:	b29b      	uxth	r3, r3
 8005518:	3b01      	subs	r3, #1
 800551a:	b29a      	uxth	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005520:	e05c      	b.n	80055dc <HAL_SPI_TransmitReceive+0x34c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	2202      	movs	r2, #2
 800552a:	4013      	ands	r3, r2
 800552c:	2b02      	cmp	r3, #2
 800552e:	d11c      	bne.n	800556a <HAL_SPI_TransmitReceive+0x2da>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005534:	b29b      	uxth	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d017      	beq.n	800556a <HAL_SPI_TransmitReceive+0x2da>
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	2b01      	cmp	r3, #1
 800553e:	d114      	bne.n	800556a <HAL_SPI_TransmitReceive+0x2da>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	330c      	adds	r3, #12
 800554a:	7812      	ldrb	r2, [r2, #0]
 800554c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005552:	1c5a      	adds	r2, r3, #1
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800555c:	b29b      	uxth	r3, r3
 800555e:	3b01      	subs	r3, #1
 8005560:	b29a      	uxth	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005566:	2300      	movs	r3, #0
 8005568:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	2201      	movs	r2, #1
 8005572:	4013      	ands	r3, r2
 8005574:	2b01      	cmp	r3, #1
 8005576:	d11e      	bne.n	80055b6 <HAL_SPI_TransmitReceive+0x326>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2246      	movs	r2, #70	; 0x46
 800557c:	5a9b      	ldrh	r3, [r3, r2]
 800557e:	b29b      	uxth	r3, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	d018      	beq.n	80055b6 <HAL_SPI_TransmitReceive+0x326>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	330c      	adds	r3, #12
 800558a:	001a      	movs	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005590:	7812      	ldrb	r2, [r2, #0]
 8005592:	b2d2      	uxtb	r2, r2
 8005594:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559a:	1c5a      	adds	r2, r3, #1
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2246      	movs	r2, #70	; 0x46
 80055a4:	5a9b      	ldrh	r3, [r3, r2]
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	3b01      	subs	r3, #1
 80055aa:	b299      	uxth	r1, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2246      	movs	r2, #70	; 0x46
 80055b0:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055b2:	2301      	movs	r3, #1
 80055b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80055b6:	f7fc fcb7 	bl	8001f28 <HAL_GetTick>
 80055ba:	0002      	movs	r2, r0
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d802      	bhi.n	80055cc <HAL_SPI_TransmitReceive+0x33c>
 80055c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c8:	3301      	adds	r3, #1
 80055ca:	d102      	bne.n	80055d2 <HAL_SPI_TransmitReceive+0x342>
 80055cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d104      	bne.n	80055dc <HAL_SPI_TransmitReceive+0x34c>
      {
        errorcode = HAL_TIMEOUT;
 80055d2:	2323      	movs	r3, #35	; 0x23
 80055d4:	18fb      	adds	r3, r7, r3
 80055d6:	2203      	movs	r2, #3
 80055d8:	701a      	strb	r2, [r3, #0]
        goto error;
 80055da:	e01b      	b.n	8005614 <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d19d      	bne.n	8005522 <HAL_SPI_TransmitReceive+0x292>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2246      	movs	r2, #70	; 0x46
 80055ea:	5a9b      	ldrh	r3, [r3, r2]
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d197      	bne.n	8005522 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055f2:	69fa      	ldr	r2, [r7, #28]
 80055f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	0018      	movs	r0, r3
 80055fa:	f000 f99f 	bl	800593c <SPI_EndRxTxTransaction>
 80055fe:	1e03      	subs	r3, r0, #0
 8005600:	d007      	beq.n	8005612 <HAL_SPI_TransmitReceive+0x382>
  {
    errorcode = HAL_ERROR;
 8005602:	2323      	movs	r3, #35	; 0x23
 8005604:	18fb      	adds	r3, r7, r3
 8005606:	2201      	movs	r2, #1
 8005608:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2220      	movs	r2, #32
 800560e:	661a      	str	r2, [r3, #96]	; 0x60
 8005610:	e000      	b.n	8005614 <HAL_SPI_TransmitReceive+0x384>
  }

error :
 8005612:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	225d      	movs	r2, #93	; 0x5d
 8005618:	2101      	movs	r1, #1
 800561a:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	225c      	movs	r2, #92	; 0x5c
 8005620:	2100      	movs	r1, #0
 8005622:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005624:	2323      	movs	r3, #35	; 0x23
 8005626:	18fb      	adds	r3, r7, r3
 8005628:	781b      	ldrb	r3, [r3, #0]
}
 800562a:	0018      	movs	r0, r3
 800562c:	46bd      	mov	sp, r7
 800562e:	b00a      	add	sp, #40	; 0x28
 8005630:	bd80      	pop	{r7, pc}
 8005632:	46c0      	nop			; (mov r8, r8)
 8005634:	ffffefff 	.word	0xffffefff

08005638 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b088      	sub	sp, #32
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	603b      	str	r3, [r7, #0]
 8005644:	1dfb      	adds	r3, r7, #7
 8005646:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005648:	f7fc fc6e 	bl	8001f28 <HAL_GetTick>
 800564c:	0002      	movs	r2, r0
 800564e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005650:	1a9b      	subs	r3, r3, r2
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	18d3      	adds	r3, r2, r3
 8005656:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005658:	f7fc fc66 	bl	8001f28 <HAL_GetTick>
 800565c:	0003      	movs	r3, r0
 800565e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005660:	4b3a      	ldr	r3, [pc, #232]	; (800574c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	015b      	lsls	r3, r3, #5
 8005666:	0d1b      	lsrs	r3, r3, #20
 8005668:	69fa      	ldr	r2, [r7, #28]
 800566a:	4353      	muls	r3, r2
 800566c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800566e:	e058      	b.n	8005722 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	3301      	adds	r3, #1
 8005674:	d055      	beq.n	8005722 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005676:	f7fc fc57 	bl	8001f28 <HAL_GetTick>
 800567a:	0002      	movs	r2, r0
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	69fa      	ldr	r2, [r7, #28]
 8005682:	429a      	cmp	r2, r3
 8005684:	d902      	bls.n	800568c <SPI_WaitFlagStateUntilTimeout+0x54>
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d142      	bne.n	8005712 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	21e0      	movs	r1, #224	; 0xe0
 8005698:	438a      	bics	r2, r1
 800569a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	2382      	movs	r3, #130	; 0x82
 80056a2:	005b      	lsls	r3, r3, #1
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d113      	bne.n	80056d0 <SPI_WaitFlagStateUntilTimeout+0x98>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	689a      	ldr	r2, [r3, #8]
 80056ac:	2380      	movs	r3, #128	; 0x80
 80056ae:	021b      	lsls	r3, r3, #8
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d005      	beq.n	80056c0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	689a      	ldr	r2, [r3, #8]
 80056b8:	2380      	movs	r3, #128	; 0x80
 80056ba:	00db      	lsls	r3, r3, #3
 80056bc:	429a      	cmp	r2, r3
 80056be:	d107      	bne.n	80056d0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2140      	movs	r1, #64	; 0x40
 80056cc:	438a      	bics	r2, r1
 80056ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056d4:	2380      	movs	r3, #128	; 0x80
 80056d6:	019b      	lsls	r3, r3, #6
 80056d8:	429a      	cmp	r2, r3
 80056da:	d110      	bne.n	80056fe <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	491a      	ldr	r1, [pc, #104]	; (8005750 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80056e8:	400a      	ands	r2, r1
 80056ea:	601a      	str	r2, [r3, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2180      	movs	r1, #128	; 0x80
 80056f8:	0189      	lsls	r1, r1, #6
 80056fa:	430a      	orrs	r2, r1
 80056fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	225d      	movs	r2, #93	; 0x5d
 8005702:	2101      	movs	r1, #1
 8005704:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	225c      	movs	r2, #92	; 0x5c
 800570a:	2100      	movs	r1, #0
 800570c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e017      	b.n	8005742 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	3b01      	subs	r3, #1
 8005720:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	4013      	ands	r3, r2
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	425a      	negs	r2, r3
 8005732:	4153      	adcs	r3, r2
 8005734:	b2db      	uxtb	r3, r3
 8005736:	001a      	movs	r2, r3
 8005738:	1dfb      	adds	r3, r7, #7
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	429a      	cmp	r2, r3
 800573e:	d197      	bne.n	8005670 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	0018      	movs	r0, r3
 8005744:	46bd      	mov	sp, r7
 8005746:	b008      	add	sp, #32
 8005748:	bd80      	pop	{r7, pc}
 800574a:	46c0      	nop			; (mov r8, r8)
 800574c:	20000000 	.word	0x20000000
 8005750:	ffffdfff 	.word	0xffffdfff

08005754 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b088      	sub	sp, #32
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
 8005760:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005762:	f7fc fbe1 	bl	8001f28 <HAL_GetTick>
 8005766:	0002      	movs	r2, r0
 8005768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576a:	1a9b      	subs	r3, r3, r2
 800576c:	683a      	ldr	r2, [r7, #0]
 800576e:	18d3      	adds	r3, r2, r3
 8005770:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005772:	f7fc fbd9 	bl	8001f28 <HAL_GetTick>
 8005776:	0003      	movs	r3, r0
 8005778:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800577a:	4b3f      	ldr	r3, [pc, #252]	; (8005878 <SPI_WaitFifoStateUntilTimeout+0x124>)
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	0013      	movs	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	189b      	adds	r3, r3, r2
 8005784:	00da      	lsls	r2, r3, #3
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	0d1b      	lsrs	r3, r3, #20
 800578a:	69fa      	ldr	r2, [r7, #28]
 800578c:	4353      	muls	r3, r2
 800578e:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8005790:	e064      	b.n	800585c <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	23c0      	movs	r3, #192	; 0xc0
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	429a      	cmp	r2, r3
 800579a:	d106      	bne.n	80057aa <SPI_WaitFifoStateUntilTimeout+0x56>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d103      	bne.n	80057aa <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	330c      	adds	r3, #12
 80057a8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	3301      	adds	r3, #1
 80057ae:	d055      	beq.n	800585c <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057b0:	f7fc fbba 	bl	8001f28 <HAL_GetTick>
 80057b4:	0002      	movs	r2, r0
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	69fa      	ldr	r2, [r7, #28]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d902      	bls.n	80057c6 <SPI_WaitFifoStateUntilTimeout+0x72>
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d142      	bne.n	800584c <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	21e0      	movs	r1, #224	; 0xe0
 80057d2:	438a      	bics	r2, r1
 80057d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	2382      	movs	r3, #130	; 0x82
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	429a      	cmp	r2, r3
 80057e0:	d113      	bne.n	800580a <SPI_WaitFifoStateUntilTimeout+0xb6>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	689a      	ldr	r2, [r3, #8]
 80057e6:	2380      	movs	r3, #128	; 0x80
 80057e8:	021b      	lsls	r3, r3, #8
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d005      	beq.n	80057fa <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	689a      	ldr	r2, [r3, #8]
 80057f2:	2380      	movs	r3, #128	; 0x80
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d107      	bne.n	800580a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2140      	movs	r1, #64	; 0x40
 8005806:	438a      	bics	r2, r1
 8005808:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800580e:	2380      	movs	r3, #128	; 0x80
 8005810:	019b      	lsls	r3, r3, #6
 8005812:	429a      	cmp	r2, r3
 8005814:	d110      	bne.n	8005838 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4916      	ldr	r1, [pc, #88]	; (800587c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005822:	400a      	ands	r2, r1
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2180      	movs	r1, #128	; 0x80
 8005832:	0189      	lsls	r1, r1, #6
 8005834:	430a      	orrs	r2, r1
 8005836:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	225d      	movs	r2, #93	; 0x5d
 800583c:	2101      	movs	r1, #1
 800583e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	225c      	movs	r2, #92	; 0x5c
 8005844:	2100      	movs	r1, #0
 8005846:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e010      	b.n	800586e <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 8005852:	2300      	movs	r3, #0
 8005854:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	3b01      	subs	r3, #1
 800585a:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	4013      	ands	r3, r2
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	429a      	cmp	r2, r3
 800586a:	d192      	bne.n	8005792 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	0018      	movs	r0, r3
 8005870:	46bd      	mov	sp, r7
 8005872:	b008      	add	sp, #32
 8005874:	bd80      	pop	{r7, pc}
 8005876:	46c0      	nop			; (mov r8, r8)
 8005878:	20000000 	.word	0x20000000
 800587c:	ffffdfff 	.word	0xffffdfff

08005880 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af02      	add	r7, sp, #8
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	2382      	movs	r3, #130	; 0x82
 8005892:	005b      	lsls	r3, r3, #1
 8005894:	429a      	cmp	r2, r3
 8005896:	d113      	bne.n	80058c0 <SPI_EndRxTransaction+0x40>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	689a      	ldr	r2, [r3, #8]
 800589c:	2380      	movs	r3, #128	; 0x80
 800589e:	021b      	lsls	r3, r3, #8
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d005      	beq.n	80058b0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	689a      	ldr	r2, [r3, #8]
 80058a8:	2380      	movs	r3, #128	; 0x80
 80058aa:	00db      	lsls	r3, r3, #3
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d107      	bne.n	80058c0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2140      	movs	r1, #64	; 0x40
 80058bc:	438a      	bics	r2, r1
 80058be:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	0013      	movs	r3, r2
 80058ca:	2200      	movs	r2, #0
 80058cc:	2180      	movs	r1, #128	; 0x80
 80058ce:	f7ff feb3 	bl	8005638 <SPI_WaitFlagStateUntilTimeout>
 80058d2:	1e03      	subs	r3, r0, #0
 80058d4:	d007      	beq.n	80058e6 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058da:	2220      	movs	r2, #32
 80058dc:	431a      	orrs	r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e026      	b.n	8005934 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	2382      	movs	r3, #130	; 0x82
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d11f      	bne.n	8005932 <SPI_EndRxTransaction+0xb2>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	689a      	ldr	r2, [r3, #8]
 80058f6:	2380      	movs	r3, #128	; 0x80
 80058f8:	021b      	lsls	r3, r3, #8
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d005      	beq.n	800590a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	689a      	ldr	r2, [r3, #8]
 8005902:	2380      	movs	r3, #128	; 0x80
 8005904:	00db      	lsls	r3, r3, #3
 8005906:	429a      	cmp	r2, r3
 8005908:	d113      	bne.n	8005932 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	23c0      	movs	r3, #192	; 0xc0
 800590e:	00d9      	lsls	r1, r3, #3
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	0013      	movs	r3, r2
 8005918:	2200      	movs	r2, #0
 800591a:	f7ff ff1b 	bl	8005754 <SPI_WaitFifoStateUntilTimeout>
 800591e:	1e03      	subs	r3, r0, #0
 8005920:	d007      	beq.n	8005932 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005926:	2220      	movs	r2, #32
 8005928:	431a      	orrs	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e000      	b.n	8005934 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	0018      	movs	r0, r3
 8005936:	46bd      	mov	sp, r7
 8005938:	b004      	add	sp, #16
 800593a:	bd80      	pop	{r7, pc}

0800593c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af02      	add	r7, sp, #8
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	23c0      	movs	r3, #192	; 0xc0
 800594c:	0159      	lsls	r1, r3, #5
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	0013      	movs	r3, r2
 8005956:	2200      	movs	r2, #0
 8005958:	f7ff fefc 	bl	8005754 <SPI_WaitFifoStateUntilTimeout>
 800595c:	1e03      	subs	r3, r0, #0
 800595e:	d007      	beq.n	8005970 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005964:	2220      	movs	r2, #32
 8005966:	431a      	orrs	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e027      	b.n	80059c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	0013      	movs	r3, r2
 800597a:	2200      	movs	r2, #0
 800597c:	2180      	movs	r1, #128	; 0x80
 800597e:	f7ff fe5b 	bl	8005638 <SPI_WaitFlagStateUntilTimeout>
 8005982:	1e03      	subs	r3, r0, #0
 8005984:	d007      	beq.n	8005996 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800598a:	2220      	movs	r2, #32
 800598c:	431a      	orrs	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e014      	b.n	80059c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	23c0      	movs	r3, #192	; 0xc0
 800599a:	00d9      	lsls	r1, r3, #3
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	0013      	movs	r3, r2
 80059a4:	2200      	movs	r2, #0
 80059a6:	f7ff fed5 	bl	8005754 <SPI_WaitFifoStateUntilTimeout>
 80059aa:	1e03      	subs	r3, r0, #0
 80059ac:	d007      	beq.n	80059be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059b2:	2220      	movs	r2, #32
 80059b4:	431a      	orrs	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e000      	b.n	80059c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	0018      	movs	r0, r3
 80059c2:	46bd      	mov	sp, r7
 80059c4:	b004      	add	sp, #16
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e04a      	b.n	8005a70 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	223d      	movs	r2, #61	; 0x3d
 80059de:	5c9b      	ldrb	r3, [r3, r2]
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d107      	bne.n	80059f6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	223c      	movs	r2, #60	; 0x3c
 80059ea:	2100      	movs	r1, #0
 80059ec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	0018      	movs	r0, r3
 80059f2:	f7fc f885 	bl	8001b00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	223d      	movs	r2, #61	; 0x3d
 80059fa:	2102      	movs	r1, #2
 80059fc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	3304      	adds	r3, #4
 8005a06:	0019      	movs	r1, r3
 8005a08:	0010      	movs	r0, r2
 8005a0a:	f000 fc1b 	bl	8006244 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2248      	movs	r2, #72	; 0x48
 8005a12:	2101      	movs	r1, #1
 8005a14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	223e      	movs	r2, #62	; 0x3e
 8005a1a:	2101      	movs	r1, #1
 8005a1c:	5499      	strb	r1, [r3, r2]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	223f      	movs	r2, #63	; 0x3f
 8005a22:	2101      	movs	r1, #1
 8005a24:	5499      	strb	r1, [r3, r2]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2240      	movs	r2, #64	; 0x40
 8005a2a:	2101      	movs	r1, #1
 8005a2c:	5499      	strb	r1, [r3, r2]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2241      	movs	r2, #65	; 0x41
 8005a32:	2101      	movs	r1, #1
 8005a34:	5499      	strb	r1, [r3, r2]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2242      	movs	r2, #66	; 0x42
 8005a3a:	2101      	movs	r1, #1
 8005a3c:	5499      	strb	r1, [r3, r2]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2243      	movs	r2, #67	; 0x43
 8005a42:	2101      	movs	r1, #1
 8005a44:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2244      	movs	r2, #68	; 0x44
 8005a4a:	2101      	movs	r1, #1
 8005a4c:	5499      	strb	r1, [r3, r2]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2245      	movs	r2, #69	; 0x45
 8005a52:	2101      	movs	r1, #1
 8005a54:	5499      	strb	r1, [r3, r2]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2246      	movs	r2, #70	; 0x46
 8005a5a:	2101      	movs	r1, #1
 8005a5c:	5499      	strb	r1, [r3, r2]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2247      	movs	r2, #71	; 0x47
 8005a62:	2101      	movs	r1, #1
 8005a64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	223d      	movs	r2, #61	; 0x3d
 8005a6a:	2101      	movs	r1, #1
 8005a6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	0018      	movs	r0, r3
 8005a72:	46bd      	mov	sp, r7
 8005a74:	b002      	add	sp, #8
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	223d      	movs	r2, #61	; 0x3d
 8005a84:	5c9b      	ldrb	r3, [r3, r2]
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d001      	beq.n	8005a90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e042      	b.n	8005b16 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	223d      	movs	r2, #61	; 0x3d
 8005a94:	2102      	movs	r1, #2
 8005a96:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68da      	ldr	r2, [r3, #12]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a1c      	ldr	r2, [pc, #112]	; (8005b20 <HAL_TIM_Base_Start_IT+0xa8>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d00f      	beq.n	8005ad2 <HAL_TIM_Base_Start_IT+0x5a>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	2380      	movs	r3, #128	; 0x80
 8005ab8:	05db      	lsls	r3, r3, #23
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d009      	beq.n	8005ad2 <HAL_TIM_Base_Start_IT+0x5a>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a18      	ldr	r2, [pc, #96]	; (8005b24 <HAL_TIM_Base_Start_IT+0xac>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d004      	beq.n	8005ad2 <HAL_TIM_Base_Start_IT+0x5a>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a16      	ldr	r2, [pc, #88]	; (8005b28 <HAL_TIM_Base_Start_IT+0xb0>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d116      	bne.n	8005b00 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	4a14      	ldr	r2, [pc, #80]	; (8005b2c <HAL_TIM_Base_Start_IT+0xb4>)
 8005ada:	4013      	ands	r3, r2
 8005adc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2b06      	cmp	r3, #6
 8005ae2:	d016      	beq.n	8005b12 <HAL_TIM_Base_Start_IT+0x9a>
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	2380      	movs	r3, #128	; 0x80
 8005ae8:	025b      	lsls	r3, r3, #9
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d011      	beq.n	8005b12 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2101      	movs	r1, #1
 8005afa:	430a      	orrs	r2, r1
 8005afc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005afe:	e008      	b.n	8005b12 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	601a      	str	r2, [r3, #0]
 8005b10:	e000      	b.n	8005b14 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b12:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	0018      	movs	r0, r3
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	b004      	add	sp, #16
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	46c0      	nop			; (mov r8, r8)
 8005b20:	40012c00 	.word	0x40012c00
 8005b24:	40000400 	.word	0x40000400
 8005b28:	40014000 	.word	0x40014000
 8005b2c:	00010007 	.word	0x00010007

08005b30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e04a      	b.n	8005bd8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	223d      	movs	r2, #61	; 0x3d
 8005b46:	5c9b      	ldrb	r3, [r3, r2]
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d107      	bne.n	8005b5e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	223c      	movs	r2, #60	; 0x3c
 8005b52:	2100      	movs	r1, #0
 8005b54:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	0018      	movs	r0, r3
 8005b5a:	f7fb ffb1 	bl	8001ac0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	223d      	movs	r2, #61	; 0x3d
 8005b62:	2102      	movs	r1, #2
 8005b64:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	3304      	adds	r3, #4
 8005b6e:	0019      	movs	r1, r3
 8005b70:	0010      	movs	r0, r2
 8005b72:	f000 fb67 	bl	8006244 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2248      	movs	r2, #72	; 0x48
 8005b7a:	2101      	movs	r1, #1
 8005b7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	223e      	movs	r2, #62	; 0x3e
 8005b82:	2101      	movs	r1, #1
 8005b84:	5499      	strb	r1, [r3, r2]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	223f      	movs	r2, #63	; 0x3f
 8005b8a:	2101      	movs	r1, #1
 8005b8c:	5499      	strb	r1, [r3, r2]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2240      	movs	r2, #64	; 0x40
 8005b92:	2101      	movs	r1, #1
 8005b94:	5499      	strb	r1, [r3, r2]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2241      	movs	r2, #65	; 0x41
 8005b9a:	2101      	movs	r1, #1
 8005b9c:	5499      	strb	r1, [r3, r2]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2242      	movs	r2, #66	; 0x42
 8005ba2:	2101      	movs	r1, #1
 8005ba4:	5499      	strb	r1, [r3, r2]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2243      	movs	r2, #67	; 0x43
 8005baa:	2101      	movs	r1, #1
 8005bac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2244      	movs	r2, #68	; 0x44
 8005bb2:	2101      	movs	r1, #1
 8005bb4:	5499      	strb	r1, [r3, r2]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2245      	movs	r2, #69	; 0x45
 8005bba:	2101      	movs	r1, #1
 8005bbc:	5499      	strb	r1, [r3, r2]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2246      	movs	r2, #70	; 0x46
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	5499      	strb	r1, [r3, r2]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2247      	movs	r2, #71	; 0x47
 8005bca:	2101      	movs	r1, #1
 8005bcc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	223d      	movs	r2, #61	; 0x3d
 8005bd2:	2101      	movs	r1, #1
 8005bd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	0018      	movs	r0, r3
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	b002      	add	sp, #8
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d108      	bne.n	8005c02 <HAL_TIM_PWM_Start+0x22>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	223e      	movs	r2, #62	; 0x3e
 8005bf4:	5c9b      	ldrb	r3, [r3, r2]
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	1e5a      	subs	r2, r3, #1
 8005bfc:	4193      	sbcs	r3, r2
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	e037      	b.n	8005c72 <HAL_TIM_PWM_Start+0x92>
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2b04      	cmp	r3, #4
 8005c06:	d108      	bne.n	8005c1a <HAL_TIM_PWM_Start+0x3a>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	223f      	movs	r2, #63	; 0x3f
 8005c0c:	5c9b      	ldrb	r3, [r3, r2]
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	3b01      	subs	r3, #1
 8005c12:	1e5a      	subs	r2, r3, #1
 8005c14:	4193      	sbcs	r3, r2
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	e02b      	b.n	8005c72 <HAL_TIM_PWM_Start+0x92>
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	2b08      	cmp	r3, #8
 8005c1e:	d108      	bne.n	8005c32 <HAL_TIM_PWM_Start+0x52>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2240      	movs	r2, #64	; 0x40
 8005c24:	5c9b      	ldrb	r3, [r3, r2]
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	1e5a      	subs	r2, r3, #1
 8005c2c:	4193      	sbcs	r3, r2
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	e01f      	b.n	8005c72 <HAL_TIM_PWM_Start+0x92>
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	2b0c      	cmp	r3, #12
 8005c36:	d108      	bne.n	8005c4a <HAL_TIM_PWM_Start+0x6a>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2241      	movs	r2, #65	; 0x41
 8005c3c:	5c9b      	ldrb	r3, [r3, r2]
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	3b01      	subs	r3, #1
 8005c42:	1e5a      	subs	r2, r3, #1
 8005c44:	4193      	sbcs	r3, r2
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	e013      	b.n	8005c72 <HAL_TIM_PWM_Start+0x92>
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b10      	cmp	r3, #16
 8005c4e:	d108      	bne.n	8005c62 <HAL_TIM_PWM_Start+0x82>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2242      	movs	r2, #66	; 0x42
 8005c54:	5c9b      	ldrb	r3, [r3, r2]
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	1e5a      	subs	r2, r3, #1
 8005c5c:	4193      	sbcs	r3, r2
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	e007      	b.n	8005c72 <HAL_TIM_PWM_Start+0x92>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2243      	movs	r2, #67	; 0x43
 8005c66:	5c9b      	ldrb	r3, [r3, r2]
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	1e5a      	subs	r2, r3, #1
 8005c6e:	4193      	sbcs	r3, r2
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e08b      	b.n	8005d92 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d104      	bne.n	8005c8a <HAL_TIM_PWM_Start+0xaa>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	223e      	movs	r2, #62	; 0x3e
 8005c84:	2102      	movs	r1, #2
 8005c86:	5499      	strb	r1, [r3, r2]
 8005c88:	e023      	b.n	8005cd2 <HAL_TIM_PWM_Start+0xf2>
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b04      	cmp	r3, #4
 8005c8e:	d104      	bne.n	8005c9a <HAL_TIM_PWM_Start+0xba>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	223f      	movs	r2, #63	; 0x3f
 8005c94:	2102      	movs	r1, #2
 8005c96:	5499      	strb	r1, [r3, r2]
 8005c98:	e01b      	b.n	8005cd2 <HAL_TIM_PWM_Start+0xf2>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	2b08      	cmp	r3, #8
 8005c9e:	d104      	bne.n	8005caa <HAL_TIM_PWM_Start+0xca>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2240      	movs	r2, #64	; 0x40
 8005ca4:	2102      	movs	r1, #2
 8005ca6:	5499      	strb	r1, [r3, r2]
 8005ca8:	e013      	b.n	8005cd2 <HAL_TIM_PWM_Start+0xf2>
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	2b0c      	cmp	r3, #12
 8005cae:	d104      	bne.n	8005cba <HAL_TIM_PWM_Start+0xda>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2241      	movs	r2, #65	; 0x41
 8005cb4:	2102      	movs	r1, #2
 8005cb6:	5499      	strb	r1, [r3, r2]
 8005cb8:	e00b      	b.n	8005cd2 <HAL_TIM_PWM_Start+0xf2>
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	2b10      	cmp	r3, #16
 8005cbe:	d104      	bne.n	8005cca <HAL_TIM_PWM_Start+0xea>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2242      	movs	r2, #66	; 0x42
 8005cc4:	2102      	movs	r1, #2
 8005cc6:	5499      	strb	r1, [r3, r2]
 8005cc8:	e003      	b.n	8005cd2 <HAL_TIM_PWM_Start+0xf2>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2243      	movs	r2, #67	; 0x43
 8005cce:	2102      	movs	r1, #2
 8005cd0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	6839      	ldr	r1, [r7, #0]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	0018      	movs	r0, r3
 8005cdc:	f000 fdf6 	bl	80068cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a2d      	ldr	r2, [pc, #180]	; (8005d9c <HAL_TIM_PWM_Start+0x1bc>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d00e      	beq.n	8005d08 <HAL_TIM_PWM_Start+0x128>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a2c      	ldr	r2, [pc, #176]	; (8005da0 <HAL_TIM_PWM_Start+0x1c0>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d009      	beq.n	8005d08 <HAL_TIM_PWM_Start+0x128>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a2a      	ldr	r2, [pc, #168]	; (8005da4 <HAL_TIM_PWM_Start+0x1c4>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d004      	beq.n	8005d08 <HAL_TIM_PWM_Start+0x128>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a29      	ldr	r2, [pc, #164]	; (8005da8 <HAL_TIM_PWM_Start+0x1c8>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d101      	bne.n	8005d0c <HAL_TIM_PWM_Start+0x12c>
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e000      	b.n	8005d0e <HAL_TIM_PWM_Start+0x12e>
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d008      	beq.n	8005d24 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2180      	movs	r1, #128	; 0x80
 8005d1e:	0209      	lsls	r1, r1, #8
 8005d20:	430a      	orrs	r2, r1
 8005d22:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a1c      	ldr	r2, [pc, #112]	; (8005d9c <HAL_TIM_PWM_Start+0x1bc>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d00f      	beq.n	8005d4e <HAL_TIM_PWM_Start+0x16e>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	2380      	movs	r3, #128	; 0x80
 8005d34:	05db      	lsls	r3, r3, #23
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d009      	beq.n	8005d4e <HAL_TIM_PWM_Start+0x16e>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a1b      	ldr	r2, [pc, #108]	; (8005dac <HAL_TIM_PWM_Start+0x1cc>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d004      	beq.n	8005d4e <HAL_TIM_PWM_Start+0x16e>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a15      	ldr	r2, [pc, #84]	; (8005da0 <HAL_TIM_PWM_Start+0x1c0>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d116      	bne.n	8005d7c <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	4a16      	ldr	r2, [pc, #88]	; (8005db0 <HAL_TIM_PWM_Start+0x1d0>)
 8005d56:	4013      	ands	r3, r2
 8005d58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2b06      	cmp	r3, #6
 8005d5e:	d016      	beq.n	8005d8e <HAL_TIM_PWM_Start+0x1ae>
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	2380      	movs	r3, #128	; 0x80
 8005d64:	025b      	lsls	r3, r3, #9
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d011      	beq.n	8005d8e <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2101      	movs	r1, #1
 8005d76:	430a      	orrs	r2, r1
 8005d78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d7a:	e008      	b.n	8005d8e <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2101      	movs	r1, #1
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	e000      	b.n	8005d90 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d8e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	0018      	movs	r0, r3
 8005d94:	46bd      	mov	sp, r7
 8005d96:	b004      	add	sp, #16
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	46c0      	nop			; (mov r8, r8)
 8005d9c:	40012c00 	.word	0x40012c00
 8005da0:	40014000 	.word	0x40014000
 8005da4:	40014400 	.word	0x40014400
 8005da8:	40014800 	.word	0x40014800
 8005dac:	40000400 	.word	0x40000400
 8005db0:	00010007 	.word	0x00010007

08005db4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d124      	bne.n	8005e14 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	2202      	movs	r2, #2
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d11d      	bne.n	8005e14 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2203      	movs	r2, #3
 8005dde:	4252      	negs	r2, r2
 8005de0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2201      	movs	r2, #1
 8005de6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	2203      	movs	r2, #3
 8005df0:	4013      	ands	r3, r2
 8005df2:	d004      	beq.n	8005dfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	0018      	movs	r0, r3
 8005df8:	f000 fa0c 	bl	8006214 <HAL_TIM_IC_CaptureCallback>
 8005dfc:	e007      	b.n	8005e0e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	0018      	movs	r0, r3
 8005e02:	f000 f9ff 	bl	8006204 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	0018      	movs	r0, r3
 8005e0a:	f000 fa0b 	bl	8006224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	2204      	movs	r2, #4
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	2b04      	cmp	r3, #4
 8005e20:	d125      	bne.n	8005e6e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	2204      	movs	r2, #4
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	2b04      	cmp	r3, #4
 8005e2e:	d11e      	bne.n	8005e6e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2205      	movs	r2, #5
 8005e36:	4252      	negs	r2, r2
 8005e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2202      	movs	r2, #2
 8005e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	699a      	ldr	r2, [r3, #24]
 8005e46:	23c0      	movs	r3, #192	; 0xc0
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	d004      	beq.n	8005e58 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	0018      	movs	r0, r3
 8005e52:	f000 f9df 	bl	8006214 <HAL_TIM_IC_CaptureCallback>
 8005e56:	e007      	b.n	8005e68 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	0018      	movs	r0, r3
 8005e5c:	f000 f9d2 	bl	8006204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	0018      	movs	r0, r3
 8005e64:	f000 f9de 	bl	8006224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	2208      	movs	r2, #8
 8005e76:	4013      	ands	r3, r2
 8005e78:	2b08      	cmp	r3, #8
 8005e7a:	d124      	bne.n	8005ec6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	2208      	movs	r2, #8
 8005e84:	4013      	ands	r3, r2
 8005e86:	2b08      	cmp	r3, #8
 8005e88:	d11d      	bne.n	8005ec6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2209      	movs	r2, #9
 8005e90:	4252      	negs	r2, r2
 8005e92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2204      	movs	r2, #4
 8005e98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	69db      	ldr	r3, [r3, #28]
 8005ea0:	2203      	movs	r2, #3
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	d004      	beq.n	8005eb0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	0018      	movs	r0, r3
 8005eaa:	f000 f9b3 	bl	8006214 <HAL_TIM_IC_CaptureCallback>
 8005eae:	e007      	b.n	8005ec0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	0018      	movs	r0, r3
 8005eb4:	f000 f9a6 	bl	8006204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	0018      	movs	r0, r3
 8005ebc:	f000 f9b2 	bl	8006224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	2210      	movs	r2, #16
 8005ece:	4013      	ands	r3, r2
 8005ed0:	2b10      	cmp	r3, #16
 8005ed2:	d125      	bne.n	8005f20 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	2210      	movs	r2, #16
 8005edc:	4013      	ands	r3, r2
 8005ede:	2b10      	cmp	r3, #16
 8005ee0:	d11e      	bne.n	8005f20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2211      	movs	r2, #17
 8005ee8:	4252      	negs	r2, r2
 8005eea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2208      	movs	r2, #8
 8005ef0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	69da      	ldr	r2, [r3, #28]
 8005ef8:	23c0      	movs	r3, #192	; 0xc0
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4013      	ands	r3, r2
 8005efe:	d004      	beq.n	8005f0a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	0018      	movs	r0, r3
 8005f04:	f000 f986 	bl	8006214 <HAL_TIM_IC_CaptureCallback>
 8005f08:	e007      	b.n	8005f1a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	0018      	movs	r0, r3
 8005f0e:	f000 f979 	bl	8006204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	0018      	movs	r0, r3
 8005f16:	f000 f985 	bl	8006224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	2201      	movs	r2, #1
 8005f28:	4013      	ands	r3, r2
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d10f      	bne.n	8005f4e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	2201      	movs	r2, #1
 8005f36:	4013      	ands	r3, r2
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d108      	bne.n	8005f4e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2202      	movs	r2, #2
 8005f42:	4252      	negs	r2, r2
 8005f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	0018      	movs	r0, r3
 8005f4a:	f7fa fec7 	bl	8000cdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	2280      	movs	r2, #128	; 0x80
 8005f56:	4013      	ands	r3, r2
 8005f58:	2b80      	cmp	r3, #128	; 0x80
 8005f5a:	d10f      	bne.n	8005f7c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	2280      	movs	r2, #128	; 0x80
 8005f64:	4013      	ands	r3, r2
 8005f66:	2b80      	cmp	r3, #128	; 0x80
 8005f68:	d108      	bne.n	8005f7c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2281      	movs	r2, #129	; 0x81
 8005f70:	4252      	negs	r2, r2
 8005f72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	0018      	movs	r0, r3
 8005f78:	f000 fde8 	bl	8006b4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	691a      	ldr	r2, [r3, #16]
 8005f82:	2380      	movs	r3, #128	; 0x80
 8005f84:	005b      	lsls	r3, r3, #1
 8005f86:	401a      	ands	r2, r3
 8005f88:	2380      	movs	r3, #128	; 0x80
 8005f8a:	005b      	lsls	r3, r3, #1
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d10e      	bne.n	8005fae <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	2280      	movs	r2, #128	; 0x80
 8005f98:	4013      	ands	r3, r2
 8005f9a:	2b80      	cmp	r3, #128	; 0x80
 8005f9c:	d107      	bne.n	8005fae <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a1c      	ldr	r2, [pc, #112]	; (8006014 <HAL_TIM_IRQHandler+0x260>)
 8005fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	0018      	movs	r0, r3
 8005faa:	f000 fdd7 	bl	8006b5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	2240      	movs	r2, #64	; 0x40
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	2b40      	cmp	r3, #64	; 0x40
 8005fba:	d10f      	bne.n	8005fdc <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	2240      	movs	r2, #64	; 0x40
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	2b40      	cmp	r3, #64	; 0x40
 8005fc8:	d108      	bne.n	8005fdc <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2241      	movs	r2, #65	; 0x41
 8005fd0:	4252      	negs	r2, r2
 8005fd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	0018      	movs	r0, r3
 8005fd8:	f000 f92c 	bl	8006234 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	2220      	movs	r2, #32
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	2b20      	cmp	r3, #32
 8005fe8:	d10f      	bne.n	800600a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	2220      	movs	r2, #32
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	2b20      	cmp	r3, #32
 8005ff6:	d108      	bne.n	800600a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2221      	movs	r2, #33	; 0x21
 8005ffe:	4252      	negs	r2, r2
 8006000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	0018      	movs	r0, r3
 8006006:	f000 fd99 	bl	8006b3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800600a:	46c0      	nop			; (mov r8, r8)
 800600c:	46bd      	mov	sp, r7
 800600e:	b002      	add	sp, #8
 8006010:	bd80      	pop	{r7, pc}
 8006012:	46c0      	nop			; (mov r8, r8)
 8006014:	fffffeff 	.word	0xfffffeff

08006018 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	223c      	movs	r2, #60	; 0x3c
 8006028:	5c9b      	ldrb	r3, [r3, r2]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d101      	bne.n	8006032 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800602e:	2302      	movs	r3, #2
 8006030:	e0df      	b.n	80061f2 <HAL_TIM_PWM_ConfigChannel+0x1da>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	223c      	movs	r2, #60	; 0x3c
 8006036:	2101      	movs	r1, #1
 8006038:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2b14      	cmp	r3, #20
 800603e:	d900      	bls.n	8006042 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8006040:	e0d1      	b.n	80061e6 <HAL_TIM_PWM_ConfigChannel+0x1ce>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	009a      	lsls	r2, r3, #2
 8006046:	4b6d      	ldr	r3, [pc, #436]	; (80061fc <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8006048:	18d3      	adds	r3, r2, r3
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68ba      	ldr	r2, [r7, #8]
 8006054:	0011      	movs	r1, r2
 8006056:	0018      	movs	r0, r3
 8006058:	f000 f974 	bl	8006344 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	699a      	ldr	r2, [r3, #24]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2108      	movs	r1, #8
 8006068:	430a      	orrs	r2, r1
 800606a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	699a      	ldr	r2, [r3, #24]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2104      	movs	r1, #4
 8006078:	438a      	bics	r2, r1
 800607a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6999      	ldr	r1, [r3, #24]
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	691a      	ldr	r2, [r3, #16]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	430a      	orrs	r2, r1
 800608c:	619a      	str	r2, [r3, #24]
      break;
 800608e:	e0ab      	b.n	80061e8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	0011      	movs	r1, r2
 8006098:	0018      	movs	r0, r3
 800609a:	f000 f9dd 	bl	8006458 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	699a      	ldr	r2, [r3, #24]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2180      	movs	r1, #128	; 0x80
 80060aa:	0109      	lsls	r1, r1, #4
 80060ac:	430a      	orrs	r2, r1
 80060ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	699a      	ldr	r2, [r3, #24]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4951      	ldr	r1, [pc, #324]	; (8006200 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80060bc:	400a      	ands	r2, r1
 80060be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6999      	ldr	r1, [r3, #24]
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	021a      	lsls	r2, r3, #8
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	430a      	orrs	r2, r1
 80060d2:	619a      	str	r2, [r3, #24]
      break;
 80060d4:	e088      	b.n	80061e8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	0011      	movs	r1, r2
 80060de:	0018      	movs	r0, r3
 80060e0:	f000 fa3e 	bl	8006560 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	69da      	ldr	r2, [r3, #28]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2108      	movs	r1, #8
 80060f0:	430a      	orrs	r2, r1
 80060f2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	69da      	ldr	r2, [r3, #28]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2104      	movs	r1, #4
 8006100:	438a      	bics	r2, r1
 8006102:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	69d9      	ldr	r1, [r3, #28]
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	691a      	ldr	r2, [r3, #16]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	430a      	orrs	r2, r1
 8006114:	61da      	str	r2, [r3, #28]
      break;
 8006116:	e067      	b.n	80061e8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68ba      	ldr	r2, [r7, #8]
 800611e:	0011      	movs	r1, r2
 8006120:	0018      	movs	r0, r3
 8006122:	f000 faa5 	bl	8006670 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	69da      	ldr	r2, [r3, #28]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2180      	movs	r1, #128	; 0x80
 8006132:	0109      	lsls	r1, r1, #4
 8006134:	430a      	orrs	r2, r1
 8006136:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	69da      	ldr	r2, [r3, #28]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	492f      	ldr	r1, [pc, #188]	; (8006200 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8006144:	400a      	ands	r2, r1
 8006146:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	69d9      	ldr	r1, [r3, #28]
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	021a      	lsls	r2, r3, #8
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	430a      	orrs	r2, r1
 800615a:	61da      	str	r2, [r3, #28]
      break;
 800615c:	e044      	b.n	80061e8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	0011      	movs	r1, r2
 8006166:	0018      	movs	r0, r3
 8006168:	f000 faec 	bl	8006744 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2108      	movs	r1, #8
 8006178:	430a      	orrs	r2, r1
 800617a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2104      	movs	r1, #4
 8006188:	438a      	bics	r2, r1
 800618a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	691a      	ldr	r2, [r3, #16]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	430a      	orrs	r2, r1
 800619c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800619e:	e023      	b.n	80061e8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	0011      	movs	r1, r2
 80061a8:	0018      	movs	r0, r3
 80061aa:	f000 fb2b 	bl	8006804 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2180      	movs	r1, #128	; 0x80
 80061ba:	0109      	lsls	r1, r1, #4
 80061bc:	430a      	orrs	r2, r1
 80061be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	490d      	ldr	r1, [pc, #52]	; (8006200 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80061cc:	400a      	ands	r2, r1
 80061ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	021a      	lsls	r2, r3, #8
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	430a      	orrs	r2, r1
 80061e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80061e4:	e000      	b.n	80061e8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 80061e6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	223c      	movs	r2, #60	; 0x3c
 80061ec:	2100      	movs	r1, #0
 80061ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	0018      	movs	r0, r3
 80061f4:	46bd      	mov	sp, r7
 80061f6:	b004      	add	sp, #16
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	46c0      	nop			; (mov r8, r8)
 80061fc:	08009374 	.word	0x08009374
 8006200:	fffffbff 	.word	0xfffffbff

08006204 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800620c:	46c0      	nop			; (mov r8, r8)
 800620e:	46bd      	mov	sp, r7
 8006210:	b002      	add	sp, #8
 8006212:	bd80      	pop	{r7, pc}

08006214 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800621c:	46c0      	nop			; (mov r8, r8)
 800621e:	46bd      	mov	sp, r7
 8006220:	b002      	add	sp, #8
 8006222:	bd80      	pop	{r7, pc}

08006224 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800622c:	46c0      	nop			; (mov r8, r8)
 800622e:	46bd      	mov	sp, r7
 8006230:	b002      	add	sp, #8
 8006232:	bd80      	pop	{r7, pc}

08006234 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800623c:	46c0      	nop			; (mov r8, r8)
 800623e:	46bd      	mov	sp, r7
 8006240:	b002      	add	sp, #8
 8006242:	bd80      	pop	{r7, pc}

08006244 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a34      	ldr	r2, [pc, #208]	; (8006328 <TIM_Base_SetConfig+0xe4>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d008      	beq.n	800626e <TIM_Base_SetConfig+0x2a>
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	2380      	movs	r3, #128	; 0x80
 8006260:	05db      	lsls	r3, r3, #23
 8006262:	429a      	cmp	r2, r3
 8006264:	d003      	beq.n	800626e <TIM_Base_SetConfig+0x2a>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a30      	ldr	r2, [pc, #192]	; (800632c <TIM_Base_SetConfig+0xe8>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d108      	bne.n	8006280 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2270      	movs	r2, #112	; 0x70
 8006272:	4393      	bics	r3, r2
 8006274:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	4313      	orrs	r3, r2
 800627e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a29      	ldr	r2, [pc, #164]	; (8006328 <TIM_Base_SetConfig+0xe4>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d018      	beq.n	80062ba <TIM_Base_SetConfig+0x76>
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	2380      	movs	r3, #128	; 0x80
 800628c:	05db      	lsls	r3, r3, #23
 800628e:	429a      	cmp	r2, r3
 8006290:	d013      	beq.n	80062ba <TIM_Base_SetConfig+0x76>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a25      	ldr	r2, [pc, #148]	; (800632c <TIM_Base_SetConfig+0xe8>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d00f      	beq.n	80062ba <TIM_Base_SetConfig+0x76>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a24      	ldr	r2, [pc, #144]	; (8006330 <TIM_Base_SetConfig+0xec>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d00b      	beq.n	80062ba <TIM_Base_SetConfig+0x76>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a23      	ldr	r2, [pc, #140]	; (8006334 <TIM_Base_SetConfig+0xf0>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d007      	beq.n	80062ba <TIM_Base_SetConfig+0x76>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a22      	ldr	r2, [pc, #136]	; (8006338 <TIM_Base_SetConfig+0xf4>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d003      	beq.n	80062ba <TIM_Base_SetConfig+0x76>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a21      	ldr	r2, [pc, #132]	; (800633c <TIM_Base_SetConfig+0xf8>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d108      	bne.n	80062cc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	4a20      	ldr	r2, [pc, #128]	; (8006340 <TIM_Base_SetConfig+0xfc>)
 80062be:	4013      	ands	r3, r2
 80062c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2280      	movs	r2, #128	; 0x80
 80062d0:	4393      	bics	r3, r2
 80062d2:	001a      	movs	r2, r3
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	695b      	ldr	r3, [r3, #20]
 80062d8:	4313      	orrs	r3, r2
 80062da:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	689a      	ldr	r2, [r3, #8]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a0c      	ldr	r2, [pc, #48]	; (8006328 <TIM_Base_SetConfig+0xe4>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d00b      	beq.n	8006312 <TIM_Base_SetConfig+0xce>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a0d      	ldr	r2, [pc, #52]	; (8006334 <TIM_Base_SetConfig+0xf0>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d007      	beq.n	8006312 <TIM_Base_SetConfig+0xce>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a0c      	ldr	r2, [pc, #48]	; (8006338 <TIM_Base_SetConfig+0xf4>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d003      	beq.n	8006312 <TIM_Base_SetConfig+0xce>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a0b      	ldr	r2, [pc, #44]	; (800633c <TIM_Base_SetConfig+0xf8>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d103      	bne.n	800631a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	691a      	ldr	r2, [r3, #16]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	615a      	str	r2, [r3, #20]
}
 8006320:	46c0      	nop			; (mov r8, r8)
 8006322:	46bd      	mov	sp, r7
 8006324:	b004      	add	sp, #16
 8006326:	bd80      	pop	{r7, pc}
 8006328:	40012c00 	.word	0x40012c00
 800632c:	40000400 	.word	0x40000400
 8006330:	40002000 	.word	0x40002000
 8006334:	40014000 	.word	0x40014000
 8006338:	40014400 	.word	0x40014400
 800633c:	40014800 	.word	0x40014800
 8006340:	fffffcff 	.word	0xfffffcff

08006344 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	2201      	movs	r2, #1
 8006354:	4393      	bics	r3, r2
 8006356:	001a      	movs	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a1b      	ldr	r3, [r3, #32]
 8006360:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	4a32      	ldr	r2, [pc, #200]	; (800643c <TIM_OC1_SetConfig+0xf8>)
 8006372:	4013      	ands	r3, r2
 8006374:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2203      	movs	r2, #3
 800637a:	4393      	bics	r3, r2
 800637c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	4313      	orrs	r3, r2
 8006386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	2202      	movs	r2, #2
 800638c:	4393      	bics	r3, r2
 800638e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	4313      	orrs	r3, r2
 8006398:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a28      	ldr	r2, [pc, #160]	; (8006440 <TIM_OC1_SetConfig+0xfc>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d00b      	beq.n	80063ba <TIM_OC1_SetConfig+0x76>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a27      	ldr	r2, [pc, #156]	; (8006444 <TIM_OC1_SetConfig+0x100>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d007      	beq.n	80063ba <TIM_OC1_SetConfig+0x76>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a26      	ldr	r2, [pc, #152]	; (8006448 <TIM_OC1_SetConfig+0x104>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d003      	beq.n	80063ba <TIM_OC1_SetConfig+0x76>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a25      	ldr	r2, [pc, #148]	; (800644c <TIM_OC1_SetConfig+0x108>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d10c      	bne.n	80063d4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	2208      	movs	r2, #8
 80063be:	4393      	bics	r3, r2
 80063c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	2204      	movs	r2, #4
 80063d0:	4393      	bics	r3, r2
 80063d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a1a      	ldr	r2, [pc, #104]	; (8006440 <TIM_OC1_SetConfig+0xfc>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d00b      	beq.n	80063f4 <TIM_OC1_SetConfig+0xb0>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a19      	ldr	r2, [pc, #100]	; (8006444 <TIM_OC1_SetConfig+0x100>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d007      	beq.n	80063f4 <TIM_OC1_SetConfig+0xb0>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a18      	ldr	r2, [pc, #96]	; (8006448 <TIM_OC1_SetConfig+0x104>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d003      	beq.n	80063f4 <TIM_OC1_SetConfig+0xb0>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a17      	ldr	r2, [pc, #92]	; (800644c <TIM_OC1_SetConfig+0x108>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d111      	bne.n	8006418 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	4a16      	ldr	r2, [pc, #88]	; (8006450 <TIM_OC1_SetConfig+0x10c>)
 80063f8:	4013      	ands	r3, r2
 80063fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	4a15      	ldr	r2, [pc, #84]	; (8006454 <TIM_OC1_SetConfig+0x110>)
 8006400:	4013      	ands	r3, r2
 8006402:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	695b      	ldr	r3, [r3, #20]
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	4313      	orrs	r3, r2
 800640c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	4313      	orrs	r3, r2
 8006416:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	685a      	ldr	r2, [r3, #4]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	621a      	str	r2, [r3, #32]
}
 8006432:	46c0      	nop			; (mov r8, r8)
 8006434:	46bd      	mov	sp, r7
 8006436:	b006      	add	sp, #24
 8006438:	bd80      	pop	{r7, pc}
 800643a:	46c0      	nop			; (mov r8, r8)
 800643c:	fffeff8f 	.word	0xfffeff8f
 8006440:	40012c00 	.word	0x40012c00
 8006444:	40014000 	.word	0x40014000
 8006448:	40014400 	.word	0x40014400
 800644c:	40014800 	.word	0x40014800
 8006450:	fffffeff 	.word	0xfffffeff
 8006454:	fffffdff 	.word	0xfffffdff

08006458 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	2210      	movs	r2, #16
 8006468:	4393      	bics	r3, r2
 800646a:	001a      	movs	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a1b      	ldr	r3, [r3, #32]
 8006474:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	4a2e      	ldr	r2, [pc, #184]	; (8006540 <TIM_OC2_SetConfig+0xe8>)
 8006486:	4013      	ands	r3, r2
 8006488:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	4a2d      	ldr	r2, [pc, #180]	; (8006544 <TIM_OC2_SetConfig+0xec>)
 800648e:	4013      	ands	r3, r2
 8006490:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	021b      	lsls	r3, r3, #8
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	4313      	orrs	r3, r2
 800649c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	2220      	movs	r2, #32
 80064a2:	4393      	bics	r3, r2
 80064a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	011b      	lsls	r3, r3, #4
 80064ac:	697a      	ldr	r2, [r7, #20]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a24      	ldr	r2, [pc, #144]	; (8006548 <TIM_OC2_SetConfig+0xf0>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d10d      	bne.n	80064d6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	2280      	movs	r2, #128	; 0x80
 80064be:	4393      	bics	r3, r2
 80064c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	011b      	lsls	r3, r3, #4
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	2240      	movs	r2, #64	; 0x40
 80064d2:	4393      	bics	r3, r2
 80064d4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a1b      	ldr	r2, [pc, #108]	; (8006548 <TIM_OC2_SetConfig+0xf0>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d00b      	beq.n	80064f6 <TIM_OC2_SetConfig+0x9e>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a1a      	ldr	r2, [pc, #104]	; (800654c <TIM_OC2_SetConfig+0xf4>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d007      	beq.n	80064f6 <TIM_OC2_SetConfig+0x9e>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a19      	ldr	r2, [pc, #100]	; (8006550 <TIM_OC2_SetConfig+0xf8>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d003      	beq.n	80064f6 <TIM_OC2_SetConfig+0x9e>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a18      	ldr	r2, [pc, #96]	; (8006554 <TIM_OC2_SetConfig+0xfc>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d113      	bne.n	800651e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	4a17      	ldr	r2, [pc, #92]	; (8006558 <TIM_OC2_SetConfig+0x100>)
 80064fa:	4013      	ands	r3, r2
 80064fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	4a16      	ldr	r2, [pc, #88]	; (800655c <TIM_OC2_SetConfig+0x104>)
 8006502:	4013      	ands	r3, r2
 8006504:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	4313      	orrs	r3, r2
 8006510:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	4313      	orrs	r3, r2
 800651c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	685a      	ldr	r2, [r3, #4]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	621a      	str	r2, [r3, #32]
}
 8006538:	46c0      	nop			; (mov r8, r8)
 800653a:	46bd      	mov	sp, r7
 800653c:	b006      	add	sp, #24
 800653e:	bd80      	pop	{r7, pc}
 8006540:	feff8fff 	.word	0xfeff8fff
 8006544:	fffffcff 	.word	0xfffffcff
 8006548:	40012c00 	.word	0x40012c00
 800654c:	40014000 	.word	0x40014000
 8006550:	40014400 	.word	0x40014400
 8006554:	40014800 	.word	0x40014800
 8006558:	fffffbff 	.word	0xfffffbff
 800655c:	fffff7ff 	.word	0xfffff7ff

08006560 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	4a35      	ldr	r2, [pc, #212]	; (8006644 <TIM_OC3_SetConfig+0xe4>)
 8006570:	401a      	ands	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	4a2f      	ldr	r2, [pc, #188]	; (8006648 <TIM_OC3_SetConfig+0xe8>)
 800658c:	4013      	ands	r3, r2
 800658e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2203      	movs	r2, #3
 8006594:	4393      	bics	r3, r2
 8006596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	4313      	orrs	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	4a29      	ldr	r2, [pc, #164]	; (800664c <TIM_OC3_SetConfig+0xec>)
 80065a6:	4013      	ands	r3, r2
 80065a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	021b      	lsls	r3, r3, #8
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a25      	ldr	r2, [pc, #148]	; (8006650 <TIM_OC3_SetConfig+0xf0>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d10d      	bne.n	80065da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	4a24      	ldr	r2, [pc, #144]	; (8006654 <TIM_OC3_SetConfig+0xf4>)
 80065c2:	4013      	ands	r3, r2
 80065c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	021b      	lsls	r3, r3, #8
 80065cc:	697a      	ldr	r2, [r7, #20]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	4a20      	ldr	r2, [pc, #128]	; (8006658 <TIM_OC3_SetConfig+0xf8>)
 80065d6:	4013      	ands	r3, r2
 80065d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a1c      	ldr	r2, [pc, #112]	; (8006650 <TIM_OC3_SetConfig+0xf0>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d00b      	beq.n	80065fa <TIM_OC3_SetConfig+0x9a>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a1d      	ldr	r2, [pc, #116]	; (800665c <TIM_OC3_SetConfig+0xfc>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d007      	beq.n	80065fa <TIM_OC3_SetConfig+0x9a>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a1c      	ldr	r2, [pc, #112]	; (8006660 <TIM_OC3_SetConfig+0x100>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d003      	beq.n	80065fa <TIM_OC3_SetConfig+0x9a>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a1b      	ldr	r2, [pc, #108]	; (8006664 <TIM_OC3_SetConfig+0x104>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d113      	bne.n	8006622 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	4a1a      	ldr	r2, [pc, #104]	; (8006668 <TIM_OC3_SetConfig+0x108>)
 80065fe:	4013      	ands	r3, r2
 8006600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	4a19      	ldr	r2, [pc, #100]	; (800666c <TIM_OC3_SetConfig+0x10c>)
 8006606:	4013      	ands	r3, r2
 8006608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	011b      	lsls	r3, r3, #4
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	4313      	orrs	r3, r2
 8006614:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	011b      	lsls	r3, r3, #4
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	4313      	orrs	r3, r2
 8006620:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	621a      	str	r2, [r3, #32]
}
 800663c:	46c0      	nop			; (mov r8, r8)
 800663e:	46bd      	mov	sp, r7
 8006640:	b006      	add	sp, #24
 8006642:	bd80      	pop	{r7, pc}
 8006644:	fffffeff 	.word	0xfffffeff
 8006648:	fffeff8f 	.word	0xfffeff8f
 800664c:	fffffdff 	.word	0xfffffdff
 8006650:	40012c00 	.word	0x40012c00
 8006654:	fffff7ff 	.word	0xfffff7ff
 8006658:	fffffbff 	.word	0xfffffbff
 800665c:	40014000 	.word	0x40014000
 8006660:	40014400 	.word	0x40014400
 8006664:	40014800 	.word	0x40014800
 8006668:	ffffefff 	.word	0xffffefff
 800666c:	ffffdfff 	.word	0xffffdfff

08006670 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b086      	sub	sp, #24
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	4a28      	ldr	r2, [pc, #160]	; (8006720 <TIM_OC4_SetConfig+0xb0>)
 8006680:	401a      	ands	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	4a22      	ldr	r2, [pc, #136]	; (8006724 <TIM_OC4_SetConfig+0xb4>)
 800669c:	4013      	ands	r3, r2
 800669e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	4a21      	ldr	r2, [pc, #132]	; (8006728 <TIM_OC4_SetConfig+0xb8>)
 80066a4:	4013      	ands	r3, r2
 80066a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	021b      	lsls	r3, r3, #8
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	4a1d      	ldr	r2, [pc, #116]	; (800672c <TIM_OC4_SetConfig+0xbc>)
 80066b8:	4013      	ands	r3, r2
 80066ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	031b      	lsls	r3, r3, #12
 80066c2:	693a      	ldr	r2, [r7, #16]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a19      	ldr	r2, [pc, #100]	; (8006730 <TIM_OC4_SetConfig+0xc0>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d00b      	beq.n	80066e8 <TIM_OC4_SetConfig+0x78>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a18      	ldr	r2, [pc, #96]	; (8006734 <TIM_OC4_SetConfig+0xc4>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d007      	beq.n	80066e8 <TIM_OC4_SetConfig+0x78>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a17      	ldr	r2, [pc, #92]	; (8006738 <TIM_OC4_SetConfig+0xc8>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d003      	beq.n	80066e8 <TIM_OC4_SetConfig+0x78>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a16      	ldr	r2, [pc, #88]	; (800673c <TIM_OC4_SetConfig+0xcc>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d109      	bne.n	80066fc <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	4a15      	ldr	r2, [pc, #84]	; (8006740 <TIM_OC4_SetConfig+0xd0>)
 80066ec:	4013      	ands	r3, r2
 80066ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	695b      	ldr	r3, [r3, #20]
 80066f4:	019b      	lsls	r3, r3, #6
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	685a      	ldr	r2, [r3, #4]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	693a      	ldr	r2, [r7, #16]
 8006714:	621a      	str	r2, [r3, #32]
}
 8006716:	46c0      	nop			; (mov r8, r8)
 8006718:	46bd      	mov	sp, r7
 800671a:	b006      	add	sp, #24
 800671c:	bd80      	pop	{r7, pc}
 800671e:	46c0      	nop			; (mov r8, r8)
 8006720:	ffffefff 	.word	0xffffefff
 8006724:	feff8fff 	.word	0xfeff8fff
 8006728:	fffffcff 	.word	0xfffffcff
 800672c:	ffffdfff 	.word	0xffffdfff
 8006730:	40012c00 	.word	0x40012c00
 8006734:	40014000 	.word	0x40014000
 8006738:	40014400 	.word	0x40014400
 800673c:	40014800 	.word	0x40014800
 8006740:	ffffbfff 	.word	0xffffbfff

08006744 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	4a25      	ldr	r2, [pc, #148]	; (80067e8 <TIM_OC5_SetConfig+0xa4>)
 8006754:	401a      	ands	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a1b      	ldr	r3, [r3, #32]
 800675e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800676a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4a1f      	ldr	r2, [pc, #124]	; (80067ec <TIM_OC5_SetConfig+0xa8>)
 8006770:	4013      	ands	r3, r2
 8006772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	4313      	orrs	r3, r2
 800677c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	4a1b      	ldr	r2, [pc, #108]	; (80067f0 <TIM_OC5_SetConfig+0xac>)
 8006782:	4013      	ands	r3, r2
 8006784:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	041b      	lsls	r3, r3, #16
 800678c:	693a      	ldr	r2, [r7, #16]
 800678e:	4313      	orrs	r3, r2
 8006790:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a17      	ldr	r2, [pc, #92]	; (80067f4 <TIM_OC5_SetConfig+0xb0>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d00b      	beq.n	80067b2 <TIM_OC5_SetConfig+0x6e>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a16      	ldr	r2, [pc, #88]	; (80067f8 <TIM_OC5_SetConfig+0xb4>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d007      	beq.n	80067b2 <TIM_OC5_SetConfig+0x6e>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a15      	ldr	r2, [pc, #84]	; (80067fc <TIM_OC5_SetConfig+0xb8>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d003      	beq.n	80067b2 <TIM_OC5_SetConfig+0x6e>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a14      	ldr	r2, [pc, #80]	; (8006800 <TIM_OC5_SetConfig+0xbc>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d109      	bne.n	80067c6 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	4a0c      	ldr	r2, [pc, #48]	; (80067e8 <TIM_OC5_SetConfig+0xa4>)
 80067b6:	4013      	ands	r3, r2
 80067b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	021b      	lsls	r3, r3, #8
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	697a      	ldr	r2, [r7, #20]
 80067ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	685a      	ldr	r2, [r3, #4]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	621a      	str	r2, [r3, #32]
}
 80067e0:	46c0      	nop			; (mov r8, r8)
 80067e2:	46bd      	mov	sp, r7
 80067e4:	b006      	add	sp, #24
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	fffeffff 	.word	0xfffeffff
 80067ec:	fffeff8f 	.word	0xfffeff8f
 80067f0:	fffdffff 	.word	0xfffdffff
 80067f4:	40012c00 	.word	0x40012c00
 80067f8:	40014000 	.word	0x40014000
 80067fc:	40014400 	.word	0x40014400
 8006800:	40014800 	.word	0x40014800

08006804 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b086      	sub	sp, #24
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	4a26      	ldr	r2, [pc, #152]	; (80068ac <TIM_OC6_SetConfig+0xa8>)
 8006814:	401a      	ands	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800682a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	4a20      	ldr	r2, [pc, #128]	; (80068b0 <TIM_OC6_SetConfig+0xac>)
 8006830:	4013      	ands	r3, r2
 8006832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	021b      	lsls	r3, r3, #8
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	4313      	orrs	r3, r2
 800683e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	4a1c      	ldr	r2, [pc, #112]	; (80068b4 <TIM_OC6_SetConfig+0xb0>)
 8006844:	4013      	ands	r3, r2
 8006846:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	051b      	lsls	r3, r3, #20
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	4313      	orrs	r3, r2
 8006852:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a18      	ldr	r2, [pc, #96]	; (80068b8 <TIM_OC6_SetConfig+0xb4>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d00b      	beq.n	8006874 <TIM_OC6_SetConfig+0x70>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a17      	ldr	r2, [pc, #92]	; (80068bc <TIM_OC6_SetConfig+0xb8>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d007      	beq.n	8006874 <TIM_OC6_SetConfig+0x70>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a16      	ldr	r2, [pc, #88]	; (80068c0 <TIM_OC6_SetConfig+0xbc>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d003      	beq.n	8006874 <TIM_OC6_SetConfig+0x70>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a15      	ldr	r2, [pc, #84]	; (80068c4 <TIM_OC6_SetConfig+0xc0>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d109      	bne.n	8006888 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	4a14      	ldr	r2, [pc, #80]	; (80068c8 <TIM_OC6_SetConfig+0xc4>)
 8006878:	4013      	ands	r3, r2
 800687a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	695b      	ldr	r3, [r3, #20]
 8006880:	029b      	lsls	r3, r3, #10
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	4313      	orrs	r3, r2
 8006886:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	685a      	ldr	r2, [r3, #4]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	621a      	str	r2, [r3, #32]
}
 80068a2:	46c0      	nop			; (mov r8, r8)
 80068a4:	46bd      	mov	sp, r7
 80068a6:	b006      	add	sp, #24
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	46c0      	nop			; (mov r8, r8)
 80068ac:	ffefffff 	.word	0xffefffff
 80068b0:	feff8fff 	.word	0xfeff8fff
 80068b4:	ffdfffff 	.word	0xffdfffff
 80068b8:	40012c00 	.word	0x40012c00
 80068bc:	40014000 	.word	0x40014000
 80068c0:	40014400 	.word	0x40014400
 80068c4:	40014800 	.word	0x40014800
 80068c8:	fffbffff 	.word	0xfffbffff

080068cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b086      	sub	sp, #24
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	221f      	movs	r2, #31
 80068dc:	4013      	ands	r3, r2
 80068de:	2201      	movs	r2, #1
 80068e0:	409a      	lsls	r2, r3
 80068e2:	0013      	movs	r3, r2
 80068e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	43d2      	mvns	r2, r2
 80068ee:	401a      	ands	r2, r3
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6a1a      	ldr	r2, [r3, #32]
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	211f      	movs	r1, #31
 80068fc:	400b      	ands	r3, r1
 80068fe:	6879      	ldr	r1, [r7, #4]
 8006900:	4099      	lsls	r1, r3
 8006902:	000b      	movs	r3, r1
 8006904:	431a      	orrs	r2, r3
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	621a      	str	r2, [r3, #32]
}
 800690a:	46c0      	nop			; (mov r8, r8)
 800690c:	46bd      	mov	sp, r7
 800690e:	b006      	add	sp, #24
 8006910:	bd80      	pop	{r7, pc}
	...

08006914 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	223c      	movs	r2, #60	; 0x3c
 8006922:	5c9b      	ldrb	r3, [r3, r2]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d101      	bne.n	800692c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006928:	2302      	movs	r3, #2
 800692a:	e055      	b.n	80069d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	223c      	movs	r2, #60	; 0x3c
 8006930:	2101      	movs	r1, #1
 8006932:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	223d      	movs	r2, #61	; 0x3d
 8006938:	2102      	movs	r1, #2
 800693a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a23      	ldr	r2, [pc, #140]	; (80069e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d108      	bne.n	8006968 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	4a22      	ldr	r2, [pc, #136]	; (80069e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800695a:	4013      	ands	r3, r2
 800695c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	4313      	orrs	r3, r2
 8006966:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2270      	movs	r2, #112	; 0x70
 800696c:	4393      	bics	r3, r2
 800696e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	4313      	orrs	r3, r2
 8006978:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a16      	ldr	r2, [pc, #88]	; (80069e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d00f      	beq.n	80069ac <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	2380      	movs	r3, #128	; 0x80
 8006992:	05db      	lsls	r3, r3, #23
 8006994:	429a      	cmp	r2, r3
 8006996:	d009      	beq.n	80069ac <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a12      	ldr	r2, [pc, #72]	; (80069e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d004      	beq.n	80069ac <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a11      	ldr	r2, [pc, #68]	; (80069ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d10c      	bne.n	80069c6 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	2280      	movs	r2, #128	; 0x80
 80069b0:	4393      	bics	r3, r2
 80069b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	223d      	movs	r2, #61	; 0x3d
 80069ca:	2101      	movs	r1, #1
 80069cc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	223c      	movs	r2, #60	; 0x3c
 80069d2:	2100      	movs	r1, #0
 80069d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	0018      	movs	r0, r3
 80069da:	46bd      	mov	sp, r7
 80069dc:	b004      	add	sp, #16
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	40012c00 	.word	0x40012c00
 80069e4:	ff0fffff 	.word	0xff0fffff
 80069e8:	40000400 	.word	0x40000400
 80069ec:	40014000 	.word	0x40014000

080069f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80069fa:	2300      	movs	r3, #0
 80069fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	223c      	movs	r2, #60	; 0x3c
 8006a02:	5c9b      	ldrb	r3, [r3, r2]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d101      	bne.n	8006a0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a08:	2302      	movs	r3, #2
 8006a0a:	e079      	b.n	8006b00 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	223c      	movs	r2, #60	; 0x3c
 8006a10:	2101      	movs	r1, #1
 8006a12:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	22ff      	movs	r2, #255	; 0xff
 8006a18:	4393      	bics	r3, r2
 8006a1a:	001a      	movs	r2, r3
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	4a38      	ldr	r2, [pc, #224]	; (8006b08 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8006a28:	401a      	ands	r2, r3
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	4a35      	ldr	r2, [pc, #212]	; (8006b0c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006a36:	401a      	ands	r2, r3
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	4a33      	ldr	r2, [pc, #204]	; (8006b10 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006a44:	401a      	ands	r2, r3
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	4a30      	ldr	r2, [pc, #192]	; (8006b14 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006a52:	401a      	ands	r2, r3
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	4a2e      	ldr	r2, [pc, #184]	; (8006b18 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8006a60:	401a      	ands	r2, r3
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	4a2b      	ldr	r2, [pc, #172]	; (8006b1c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8006a6e:	401a      	ands	r2, r3
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a74:	4313      	orrs	r3, r2
 8006a76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	4a29      	ldr	r2, [pc, #164]	; (8006b20 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8006a7c:	401a      	ands	r2, r3
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	041b      	lsls	r3, r3, #16
 8006a84:	4313      	orrs	r3, r2
 8006a86:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a25      	ldr	r2, [pc, #148]	; (8006b24 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d106      	bne.n	8006aa0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	4a24      	ldr	r2, [pc, #144]	; (8006b28 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006a96:	401a      	ands	r2, r3
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	69db      	ldr	r3, [r3, #28]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a1f      	ldr	r2, [pc, #124]	; (8006b24 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d121      	bne.n	8006aee <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	4a1f      	ldr	r2, [pc, #124]	; (8006b2c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006aae:	401a      	ands	r2, r3
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab4:	051b      	lsls	r3, r3, #20
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	4a1c      	ldr	r2, [pc, #112]	; (8006b30 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8006abe:	401a      	ands	r2, r3
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	6a1b      	ldr	r3, [r3, #32]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	4a1a      	ldr	r2, [pc, #104]	; (8006b34 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8006acc:	401a      	ands	r2, r3
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a12      	ldr	r2, [pc, #72]	; (8006b24 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d106      	bne.n	8006aee <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	4a15      	ldr	r2, [pc, #84]	; (8006b38 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8006ae4:	401a      	ands	r2, r3
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aea:	4313      	orrs	r3, r2
 8006aec:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	223c      	movs	r2, #60	; 0x3c
 8006afa:	2100      	movs	r1, #0
 8006afc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	0018      	movs	r0, r3
 8006b02:	46bd      	mov	sp, r7
 8006b04:	b004      	add	sp, #16
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	fffffcff 	.word	0xfffffcff
 8006b0c:	fffffbff 	.word	0xfffffbff
 8006b10:	fffff7ff 	.word	0xfffff7ff
 8006b14:	ffffefff 	.word	0xffffefff
 8006b18:	ffffdfff 	.word	0xffffdfff
 8006b1c:	ffffbfff 	.word	0xffffbfff
 8006b20:	fff0ffff 	.word	0xfff0ffff
 8006b24:	40012c00 	.word	0x40012c00
 8006b28:	efffffff 	.word	0xefffffff
 8006b2c:	ff0fffff 	.word	0xff0fffff
 8006b30:	feffffff 	.word	0xfeffffff
 8006b34:	fdffffff 	.word	0xfdffffff
 8006b38:	dfffffff 	.word	0xdfffffff

08006b3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b44:	46c0      	nop			; (mov r8, r8)
 8006b46:	46bd      	mov	sp, r7
 8006b48:	b002      	add	sp, #8
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b54:	46c0      	nop			; (mov r8, r8)
 8006b56:	46bd      	mov	sp, r7
 8006b58:	b002      	add	sp, #8
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b64:	46c0      	nop			; (mov r8, r8)
 8006b66:	46bd      	mov	sp, r7
 8006b68:	b002      	add	sp, #8
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <fe25519_unpack>:
 8006b6c:	788b      	ldrb	r3, [r1, #2]
 8006b6e:	78ca      	ldrb	r2, [r1, #3]
 8006b70:	041b      	lsls	r3, r3, #16
 8006b72:	0612      	lsls	r2, r2, #24
 8006b74:	4313      	orrs	r3, r2
 8006b76:	780a      	ldrb	r2, [r1, #0]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	784a      	ldrb	r2, [r1, #1]
 8006b7c:	0212      	lsls	r2, r2, #8
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	6003      	str	r3, [r0, #0]
 8006b82:	79cb      	ldrb	r3, [r1, #7]
 8006b84:	798a      	ldrb	r2, [r1, #6]
 8006b86:	061b      	lsls	r3, r3, #24
 8006b88:	0412      	lsls	r2, r2, #16
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	790a      	ldrb	r2, [r1, #4]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	794a      	ldrb	r2, [r1, #5]
 8006b92:	0212      	lsls	r2, r2, #8
 8006b94:	4313      	orrs	r3, r2
 8006b96:	6043      	str	r3, [r0, #4]
 8006b98:	7acb      	ldrb	r3, [r1, #11]
 8006b9a:	7a8a      	ldrb	r2, [r1, #10]
 8006b9c:	061b      	lsls	r3, r3, #24
 8006b9e:	0412      	lsls	r2, r2, #16
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	7a0a      	ldrb	r2, [r1, #8]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	7a4a      	ldrb	r2, [r1, #9]
 8006ba8:	0212      	lsls	r2, r2, #8
 8006baa:	4313      	orrs	r3, r2
 8006bac:	6083      	str	r3, [r0, #8]
 8006bae:	7bcb      	ldrb	r3, [r1, #15]
 8006bb0:	7b8a      	ldrb	r2, [r1, #14]
 8006bb2:	061b      	lsls	r3, r3, #24
 8006bb4:	0412      	lsls	r2, r2, #16
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	7b0a      	ldrb	r2, [r1, #12]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	7b4a      	ldrb	r2, [r1, #13]
 8006bbe:	0212      	lsls	r2, r2, #8
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	60c3      	str	r3, [r0, #12]
 8006bc4:	7ccb      	ldrb	r3, [r1, #19]
 8006bc6:	7c8a      	ldrb	r2, [r1, #18]
 8006bc8:	061b      	lsls	r3, r3, #24
 8006bca:	0412      	lsls	r2, r2, #16
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	7c0a      	ldrb	r2, [r1, #16]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	7c4a      	ldrb	r2, [r1, #17]
 8006bd4:	0212      	lsls	r2, r2, #8
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	6103      	str	r3, [r0, #16]
 8006bda:	7dcb      	ldrb	r3, [r1, #23]
 8006bdc:	7d8a      	ldrb	r2, [r1, #22]
 8006bde:	061b      	lsls	r3, r3, #24
 8006be0:	0412      	lsls	r2, r2, #16
 8006be2:	4313      	orrs	r3, r2
 8006be4:	7d0a      	ldrb	r2, [r1, #20]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	7d4a      	ldrb	r2, [r1, #21]
 8006bea:	0212      	lsls	r2, r2, #8
 8006bec:	4313      	orrs	r3, r2
 8006bee:	6143      	str	r3, [r0, #20]
 8006bf0:	7ecb      	ldrb	r3, [r1, #27]
 8006bf2:	7e8a      	ldrb	r2, [r1, #26]
 8006bf4:	061b      	lsls	r3, r3, #24
 8006bf6:	0412      	lsls	r2, r2, #16
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	7e0a      	ldrb	r2, [r1, #24]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	7e4a      	ldrb	r2, [r1, #25]
 8006c00:	0212      	lsls	r2, r2, #8
 8006c02:	4313      	orrs	r3, r2
 8006c04:	6183      	str	r3, [r0, #24]
 8006c06:	7fcb      	ldrb	r3, [r1, #31]
 8006c08:	7f8a      	ldrb	r2, [r1, #30]
 8006c0a:	061b      	lsls	r3, r3, #24
 8006c0c:	0412      	lsls	r2, r2, #16
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	7f0a      	ldrb	r2, [r1, #28]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	7f4a      	ldrb	r2, [r1, #29]
 8006c16:	0212      	lsls	r2, r2, #8
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	005b      	lsls	r3, r3, #1
 8006c1c:	085b      	lsrs	r3, r3, #1
 8006c1e:	61c3      	str	r3, [r0, #28]
 8006c20:	4770      	bx	lr
 8006c22:	46c0      	nop			; (mov r8, r8)

08006c24 <fe25519_cmov>:
 8006c24:	680b      	ldr	r3, [r1, #0]
 8006c26:	b510      	push	{r4, lr}
 8006c28:	6804      	ldr	r4, [r0, #0]
 8006c2a:	4252      	negs	r2, r2
 8006c2c:	4063      	eors	r3, r4
 8006c2e:	4013      	ands	r3, r2
 8006c30:	4063      	eors	r3, r4
 8006c32:	6003      	str	r3, [r0, #0]
 8006c34:	684b      	ldr	r3, [r1, #4]
 8006c36:	6844      	ldr	r4, [r0, #4]
 8006c38:	4063      	eors	r3, r4
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	4063      	eors	r3, r4
 8006c3e:	6043      	str	r3, [r0, #4]
 8006c40:	688b      	ldr	r3, [r1, #8]
 8006c42:	6884      	ldr	r4, [r0, #8]
 8006c44:	4063      	eors	r3, r4
 8006c46:	4013      	ands	r3, r2
 8006c48:	4063      	eors	r3, r4
 8006c4a:	6083      	str	r3, [r0, #8]
 8006c4c:	68cb      	ldr	r3, [r1, #12]
 8006c4e:	68c4      	ldr	r4, [r0, #12]
 8006c50:	4063      	eors	r3, r4
 8006c52:	4013      	ands	r3, r2
 8006c54:	4063      	eors	r3, r4
 8006c56:	60c3      	str	r3, [r0, #12]
 8006c58:	690b      	ldr	r3, [r1, #16]
 8006c5a:	6904      	ldr	r4, [r0, #16]
 8006c5c:	4063      	eors	r3, r4
 8006c5e:	4013      	ands	r3, r2
 8006c60:	4063      	eors	r3, r4
 8006c62:	6103      	str	r3, [r0, #16]
 8006c64:	6944      	ldr	r4, [r0, #20]
 8006c66:	694b      	ldr	r3, [r1, #20]
 8006c68:	4063      	eors	r3, r4
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	4063      	eors	r3, r4
 8006c6e:	6143      	str	r3, [r0, #20]
 8006c70:	6984      	ldr	r4, [r0, #24]
 8006c72:	698b      	ldr	r3, [r1, #24]
 8006c74:	4063      	eors	r3, r4
 8006c76:	4013      	ands	r3, r2
 8006c78:	4063      	eors	r3, r4
 8006c7a:	6183      	str	r3, [r0, #24]
 8006c7c:	69c4      	ldr	r4, [r0, #28]
 8006c7e:	69cb      	ldr	r3, [r1, #28]
 8006c80:	4063      	eors	r3, r4
 8006c82:	401a      	ands	r2, r3
 8006c84:	4062      	eors	r2, r4
 8006c86:	61c2      	str	r2, [r0, #28]
 8006c88:	bd10      	pop	{r4, pc}
 8006c8a:	46c0      	nop			; (mov r8, r8)

08006c8c <fe25519_copy>:
 8006c8c:	680b      	ldr	r3, [r1, #0]
 8006c8e:	6003      	str	r3, [r0, #0]
 8006c90:	684b      	ldr	r3, [r1, #4]
 8006c92:	6043      	str	r3, [r0, #4]
 8006c94:	688b      	ldr	r3, [r1, #8]
 8006c96:	6083      	str	r3, [r0, #8]
 8006c98:	68cb      	ldr	r3, [r1, #12]
 8006c9a:	60c3      	str	r3, [r0, #12]
 8006c9c:	690b      	ldr	r3, [r1, #16]
 8006c9e:	6103      	str	r3, [r0, #16]
 8006ca0:	694b      	ldr	r3, [r1, #20]
 8006ca2:	6143      	str	r3, [r0, #20]
 8006ca4:	698b      	ldr	r3, [r1, #24]
 8006ca6:	6183      	str	r3, [r0, #24]
 8006ca8:	69cb      	ldr	r3, [r1, #28]
 8006caa:	61c3      	str	r3, [r0, #28]
 8006cac:	4770      	bx	lr
 8006cae:	46c0      	nop			; (mov r8, r8)

08006cb0 <fe25519_setone>:
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	6003      	str	r3, [r0, #0]
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	6043      	str	r3, [r0, #4]
 8006cb8:	6083      	str	r3, [r0, #8]
 8006cba:	60c3      	str	r3, [r0, #12]
 8006cbc:	6103      	str	r3, [r0, #16]
 8006cbe:	6143      	str	r3, [r0, #20]
 8006cc0:	6183      	str	r3, [r0, #24]
 8006cc2:	61c3      	str	r3, [r0, #28]
 8006cc4:	4770      	bx	lr
 8006cc6:	46c0      	nop			; (mov r8, r8)

08006cc8 <fe25519_setzero>:
 8006cc8:	b510      	push	{r4, lr}
 8006cca:	2220      	movs	r2, #32
 8006ccc:	2100      	movs	r1, #0
 8006cce:	f001 faf8 	bl	80082c2 <memset>
 8006cd2:	bd10      	pop	{r4, pc}

08006cd4 <fe25519_add>:
 8006cd4:	000b      	movs	r3, r1
 8006cd6:	6809      	ldr	r1, [r1, #0]
 8006cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cda:	464f      	mov	r7, r9
 8006cdc:	4689      	mov	r9, r1
 8006cde:	6811      	ldr	r1, [r2, #0]
 8006ce0:	46d6      	mov	lr, sl
 8006ce2:	4646      	mov	r6, r8
 8006ce4:	000c      	movs	r4, r1
 8006ce6:	4680      	mov	r8, r0
 8006ce8:	468a      	mov	sl, r1
 8006cea:	2500      	movs	r5, #0
 8006cec:	4648      	mov	r0, r9
 8006cee:	2100      	movs	r1, #0
 8006cf0:	1900      	adds	r0, r0, r4
 8006cf2:	4169      	adcs	r1, r5
 8006cf4:	b5c0      	push	{r6, r7, lr}
 8006cf6:	000c      	movs	r4, r1
 8006cf8:	2700      	movs	r7, #0
 8006cfa:	2100      	movs	r1, #0
 8006cfc:	6850      	ldr	r0, [r2, #4]
 8006cfe:	685e      	ldr	r6, [r3, #4]
 8006d00:	2500      	movs	r5, #0
 8006d02:	1980      	adds	r0, r0, r6
 8006d04:	4179      	adcs	r1, r7
 8006d06:	1900      	adds	r0, r0, r4
 8006d08:	4169      	adcs	r1, r5
 8006d0a:	b08c      	sub	sp, #48	; 0x30
 8006d0c:	9000      	str	r0, [sp, #0]
 8006d0e:	9101      	str	r1, [sp, #4]
 8006d10:	000c      	movs	r4, r1
 8006d12:	2700      	movs	r7, #0
 8006d14:	2100      	movs	r1, #0
 8006d16:	6890      	ldr	r0, [r2, #8]
 8006d18:	689e      	ldr	r6, [r3, #8]
 8006d1a:	2500      	movs	r5, #0
 8006d1c:	1980      	adds	r0, r0, r6
 8006d1e:	4179      	adcs	r1, r7
 8006d20:	0006      	movs	r6, r0
 8006d22:	000f      	movs	r7, r1
 8006d24:	1936      	adds	r6, r6, r4
 8006d26:	416f      	adcs	r7, r5
 8006d28:	2100      	movs	r1, #0
 8006d2a:	9602      	str	r6, [sp, #8]
 8006d2c:	9703      	str	r7, [sp, #12]
 8006d2e:	003c      	movs	r4, r7
 8006d30:	2700      	movs	r7, #0
 8006d32:	68d6      	ldr	r6, [r2, #12]
 8006d34:	68d8      	ldr	r0, [r3, #12]
 8006d36:	2500      	movs	r5, #0
 8006d38:	1980      	adds	r0, r0, r6
 8006d3a:	4179      	adcs	r1, r7
 8006d3c:	1900      	adds	r0, r0, r4
 8006d3e:	4169      	adcs	r1, r5
 8006d40:	2700      	movs	r7, #0
 8006d42:	9004      	str	r0, [sp, #16]
 8006d44:	9105      	str	r1, [sp, #20]
 8006d46:	000c      	movs	r4, r1
 8006d48:	2100      	movs	r1, #0
 8006d4a:	6916      	ldr	r6, [r2, #16]
 8006d4c:	6918      	ldr	r0, [r3, #16]
 8006d4e:	2500      	movs	r5, #0
 8006d50:	1980      	adds	r0, r0, r6
 8006d52:	4179      	adcs	r1, r7
 8006d54:	0006      	movs	r6, r0
 8006d56:	000f      	movs	r7, r1
 8006d58:	1936      	adds	r6, r6, r4
 8006d5a:	416f      	adcs	r7, r5
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	9606      	str	r6, [sp, #24]
 8006d60:	9707      	str	r7, [sp, #28]
 8006d62:	003c      	movs	r4, r7
 8006d64:	2700      	movs	r7, #0
 8006d66:	6956      	ldr	r6, [r2, #20]
 8006d68:	6958      	ldr	r0, [r3, #20]
 8006d6a:	2500      	movs	r5, #0
 8006d6c:	1980      	adds	r0, r0, r6
 8006d6e:	4179      	adcs	r1, r7
 8006d70:	1900      	adds	r0, r0, r4
 8006d72:	4169      	adcs	r1, r5
 8006d74:	2700      	movs	r7, #0
 8006d76:	9008      	str	r0, [sp, #32]
 8006d78:	9109      	str	r1, [sp, #36]	; 0x24
 8006d7a:	000c      	movs	r4, r1
 8006d7c:	2100      	movs	r1, #0
 8006d7e:	6996      	ldr	r6, [r2, #24]
 8006d80:	6998      	ldr	r0, [r3, #24]
 8006d82:	2500      	movs	r5, #0
 8006d84:	1980      	adds	r0, r0, r6
 8006d86:	4179      	adcs	r1, r7
 8006d88:	0006      	movs	r6, r0
 8006d8a:	000f      	movs	r7, r1
 8006d8c:	1936      	adds	r6, r6, r4
 8006d8e:	416f      	adcs	r7, r5
 8006d90:	003d      	movs	r5, r7
 8006d92:	0034      	movs	r4, r6
 8006d94:	2100      	movs	r1, #0
 8006d96:	940a      	str	r4, [sp, #40]	; 0x28
 8006d98:	950b      	str	r5, [sp, #44]	; 0x2c
 8006d9a:	002e      	movs	r6, r5
 8006d9c:	2500      	movs	r5, #0
 8006d9e:	69d4      	ldr	r4, [r2, #28]
 8006da0:	69d8      	ldr	r0, [r3, #28]
 8006da2:	2700      	movs	r7, #0
 8006da4:	1900      	adds	r0, r0, r4
 8006da6:	4169      	adcs	r1, r5
 8006da8:	1836      	adds	r6, r6, r0
 8006daa:	414f      	adcs	r7, r1
 8006dac:	2226      	movs	r2, #38	; 0x26
 8006dae:	2300      	movs	r3, #0
 8006db0:	0038      	movs	r0, r7
 8006db2:	44ca      	add	sl, r9
 8006db4:	2100      	movs	r1, #0
 8006db6:	f7f9 fa33 	bl	8000220 <__aeabi_lmul>
 8006dba:	4652      	mov	r2, sl
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	1880      	adds	r0, r0, r2
 8006dc0:	4159      	adcs	r1, r3
 8006dc2:	2500      	movs	r5, #0
 8006dc4:	000c      	movs	r4, r1
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	9a00      	ldr	r2, [sp, #0]
 8006dca:	1912      	adds	r2, r2, r4
 8006dcc:	416b      	adcs	r3, r5
 8006dce:	4645      	mov	r5, r8
 8006dd0:	001c      	movs	r4, r3
 8006dd2:	606a      	str	r2, [r5, #4]
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	2500      	movs	r5, #0
 8006dd8:	9a02      	ldr	r2, [sp, #8]
 8006dda:	1912      	adds	r2, r2, r4
 8006ddc:	416b      	adcs	r3, r5
 8006dde:	4645      	mov	r5, r8
 8006de0:	001c      	movs	r4, r3
 8006de2:	60aa      	str	r2, [r5, #8]
 8006de4:	2300      	movs	r3, #0
 8006de6:	2500      	movs	r5, #0
 8006de8:	9a04      	ldr	r2, [sp, #16]
 8006dea:	1912      	adds	r2, r2, r4
 8006dec:	416b      	adcs	r3, r5
 8006dee:	4645      	mov	r5, r8
 8006df0:	001c      	movs	r4, r3
 8006df2:	60ea      	str	r2, [r5, #12]
 8006df4:	2300      	movs	r3, #0
 8006df6:	2500      	movs	r5, #0
 8006df8:	9a06      	ldr	r2, [sp, #24]
 8006dfa:	1912      	adds	r2, r2, r4
 8006dfc:	416b      	adcs	r3, r5
 8006dfe:	4645      	mov	r5, r8
 8006e00:	001c      	movs	r4, r3
 8006e02:	612a      	str	r2, [r5, #16]
 8006e04:	2300      	movs	r3, #0
 8006e06:	2500      	movs	r5, #0
 8006e08:	9a08      	ldr	r2, [sp, #32]
 8006e0a:	1912      	adds	r2, r2, r4
 8006e0c:	416b      	adcs	r3, r5
 8006e0e:	4645      	mov	r5, r8
 8006e10:	001c      	movs	r4, r3
 8006e12:	616a      	str	r2, [r5, #20]
 8006e14:	2300      	movs	r3, #0
 8006e16:	2500      	movs	r5, #0
 8006e18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e1a:	1912      	adds	r2, r2, r4
 8006e1c:	416b      	adcs	r3, r5
 8006e1e:	4644      	mov	r4, r8
 8006e20:	2500      	movs	r5, #0
 8006e22:	61a2      	str	r2, [r4, #24]
 8006e24:	0032      	movs	r2, r6
 8006e26:	001c      	movs	r4, r3
 8006e28:	2300      	movs	r3, #0
 8006e2a:	18a4      	adds	r4, r4, r2
 8006e2c:	415d      	adcs	r5, r3
 8006e2e:	2226      	movs	r2, #38	; 0x26
 8006e30:	4643      	mov	r3, r8
 8006e32:	436a      	muls	r2, r5
 8006e34:	1810      	adds	r0, r2, r0
 8006e36:	61dc      	str	r4, [r3, #28]
 8006e38:	6018      	str	r0, [r3, #0]
 8006e3a:	b00c      	add	sp, #48	; 0x30
 8006e3c:	bc1c      	pop	{r2, r3, r4}
 8006e3e:	4690      	mov	r8, r2
 8006e40:	4699      	mov	r9, r3
 8006e42:	46a2      	mov	sl, r4
 8006e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e46:	46c0      	nop			; (mov r8, r8)

08006e48 <fe25519_sub>:
 8006e48:	000b      	movs	r3, r1
 8006e4a:	6809      	ldr	r1, [r1, #0]
 8006e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e4e:	46d6      	mov	lr, sl
 8006e50:	468a      	mov	sl, r1
 8006e52:	6811      	ldr	r1, [r2, #0]
 8006e54:	464f      	mov	r7, r9
 8006e56:	4689      	mov	r9, r1
 8006e58:	4646      	mov	r6, r8
 8006e5a:	464c      	mov	r4, r9
 8006e5c:	4680      	mov	r8, r0
 8006e5e:	2500      	movs	r5, #0
 8006e60:	4650      	mov	r0, sl
 8006e62:	2100      	movs	r1, #0
 8006e64:	1b00      	subs	r0, r0, r4
 8006e66:	41a9      	sbcs	r1, r5
 8006e68:	b5c0      	push	{r6, r7, lr}
 8006e6a:	000c      	movs	r4, r1
 8006e6c:	17cd      	asrs	r5, r1, #31
 8006e6e:	2700      	movs	r7, #0
 8006e70:	2100      	movs	r1, #0
 8006e72:	6856      	ldr	r6, [r2, #4]
 8006e74:	6858      	ldr	r0, [r3, #4]
 8006e76:	b08c      	sub	sp, #48	; 0x30
 8006e78:	1b80      	subs	r0, r0, r6
 8006e7a:	41b9      	sbcs	r1, r7
 8006e7c:	1900      	adds	r0, r0, r4
 8006e7e:	4169      	adcs	r1, r5
 8006e80:	2700      	movs	r7, #0
 8006e82:	9000      	str	r0, [sp, #0]
 8006e84:	9101      	str	r1, [sp, #4]
 8006e86:	000c      	movs	r4, r1
 8006e88:	17cd      	asrs	r5, r1, #31
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	6896      	ldr	r6, [r2, #8]
 8006e8e:	6898      	ldr	r0, [r3, #8]
 8006e90:	1b80      	subs	r0, r0, r6
 8006e92:	41b9      	sbcs	r1, r7
 8006e94:	0006      	movs	r6, r0
 8006e96:	000f      	movs	r7, r1
 8006e98:	1936      	adds	r6, r6, r4
 8006e9a:	416f      	adcs	r7, r5
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	9602      	str	r6, [sp, #8]
 8006ea0:	9703      	str	r7, [sp, #12]
 8006ea2:	003c      	movs	r4, r7
 8006ea4:	17fd      	asrs	r5, r7, #31
 8006ea6:	2700      	movs	r7, #0
 8006ea8:	68d6      	ldr	r6, [r2, #12]
 8006eaa:	68d8      	ldr	r0, [r3, #12]
 8006eac:	1b80      	subs	r0, r0, r6
 8006eae:	41b9      	sbcs	r1, r7
 8006eb0:	1900      	adds	r0, r0, r4
 8006eb2:	4169      	adcs	r1, r5
 8006eb4:	2700      	movs	r7, #0
 8006eb6:	9004      	str	r0, [sp, #16]
 8006eb8:	9105      	str	r1, [sp, #20]
 8006eba:	000c      	movs	r4, r1
 8006ebc:	17cd      	asrs	r5, r1, #31
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	6916      	ldr	r6, [r2, #16]
 8006ec2:	6918      	ldr	r0, [r3, #16]
 8006ec4:	1b80      	subs	r0, r0, r6
 8006ec6:	41b9      	sbcs	r1, r7
 8006ec8:	0006      	movs	r6, r0
 8006eca:	000f      	movs	r7, r1
 8006ecc:	1936      	adds	r6, r6, r4
 8006ece:	416f      	adcs	r7, r5
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	9606      	str	r6, [sp, #24]
 8006ed4:	9707      	str	r7, [sp, #28]
 8006ed6:	003c      	movs	r4, r7
 8006ed8:	17fd      	asrs	r5, r7, #31
 8006eda:	2700      	movs	r7, #0
 8006edc:	6956      	ldr	r6, [r2, #20]
 8006ede:	6958      	ldr	r0, [r3, #20]
 8006ee0:	1b80      	subs	r0, r0, r6
 8006ee2:	41b9      	sbcs	r1, r7
 8006ee4:	1900      	adds	r0, r0, r4
 8006ee6:	4169      	adcs	r1, r5
 8006ee8:	2700      	movs	r7, #0
 8006eea:	9008      	str	r0, [sp, #32]
 8006eec:	9109      	str	r1, [sp, #36]	; 0x24
 8006eee:	000c      	movs	r4, r1
 8006ef0:	17cd      	asrs	r5, r1, #31
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	6996      	ldr	r6, [r2, #24]
 8006ef6:	6998      	ldr	r0, [r3, #24]
 8006ef8:	1b80      	subs	r0, r0, r6
 8006efa:	41b9      	sbcs	r1, r7
 8006efc:	0006      	movs	r6, r0
 8006efe:	000f      	movs	r7, r1
 8006f00:	1936      	adds	r6, r6, r4
 8006f02:	416f      	adcs	r7, r5
 8006f04:	0034      	movs	r4, r6
 8006f06:	003d      	movs	r5, r7
 8006f08:	0038      	movs	r0, r7
 8006f0a:	940a      	str	r4, [sp, #40]	; 0x28
 8006f0c:	950b      	str	r5, [sp, #44]	; 0x2c
 8006f0e:	17f9      	asrs	r1, r7, #31
 8006f10:	2500      	movs	r5, #0
 8006f12:	2700      	movs	r7, #0
 8006f14:	69d4      	ldr	r4, [r2, #28]
 8006f16:	69de      	ldr	r6, [r3, #28]
 8006f18:	2226      	movs	r2, #38	; 0x26
 8006f1a:	1b36      	subs	r6, r6, r4
 8006f1c:	41af      	sbcs	r7, r5
 8006f1e:	1836      	adds	r6, r6, r0
 8006f20:	414f      	adcs	r7, r1
 8006f22:	4655      	mov	r5, sl
 8006f24:	464c      	mov	r4, r9
 8006f26:	17f9      	asrs	r1, r7, #31
 8006f28:	2300      	movs	r3, #0
 8006f2a:	0038      	movs	r0, r7
 8006f2c:	f7f9 f978 	bl	8000220 <__aeabi_lmul>
 8006f30:	2300      	movs	r3, #0
 8006f32:	1b2a      	subs	r2, r5, r4
 8006f34:	1880      	adds	r0, r0, r2
 8006f36:	4159      	adcs	r1, r3
 8006f38:	2500      	movs	r5, #0
 8006f3a:	000a      	movs	r2, r1
 8006f3c:	9c00      	ldr	r4, [sp, #0]
 8006f3e:	17cb      	asrs	r3, r1, #31
 8006f40:	1912      	adds	r2, r2, r4
 8006f42:	416b      	adcs	r3, r5
 8006f44:	4645      	mov	r5, r8
 8006f46:	001c      	movs	r4, r3
 8006f48:	606a      	str	r2, [r5, #4]
 8006f4a:	17dd      	asrs	r5, r3, #31
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	9a02      	ldr	r2, [sp, #8]
 8006f50:	18a4      	adds	r4, r4, r2
 8006f52:	415d      	adcs	r5, r3
 8006f54:	4643      	mov	r3, r8
 8006f56:	002a      	movs	r2, r5
 8006f58:	609c      	str	r4, [r3, #8]
 8006f5a:	17eb      	asrs	r3, r5, #31
 8006f5c:	2500      	movs	r5, #0
 8006f5e:	9c04      	ldr	r4, [sp, #16]
 8006f60:	18a4      	adds	r4, r4, r2
 8006f62:	415d      	adcs	r5, r3
 8006f64:	4643      	mov	r3, r8
 8006f66:	002a      	movs	r2, r5
 8006f68:	60dc      	str	r4, [r3, #12]
 8006f6a:	17eb      	asrs	r3, r5, #31
 8006f6c:	2500      	movs	r5, #0
 8006f6e:	9c06      	ldr	r4, [sp, #24]
 8006f70:	1912      	adds	r2, r2, r4
 8006f72:	416b      	adcs	r3, r5
 8006f74:	4645      	mov	r5, r8
 8006f76:	001c      	movs	r4, r3
 8006f78:	612a      	str	r2, [r5, #16]
 8006f7a:	17dd      	asrs	r5, r3, #31
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	9a08      	ldr	r2, [sp, #32]
 8006f80:	1912      	adds	r2, r2, r4
 8006f82:	416b      	adcs	r3, r5
 8006f84:	4645      	mov	r5, r8
 8006f86:	001c      	movs	r4, r3
 8006f88:	616a      	str	r2, [r5, #20]
 8006f8a:	17dd      	asrs	r5, r3, #31
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f90:	1912      	adds	r2, r2, r4
 8006f92:	416b      	adcs	r3, r5
 8006f94:	4644      	mov	r4, r8
 8006f96:	17dd      	asrs	r5, r3, #31
 8006f98:	61a2      	str	r2, [r4, #24]
 8006f9a:	0032      	movs	r2, r6
 8006f9c:	001c      	movs	r4, r3
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	18a4      	adds	r4, r4, r2
 8006fa2:	415d      	adcs	r5, r3
 8006fa4:	2226      	movs	r2, #38	; 0x26
 8006fa6:	4643      	mov	r3, r8
 8006fa8:	436a      	muls	r2, r5
 8006faa:	1810      	adds	r0, r2, r0
 8006fac:	61dc      	str	r4, [r3, #28]
 8006fae:	6018      	str	r0, [r3, #0]
 8006fb0:	b00c      	add	sp, #48	; 0x30
 8006fb2:	bc1c      	pop	{r2, r3, r4}
 8006fb4:	4690      	mov	r8, r2
 8006fb6:	4699      	mov	r9, r3
 8006fb8:	46a2      	mov	sl, r4
 8006fba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006fbc <fe25519_freeze>:
 8006fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fbe:	4684      	mov	ip, r0
 8006fc0:	2413      	movs	r4, #19
 8006fc2:	69c3      	ldr	r3, [r0, #28]
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	17db      	asrs	r3, r3, #31
 8006fc8:	401c      	ands	r4, r3
 8006fca:	4663      	mov	r3, ip
 8006fcc:	0022      	movs	r2, r4
 8006fce:	6818      	ldr	r0, [r3, #0]
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	1880      	adds	r0, r0, r2
 8006fd4:	4159      	adcs	r1, r3
 8006fd6:	4663      	mov	r3, ip
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4647      	mov	r7, r8
 8006fdc:	4698      	mov	r8, r3
 8006fde:	44a0      	add	r8, r4
 8006fe0:	46ce      	mov	lr, r9
 8006fe2:	4663      	mov	r3, ip
 8006fe4:	4642      	mov	r2, r8
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	601a      	str	r2, [r3, #0]
 8006fea:	000a      	movs	r2, r1
 8006fec:	4661      	mov	r1, ip
 8006fee:	2300      	movs	r3, #0
 8006ff0:	2500      	movs	r5, #0
 8006ff2:	684c      	ldr	r4, [r1, #4]
 8006ff4:	2700      	movs	r7, #0
 8006ff6:	18a4      	adds	r4, r4, r2
 8006ff8:	415d      	adcs	r5, r3
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	002a      	movs	r2, r5
 8006ffe:	688e      	ldr	r6, [r1, #8]
 8007000:	b093      	sub	sp, #76	; 0x4c
 8007002:	18b6      	adds	r6, r6, r2
 8007004:	415f      	adcs	r7, r3
 8007006:	4663      	mov	r3, ip
 8007008:	604c      	str	r4, [r1, #4]
 800700a:	9600      	str	r6, [sp, #0]
 800700c:	9701      	str	r7, [sp, #4]
 800700e:	0038      	movs	r0, r7
 8007010:	2100      	movs	r1, #0
 8007012:	2700      	movs	r7, #0
 8007014:	609e      	str	r6, [r3, #8]
 8007016:	68de      	ldr	r6, [r3, #12]
 8007018:	2500      	movs	r5, #0
 800701a:	1980      	adds	r0, r0, r6
 800701c:	4179      	adcs	r1, r7
 800701e:	9002      	str	r0, [sp, #8]
 8007020:	9103      	str	r1, [sp, #12]
 8007022:	000a      	movs	r2, r1
 8007024:	4661      	mov	r1, ip
 8007026:	60d8      	str	r0, [r3, #12]
 8007028:	2700      	movs	r7, #0
 800702a:	2300      	movs	r3, #0
 800702c:	690e      	ldr	r6, [r1, #16]
 800702e:	18b6      	adds	r6, r6, r2
 8007030:	415f      	adcs	r7, r3
 8007032:	0030      	movs	r0, r6
 8007034:	0039      	movs	r1, r7
 8007036:	4663      	mov	r3, ip
 8007038:	9004      	str	r0, [sp, #16]
 800703a:	9105      	str	r1, [sp, #20]
 800703c:	4661      	mov	r1, ip
 800703e:	611e      	str	r6, [r3, #16]
 8007040:	003a      	movs	r2, r7
 8007042:	2300      	movs	r3, #0
 8007044:	2700      	movs	r7, #0
 8007046:	694e      	ldr	r6, [r1, #20]
 8007048:	4660      	mov	r0, ip
 800704a:	18b6      	adds	r6, r6, r2
 800704c:	415f      	adcs	r7, r3
 800704e:	4663      	mov	r3, ip
 8007050:	9606      	str	r6, [sp, #24]
 8007052:	9707      	str	r7, [sp, #28]
 8007054:	615e      	str	r6, [r3, #20]
 8007056:	003a      	movs	r2, r7
 8007058:	2300      	movs	r3, #0
 800705a:	2700      	movs	r7, #0
 800705c:	698e      	ldr	r6, [r1, #24]
 800705e:	18b6      	adds	r6, r6, r2
 8007060:	415f      	adcs	r7, r3
 8007062:	003b      	movs	r3, r7
 8007064:	0032      	movs	r2, r6
 8007066:	618e      	str	r6, [r1, #24]
 8007068:	9208      	str	r2, [sp, #32]
 800706a:	9309      	str	r3, [sp, #36]	; 0x24
 800706c:	001e      	movs	r6, r3
 800706e:	2700      	movs	r7, #0
 8007070:	2300      	movs	r3, #0
 8007072:	69ca      	ldr	r2, [r1, #28]
 8007074:	1992      	adds	r2, r2, r6
 8007076:	417b      	adcs	r3, r7
 8007078:	0052      	lsls	r2, r2, #1
 800707a:	0853      	lsrs	r3, r2, #1
 800707c:	4699      	mov	r9, r3
 800707e:	4663      	mov	r3, ip
 8007080:	4649      	mov	r1, r9
 8007082:	4646      	mov	r6, r8
 8007084:	61d9      	str	r1, [r3, #28]
 8007086:	2700      	movs	r7, #0
 8007088:	2113      	movs	r1, #19
 800708a:	2200      	movs	r2, #0
 800708c:	4643      	mov	r3, r8
 800708e:	1989      	adds	r1, r1, r6
 8007090:	417a      	adcs	r2, r7
 8007092:	3313      	adds	r3, #19
 8007094:	930a      	str	r3, [sp, #40]	; 0x28
 8007096:	0016      	movs	r6, r2
 8007098:	2700      	movs	r7, #0
 800709a:	0022      	movs	r2, r4
 800709c:	2300      	movs	r3, #0
 800709e:	1992      	adds	r2, r2, r6
 80070a0:	417b      	adcs	r3, r7
 80070a2:	2700      	movs	r7, #0
 80070a4:	001e      	movs	r6, r3
 80070a6:	2300      	movs	r3, #0
 80070a8:	920b      	str	r2, [sp, #44]	; 0x2c
 80070aa:	9a00      	ldr	r2, [sp, #0]
 80070ac:	18b6      	adds	r6, r6, r2
 80070ae:	415f      	adcs	r7, r3
 80070b0:	2300      	movs	r3, #0
 80070b2:	003c      	movs	r4, r7
 80070b4:	9a02      	ldr	r2, [sp, #8]
 80070b6:	960c      	str	r6, [sp, #48]	; 0x30
 80070b8:	18a4      	adds	r4, r4, r2
 80070ba:	415d      	adcs	r5, r3
 80070bc:	2300      	movs	r3, #0
 80070be:	002a      	movs	r2, r5
 80070c0:	2500      	movs	r5, #0
 80070c2:	940d      	str	r4, [sp, #52]	; 0x34
 80070c4:	9c04      	ldr	r4, [sp, #16]
 80070c6:	18a4      	adds	r4, r4, r2
 80070c8:	415d      	adcs	r5, r3
 80070ca:	2300      	movs	r3, #0
 80070cc:	002a      	movs	r2, r5
 80070ce:	2500      	movs	r5, #0
 80070d0:	940e      	str	r4, [sp, #56]	; 0x38
 80070d2:	9c06      	ldr	r4, [sp, #24]
 80070d4:	18a4      	adds	r4, r4, r2
 80070d6:	415d      	adcs	r5, r3
 80070d8:	2300      	movs	r3, #0
 80070da:	002a      	movs	r2, r5
 80070dc:	2500      	movs	r5, #0
 80070de:	940f      	str	r4, [sp, #60]	; 0x3c
 80070e0:	9c08      	ldr	r4, [sp, #32]
 80070e2:	1912      	adds	r2, r2, r4
 80070e4:	416b      	adcs	r3, r5
 80070e6:	2500      	movs	r5, #0
 80070e8:	9210      	str	r2, [sp, #64]	; 0x40
 80070ea:	001c      	movs	r4, r3
 80070ec:	464a      	mov	r2, r9
 80070ee:	2300      	movs	r3, #0
 80070f0:	18a4      	adds	r4, r4, r2
 80070f2:	415d      	adcs	r5, r3
 80070f4:	006b      	lsls	r3, r5, #1
 80070f6:	0061      	lsls	r1, r4, #1
 80070f8:	0fe2      	lsrs	r2, r4, #31
 80070fa:	431a      	orrs	r2, r3
 80070fc:	0849      	lsrs	r1, r1, #1
 80070fe:	9111      	str	r1, [sp, #68]	; 0x44
 8007100:	b2d2      	uxtb	r2, r2
 8007102:	a90a      	add	r1, sp, #40	; 0x28
 8007104:	f7ff fd8e 	bl	8006c24 <fe25519_cmov>
 8007108:	b013      	add	sp, #76	; 0x4c
 800710a:	bc0c      	pop	{r2, r3}
 800710c:	4690      	mov	r8, r2
 800710e:	4699      	mov	r9, r3
 8007110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007112:	46c0      	nop			; (mov r8, r8)

08007114 <fe25519_pack>:
 8007114:	b570      	push	{r4, r5, r6, lr}
 8007116:	b088      	sub	sp, #32
 8007118:	466d      	mov	r5, sp
 800711a:	002b      	movs	r3, r5
 800711c:	0004      	movs	r4, r0
 800711e:	c945      	ldmia	r1!, {r0, r2, r6}
 8007120:	c345      	stmia	r3!, {r0, r2, r6}
 8007122:	c945      	ldmia	r1!, {r0, r2, r6}
 8007124:	c345      	stmia	r3!, {r0, r2, r6}
 8007126:	c905      	ldmia	r1!, {r0, r2}
 8007128:	c305      	stmia	r3!, {r0, r2}
 800712a:	0028      	movs	r0, r5
 800712c:	f7ff ff46 	bl	8006fbc <fe25519_freeze>
 8007130:	9b00      	ldr	r3, [sp, #0]
 8007132:	0a1a      	lsrs	r2, r3, #8
 8007134:	7023      	strb	r3, [r4, #0]
 8007136:	7062      	strb	r2, [r4, #1]
 8007138:	0c1a      	lsrs	r2, r3, #16
 800713a:	0e1b      	lsrs	r3, r3, #24
 800713c:	70e3      	strb	r3, [r4, #3]
 800713e:	686b      	ldr	r3, [r5, #4]
 8007140:	70a2      	strb	r2, [r4, #2]
 8007142:	0a1a      	lsrs	r2, r3, #8
 8007144:	7123      	strb	r3, [r4, #4]
 8007146:	7162      	strb	r2, [r4, #5]
 8007148:	0c1a      	lsrs	r2, r3, #16
 800714a:	0e1b      	lsrs	r3, r3, #24
 800714c:	71e3      	strb	r3, [r4, #7]
 800714e:	68ab      	ldr	r3, [r5, #8]
 8007150:	71a2      	strb	r2, [r4, #6]
 8007152:	0a1a      	lsrs	r2, r3, #8
 8007154:	7223      	strb	r3, [r4, #8]
 8007156:	7262      	strb	r2, [r4, #9]
 8007158:	0c1a      	lsrs	r2, r3, #16
 800715a:	0e1b      	lsrs	r3, r3, #24
 800715c:	72e3      	strb	r3, [r4, #11]
 800715e:	68eb      	ldr	r3, [r5, #12]
 8007160:	72a2      	strb	r2, [r4, #10]
 8007162:	0a1a      	lsrs	r2, r3, #8
 8007164:	7323      	strb	r3, [r4, #12]
 8007166:	7362      	strb	r2, [r4, #13]
 8007168:	0c1a      	lsrs	r2, r3, #16
 800716a:	0e1b      	lsrs	r3, r3, #24
 800716c:	73e3      	strb	r3, [r4, #15]
 800716e:	692b      	ldr	r3, [r5, #16]
 8007170:	73a2      	strb	r2, [r4, #14]
 8007172:	0a1a      	lsrs	r2, r3, #8
 8007174:	7423      	strb	r3, [r4, #16]
 8007176:	7462      	strb	r2, [r4, #17]
 8007178:	0c1a      	lsrs	r2, r3, #16
 800717a:	0e1b      	lsrs	r3, r3, #24
 800717c:	74e3      	strb	r3, [r4, #19]
 800717e:	696b      	ldr	r3, [r5, #20]
 8007180:	74a2      	strb	r2, [r4, #18]
 8007182:	0a1a      	lsrs	r2, r3, #8
 8007184:	7523      	strb	r3, [r4, #20]
 8007186:	7562      	strb	r2, [r4, #21]
 8007188:	0c1a      	lsrs	r2, r3, #16
 800718a:	0e1b      	lsrs	r3, r3, #24
 800718c:	75e3      	strb	r3, [r4, #23]
 800718e:	69ab      	ldr	r3, [r5, #24]
 8007190:	75a2      	strb	r2, [r4, #22]
 8007192:	0a1a      	lsrs	r2, r3, #8
 8007194:	7623      	strb	r3, [r4, #24]
 8007196:	7662      	strb	r2, [r4, #25]
 8007198:	0c1a      	lsrs	r2, r3, #16
 800719a:	0e1b      	lsrs	r3, r3, #24
 800719c:	76e3      	strb	r3, [r4, #27]
 800719e:	69eb      	ldr	r3, [r5, #28]
 80071a0:	76a2      	strb	r2, [r4, #26]
 80071a2:	0a1a      	lsrs	r2, r3, #8
 80071a4:	7723      	strb	r3, [r4, #28]
 80071a6:	7762      	strb	r2, [r4, #29]
 80071a8:	0c1a      	lsrs	r2, r3, #16
 80071aa:	0e1b      	lsrs	r3, r3, #24
 80071ac:	77a2      	strb	r2, [r4, #30]
 80071ae:	77e3      	strb	r3, [r4, #31]
 80071b0:	b008      	add	sp, #32
 80071b2:	bd70      	pop	{r4, r5, r6, pc}

080071b4 <fe25519_mul>:
 80071b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071b6:	46de      	mov	lr, fp
 80071b8:	4657      	mov	r7, sl
 80071ba:	464e      	mov	r6, r9
 80071bc:	4645      	mov	r5, r8
 80071be:	b5e0      	push	{r5, r6, r7, lr}
 80071c0:	0015      	movs	r5, r2
 80071c2:	b0bd      	sub	sp, #244	; 0xf4
 80071c4:	4680      	mov	r8, r0
 80071c6:	000e      	movs	r6, r1
 80071c8:	2240      	movs	r2, #64	; 0x40
 80071ca:	2100      	movs	r1, #0
 80071cc:	a82c      	add	r0, sp, #176	; 0xb0
 80071ce:	f001 f878 	bl	80082c2 <memset>
 80071d2:	682b      	ldr	r3, [r5, #0]
 80071d4:	2200      	movs	r2, #0
 80071d6:	9323      	str	r3, [sp, #140]	; 0x8c
 80071d8:	686b      	ldr	r3, [r5, #4]
 80071da:	2700      	movs	r7, #0
 80071dc:	9324      	str	r3, [sp, #144]	; 0x90
 80071de:	68ab      	ldr	r3, [r5, #8]
 80071e0:	9220      	str	r2, [sp, #128]	; 0x80
 80071e2:	9325      	str	r3, [sp, #148]	; 0x94
 80071e4:	68eb      	ldr	r3, [r5, #12]
 80071e6:	4642      	mov	r2, r8
 80071e8:	9326      	str	r3, [sp, #152]	; 0x98
 80071ea:	692b      	ldr	r3, [r5, #16]
 80071ec:	46b0      	mov	r8, r6
 80071ee:	9327      	str	r3, [sp, #156]	; 0x9c
 80071f0:	696b      	ldr	r3, [r5, #20]
 80071f2:	ac2c      	add	r4, sp, #176	; 0xb0
 80071f4:	9328      	str	r3, [sp, #160]	; 0xa0
 80071f6:	69ab      	ldr	r3, [r5, #24]
 80071f8:	9721      	str	r7, [sp, #132]	; 0x84
 80071fa:	9329      	str	r3, [sp, #164]	; 0xa4
 80071fc:	69eb      	ldr	r3, [r5, #28]
 80071fe:	922b      	str	r2, [sp, #172]	; 0xac
 8007200:	932a      	str	r3, [sp, #168]	; 0xa8
 8007202:	2300      	movs	r3, #0
 8007204:	469a      	mov	sl, r3
 8007206:	469b      	mov	fp, r3
 8007208:	4699      	mov	r9, r3
 800720a:	931f      	str	r3, [sp, #124]	; 0x7c
 800720c:	931e      	str	r3, [sp, #120]	; 0x78
 800720e:	9322      	str	r3, [sp, #136]	; 0x88
 8007210:	4643      	mov	r3, r8
 8007212:	cb20      	ldmia	r3!, {r5}
 8007214:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007216:	4698      	mov	r8, r3
 8007218:	0028      	movs	r0, r5
 800721a:	2300      	movs	r3, #0
 800721c:	2100      	movs	r1, #0
 800721e:	f7f8 ffff 	bl	8000220 <__aeabi_lmul>
 8007222:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007224:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007226:	930e      	str	r3, [sp, #56]	; 0x38
 8007228:	2300      	movs	r3, #0
 800722a:	930f      	str	r3, [sp, #60]	; 0x3c
 800722c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800722e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8007230:	1980      	adds	r0, r0, r6
 8007232:	4179      	adcs	r1, r7
 8007234:	6020      	str	r0, [r4, #0]
 8007236:	9100      	str	r1, [sp, #0]
 8007238:	0028      	movs	r0, r5
 800723a:	2100      	movs	r1, #0
 800723c:	001e      	movs	r6, r3
 800723e:	9301      	str	r3, [sp, #4]
 8007240:	f7f8 ffee 	bl	8000220 <__aeabi_lmul>
 8007244:	464a      	mov	r2, r9
 8007246:	9611      	str	r6, [sp, #68]	; 0x44
 8007248:	9210      	str	r2, [sp, #64]	; 0x40
 800724a:	0033      	movs	r3, r6
 800724c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800724e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8007250:	1980      	adds	r0, r0, r6
 8007252:	4179      	adcs	r1, r7
 8007254:	9e00      	ldr	r6, [sp, #0]
 8007256:	9f01      	ldr	r7, [sp, #4]
 8007258:	1980      	adds	r0, r0, r6
 800725a:	4179      	adcs	r1, r7
 800725c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800725e:	001e      	movs	r6, r3
 8007260:	6060      	str	r0, [r4, #4]
 8007262:	9020      	str	r0, [sp, #128]	; 0x80
 8007264:	9102      	str	r1, [sp, #8]
 8007266:	0028      	movs	r0, r5
 8007268:	2100      	movs	r1, #0
 800726a:	9303      	str	r3, [sp, #12]
 800726c:	f7f8 ffd8 	bl	8000220 <__aeabi_lmul>
 8007270:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007272:	9613      	str	r6, [sp, #76]	; 0x4c
 8007274:	9312      	str	r3, [sp, #72]	; 0x48
 8007276:	0033      	movs	r3, r6
 8007278:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800727a:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800727c:	1980      	adds	r0, r0, r6
 800727e:	4179      	adcs	r1, r7
 8007280:	9e02      	ldr	r6, [sp, #8]
 8007282:	9f03      	ldr	r7, [sp, #12]
 8007284:	1980      	adds	r0, r0, r6
 8007286:	4179      	adcs	r1, r7
 8007288:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800728a:	001f      	movs	r7, r3
 800728c:	60a0      	str	r0, [r4, #8]
 800728e:	9104      	str	r1, [sp, #16]
 8007290:	4681      	mov	r9, r0
 8007292:	2100      	movs	r1, #0
 8007294:	0028      	movs	r0, r5
 8007296:	9305      	str	r3, [sp, #20]
 8007298:	f7f8 ffc2 	bl	8000220 <__aeabi_lmul>
 800729c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800729e:	9715      	str	r7, [sp, #84]	; 0x54
 80072a0:	9314      	str	r3, [sp, #80]	; 0x50
 80072a2:	003b      	movs	r3, r7
 80072a4:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80072a6:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80072a8:	1980      	adds	r0, r0, r6
 80072aa:	4179      	adcs	r1, r7
 80072ac:	9e04      	ldr	r6, [sp, #16]
 80072ae:	9f05      	ldr	r7, [sp, #20]
 80072b0:	1980      	adds	r0, r0, r6
 80072b2:	4179      	adcs	r1, r7
 80072b4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80072b6:	60e0      	str	r0, [r4, #12]
 80072b8:	9021      	str	r0, [sp, #132]	; 0x84
 80072ba:	9106      	str	r1, [sp, #24]
 80072bc:	0028      	movs	r0, r5
 80072be:	2100      	movs	r1, #0
 80072c0:	001e      	movs	r6, r3
 80072c2:	9307      	str	r3, [sp, #28]
 80072c4:	f7f8 ffac 	bl	8000220 <__aeabi_lmul>
 80072c8:	465b      	mov	r3, fp
 80072ca:	9617      	str	r6, [sp, #92]	; 0x5c
 80072cc:	9316      	str	r3, [sp, #88]	; 0x58
 80072ce:	0033      	movs	r3, r6
 80072d0:	9e16      	ldr	r6, [sp, #88]	; 0x58
 80072d2:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80072d4:	1980      	adds	r0, r0, r6
 80072d6:	4179      	adcs	r1, r7
 80072d8:	9e06      	ldr	r6, [sp, #24]
 80072da:	9f07      	ldr	r7, [sp, #28]
 80072dc:	1980      	adds	r0, r0, r6
 80072de:	4179      	adcs	r1, r7
 80072e0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80072e2:	6120      	str	r0, [r4, #16]
 80072e4:	9022      	str	r0, [sp, #136]	; 0x88
 80072e6:	9108      	str	r1, [sp, #32]
 80072e8:	0028      	movs	r0, r5
 80072ea:	2100      	movs	r1, #0
 80072ec:	001e      	movs	r6, r3
 80072ee:	9309      	str	r3, [sp, #36]	; 0x24
 80072f0:	f7f8 ff96 	bl	8000220 <__aeabi_lmul>
 80072f4:	4652      	mov	r2, sl
 80072f6:	9619      	str	r6, [sp, #100]	; 0x64
 80072f8:	9218      	str	r2, [sp, #96]	; 0x60
 80072fa:	0033      	movs	r3, r6
 80072fc:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80072fe:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8007300:	1980      	adds	r0, r0, r6
 8007302:	4179      	adcs	r1, r7
 8007304:	9e08      	ldr	r6, [sp, #32]
 8007306:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007308:	1980      	adds	r0, r0, r6
 800730a:	4179      	adcs	r1, r7
 800730c:	930b      	str	r3, [sp, #44]	; 0x2c
 800730e:	001e      	movs	r6, r3
 8007310:	6160      	str	r0, [r4, #20]
 8007312:	910a      	str	r1, [sp, #40]	; 0x28
 8007314:	4683      	mov	fp, r0
 8007316:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8007318:	0028      	movs	r0, r5
 800731a:	2100      	movs	r1, #0
 800731c:	f7f8 ff80 	bl	8000220 <__aeabi_lmul>
 8007320:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007322:	961b      	str	r6, [sp, #108]	; 0x6c
 8007324:	921a      	str	r2, [sp, #104]	; 0x68
 8007326:	0033      	movs	r3, r6
 8007328:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800732a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800732c:	1980      	adds	r0, r0, r6
 800732e:	4179      	adcs	r1, r7
 8007330:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007332:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8007334:	1980      	adds	r0, r0, r6
 8007336:	4179      	adcs	r1, r7
 8007338:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800733a:	61a0      	str	r0, [r4, #24]
 800733c:	001e      	movs	r6, r3
 800733e:	910c      	str	r1, [sp, #48]	; 0x30
 8007340:	4682      	mov	sl, r0
 8007342:	2100      	movs	r1, #0
 8007344:	0028      	movs	r0, r5
 8007346:	930d      	str	r3, [sp, #52]	; 0x34
 8007348:	f7f8 ff6a 	bl	8000220 <__aeabi_lmul>
 800734c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800734e:	961d      	str	r6, [sp, #116]	; 0x74
 8007350:	921c      	str	r2, [sp, #112]	; 0x70
 8007352:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007354:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007356:	1880      	adds	r0, r0, r2
 8007358:	4159      	adcs	r1, r3
 800735a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800735c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800735e:	1880      	adds	r0, r0, r2
 8007360:	4159      	adcs	r1, r3
 8007362:	3404      	adds	r4, #4
 8007364:	61a0      	str	r0, [r4, #24]
 8007366:	61e1      	str	r1, [r4, #28]
 8007368:	ab34      	add	r3, sp, #208	; 0xd0
 800736a:	901e      	str	r0, [sp, #120]	; 0x78
 800736c:	911f      	str	r1, [sp, #124]	; 0x7c
 800736e:	429c      	cmp	r4, r3
 8007370:	d000      	beq.n	8007374 <fe25519_mul+0x1c0>
 8007372:	e74d      	b.n	8007210 <fe25519_mul+0x5c>
 8007374:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8007376:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8007378:	4698      	mov	r8, r3
 800737a:	2226      	movs	r2, #38	; 0x26
 800737c:	2300      	movs	r3, #0
 800737e:	2100      	movs	r1, #0
 8007380:	f7f8 ff4e 	bl	8000220 <__aeabi_lmul>
 8007384:	2300      	movs	r3, #0
 8007386:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8007388:	2500      	movs	r5, #0
 800738a:	1880      	adds	r0, r0, r2
 800738c:	4159      	adcs	r1, r3
 800738e:	2226      	movs	r2, #38	; 0x26
 8007390:	9000      	str	r0, [sp, #0]
 8007392:	9101      	str	r1, [sp, #4]
 8007394:	000c      	movs	r4, r1
 8007396:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8007398:	2300      	movs	r3, #0
 800739a:	2100      	movs	r1, #0
 800739c:	f7f8 ff40 	bl	8000220 <__aeabi_lmul>
 80073a0:	2300      	movs	r3, #0
 80073a2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80073a4:	1880      	adds	r0, r0, r2
 80073a6:	4159      	adcs	r1, r3
 80073a8:	0002      	movs	r2, r0
 80073aa:	000b      	movs	r3, r1
 80073ac:	1912      	adds	r2, r2, r4
 80073ae:	416b      	adcs	r3, r5
 80073b0:	9836      	ldr	r0, [sp, #216]	; 0xd8
 80073b2:	9202      	str	r2, [sp, #8]
 80073b4:	9303      	str	r3, [sp, #12]
 80073b6:	001c      	movs	r4, r3
 80073b8:	2226      	movs	r2, #38	; 0x26
 80073ba:	2300      	movs	r3, #0
 80073bc:	2100      	movs	r1, #0
 80073be:	f7f8 ff2f 	bl	8000220 <__aeabi_lmul>
 80073c2:	2300      	movs	r3, #0
 80073c4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80073c6:	2500      	movs	r5, #0
 80073c8:	1880      	adds	r0, r0, r2
 80073ca:	4159      	adcs	r1, r3
 80073cc:	000a      	movs	r2, r1
 80073ce:	0001      	movs	r1, r0
 80073d0:	1909      	adds	r1, r1, r4
 80073d2:	416a      	adcs	r2, r5
 80073d4:	9837      	ldr	r0, [sp, #220]	; 0xdc
 80073d6:	9104      	str	r1, [sp, #16]
 80073d8:	9205      	str	r2, [sp, #20]
 80073da:	0014      	movs	r4, r2
 80073dc:	2300      	movs	r3, #0
 80073de:	2226      	movs	r2, #38	; 0x26
 80073e0:	2100      	movs	r1, #0
 80073e2:	f7f8 ff1d 	bl	8000220 <__aeabi_lmul>
 80073e6:	2300      	movs	r3, #0
 80073e8:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80073ea:	2500      	movs	r5, #0
 80073ec:	1880      	adds	r0, r0, r2
 80073ee:	4159      	adcs	r1, r3
 80073f0:	0006      	movs	r6, r0
 80073f2:	000f      	movs	r7, r1
 80073f4:	1936      	adds	r6, r6, r4
 80073f6:	416f      	adcs	r7, r5
 80073f8:	9838      	ldr	r0, [sp, #224]	; 0xe0
 80073fa:	2226      	movs	r2, #38	; 0x26
 80073fc:	2300      	movs	r3, #0
 80073fe:	2100      	movs	r1, #0
 8007400:	9606      	str	r6, [sp, #24]
 8007402:	9707      	str	r7, [sp, #28]
 8007404:	f7f8 ff0c 	bl	8000220 <__aeabi_lmul>
 8007408:	2300      	movs	r3, #0
 800740a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800740c:	003c      	movs	r4, r7
 800740e:	1880      	adds	r0, r0, r2
 8007410:	4159      	adcs	r1, r3
 8007412:	2500      	movs	r5, #0
 8007414:	1900      	adds	r0, r0, r4
 8007416:	4169      	adcs	r1, r5
 8007418:	2226      	movs	r2, #38	; 0x26
 800741a:	9008      	str	r0, [sp, #32]
 800741c:	9109      	str	r1, [sp, #36]	; 0x24
 800741e:	000c      	movs	r4, r1
 8007420:	9839      	ldr	r0, [sp, #228]	; 0xe4
 8007422:	2300      	movs	r3, #0
 8007424:	2100      	movs	r1, #0
 8007426:	f7f8 fefb 	bl	8000220 <__aeabi_lmul>
 800742a:	2300      	movs	r3, #0
 800742c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800742e:	2500      	movs	r5, #0
 8007430:	1880      	adds	r0, r0, r2
 8007432:	4159      	adcs	r1, r3
 8007434:	0002      	movs	r2, r0
 8007436:	000b      	movs	r3, r1
 8007438:	1912      	adds	r2, r2, r4
 800743a:	416b      	adcs	r3, r5
 800743c:	983a      	ldr	r0, [sp, #232]	; 0xe8
 800743e:	920a      	str	r2, [sp, #40]	; 0x28
 8007440:	930b      	str	r3, [sp, #44]	; 0x2c
 8007442:	001c      	movs	r4, r3
 8007444:	2226      	movs	r2, #38	; 0x26
 8007446:	2300      	movs	r3, #0
 8007448:	2100      	movs	r1, #0
 800744a:	f7f8 fee9 	bl	8000220 <__aeabi_lmul>
 800744e:	2300      	movs	r3, #0
 8007450:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8007452:	2500      	movs	r5, #0
 8007454:	1880      	adds	r0, r0, r2
 8007456:	4159      	adcs	r1, r3
 8007458:	000a      	movs	r2, r1
 800745a:	0001      	movs	r1, r0
 800745c:	1909      	adds	r1, r1, r4
 800745e:	416a      	adcs	r2, r5
 8007460:	983b      	ldr	r0, [sp, #236]	; 0xec
 8007462:	910c      	str	r1, [sp, #48]	; 0x30
 8007464:	920d      	str	r2, [sp, #52]	; 0x34
 8007466:	0014      	movs	r4, r2
 8007468:	2300      	movs	r3, #0
 800746a:	2226      	movs	r2, #38	; 0x26
 800746c:	2100      	movs	r1, #0
 800746e:	f7f8 fed7 	bl	8000220 <__aeabi_lmul>
 8007472:	2700      	movs	r7, #0
 8007474:	9e33      	ldr	r6, [sp, #204]	; 0xcc
 8007476:	2500      	movs	r5, #0
 8007478:	1836      	adds	r6, r6, r0
 800747a:	414f      	adcs	r7, r1
 800747c:	1936      	adds	r6, r6, r4
 800747e:	416f      	adcs	r7, r5
 8007480:	2226      	movs	r2, #38	; 0x26
 8007482:	2300      	movs	r3, #0
 8007484:	0038      	movs	r0, r7
 8007486:	2100      	movs	r1, #0
 8007488:	f7f8 feca 	bl	8000220 <__aeabi_lmul>
 800748c:	2300      	movs	r3, #0
 800748e:	9a00      	ldr	r2, [sp, #0]
 8007490:	2500      	movs	r5, #0
 8007492:	1880      	adds	r0, r0, r2
 8007494:	4159      	adcs	r1, r3
 8007496:	2300      	movs	r3, #0
 8007498:	000c      	movs	r4, r1
 800749a:	9a02      	ldr	r2, [sp, #8]
 800749c:	1912      	adds	r2, r2, r4
 800749e:	416b      	adcs	r3, r5
 80074a0:	4644      	mov	r4, r8
 80074a2:	2500      	movs	r5, #0
 80074a4:	6062      	str	r2, [r4, #4]
 80074a6:	001c      	movs	r4, r3
 80074a8:	2300      	movs	r3, #0
 80074aa:	9a04      	ldr	r2, [sp, #16]
 80074ac:	1912      	adds	r2, r2, r4
 80074ae:	416b      	adcs	r3, r5
 80074b0:	4644      	mov	r4, r8
 80074b2:	2500      	movs	r5, #0
 80074b4:	60a2      	str	r2, [r4, #8]
 80074b6:	001c      	movs	r4, r3
 80074b8:	2300      	movs	r3, #0
 80074ba:	9a06      	ldr	r2, [sp, #24]
 80074bc:	1912      	adds	r2, r2, r4
 80074be:	416b      	adcs	r3, r5
 80074c0:	4644      	mov	r4, r8
 80074c2:	2500      	movs	r5, #0
 80074c4:	60e2      	str	r2, [r4, #12]
 80074c6:	001c      	movs	r4, r3
 80074c8:	2300      	movs	r3, #0
 80074ca:	9a08      	ldr	r2, [sp, #32]
 80074cc:	1912      	adds	r2, r2, r4
 80074ce:	416b      	adcs	r3, r5
 80074d0:	4644      	mov	r4, r8
 80074d2:	2500      	movs	r5, #0
 80074d4:	6122      	str	r2, [r4, #16]
 80074d6:	001c      	movs	r4, r3
 80074d8:	2300      	movs	r3, #0
 80074da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074dc:	1912      	adds	r2, r2, r4
 80074de:	416b      	adcs	r3, r5
 80074e0:	4644      	mov	r4, r8
 80074e2:	2500      	movs	r5, #0
 80074e4:	6162      	str	r2, [r4, #20]
 80074e6:	001c      	movs	r4, r3
 80074e8:	2300      	movs	r3, #0
 80074ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074ec:	1912      	adds	r2, r2, r4
 80074ee:	416b      	adcs	r3, r5
 80074f0:	4644      	mov	r4, r8
 80074f2:	2500      	movs	r5, #0
 80074f4:	61a2      	str	r2, [r4, #24]
 80074f6:	0032      	movs	r2, r6
 80074f8:	001c      	movs	r4, r3
 80074fa:	2300      	movs	r3, #0
 80074fc:	18a4      	adds	r4, r4, r2
 80074fe:	415d      	adcs	r5, r3
 8007500:	2226      	movs	r2, #38	; 0x26
 8007502:	4643      	mov	r3, r8
 8007504:	436a      	muls	r2, r5
 8007506:	1810      	adds	r0, r2, r0
 8007508:	61dc      	str	r4, [r3, #28]
 800750a:	6018      	str	r0, [r3, #0]
 800750c:	b03d      	add	sp, #244	; 0xf4
 800750e:	bc3c      	pop	{r2, r3, r4, r5}
 8007510:	4690      	mov	r8, r2
 8007512:	4699      	mov	r9, r3
 8007514:	46a2      	mov	sl, r4
 8007516:	46ab      	mov	fp, r5
 8007518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800751a:	46c0      	nop			; (mov r8, r8)

0800751c <fe25519_square>:
 800751c:	b510      	push	{r4, lr}
 800751e:	000a      	movs	r2, r1
 8007520:	f7ff fe48 	bl	80071b4 <fe25519_mul>
 8007524:	bd10      	pop	{r4, pc}
 8007526:	46c0      	nop			; (mov r8, r8)

08007528 <fe25519_invert>:
 8007528:	b530      	push	{r4, r5, lr}
 800752a:	000c      	movs	r4, r1
 800752c:	b0d1      	sub	sp, #324	; 0x144
 800752e:	0005      	movs	r5, r0
 8007530:	4668      	mov	r0, sp
 8007532:	f7ff fff3 	bl	800751c <fe25519_square>
 8007536:	4669      	mov	r1, sp
 8007538:	a848      	add	r0, sp, #288	; 0x120
 800753a:	f7ff ffef 	bl	800751c <fe25519_square>
 800753e:	a948      	add	r1, sp, #288	; 0x120
 8007540:	a840      	add	r0, sp, #256	; 0x100
 8007542:	f7ff ffeb 	bl	800751c <fe25519_square>
 8007546:	0022      	movs	r2, r4
 8007548:	a940      	add	r1, sp, #256	; 0x100
 800754a:	a808      	add	r0, sp, #32
 800754c:	f7ff fe32 	bl	80071b4 <fe25519_mul>
 8007550:	466a      	mov	r2, sp
 8007552:	a908      	add	r1, sp, #32
 8007554:	a810      	add	r0, sp, #64	; 0x40
 8007556:	f7ff fe2d 	bl	80071b4 <fe25519_mul>
 800755a:	a910      	add	r1, sp, #64	; 0x40
 800755c:	a840      	add	r0, sp, #256	; 0x100
 800755e:	f7ff ffdd 	bl	800751c <fe25519_square>
 8007562:	aa08      	add	r2, sp, #32
 8007564:	a940      	add	r1, sp, #256	; 0x100
 8007566:	a818      	add	r0, sp, #96	; 0x60
 8007568:	f7ff fe24 	bl	80071b4 <fe25519_mul>
 800756c:	a918      	add	r1, sp, #96	; 0x60
 800756e:	a840      	add	r0, sp, #256	; 0x100
 8007570:	f7ff ffd4 	bl	800751c <fe25519_square>
 8007574:	a940      	add	r1, sp, #256	; 0x100
 8007576:	a848      	add	r0, sp, #288	; 0x120
 8007578:	f7ff ffd0 	bl	800751c <fe25519_square>
 800757c:	a948      	add	r1, sp, #288	; 0x120
 800757e:	a840      	add	r0, sp, #256	; 0x100
 8007580:	f7ff ffcc 	bl	800751c <fe25519_square>
 8007584:	a940      	add	r1, sp, #256	; 0x100
 8007586:	a848      	add	r0, sp, #288	; 0x120
 8007588:	f7ff ffc8 	bl	800751c <fe25519_square>
 800758c:	a948      	add	r1, sp, #288	; 0x120
 800758e:	a840      	add	r0, sp, #256	; 0x100
 8007590:	f7ff ffc4 	bl	800751c <fe25519_square>
 8007594:	aa18      	add	r2, sp, #96	; 0x60
 8007596:	a940      	add	r1, sp, #256	; 0x100
 8007598:	a820      	add	r0, sp, #128	; 0x80
 800759a:	f7ff fe0b 	bl	80071b4 <fe25519_mul>
 800759e:	a920      	add	r1, sp, #128	; 0x80
 80075a0:	a840      	add	r0, sp, #256	; 0x100
 80075a2:	f7ff ffbb 	bl	800751c <fe25519_square>
 80075a6:	a940      	add	r1, sp, #256	; 0x100
 80075a8:	a848      	add	r0, sp, #288	; 0x120
 80075aa:	f7ff ffb7 	bl	800751c <fe25519_square>
 80075ae:	2404      	movs	r4, #4
 80075b0:	a948      	add	r1, sp, #288	; 0x120
 80075b2:	a840      	add	r0, sp, #256	; 0x100
 80075b4:	f7ff ffb2 	bl	800751c <fe25519_square>
 80075b8:	3c01      	subs	r4, #1
 80075ba:	a940      	add	r1, sp, #256	; 0x100
 80075bc:	a848      	add	r0, sp, #288	; 0x120
 80075be:	f7ff ffad 	bl	800751c <fe25519_square>
 80075c2:	2c00      	cmp	r4, #0
 80075c4:	d1f4      	bne.n	80075b0 <fe25519_invert+0x88>
 80075c6:	aa20      	add	r2, sp, #128	; 0x80
 80075c8:	a948      	add	r1, sp, #288	; 0x120
 80075ca:	a828      	add	r0, sp, #160	; 0xa0
 80075cc:	f7ff fdf2 	bl	80071b4 <fe25519_mul>
 80075d0:	a928      	add	r1, sp, #160	; 0xa0
 80075d2:	a840      	add	r0, sp, #256	; 0x100
 80075d4:	f7ff ffa2 	bl	800751c <fe25519_square>
 80075d8:	a940      	add	r1, sp, #256	; 0x100
 80075da:	a848      	add	r0, sp, #288	; 0x120
 80075dc:	f7ff ff9e 	bl	800751c <fe25519_square>
 80075e0:	3409      	adds	r4, #9
 80075e2:	a948      	add	r1, sp, #288	; 0x120
 80075e4:	a840      	add	r0, sp, #256	; 0x100
 80075e6:	f7ff ff99 	bl	800751c <fe25519_square>
 80075ea:	3c01      	subs	r4, #1
 80075ec:	a940      	add	r1, sp, #256	; 0x100
 80075ee:	a848      	add	r0, sp, #288	; 0x120
 80075f0:	f7ff ff94 	bl	800751c <fe25519_square>
 80075f4:	2c00      	cmp	r4, #0
 80075f6:	d1f4      	bne.n	80075e2 <fe25519_invert+0xba>
 80075f8:	aa28      	add	r2, sp, #160	; 0xa0
 80075fa:	a948      	add	r1, sp, #288	; 0x120
 80075fc:	a840      	add	r0, sp, #256	; 0x100
 80075fe:	f7ff fdd9 	bl	80071b4 <fe25519_mul>
 8007602:	a940      	add	r1, sp, #256	; 0x100
 8007604:	a848      	add	r0, sp, #288	; 0x120
 8007606:	f7ff ff89 	bl	800751c <fe25519_square>
 800760a:	a948      	add	r1, sp, #288	; 0x120
 800760c:	a840      	add	r0, sp, #256	; 0x100
 800760e:	f7ff ff85 	bl	800751c <fe25519_square>
 8007612:	3404      	adds	r4, #4
 8007614:	a940      	add	r1, sp, #256	; 0x100
 8007616:	a848      	add	r0, sp, #288	; 0x120
 8007618:	f7ff ff80 	bl	800751c <fe25519_square>
 800761c:	3c01      	subs	r4, #1
 800761e:	a948      	add	r1, sp, #288	; 0x120
 8007620:	a840      	add	r0, sp, #256	; 0x100
 8007622:	f7ff ff7b 	bl	800751c <fe25519_square>
 8007626:	2c00      	cmp	r4, #0
 8007628:	d1f4      	bne.n	8007614 <fe25519_invert+0xec>
 800762a:	aa20      	add	r2, sp, #128	; 0x80
 800762c:	a940      	add	r1, sp, #256	; 0x100
 800762e:	a830      	add	r0, sp, #192	; 0xc0
 8007630:	f7ff fdc0 	bl	80071b4 <fe25519_mul>
 8007634:	a930      	add	r1, sp, #192	; 0xc0
 8007636:	a840      	add	r0, sp, #256	; 0x100
 8007638:	f7ff ff70 	bl	800751c <fe25519_square>
 800763c:	a940      	add	r1, sp, #256	; 0x100
 800763e:	a848      	add	r0, sp, #288	; 0x120
 8007640:	f7ff ff6c 	bl	800751c <fe25519_square>
 8007644:	3418      	adds	r4, #24
 8007646:	a948      	add	r1, sp, #288	; 0x120
 8007648:	a840      	add	r0, sp, #256	; 0x100
 800764a:	f7ff ff67 	bl	800751c <fe25519_square>
 800764e:	3c01      	subs	r4, #1
 8007650:	a940      	add	r1, sp, #256	; 0x100
 8007652:	a848      	add	r0, sp, #288	; 0x120
 8007654:	f7ff ff62 	bl	800751c <fe25519_square>
 8007658:	2c00      	cmp	r4, #0
 800765a:	d1f4      	bne.n	8007646 <fe25519_invert+0x11e>
 800765c:	aa30      	add	r2, sp, #192	; 0xc0
 800765e:	a948      	add	r1, sp, #288	; 0x120
 8007660:	a838      	add	r0, sp, #224	; 0xe0
 8007662:	f7ff fda7 	bl	80071b4 <fe25519_mul>
 8007666:	a938      	add	r1, sp, #224	; 0xe0
 8007668:	a848      	add	r0, sp, #288	; 0x120
 800766a:	f7ff ff57 	bl	800751c <fe25519_square>
 800766e:	a948      	add	r1, sp, #288	; 0x120
 8007670:	a840      	add	r0, sp, #256	; 0x100
 8007672:	f7ff ff53 	bl	800751c <fe25519_square>
 8007676:	3431      	adds	r4, #49	; 0x31
 8007678:	a940      	add	r1, sp, #256	; 0x100
 800767a:	a848      	add	r0, sp, #288	; 0x120
 800767c:	f7ff ff4e 	bl	800751c <fe25519_square>
 8007680:	3c01      	subs	r4, #1
 8007682:	a948      	add	r1, sp, #288	; 0x120
 8007684:	a840      	add	r0, sp, #256	; 0x100
 8007686:	f7ff ff49 	bl	800751c <fe25519_square>
 800768a:	2c00      	cmp	r4, #0
 800768c:	d1f4      	bne.n	8007678 <fe25519_invert+0x150>
 800768e:	aa38      	add	r2, sp, #224	; 0xe0
 8007690:	a940      	add	r1, sp, #256	; 0x100
 8007692:	a848      	add	r0, sp, #288	; 0x120
 8007694:	f7ff fd8e 	bl	80071b4 <fe25519_mul>
 8007698:	a948      	add	r1, sp, #288	; 0x120
 800769a:	a840      	add	r0, sp, #256	; 0x100
 800769c:	f7ff ff3e 	bl	800751c <fe25519_square>
 80076a0:	a940      	add	r1, sp, #256	; 0x100
 80076a2:	a848      	add	r0, sp, #288	; 0x120
 80076a4:	f7ff ff3a 	bl	800751c <fe25519_square>
 80076a8:	3418      	adds	r4, #24
 80076aa:	a948      	add	r1, sp, #288	; 0x120
 80076ac:	a840      	add	r0, sp, #256	; 0x100
 80076ae:	f7ff ff35 	bl	800751c <fe25519_square>
 80076b2:	3c01      	subs	r4, #1
 80076b4:	a940      	add	r1, sp, #256	; 0x100
 80076b6:	a848      	add	r0, sp, #288	; 0x120
 80076b8:	f7ff ff30 	bl	800751c <fe25519_square>
 80076bc:	2c00      	cmp	r4, #0
 80076be:	d1f4      	bne.n	80076aa <fe25519_invert+0x182>
 80076c0:	aa30      	add	r2, sp, #192	; 0xc0
 80076c2:	a948      	add	r1, sp, #288	; 0x120
 80076c4:	a840      	add	r0, sp, #256	; 0x100
 80076c6:	f7ff fd75 	bl	80071b4 <fe25519_mul>
 80076ca:	a940      	add	r1, sp, #256	; 0x100
 80076cc:	a848      	add	r0, sp, #288	; 0x120
 80076ce:	f7ff ff25 	bl	800751c <fe25519_square>
 80076d2:	a948      	add	r1, sp, #288	; 0x120
 80076d4:	a840      	add	r0, sp, #256	; 0x100
 80076d6:	f7ff ff21 	bl	800751c <fe25519_square>
 80076da:	a940      	add	r1, sp, #256	; 0x100
 80076dc:	a848      	add	r0, sp, #288	; 0x120
 80076de:	f7ff ff1d 	bl	800751c <fe25519_square>
 80076e2:	a948      	add	r1, sp, #288	; 0x120
 80076e4:	a840      	add	r0, sp, #256	; 0x100
 80076e6:	f7ff ff19 	bl	800751c <fe25519_square>
 80076ea:	a940      	add	r1, sp, #256	; 0x100
 80076ec:	a848      	add	r0, sp, #288	; 0x120
 80076ee:	f7ff ff15 	bl	800751c <fe25519_square>
 80076f2:	aa10      	add	r2, sp, #64	; 0x40
 80076f4:	a948      	add	r1, sp, #288	; 0x120
 80076f6:	0028      	movs	r0, r5
 80076f8:	f7ff fd5c 	bl	80071b4 <fe25519_mul>
 80076fc:	b051      	add	sp, #324	; 0x144
 80076fe:	bd30      	pop	{r4, r5, pc}

08007700 <fe25519_mult121665>:
 8007700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007702:	468c      	mov	ip, r1
 8007704:	4647      	mov	r7, r8
 8007706:	4680      	mov	r8, r0
 8007708:	6808      	ldr	r0, [r1, #0]
 800770a:	2100      	movs	r1, #0
 800770c:	0e45      	lsrs	r5, r0, #25
 800770e:	01c4      	lsls	r4, r0, #7
 8007710:	1a24      	subs	r4, r4, r0
 8007712:	418d      	sbcs	r5, r1
 8007714:	0fa6      	lsrs	r6, r4, #30
 8007716:	00ab      	lsls	r3, r5, #2
 8007718:	4333      	orrs	r3, r6
 800771a:	00a2      	lsls	r2, r4, #2
 800771c:	1a12      	subs	r2, r2, r0
 800771e:	418b      	sbcs	r3, r1
 8007720:	0014      	movs	r4, r2
 8007722:	0f16      	lsrs	r6, r2, #28
 8007724:	011b      	lsls	r3, r3, #4
 8007726:	4333      	orrs	r3, r6
 8007728:	0122      	lsls	r2, r4, #4
 800772a:	1a12      	subs	r2, r2, r0
 800772c:	418b      	sbcs	r3, r1
 800772e:	0f14      	lsrs	r4, r2, #28
 8007730:	0119      	lsls	r1, r3, #4
 8007732:	4321      	orrs	r1, r4
 8007734:	0110      	lsls	r0, r2, #4
 8007736:	46ce      	mov	lr, r9
 8007738:	1a80      	subs	r0, r0, r2
 800773a:	4199      	sbcs	r1, r3
 800773c:	4642      	mov	r2, r8
 800773e:	b580      	push	{r7, lr}
 8007740:	6010      	str	r0, [r2, #0]
 8007742:	4662      	mov	r2, ip
 8007744:	000c      	movs	r4, r1
 8007746:	0003      	movs	r3, r0
 8007748:	2100      	movs	r1, #0
 800774a:	6850      	ldr	r0, [r2, #4]
 800774c:	b091      	sub	sp, #68	; 0x44
 800774e:	9400      	str	r4, [sp, #0]
 8007750:	930e      	str	r3, [sp, #56]	; 0x38
 8007752:	940f      	str	r4, [sp, #60]	; 0x3c
 8007754:	0e45      	lsrs	r5, r0, #25
 8007756:	01c4      	lsls	r4, r0, #7
 8007758:	1a24      	subs	r4, r4, r0
 800775a:	418d      	sbcs	r5, r1
 800775c:	0fa2      	lsrs	r2, r4, #30
 800775e:	00ab      	lsls	r3, r5, #2
 8007760:	4313      	orrs	r3, r2
 8007762:	00a2      	lsls	r2, r4, #2
 8007764:	1a12      	subs	r2, r2, r0
 8007766:	418b      	sbcs	r3, r1
 8007768:	0014      	movs	r4, r2
 800776a:	011b      	lsls	r3, r3, #4
 800776c:	0f12      	lsrs	r2, r2, #28
 800776e:	4313      	orrs	r3, r2
 8007770:	0122      	lsls	r2, r4, #4
 8007772:	1a12      	subs	r2, r2, r0
 8007774:	418b      	sbcs	r3, r1
 8007776:	0f14      	lsrs	r4, r2, #28
 8007778:	0119      	lsls	r1, r3, #4
 800777a:	2700      	movs	r7, #0
 800777c:	4321      	orrs	r1, r4
 800777e:	0110      	lsls	r0, r2, #4
 8007780:	1a80      	subs	r0, r0, r2
 8007782:	4199      	sbcs	r1, r3
 8007784:	9701      	str	r7, [sp, #4]
 8007786:	9b00      	ldr	r3, [sp, #0]
 8007788:	9c01      	ldr	r4, [sp, #4]
 800778a:	18c0      	adds	r0, r0, r3
 800778c:	4161      	adcs	r1, r4
 800778e:	0002      	movs	r2, r0
 8007790:	000b      	movs	r3, r1
 8007792:	4641      	mov	r1, r8
 8007794:	4664      	mov	r4, ip
 8007796:	604a      	str	r2, [r1, #4]
 8007798:	2100      	movs	r1, #0
 800779a:	68a0      	ldr	r0, [r4, #8]
 800779c:	9300      	str	r3, [sp, #0]
 800779e:	0e45      	lsrs	r5, r0, #25
 80077a0:	01c4      	lsls	r4, r0, #7
 80077a2:	1a24      	subs	r4, r4, r0
 80077a4:	418d      	sbcs	r5, r1
 80077a6:	9202      	str	r2, [sp, #8]
 80077a8:	9303      	str	r3, [sp, #12]
 80077aa:	0fa3      	lsrs	r3, r4, #30
 80077ac:	4699      	mov	r9, r3
 80077ae:	464e      	mov	r6, r9
 80077b0:	00ab      	lsls	r3, r5, #2
 80077b2:	4333      	orrs	r3, r6
 80077b4:	00a2      	lsls	r2, r4, #2
 80077b6:	0014      	movs	r4, r2
 80077b8:	001d      	movs	r5, r3
 80077ba:	1a24      	subs	r4, r4, r0
 80077bc:	418d      	sbcs	r5, r1
 80077be:	0f26      	lsrs	r6, r4, #28
 80077c0:	012b      	lsls	r3, r5, #4
 80077c2:	4333      	orrs	r3, r6
 80077c4:	0122      	lsls	r2, r4, #4
 80077c6:	1a12      	subs	r2, r2, r0
 80077c8:	418b      	sbcs	r3, r1
 80077ca:	0f14      	lsrs	r4, r2, #28
 80077cc:	0119      	lsls	r1, r3, #4
 80077ce:	4321      	orrs	r1, r4
 80077d0:	0110      	lsls	r0, r2, #4
 80077d2:	1a80      	subs	r0, r0, r2
 80077d4:	4199      	sbcs	r1, r3
 80077d6:	9701      	str	r7, [sp, #4]
 80077d8:	9b00      	ldr	r3, [sp, #0]
 80077da:	9c01      	ldr	r4, [sp, #4]
 80077dc:	18c0      	adds	r0, r0, r3
 80077de:	4161      	adcs	r1, r4
 80077e0:	000a      	movs	r2, r1
 80077e2:	0001      	movs	r1, r0
 80077e4:	4640      	mov	r0, r8
 80077e6:	4664      	mov	r4, ip
 80077e8:	6081      	str	r1, [r0, #8]
 80077ea:	9104      	str	r1, [sp, #16]
 80077ec:	9205      	str	r2, [sp, #20]
 80077ee:	2100      	movs	r1, #0
 80077f0:	68e0      	ldr	r0, [r4, #12]
 80077f2:	9200      	str	r2, [sp, #0]
 80077f4:	0e45      	lsrs	r5, r0, #25
 80077f6:	01c4      	lsls	r4, r0, #7
 80077f8:	1a24      	subs	r4, r4, r0
 80077fa:	418d      	sbcs	r5, r1
 80077fc:	0fa3      	lsrs	r3, r4, #30
 80077fe:	4699      	mov	r9, r3
 8007800:	464e      	mov	r6, r9
 8007802:	00ab      	lsls	r3, r5, #2
 8007804:	4333      	orrs	r3, r6
 8007806:	00a2      	lsls	r2, r4, #2
 8007808:	0014      	movs	r4, r2
 800780a:	001d      	movs	r5, r3
 800780c:	1a24      	subs	r4, r4, r0
 800780e:	418d      	sbcs	r5, r1
 8007810:	0f26      	lsrs	r6, r4, #28
 8007812:	012b      	lsls	r3, r5, #4
 8007814:	4333      	orrs	r3, r6
 8007816:	0122      	lsls	r2, r4, #4
 8007818:	1a12      	subs	r2, r2, r0
 800781a:	418b      	sbcs	r3, r1
 800781c:	0f14      	lsrs	r4, r2, #28
 800781e:	0119      	lsls	r1, r3, #4
 8007820:	4321      	orrs	r1, r4
 8007822:	0110      	lsls	r0, r2, #4
 8007824:	1a80      	subs	r0, r0, r2
 8007826:	4199      	sbcs	r1, r3
 8007828:	9701      	str	r7, [sp, #4]
 800782a:	9b00      	ldr	r3, [sp, #0]
 800782c:	9c01      	ldr	r4, [sp, #4]
 800782e:	18c0      	adds	r0, r0, r3
 8007830:	4161      	adcs	r1, r4
 8007832:	4644      	mov	r4, r8
 8007834:	60e0      	str	r0, [r4, #12]
 8007836:	4664      	mov	r4, ip
 8007838:	9100      	str	r1, [sp, #0]
 800783a:	9006      	str	r0, [sp, #24]
 800783c:	9107      	str	r1, [sp, #28]
 800783e:	2100      	movs	r1, #0
 8007840:	6920      	ldr	r0, [r4, #16]
 8007842:	9701      	str	r7, [sp, #4]
 8007844:	0e45      	lsrs	r5, r0, #25
 8007846:	01c4      	lsls	r4, r0, #7
 8007848:	1a24      	subs	r4, r4, r0
 800784a:	418d      	sbcs	r5, r1
 800784c:	0fa3      	lsrs	r3, r4, #30
 800784e:	4699      	mov	r9, r3
 8007850:	464e      	mov	r6, r9
 8007852:	00ab      	lsls	r3, r5, #2
 8007854:	4333      	orrs	r3, r6
 8007856:	00a2      	lsls	r2, r4, #2
 8007858:	0014      	movs	r4, r2
 800785a:	001d      	movs	r5, r3
 800785c:	1a24      	subs	r4, r4, r0
 800785e:	418d      	sbcs	r5, r1
 8007860:	0f26      	lsrs	r6, r4, #28
 8007862:	012b      	lsls	r3, r5, #4
 8007864:	4333      	orrs	r3, r6
 8007866:	0122      	lsls	r2, r4, #4
 8007868:	1a12      	subs	r2, r2, r0
 800786a:	418b      	sbcs	r3, r1
 800786c:	0f14      	lsrs	r4, r2, #28
 800786e:	0119      	lsls	r1, r3, #4
 8007870:	4321      	orrs	r1, r4
 8007872:	0110      	lsls	r0, r2, #4
 8007874:	1a80      	subs	r0, r0, r2
 8007876:	4199      	sbcs	r1, r3
 8007878:	9a00      	ldr	r2, [sp, #0]
 800787a:	9b01      	ldr	r3, [sp, #4]
 800787c:	0004      	movs	r4, r0
 800787e:	000d      	movs	r5, r1
 8007880:	18a4      	adds	r4, r4, r2
 8007882:	415d      	adcs	r5, r3
 8007884:	4646      	mov	r6, r8
 8007886:	9408      	str	r4, [sp, #32]
 8007888:	9509      	str	r5, [sp, #36]	; 0x24
 800788a:	9500      	str	r5, [sp, #0]
 800788c:	4665      	mov	r5, ip
 800788e:	2100      	movs	r1, #0
 8007890:	6134      	str	r4, [r6, #16]
 8007892:	6968      	ldr	r0, [r5, #20]
 8007894:	2700      	movs	r7, #0
 8007896:	0e45      	lsrs	r5, r0, #25
 8007898:	01c4      	lsls	r4, r0, #7
 800789a:	1a24      	subs	r4, r4, r0
 800789c:	418d      	sbcs	r5, r1
 800789e:	0fa3      	lsrs	r3, r4, #30
 80078a0:	4699      	mov	r9, r3
 80078a2:	464e      	mov	r6, r9
 80078a4:	00ab      	lsls	r3, r5, #2
 80078a6:	4333      	orrs	r3, r6
 80078a8:	00a2      	lsls	r2, r4, #2
 80078aa:	1a12      	subs	r2, r2, r0
 80078ac:	418b      	sbcs	r3, r1
 80078ae:	0014      	movs	r4, r2
 80078b0:	0f16      	lsrs	r6, r2, #28
 80078b2:	011b      	lsls	r3, r3, #4
 80078b4:	4333      	orrs	r3, r6
 80078b6:	0122      	lsls	r2, r4, #4
 80078b8:	1a12      	subs	r2, r2, r0
 80078ba:	418b      	sbcs	r3, r1
 80078bc:	0f14      	lsrs	r4, r2, #28
 80078be:	0119      	lsls	r1, r3, #4
 80078c0:	4321      	orrs	r1, r4
 80078c2:	0110      	lsls	r0, r2, #4
 80078c4:	1a80      	subs	r0, r0, r2
 80078c6:	4199      	sbcs	r1, r3
 80078c8:	9701      	str	r7, [sp, #4]
 80078ca:	9b00      	ldr	r3, [sp, #0]
 80078cc:	9c01      	ldr	r4, [sp, #4]
 80078ce:	4645      	mov	r5, r8
 80078d0:	18c0      	adds	r0, r0, r3
 80078d2:	4161      	adcs	r1, r4
 80078d4:	6168      	str	r0, [r5, #20]
 80078d6:	4665      	mov	r5, ip
 80078d8:	0003      	movs	r3, r0
 80078da:	000c      	movs	r4, r1
 80078dc:	9100      	str	r1, [sp, #0]
 80078de:	2100      	movs	r1, #0
 80078e0:	69a8      	ldr	r0, [r5, #24]
 80078e2:	930a      	str	r3, [sp, #40]	; 0x28
 80078e4:	940b      	str	r4, [sp, #44]	; 0x2c
 80078e6:	0e45      	lsrs	r5, r0, #25
 80078e8:	01c4      	lsls	r4, r0, #7
 80078ea:	1a24      	subs	r4, r4, r0
 80078ec:	418d      	sbcs	r5, r1
 80078ee:	0fa2      	lsrs	r2, r4, #30
 80078f0:	00ab      	lsls	r3, r5, #2
 80078f2:	4313      	orrs	r3, r2
 80078f4:	00a2      	lsls	r2, r4, #2
 80078f6:	1a12      	subs	r2, r2, r0
 80078f8:	418b      	sbcs	r3, r1
 80078fa:	0014      	movs	r4, r2
 80078fc:	0f16      	lsrs	r6, r2, #28
 80078fe:	011b      	lsls	r3, r3, #4
 8007900:	4333      	orrs	r3, r6
 8007902:	0122      	lsls	r2, r4, #4
 8007904:	1a12      	subs	r2, r2, r0
 8007906:	418b      	sbcs	r3, r1
 8007908:	0f14      	lsrs	r4, r2, #28
 800790a:	0119      	lsls	r1, r3, #4
 800790c:	4321      	orrs	r1, r4
 800790e:	0110      	lsls	r0, r2, #4
 8007910:	1a80      	subs	r0, r0, r2
 8007912:	4199      	sbcs	r1, r3
 8007914:	9701      	str	r7, [sp, #4]
 8007916:	9b00      	ldr	r3, [sp, #0]
 8007918:	9c01      	ldr	r4, [sp, #4]
 800791a:	18c0      	adds	r0, r0, r3
 800791c:	4161      	adcs	r1, r4
 800791e:	0005      	movs	r5, r0
 8007920:	000e      	movs	r6, r1
 8007922:	950c      	str	r5, [sp, #48]	; 0x30
 8007924:	960d      	str	r6, [sp, #52]	; 0x34
 8007926:	2600      	movs	r6, #0
 8007928:	4647      	mov	r7, r8
 800792a:	9601      	str	r6, [sp, #4]
 800792c:	4666      	mov	r6, ip
 800792e:	9100      	str	r1, [sp, #0]
 8007930:	2100      	movs	r1, #0
 8007932:	61b8      	str	r0, [r7, #24]
 8007934:	69f0      	ldr	r0, [r6, #28]
 8007936:	0e45      	lsrs	r5, r0, #25
 8007938:	01c4      	lsls	r4, r0, #7
 800793a:	1a24      	subs	r4, r4, r0
 800793c:	418d      	sbcs	r5, r1
 800793e:	0fa6      	lsrs	r6, r4, #30
 8007940:	00ab      	lsls	r3, r5, #2
 8007942:	4333      	orrs	r3, r6
 8007944:	00a2      	lsls	r2, r4, #2
 8007946:	1a12      	subs	r2, r2, r0
 8007948:	418b      	sbcs	r3, r1
 800794a:	0014      	movs	r4, r2
 800794c:	0f16      	lsrs	r6, r2, #28
 800794e:	011b      	lsls	r3, r3, #4
 8007950:	4333      	orrs	r3, r6
 8007952:	0122      	lsls	r2, r4, #4
 8007954:	1a12      	subs	r2, r2, r0
 8007956:	418b      	sbcs	r3, r1
 8007958:	0f11      	lsrs	r1, r2, #28
 800795a:	011f      	lsls	r7, r3, #4
 800795c:	430f      	orrs	r7, r1
 800795e:	0116      	lsls	r6, r2, #4
 8007960:	1ab6      	subs	r6, r6, r2
 8007962:	419f      	sbcs	r7, r3
 8007964:	9a00      	ldr	r2, [sp, #0]
 8007966:	9b01      	ldr	r3, [sp, #4]
 8007968:	18b6      	adds	r6, r6, r2
 800796a:	415f      	adcs	r7, r3
 800796c:	4642      	mov	r2, r8
 800796e:	2300      	movs	r3, #0
 8007970:	61d6      	str	r6, [r2, #28]
 8007972:	0038      	movs	r0, r7
 8007974:	2226      	movs	r2, #38	; 0x26
 8007976:	2100      	movs	r1, #0
 8007978:	f7f8 fc52 	bl	8000220 <__aeabi_lmul>
 800797c:	2300      	movs	r3, #0
 800797e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007980:	2500      	movs	r5, #0
 8007982:	1880      	adds	r0, r0, r2
 8007984:	4159      	adcs	r1, r3
 8007986:	2300      	movs	r3, #0
 8007988:	000c      	movs	r4, r1
 800798a:	9a02      	ldr	r2, [sp, #8]
 800798c:	1912      	adds	r2, r2, r4
 800798e:	416b      	adcs	r3, r5
 8007990:	4644      	mov	r4, r8
 8007992:	2500      	movs	r5, #0
 8007994:	6062      	str	r2, [r4, #4]
 8007996:	001c      	movs	r4, r3
 8007998:	2300      	movs	r3, #0
 800799a:	9a04      	ldr	r2, [sp, #16]
 800799c:	1912      	adds	r2, r2, r4
 800799e:	416b      	adcs	r3, r5
 80079a0:	4644      	mov	r4, r8
 80079a2:	2500      	movs	r5, #0
 80079a4:	60a2      	str	r2, [r4, #8]
 80079a6:	001c      	movs	r4, r3
 80079a8:	2300      	movs	r3, #0
 80079aa:	9a06      	ldr	r2, [sp, #24]
 80079ac:	1912      	adds	r2, r2, r4
 80079ae:	416b      	adcs	r3, r5
 80079b0:	4644      	mov	r4, r8
 80079b2:	2500      	movs	r5, #0
 80079b4:	60e2      	str	r2, [r4, #12]
 80079b6:	001c      	movs	r4, r3
 80079b8:	2300      	movs	r3, #0
 80079ba:	9a08      	ldr	r2, [sp, #32]
 80079bc:	1912      	adds	r2, r2, r4
 80079be:	416b      	adcs	r3, r5
 80079c0:	4644      	mov	r4, r8
 80079c2:	2500      	movs	r5, #0
 80079c4:	6122      	str	r2, [r4, #16]
 80079c6:	001c      	movs	r4, r3
 80079c8:	2300      	movs	r3, #0
 80079ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079cc:	1912      	adds	r2, r2, r4
 80079ce:	416b      	adcs	r3, r5
 80079d0:	4644      	mov	r4, r8
 80079d2:	2500      	movs	r5, #0
 80079d4:	6162      	str	r2, [r4, #20]
 80079d6:	001c      	movs	r4, r3
 80079d8:	2300      	movs	r3, #0
 80079da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80079dc:	1912      	adds	r2, r2, r4
 80079de:	416b      	adcs	r3, r5
 80079e0:	4644      	mov	r4, r8
 80079e2:	2500      	movs	r5, #0
 80079e4:	61a2      	str	r2, [r4, #24]
 80079e6:	0032      	movs	r2, r6
 80079e8:	001c      	movs	r4, r3
 80079ea:	2300      	movs	r3, #0
 80079ec:	18a4      	adds	r4, r4, r2
 80079ee:	415d      	adcs	r5, r3
 80079f0:	2226      	movs	r2, #38	; 0x26
 80079f2:	4643      	mov	r3, r8
 80079f4:	436a      	muls	r2, r5
 80079f6:	1810      	adds	r0, r2, r0
 80079f8:	61dc      	str	r4, [r3, #28]
 80079fa:	6018      	str	r0, [r3, #0]
 80079fc:	b011      	add	sp, #68	; 0x44
 80079fe:	bc0c      	pop	{r2, r3}
 8007a00:	4690      	mov	r8, r2
 8007a02:	4699      	mov	r9, r3
 8007a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a06:	46c0      	nop			; (mov r8, r8)

08007a08 <C25519keyExchange.part.50>:
 8007a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a0a:	46ce      	mov	lr, r9
 8007a0c:	4647      	mov	r7, r8
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	4c17      	ldr	r4, [pc, #92]	; (8007a70 <C25519keyExchange.part.50+0x68>)
 8007a12:	0015      	movs	r5, r2
 8007a14:	44a5      	add	sp, r4
 8007a16:	ac04      	add	r4, sp, #16
 8007a18:	2220      	movs	r2, #32
 8007a1a:	4681      	mov	r9, r0
 8007a1c:	0020      	movs	r0, r4
 8007a1e:	f000 fc47 	bl	80082b0 <memcpy>
 8007a22:	2207      	movs	r2, #7
 8007a24:	7823      	ldrb	r3, [r4, #0]
 8007a26:	0029      	movs	r1, r5
 8007a28:	4393      	bics	r3, r2
 8007a2a:	7023      	strb	r3, [r4, #0]
 8007a2c:	237f      	movs	r3, #127	; 0x7f
 8007a2e:	7fe2      	ldrb	r2, [r4, #31]
 8007a30:	a8dc      	add	r0, sp, #880	; 0x370
 8007a32:	4013      	ands	r3, r2
 8007a34:	2240      	movs	r2, #64	; 0x40
 8007a36:	4313      	orrs	r3, r2
 8007a38:	77e3      	strb	r3, [r4, #31]
 8007a3a:	f7ff f897 	bl	8006b6c <fe25519_unpack>
 8007a3e:	9be3      	ldr	r3, [sp, #908]	; 0x38c
 8007a40:	a9dc      	add	r1, sp, #880	; 0x370
 8007a42:	9301      	str	r3, [sp, #4]
 8007a44:	005b      	lsls	r3, r3, #1
 8007a46:	085b      	lsrs	r3, r3, #1
 8007a48:	a82c      	add	r0, sp, #176	; 0xb0
 8007a4a:	93e3      	str	r3, [sp, #908]	; 0x38c
 8007a4c:	f7ff f91e 	bl	8006c8c <fe25519_copy>
 8007a50:	a834      	add	r0, sp, #208	; 0xd0
 8007a52:	f7ff f92d 	bl	8006cb0 <fe25519_setone>
 8007a56:	a83c      	add	r0, sp, #240	; 0xf0
 8007a58:	f7ff f92a 	bl	8006cb0 <fe25519_setone>
 8007a5c:	a844      	add	r0, sp, #272	; 0x110
 8007a5e:	f7ff f933 	bl	8006cc8 <fe25519_setzero>
 8007a62:	2301      	movs	r3, #1
 8007a64:	25fe      	movs	r5, #254	; 0xfe
 8007a66:	2701      	movs	r7, #1
 8007a68:	4e02      	ldr	r6, [pc, #8]	; (8007a74 <C25519keyExchange.part.50+0x6c>)
 8007a6a:	4698      	mov	r8, r3
 8007a6c:	e188      	b.n	8007d80 <C25519keyExchange.part.50+0x378>
 8007a6e:	46c0      	nop			; (mov r8, r8)
 8007a70:	fffffc2c 	.word	0xfffffc2c
 8007a74:	40023008 	.word	0x40023008
 8007a78:	993c      	ldr	r1, [sp, #240]	; 0xf0
 8007a7a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8007a7c:	000b      	movs	r3, r1
 8007a7e:	4053      	eors	r3, r2
 8007a80:	4023      	ands	r3, r4
 8007a82:	401a      	ands	r2, r3
 8007a84:	400b      	ands	r3, r1
 8007a86:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8007a88:	935c      	str	r3, [sp, #368]	; 0x170
 8007a8a:	000b      	movs	r3, r1
 8007a8c:	924c      	str	r2, [sp, #304]	; 0x130
 8007a8e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8007a90:	4053      	eors	r3, r2
 8007a92:	4023      	ands	r3, r4
 8007a94:	401a      	ands	r2, r3
 8007a96:	400b      	ands	r3, r1
 8007a98:	993e      	ldr	r1, [sp, #248]	; 0xf8
 8007a9a:	935d      	str	r3, [sp, #372]	; 0x174
 8007a9c:	000b      	movs	r3, r1
 8007a9e:	924d      	str	r2, [sp, #308]	; 0x134
 8007aa0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8007aa2:	4053      	eors	r3, r2
 8007aa4:	4023      	ands	r3, r4
 8007aa6:	401a      	ands	r2, r3
 8007aa8:	400b      	ands	r3, r1
 8007aaa:	993f      	ldr	r1, [sp, #252]	; 0xfc
 8007aac:	935e      	str	r3, [sp, #376]	; 0x178
 8007aae:	000b      	movs	r3, r1
 8007ab0:	924e      	str	r2, [sp, #312]	; 0x138
 8007ab2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8007ab4:	4053      	eors	r3, r2
 8007ab6:	4023      	ands	r3, r4
 8007ab8:	401a      	ands	r2, r3
 8007aba:	400b      	ands	r3, r1
 8007abc:	9940      	ldr	r1, [sp, #256]	; 0x100
 8007abe:	935f      	str	r3, [sp, #380]	; 0x17c
 8007ac0:	000b      	movs	r3, r1
 8007ac2:	924f      	str	r2, [sp, #316]	; 0x13c
 8007ac4:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8007ac6:	4053      	eors	r3, r2
 8007ac8:	4023      	ands	r3, r4
 8007aca:	401a      	ands	r2, r3
 8007acc:	400b      	ands	r3, r1
 8007ace:	9941      	ldr	r1, [sp, #260]	; 0x104
 8007ad0:	9360      	str	r3, [sp, #384]	; 0x180
 8007ad2:	000b      	movs	r3, r1
 8007ad4:	9250      	str	r2, [sp, #320]	; 0x140
 8007ad6:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8007ad8:	4053      	eors	r3, r2
 8007ada:	4023      	ands	r3, r4
 8007adc:	401a      	ands	r2, r3
 8007ade:	400b      	ands	r3, r1
 8007ae0:	9942      	ldr	r1, [sp, #264]	; 0x108
 8007ae2:	9361      	str	r3, [sp, #388]	; 0x184
 8007ae4:	000b      	movs	r3, r1
 8007ae6:	9251      	str	r2, [sp, #324]	; 0x144
 8007ae8:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8007aea:	4053      	eors	r3, r2
 8007aec:	4023      	ands	r3, r4
 8007aee:	401a      	ands	r2, r3
 8007af0:	400b      	ands	r3, r1
 8007af2:	9943      	ldr	r1, [sp, #268]	; 0x10c
 8007af4:	9362      	str	r3, [sp, #392]	; 0x188
 8007af6:	000b      	movs	r3, r1
 8007af8:	9252      	str	r2, [sp, #328]	; 0x148
 8007afa:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8007afc:	4053      	eors	r3, r2
 8007afe:	4023      	ands	r3, r4
 8007b00:	401a      	ands	r2, r3
 8007b02:	400b      	ands	r3, r1
 8007b04:	9944      	ldr	r1, [sp, #272]	; 0x110
 8007b06:	9363      	str	r3, [sp, #396]	; 0x18c
 8007b08:	000b      	movs	r3, r1
 8007b0a:	9253      	str	r2, [sp, #332]	; 0x14c
 8007b0c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8007b0e:	4053      	eors	r3, r2
 8007b10:	4063      	eors	r3, r4
 8007b12:	401a      	ands	r2, r3
 8007b14:	400b      	ands	r3, r1
 8007b16:	9945      	ldr	r1, [sp, #276]	; 0x114
 8007b18:	9364      	str	r3, [sp, #400]	; 0x190
 8007b1a:	000b      	movs	r3, r1
 8007b1c:	9254      	str	r2, [sp, #336]	; 0x150
 8007b1e:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8007b20:	4053      	eors	r3, r2
 8007b22:	4063      	eors	r3, r4
 8007b24:	401a      	ands	r2, r3
 8007b26:	400b      	ands	r3, r1
 8007b28:	9946      	ldr	r1, [sp, #280]	; 0x118
 8007b2a:	9365      	str	r3, [sp, #404]	; 0x194
 8007b2c:	000b      	movs	r3, r1
 8007b2e:	9255      	str	r2, [sp, #340]	; 0x154
 8007b30:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8007b32:	4053      	eors	r3, r2
 8007b34:	4063      	eors	r3, r4
 8007b36:	401a      	ands	r2, r3
 8007b38:	400b      	ands	r3, r1
 8007b3a:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8007b3c:	9366      	str	r3, [sp, #408]	; 0x198
 8007b3e:	000b      	movs	r3, r1
 8007b40:	9256      	str	r2, [sp, #344]	; 0x158
 8007b42:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8007b44:	4053      	eors	r3, r2
 8007b46:	4063      	eors	r3, r4
 8007b48:	401a      	ands	r2, r3
 8007b4a:	400b      	ands	r3, r1
 8007b4c:	9948      	ldr	r1, [sp, #288]	; 0x120
 8007b4e:	9367      	str	r3, [sp, #412]	; 0x19c
 8007b50:	000b      	movs	r3, r1
 8007b52:	9257      	str	r2, [sp, #348]	; 0x15c
 8007b54:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8007b56:	4053      	eors	r3, r2
 8007b58:	4063      	eors	r3, r4
 8007b5a:	401a      	ands	r2, r3
 8007b5c:	400b      	ands	r3, r1
 8007b5e:	9949      	ldr	r1, [sp, #292]	; 0x124
 8007b60:	9368      	str	r3, [sp, #416]	; 0x1a0
 8007b62:	000b      	movs	r3, r1
 8007b64:	9258      	str	r2, [sp, #352]	; 0x160
 8007b66:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8007b68:	4053      	eors	r3, r2
 8007b6a:	4063      	eors	r3, r4
 8007b6c:	401a      	ands	r2, r3
 8007b6e:	400b      	ands	r3, r1
 8007b70:	994a      	ldr	r1, [sp, #296]	; 0x128
 8007b72:	9369      	str	r3, [sp, #420]	; 0x1a4
 8007b74:	000b      	movs	r3, r1
 8007b76:	9259      	str	r2, [sp, #356]	; 0x164
 8007b78:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 8007b7a:	4053      	eors	r3, r2
 8007b7c:	4063      	eors	r3, r4
 8007b7e:	401a      	ands	r2, r3
 8007b80:	400b      	ands	r3, r1
 8007b82:	994b      	ldr	r1, [sp, #300]	; 0x12c
 8007b84:	936a      	str	r3, [sp, #424]	; 0x1a8
 8007b86:	000b      	movs	r3, r1
 8007b88:	925a      	str	r2, [sp, #360]	; 0x168
 8007b8a:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 8007b8c:	4053      	eors	r3, r2
 8007b8e:	4063      	eors	r3, r4
 8007b90:	401a      	ands	r2, r3
 8007b92:	400b      	ands	r3, r1
 8007b94:	925b      	str	r2, [sp, #364]	; 0x16c
 8007b96:	936b      	str	r3, [sp, #428]	; 0x1ac
 8007b98:	aa54      	add	r2, sp, #336	; 0x150
 8007b9a:	a94c      	add	r1, sp, #304	; 0x130
 8007b9c:	a88c      	add	r0, sp, #560	; 0x230
 8007b9e:	f7ff f899 	bl	8006cd4 <fe25519_add>
 8007ba2:	aa54      	add	r2, sp, #336	; 0x150
 8007ba4:	a94c      	add	r1, sp, #304	; 0x130
 8007ba6:	a894      	add	r0, sp, #592	; 0x250
 8007ba8:	f7ff f94e 	bl	8006e48 <fe25519_sub>
 8007bac:	aa64      	add	r2, sp, #400	; 0x190
 8007bae:	a95c      	add	r1, sp, #368	; 0x170
 8007bb0:	a89c      	add	r0, sp, #624	; 0x270
 8007bb2:	f7ff f88f 	bl	8006cd4 <fe25519_add>
 8007bb6:	aa64      	add	r2, sp, #400	; 0x190
 8007bb8:	a95c      	add	r1, sp, #368	; 0x170
 8007bba:	a8a4      	add	r0, sp, #656	; 0x290
 8007bbc:	f7ff f944 	bl	8006e48 <fe25519_sub>
 8007bc0:	a98c      	add	r1, sp, #560	; 0x230
 8007bc2:	a8ac      	add	r0, sp, #688	; 0x2b0
 8007bc4:	f7ff fcaa 	bl	800751c <fe25519_square>
 8007bc8:	a994      	add	r1, sp, #592	; 0x250
 8007bca:	a8b4      	add	r0, sp, #720	; 0x2d0
 8007bcc:	f7ff fca6 	bl	800751c <fe25519_square>
 8007bd0:	aa94      	add	r2, sp, #592	; 0x250
 8007bd2:	a99c      	add	r1, sp, #624	; 0x270
 8007bd4:	a8bc      	add	r0, sp, #752	; 0x2f0
 8007bd6:	f7ff faed 	bl	80071b4 <fe25519_mul>
 8007bda:	aa8c      	add	r2, sp, #560	; 0x230
 8007bdc:	a9a4      	add	r1, sp, #656	; 0x290
 8007bde:	a8c4      	add	r0, sp, #784	; 0x310
 8007be0:	f7ff fae8 	bl	80071b4 <fe25519_mul>
 8007be4:	aac4      	add	r2, sp, #784	; 0x310
 8007be6:	a9bc      	add	r1, sp, #752	; 0x2f0
 8007be8:	a8cc      	add	r0, sp, #816	; 0x330
 8007bea:	f7ff f873 	bl	8006cd4 <fe25519_add>
 8007bee:	aac4      	add	r2, sp, #784	; 0x310
 8007bf0:	a9bc      	add	r1, sp, #752	; 0x2f0
 8007bf2:	a8d4      	add	r0, sp, #848	; 0x350
 8007bf4:	f7ff f928 	bl	8006e48 <fe25519_sub>
 8007bf8:	a9d4      	add	r1, sp, #848	; 0x350
 8007bfa:	a80c      	add	r0, sp, #48	; 0x30
 8007bfc:	f7ff fc8e 	bl	800751c <fe25519_square>
 8007c00:	aab4      	add	r2, sp, #720	; 0x2d0
 8007c02:	a9ac      	add	r1, sp, #688	; 0x2b0
 8007c04:	a814      	add	r0, sp, #80	; 0x50
 8007c06:	f7ff f91f 	bl	8006e48 <fe25519_sub>
 8007c0a:	a914      	add	r1, sp, #80	; 0x50
 8007c0c:	a81c      	add	r0, sp, #112	; 0x70
 8007c0e:	f7ff fd77 	bl	8007700 <fe25519_mult121665>
 8007c12:	aaac      	add	r2, sp, #688	; 0x2b0
 8007c14:	a91c      	add	r1, sp, #112	; 0x70
 8007c16:	a824      	add	r0, sp, #144	; 0x90
 8007c18:	f7ff f85c 	bl	8006cd4 <fe25519_add>
 8007c1c:	aab4      	add	r2, sp, #720	; 0x2d0
 8007c1e:	a9ac      	add	r1, sp, #688	; 0x2b0
 8007c20:	a86c      	add	r0, sp, #432	; 0x1b0
 8007c22:	f7ff fac7 	bl	80071b4 <fe25519_mul>
 8007c26:	aa24      	add	r2, sp, #144	; 0x90
 8007c28:	a914      	add	r1, sp, #80	; 0x50
 8007c2a:	a874      	add	r0, sp, #464	; 0x1d0
 8007c2c:	f7ff fac2 	bl	80071b4 <fe25519_mul>
 8007c30:	a9cc      	add	r1, sp, #816	; 0x330
 8007c32:	a87c      	add	r0, sp, #496	; 0x1f0
 8007c34:	f7ff fc72 	bl	800751c <fe25519_square>
 8007c38:	aadc      	add	r2, sp, #880	; 0x370
 8007c3a:	a90c      	add	r1, sp, #48	; 0x30
 8007c3c:	a884      	add	r0, sp, #528	; 0x210
 8007c3e:	f7ff fab9 	bl	80071b4 <fe25519_mul>
 8007c42:	2300      	movs	r3, #0
 8007c44:	9302      	str	r3, [sp, #8]
 8007c46:	6037      	str	r7, [r6, #0]
 8007c48:	6833      	ldr	r3, [r6, #0]
 8007c4a:	9302      	str	r3, [sp, #8]
 8007c4c:	4bee      	ldr	r3, [pc, #952]	; (8008008 <C25519keyExchange.part.50+0x600>)
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	9202      	str	r2, [sp, #8]
 8007c52:	9a02      	ldr	r2, [sp, #8]
 8007c54:	3201      	adds	r2, #1
 8007c56:	d100      	bne.n	8007c5a <C25519keyExchange.part.50+0x252>
 8007c58:	e0f8      	b.n	8007e4c <C25519keyExchange.part.50+0x444>
 8007c5a:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8007c5c:	9a7c      	ldr	r2, [sp, #496]	; 0x1f0
 8007c5e:	000b      	movs	r3, r1
 8007c60:	4053      	eors	r3, r2
 8007c62:	4023      	ands	r3, r4
 8007c64:	401a      	ands	r2, r3
 8007c66:	400b      	ands	r3, r1
 8007c68:	996d      	ldr	r1, [sp, #436]	; 0x1b4
 8007c6a:	932c      	str	r3, [sp, #176]	; 0xb0
 8007c6c:	000b      	movs	r3, r1
 8007c6e:	923c      	str	r2, [sp, #240]	; 0xf0
 8007c70:	9a7d      	ldr	r2, [sp, #500]	; 0x1f4
 8007c72:	4053      	eors	r3, r2
 8007c74:	4023      	ands	r3, r4
 8007c76:	401a      	ands	r2, r3
 8007c78:	400b      	ands	r3, r1
 8007c7a:	996e      	ldr	r1, [sp, #440]	; 0x1b8
 8007c7c:	932d      	str	r3, [sp, #180]	; 0xb4
 8007c7e:	000b      	movs	r3, r1
 8007c80:	923d      	str	r2, [sp, #244]	; 0xf4
 8007c82:	9a7e      	ldr	r2, [sp, #504]	; 0x1f8
 8007c84:	4053      	eors	r3, r2
 8007c86:	4023      	ands	r3, r4
 8007c88:	401a      	ands	r2, r3
 8007c8a:	400b      	ands	r3, r1
 8007c8c:	996f      	ldr	r1, [sp, #444]	; 0x1bc
 8007c8e:	932e      	str	r3, [sp, #184]	; 0xb8
 8007c90:	000b      	movs	r3, r1
 8007c92:	923e      	str	r2, [sp, #248]	; 0xf8
 8007c94:	9a7f      	ldr	r2, [sp, #508]	; 0x1fc
 8007c96:	4053      	eors	r3, r2
 8007c98:	4023      	ands	r3, r4
 8007c9a:	401a      	ands	r2, r3
 8007c9c:	400b      	ands	r3, r1
 8007c9e:	9970      	ldr	r1, [sp, #448]	; 0x1c0
 8007ca0:	932f      	str	r3, [sp, #188]	; 0xbc
 8007ca2:	000b      	movs	r3, r1
 8007ca4:	923f      	str	r2, [sp, #252]	; 0xfc
 8007ca6:	9a80      	ldr	r2, [sp, #512]	; 0x200
 8007ca8:	4053      	eors	r3, r2
 8007caa:	4023      	ands	r3, r4
 8007cac:	401a      	ands	r2, r3
 8007cae:	400b      	ands	r3, r1
 8007cb0:	9971      	ldr	r1, [sp, #452]	; 0x1c4
 8007cb2:	9330      	str	r3, [sp, #192]	; 0xc0
 8007cb4:	000b      	movs	r3, r1
 8007cb6:	9240      	str	r2, [sp, #256]	; 0x100
 8007cb8:	9a81      	ldr	r2, [sp, #516]	; 0x204
 8007cba:	4053      	eors	r3, r2
 8007cbc:	4023      	ands	r3, r4
 8007cbe:	401a      	ands	r2, r3
 8007cc0:	400b      	ands	r3, r1
 8007cc2:	9972      	ldr	r1, [sp, #456]	; 0x1c8
 8007cc4:	9331      	str	r3, [sp, #196]	; 0xc4
 8007cc6:	000b      	movs	r3, r1
 8007cc8:	9241      	str	r2, [sp, #260]	; 0x104
 8007cca:	9a82      	ldr	r2, [sp, #520]	; 0x208
 8007ccc:	4053      	eors	r3, r2
 8007cce:	4023      	ands	r3, r4
 8007cd0:	401a      	ands	r2, r3
 8007cd2:	400b      	ands	r3, r1
 8007cd4:	9973      	ldr	r1, [sp, #460]	; 0x1cc
 8007cd6:	9332      	str	r3, [sp, #200]	; 0xc8
 8007cd8:	000b      	movs	r3, r1
 8007cda:	9242      	str	r2, [sp, #264]	; 0x108
 8007cdc:	9a83      	ldr	r2, [sp, #524]	; 0x20c
 8007cde:	4053      	eors	r3, r2
 8007ce0:	4023      	ands	r3, r4
 8007ce2:	401a      	ands	r2, r3
 8007ce4:	400b      	ands	r3, r1
 8007ce6:	9974      	ldr	r1, [sp, #464]	; 0x1d0
 8007ce8:	9333      	str	r3, [sp, #204]	; 0xcc
 8007cea:	000b      	movs	r3, r1
 8007cec:	9243      	str	r2, [sp, #268]	; 0x10c
 8007cee:	9a84      	ldr	r2, [sp, #528]	; 0x210
 8007cf0:	4053      	eors	r3, r2
 8007cf2:	4063      	eors	r3, r4
 8007cf4:	401a      	ands	r2, r3
 8007cf6:	400b      	ands	r3, r1
 8007cf8:	9975      	ldr	r1, [sp, #468]	; 0x1d4
 8007cfa:	9334      	str	r3, [sp, #208]	; 0xd0
 8007cfc:	000b      	movs	r3, r1
 8007cfe:	9244      	str	r2, [sp, #272]	; 0x110
 8007d00:	9a85      	ldr	r2, [sp, #532]	; 0x214
 8007d02:	4053      	eors	r3, r2
 8007d04:	4063      	eors	r3, r4
 8007d06:	401a      	ands	r2, r3
 8007d08:	400b      	ands	r3, r1
 8007d0a:	9976      	ldr	r1, [sp, #472]	; 0x1d8
 8007d0c:	9335      	str	r3, [sp, #212]	; 0xd4
 8007d0e:	000b      	movs	r3, r1
 8007d10:	9245      	str	r2, [sp, #276]	; 0x114
 8007d12:	9a86      	ldr	r2, [sp, #536]	; 0x218
 8007d14:	4053      	eors	r3, r2
 8007d16:	4063      	eors	r3, r4
 8007d18:	401a      	ands	r2, r3
 8007d1a:	400b      	ands	r3, r1
 8007d1c:	9977      	ldr	r1, [sp, #476]	; 0x1dc
 8007d1e:	9336      	str	r3, [sp, #216]	; 0xd8
 8007d20:	000b      	movs	r3, r1
 8007d22:	9246      	str	r2, [sp, #280]	; 0x118
 8007d24:	9a87      	ldr	r2, [sp, #540]	; 0x21c
 8007d26:	4053      	eors	r3, r2
 8007d28:	4063      	eors	r3, r4
 8007d2a:	401a      	ands	r2, r3
 8007d2c:	400b      	ands	r3, r1
 8007d2e:	9978      	ldr	r1, [sp, #480]	; 0x1e0
 8007d30:	9337      	str	r3, [sp, #220]	; 0xdc
 8007d32:	000b      	movs	r3, r1
 8007d34:	9247      	str	r2, [sp, #284]	; 0x11c
 8007d36:	9a88      	ldr	r2, [sp, #544]	; 0x220
 8007d38:	4053      	eors	r3, r2
 8007d3a:	4063      	eors	r3, r4
 8007d3c:	401a      	ands	r2, r3
 8007d3e:	400b      	ands	r3, r1
 8007d40:	9979      	ldr	r1, [sp, #484]	; 0x1e4
 8007d42:	9338      	str	r3, [sp, #224]	; 0xe0
 8007d44:	000b      	movs	r3, r1
 8007d46:	9248      	str	r2, [sp, #288]	; 0x120
 8007d48:	9a89      	ldr	r2, [sp, #548]	; 0x224
 8007d4a:	4053      	eors	r3, r2
 8007d4c:	4063      	eors	r3, r4
 8007d4e:	401a      	ands	r2, r3
 8007d50:	400b      	ands	r3, r1
 8007d52:	997a      	ldr	r1, [sp, #488]	; 0x1e8
 8007d54:	9339      	str	r3, [sp, #228]	; 0xe4
 8007d56:	000b      	movs	r3, r1
 8007d58:	9249      	str	r2, [sp, #292]	; 0x124
 8007d5a:	9a8a      	ldr	r2, [sp, #552]	; 0x228
 8007d5c:	4053      	eors	r3, r2
 8007d5e:	4063      	eors	r3, r4
 8007d60:	401a      	ands	r2, r3
 8007d62:	400b      	ands	r3, r1
 8007d64:	997b      	ldr	r1, [sp, #492]	; 0x1ec
 8007d66:	933a      	str	r3, [sp, #232]	; 0xe8
 8007d68:	000b      	movs	r3, r1
 8007d6a:	924a      	str	r2, [sp, #296]	; 0x128
 8007d6c:	9a8b      	ldr	r2, [sp, #556]	; 0x22c
 8007d6e:	4053      	eors	r3, r2
 8007d70:	405c      	eors	r4, r3
 8007d72:	4022      	ands	r2, r4
 8007d74:	400c      	ands	r4, r1
 8007d76:	924b      	str	r2, [sp, #300]	; 0x12c
 8007d78:	943b      	str	r4, [sp, #236]	; 0xec
 8007d7a:	3d01      	subs	r5, #1
 8007d7c:	d200      	bcs.n	8007d80 <C25519keyExchange.part.50+0x378>
 8007d7e:	e1da      	b.n	8008136 <C25519keyExchange.part.50+0x72e>
 8007d80:	aaf4      	add	r2, sp, #976	; 0x3d0
 8007d82:	4694      	mov	ip, r2
 8007d84:	4aa1      	ldr	r2, [pc, #644]	; (800800c <C25519keyExchange.part.50+0x604>)
 8007d86:	10eb      	asrs	r3, r5, #3
 8007d88:	4463      	add	r3, ip
 8007d8a:	4694      	mov	ip, r2
 8007d8c:	4463      	add	r3, ip
 8007d8e:	781c      	ldrb	r4, [r3, #0]
 8007d90:	2307      	movs	r3, #7
 8007d92:	402b      	ands	r3, r5
 8007d94:	411c      	asrs	r4, r3
 8007d96:	2300      	movs	r3, #0
 8007d98:	9303      	str	r3, [sp, #12]
 8007d9a:	4643      	mov	r3, r8
 8007d9c:	6033      	str	r3, [r6, #0]
 8007d9e:	6833      	ldr	r3, [r6, #0]
 8007da0:	403c      	ands	r4, r7
 8007da2:	9303      	str	r3, [sp, #12]
 8007da4:	4b98      	ldr	r3, [pc, #608]	; (8008008 <C25519keyExchange.part.50+0x600>)
 8007da6:	3c01      	subs	r4, #1
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	9203      	str	r2, [sp, #12]
 8007dac:	9a03      	ldr	r2, [sp, #12]
 8007dae:	3201      	adds	r2, #1
 8007db0:	d000      	beq.n	8007db4 <C25519keyExchange.part.50+0x3ac>
 8007db2:	e661      	b.n	8007a78 <C25519keyExchange.part.50+0x70>
 8007db4:	9a03      	ldr	r2, [sp, #12]
 8007db6:	601a      	str	r2, [r3, #0]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	9303      	str	r3, [sp, #12]
 8007dbc:	9b03      	ldr	r3, [sp, #12]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d100      	bne.n	8007dc4 <C25519keyExchange.part.50+0x3bc>
 8007dc2:	e08f      	b.n	8007ee4 <C25519keyExchange.part.50+0x4dc>
 8007dc4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8007dc6:	993c      	ldr	r1, [sp, #240]	; 0xf0
 8007dc8:	0013      	movs	r3, r2
 8007dca:	400b      	ands	r3, r1
 8007dcc:	4023      	ands	r3, r4
 8007dce:	401a      	ands	r2, r3
 8007dd0:	924c      	str	r2, [sp, #304]	; 0x130
 8007dd2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8007dd4:	400b      	ands	r3, r1
 8007dd6:	935c      	str	r3, [sp, #368]	; 0x170
 8007dd8:	0013      	movs	r3, r2
 8007dda:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8007ddc:	400b      	ands	r3, r1
 8007dde:	4023      	ands	r3, r4
 8007de0:	401a      	ands	r2, r3
 8007de2:	924d      	str	r2, [sp, #308]	; 0x134
 8007de4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8007de6:	400b      	ands	r3, r1
 8007de8:	935d      	str	r3, [sp, #372]	; 0x174
 8007dea:	0013      	movs	r3, r2
 8007dec:	993e      	ldr	r1, [sp, #248]	; 0xf8
 8007dee:	400b      	ands	r3, r1
 8007df0:	4023      	ands	r3, r4
 8007df2:	401a      	ands	r2, r3
 8007df4:	924e      	str	r2, [sp, #312]	; 0x138
 8007df6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8007df8:	400b      	ands	r3, r1
 8007dfa:	935e      	str	r3, [sp, #376]	; 0x178
 8007dfc:	0013      	movs	r3, r2
 8007dfe:	993f      	ldr	r1, [sp, #252]	; 0xfc
 8007e00:	400b      	ands	r3, r1
 8007e02:	4023      	ands	r3, r4
 8007e04:	401a      	ands	r2, r3
 8007e06:	924f      	str	r2, [sp, #316]	; 0x13c
 8007e08:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8007e0a:	400b      	ands	r3, r1
 8007e0c:	935f      	str	r3, [sp, #380]	; 0x17c
 8007e0e:	0013      	movs	r3, r2
 8007e10:	9940      	ldr	r1, [sp, #256]	; 0x100
 8007e12:	400b      	ands	r3, r1
 8007e14:	4023      	ands	r3, r4
 8007e16:	401a      	ands	r2, r3
 8007e18:	9250      	str	r2, [sp, #320]	; 0x140
 8007e1a:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8007e1c:	400b      	ands	r3, r1
 8007e1e:	9360      	str	r3, [sp, #384]	; 0x180
 8007e20:	0013      	movs	r3, r2
 8007e22:	9941      	ldr	r1, [sp, #260]	; 0x104
 8007e24:	400b      	ands	r3, r1
 8007e26:	4023      	ands	r3, r4
 8007e28:	401a      	ands	r2, r3
 8007e2a:	9251      	str	r2, [sp, #324]	; 0x144
 8007e2c:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8007e2e:	400b      	ands	r3, r1
 8007e30:	9361      	str	r3, [sp, #388]	; 0x184
 8007e32:	0013      	movs	r3, r2
 8007e34:	9942      	ldr	r1, [sp, #264]	; 0x108
 8007e36:	400b      	ands	r3, r1
 8007e38:	4023      	ands	r3, r4
 8007e3a:	401a      	ands	r2, r3
 8007e3c:	9252      	str	r2, [sp, #328]	; 0x148
 8007e3e:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8007e40:	400b      	ands	r3, r1
 8007e42:	9362      	str	r3, [sp, #392]	; 0x188
 8007e44:	0013      	movs	r3, r2
 8007e46:	9943      	ldr	r1, [sp, #268]	; 0x10c
 8007e48:	400b      	ands	r3, r1
 8007e4a:	e658      	b.n	8007afe <C25519keyExchange.part.50+0xf6>
 8007e4c:	9a02      	ldr	r2, [sp, #8]
 8007e4e:	601a      	str	r2, [r3, #0]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	9302      	str	r3, [sp, #8]
 8007e54:	9b02      	ldr	r3, [sp, #8]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d100      	bne.n	8007e5c <C25519keyExchange.part.50+0x454>
 8007e5a:	e0d9      	b.n	8008010 <C25519keyExchange.part.50+0x608>
 8007e5c:	9a7c      	ldr	r2, [sp, #496]	; 0x1f0
 8007e5e:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8007e60:	0013      	movs	r3, r2
 8007e62:	400b      	ands	r3, r1
 8007e64:	4023      	ands	r3, r4
 8007e66:	401a      	ands	r2, r3
 8007e68:	923c      	str	r2, [sp, #240]	; 0xf0
 8007e6a:	9a7d      	ldr	r2, [sp, #500]	; 0x1f4
 8007e6c:	400b      	ands	r3, r1
 8007e6e:	932c      	str	r3, [sp, #176]	; 0xb0
 8007e70:	0013      	movs	r3, r2
 8007e72:	996d      	ldr	r1, [sp, #436]	; 0x1b4
 8007e74:	400b      	ands	r3, r1
 8007e76:	4023      	ands	r3, r4
 8007e78:	401a      	ands	r2, r3
 8007e7a:	923d      	str	r2, [sp, #244]	; 0xf4
 8007e7c:	9a7e      	ldr	r2, [sp, #504]	; 0x1f8
 8007e7e:	400b      	ands	r3, r1
 8007e80:	932d      	str	r3, [sp, #180]	; 0xb4
 8007e82:	0013      	movs	r3, r2
 8007e84:	996e      	ldr	r1, [sp, #440]	; 0x1b8
 8007e86:	400b      	ands	r3, r1
 8007e88:	4023      	ands	r3, r4
 8007e8a:	401a      	ands	r2, r3
 8007e8c:	923e      	str	r2, [sp, #248]	; 0xf8
 8007e8e:	9a7f      	ldr	r2, [sp, #508]	; 0x1fc
 8007e90:	400b      	ands	r3, r1
 8007e92:	932e      	str	r3, [sp, #184]	; 0xb8
 8007e94:	0013      	movs	r3, r2
 8007e96:	996f      	ldr	r1, [sp, #444]	; 0x1bc
 8007e98:	400b      	ands	r3, r1
 8007e9a:	4023      	ands	r3, r4
 8007e9c:	401a      	ands	r2, r3
 8007e9e:	923f      	str	r2, [sp, #252]	; 0xfc
 8007ea0:	9a80      	ldr	r2, [sp, #512]	; 0x200
 8007ea2:	400b      	ands	r3, r1
 8007ea4:	932f      	str	r3, [sp, #188]	; 0xbc
 8007ea6:	0013      	movs	r3, r2
 8007ea8:	9970      	ldr	r1, [sp, #448]	; 0x1c0
 8007eaa:	400b      	ands	r3, r1
 8007eac:	4023      	ands	r3, r4
 8007eae:	401a      	ands	r2, r3
 8007eb0:	9240      	str	r2, [sp, #256]	; 0x100
 8007eb2:	9a81      	ldr	r2, [sp, #516]	; 0x204
 8007eb4:	400b      	ands	r3, r1
 8007eb6:	9330      	str	r3, [sp, #192]	; 0xc0
 8007eb8:	0013      	movs	r3, r2
 8007eba:	9971      	ldr	r1, [sp, #452]	; 0x1c4
 8007ebc:	400b      	ands	r3, r1
 8007ebe:	4023      	ands	r3, r4
 8007ec0:	401a      	ands	r2, r3
 8007ec2:	9241      	str	r2, [sp, #260]	; 0x104
 8007ec4:	9a82      	ldr	r2, [sp, #520]	; 0x208
 8007ec6:	400b      	ands	r3, r1
 8007ec8:	9331      	str	r3, [sp, #196]	; 0xc4
 8007eca:	0013      	movs	r3, r2
 8007ecc:	9972      	ldr	r1, [sp, #456]	; 0x1c8
 8007ece:	400b      	ands	r3, r1
 8007ed0:	4023      	ands	r3, r4
 8007ed2:	401a      	ands	r2, r3
 8007ed4:	9242      	str	r2, [sp, #264]	; 0x108
 8007ed6:	9a83      	ldr	r2, [sp, #524]	; 0x20c
 8007ed8:	400b      	ands	r3, r1
 8007eda:	9332      	str	r3, [sp, #200]	; 0xc8
 8007edc:	0013      	movs	r3, r2
 8007ede:	9973      	ldr	r1, [sp, #460]	; 0x1cc
 8007ee0:	400b      	ands	r3, r1
 8007ee2:	e6fd      	b.n	8007ce0 <C25519keyExchange.part.50+0x2d8>
 8007ee4:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8007ee6:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8007ee8:	001a      	movs	r2, r3
 8007eea:	404a      	eors	r2, r1
 8007eec:	4022      	ands	r2, r4
 8007eee:	4053      	eors	r3, r2
 8007ef0:	935c      	str	r3, [sp, #368]	; 0x170
 8007ef2:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 8007ef4:	4051      	eors	r1, r2
 8007ef6:	001a      	movs	r2, r3
 8007ef8:	914c      	str	r1, [sp, #304]	; 0x130
 8007efa:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8007efc:	404a      	eors	r2, r1
 8007efe:	4022      	ands	r2, r4
 8007f00:	4053      	eors	r3, r2
 8007f02:	935d      	str	r3, [sp, #372]	; 0x174
 8007f04:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8007f06:	4051      	eors	r1, r2
 8007f08:	001a      	movs	r2, r3
 8007f0a:	914d      	str	r1, [sp, #308]	; 0x134
 8007f0c:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8007f0e:	404a      	eors	r2, r1
 8007f10:	4022      	ands	r2, r4
 8007f12:	4053      	eors	r3, r2
 8007f14:	935e      	str	r3, [sp, #376]	; 0x178
 8007f16:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8007f18:	4051      	eors	r1, r2
 8007f1a:	001a      	movs	r2, r3
 8007f1c:	914e      	str	r1, [sp, #312]	; 0x138
 8007f1e:	992f      	ldr	r1, [sp, #188]	; 0xbc
 8007f20:	404a      	eors	r2, r1
 8007f22:	4022      	ands	r2, r4
 8007f24:	4053      	eors	r3, r2
 8007f26:	935f      	str	r3, [sp, #380]	; 0x17c
 8007f28:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8007f2a:	4051      	eors	r1, r2
 8007f2c:	001a      	movs	r2, r3
 8007f2e:	914f      	str	r1, [sp, #316]	; 0x13c
 8007f30:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8007f32:	404a      	eors	r2, r1
 8007f34:	4022      	ands	r2, r4
 8007f36:	4053      	eors	r3, r2
 8007f38:	9360      	str	r3, [sp, #384]	; 0x180
 8007f3a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007f3c:	4051      	eors	r1, r2
 8007f3e:	001a      	movs	r2, r3
 8007f40:	9150      	str	r1, [sp, #320]	; 0x140
 8007f42:	9931      	ldr	r1, [sp, #196]	; 0xc4
 8007f44:	404a      	eors	r2, r1
 8007f46:	4022      	ands	r2, r4
 8007f48:	4053      	eors	r3, r2
 8007f4a:	9361      	str	r3, [sp, #388]	; 0x184
 8007f4c:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8007f4e:	4051      	eors	r1, r2
 8007f50:	001a      	movs	r2, r3
 8007f52:	9151      	str	r1, [sp, #324]	; 0x144
 8007f54:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8007f56:	404a      	eors	r2, r1
 8007f58:	4022      	ands	r2, r4
 8007f5a:	4053      	eors	r3, r2
 8007f5c:	9362      	str	r3, [sp, #392]	; 0x188
 8007f5e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007f60:	4051      	eors	r1, r2
 8007f62:	001a      	movs	r2, r3
 8007f64:	9152      	str	r1, [sp, #328]	; 0x148
 8007f66:	9933      	ldr	r1, [sp, #204]	; 0xcc
 8007f68:	404a      	eors	r2, r1
 8007f6a:	4022      	ands	r2, r4
 8007f6c:	4051      	eors	r1, r2
 8007f6e:	4053      	eors	r3, r2
 8007f70:	9153      	str	r1, [sp, #332]	; 0x14c
 8007f72:	9363      	str	r3, [sp, #396]	; 0x18c
 8007f74:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8007f76:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8007f78:	001a      	movs	r2, r3
 8007f7a:	404a      	eors	r2, r1
 8007f7c:	4022      	ands	r2, r4
 8007f7e:	4053      	eors	r3, r2
 8007f80:	9364      	str	r3, [sp, #400]	; 0x190
 8007f82:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007f84:	4051      	eors	r1, r2
 8007f86:	001a      	movs	r2, r3
 8007f88:	9154      	str	r1, [sp, #336]	; 0x150
 8007f8a:	9935      	ldr	r1, [sp, #212]	; 0xd4
 8007f8c:	404a      	eors	r2, r1
 8007f8e:	4022      	ands	r2, r4
 8007f90:	4053      	eors	r3, r2
 8007f92:	9365      	str	r3, [sp, #404]	; 0x194
 8007f94:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8007f96:	4051      	eors	r1, r2
 8007f98:	001a      	movs	r2, r3
 8007f9a:	9155      	str	r1, [sp, #340]	; 0x154
 8007f9c:	9936      	ldr	r1, [sp, #216]	; 0xd8
 8007f9e:	404a      	eors	r2, r1
 8007fa0:	4022      	ands	r2, r4
 8007fa2:	4053      	eors	r3, r2
 8007fa4:	9366      	str	r3, [sp, #408]	; 0x198
 8007fa6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007fa8:	4051      	eors	r1, r2
 8007faa:	001a      	movs	r2, r3
 8007fac:	9156      	str	r1, [sp, #344]	; 0x158
 8007fae:	9937      	ldr	r1, [sp, #220]	; 0xdc
 8007fb0:	404a      	eors	r2, r1
 8007fb2:	4022      	ands	r2, r4
 8007fb4:	4053      	eors	r3, r2
 8007fb6:	9367      	str	r3, [sp, #412]	; 0x19c
 8007fb8:	9b48      	ldr	r3, [sp, #288]	; 0x120
 8007fba:	4051      	eors	r1, r2
 8007fbc:	001a      	movs	r2, r3
 8007fbe:	9157      	str	r1, [sp, #348]	; 0x15c
 8007fc0:	9938      	ldr	r1, [sp, #224]	; 0xe0
 8007fc2:	404a      	eors	r2, r1
 8007fc4:	4022      	ands	r2, r4
 8007fc6:	4053      	eors	r3, r2
 8007fc8:	9368      	str	r3, [sp, #416]	; 0x1a0
 8007fca:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8007fcc:	4051      	eors	r1, r2
 8007fce:	001a      	movs	r2, r3
 8007fd0:	9158      	str	r1, [sp, #352]	; 0x160
 8007fd2:	9939      	ldr	r1, [sp, #228]	; 0xe4
 8007fd4:	404a      	eors	r2, r1
 8007fd6:	4022      	ands	r2, r4
 8007fd8:	4053      	eors	r3, r2
 8007fda:	9369      	str	r3, [sp, #420]	; 0x1a4
 8007fdc:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 8007fde:	4051      	eors	r1, r2
 8007fe0:	001a      	movs	r2, r3
 8007fe2:	9159      	str	r1, [sp, #356]	; 0x164
 8007fe4:	993a      	ldr	r1, [sp, #232]	; 0xe8
 8007fe6:	404a      	eors	r2, r1
 8007fe8:	4022      	ands	r2, r4
 8007fea:	4053      	eors	r3, r2
 8007fec:	936a      	str	r3, [sp, #424]	; 0x1a8
 8007fee:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8007ff0:	4051      	eors	r1, r2
 8007ff2:	001a      	movs	r2, r3
 8007ff4:	915a      	str	r1, [sp, #360]	; 0x168
 8007ff6:	993b      	ldr	r1, [sp, #236]	; 0xec
 8007ff8:	404a      	eors	r2, r1
 8007ffa:	4022      	ands	r2, r4
 8007ffc:	4051      	eors	r1, r2
 8007ffe:	4053      	eors	r3, r2
 8008000:	915b      	str	r1, [sp, #364]	; 0x16c
 8008002:	936b      	str	r3, [sp, #428]	; 0x1ac
 8008004:	e5c8      	b.n	8007b98 <C25519keyExchange.part.50+0x190>
 8008006:	46c0      	nop			; (mov r8, r8)
 8008008:	40023000 	.word	0x40023000
 800800c:	fffffc40 	.word	0xfffffc40
 8008010:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 8008012:	997c      	ldr	r1, [sp, #496]	; 0x1f0
 8008014:	001a      	movs	r2, r3
 8008016:	404a      	eors	r2, r1
 8008018:	4022      	ands	r2, r4
 800801a:	4053      	eors	r3, r2
 800801c:	932c      	str	r3, [sp, #176]	; 0xb0
 800801e:	9b6d      	ldr	r3, [sp, #436]	; 0x1b4
 8008020:	4051      	eors	r1, r2
 8008022:	001a      	movs	r2, r3
 8008024:	913c      	str	r1, [sp, #240]	; 0xf0
 8008026:	997d      	ldr	r1, [sp, #500]	; 0x1f4
 8008028:	404a      	eors	r2, r1
 800802a:	4022      	ands	r2, r4
 800802c:	4053      	eors	r3, r2
 800802e:	932d      	str	r3, [sp, #180]	; 0xb4
 8008030:	9b6e      	ldr	r3, [sp, #440]	; 0x1b8
 8008032:	4051      	eors	r1, r2
 8008034:	001a      	movs	r2, r3
 8008036:	913d      	str	r1, [sp, #244]	; 0xf4
 8008038:	997e      	ldr	r1, [sp, #504]	; 0x1f8
 800803a:	404a      	eors	r2, r1
 800803c:	4022      	ands	r2, r4
 800803e:	4053      	eors	r3, r2
 8008040:	932e      	str	r3, [sp, #184]	; 0xb8
 8008042:	9b6f      	ldr	r3, [sp, #444]	; 0x1bc
 8008044:	4051      	eors	r1, r2
 8008046:	001a      	movs	r2, r3
 8008048:	913e      	str	r1, [sp, #248]	; 0xf8
 800804a:	997f      	ldr	r1, [sp, #508]	; 0x1fc
 800804c:	404a      	eors	r2, r1
 800804e:	4022      	ands	r2, r4
 8008050:	4053      	eors	r3, r2
 8008052:	932f      	str	r3, [sp, #188]	; 0xbc
 8008054:	9b70      	ldr	r3, [sp, #448]	; 0x1c0
 8008056:	4051      	eors	r1, r2
 8008058:	001a      	movs	r2, r3
 800805a:	913f      	str	r1, [sp, #252]	; 0xfc
 800805c:	9980      	ldr	r1, [sp, #512]	; 0x200
 800805e:	404a      	eors	r2, r1
 8008060:	4022      	ands	r2, r4
 8008062:	4053      	eors	r3, r2
 8008064:	9330      	str	r3, [sp, #192]	; 0xc0
 8008066:	9b71      	ldr	r3, [sp, #452]	; 0x1c4
 8008068:	4051      	eors	r1, r2
 800806a:	001a      	movs	r2, r3
 800806c:	9140      	str	r1, [sp, #256]	; 0x100
 800806e:	9981      	ldr	r1, [sp, #516]	; 0x204
 8008070:	404a      	eors	r2, r1
 8008072:	4022      	ands	r2, r4
 8008074:	4053      	eors	r3, r2
 8008076:	9331      	str	r3, [sp, #196]	; 0xc4
 8008078:	9b72      	ldr	r3, [sp, #456]	; 0x1c8
 800807a:	4051      	eors	r1, r2
 800807c:	001a      	movs	r2, r3
 800807e:	9141      	str	r1, [sp, #260]	; 0x104
 8008080:	9982      	ldr	r1, [sp, #520]	; 0x208
 8008082:	404a      	eors	r2, r1
 8008084:	4022      	ands	r2, r4
 8008086:	4053      	eors	r3, r2
 8008088:	9332      	str	r3, [sp, #200]	; 0xc8
 800808a:	9b73      	ldr	r3, [sp, #460]	; 0x1cc
 800808c:	4051      	eors	r1, r2
 800808e:	001a      	movs	r2, r3
 8008090:	9142      	str	r1, [sp, #264]	; 0x108
 8008092:	9983      	ldr	r1, [sp, #524]	; 0x20c
 8008094:	404a      	eors	r2, r1
 8008096:	4022      	ands	r2, r4
 8008098:	4051      	eors	r1, r2
 800809a:	4053      	eors	r3, r2
 800809c:	9143      	str	r1, [sp, #268]	; 0x10c
 800809e:	9333      	str	r3, [sp, #204]	; 0xcc
 80080a0:	9b74      	ldr	r3, [sp, #464]	; 0x1d0
 80080a2:	9984      	ldr	r1, [sp, #528]	; 0x210
 80080a4:	001a      	movs	r2, r3
 80080a6:	404a      	eors	r2, r1
 80080a8:	4022      	ands	r2, r4
 80080aa:	4053      	eors	r3, r2
 80080ac:	9334      	str	r3, [sp, #208]	; 0xd0
 80080ae:	9b75      	ldr	r3, [sp, #468]	; 0x1d4
 80080b0:	4051      	eors	r1, r2
 80080b2:	001a      	movs	r2, r3
 80080b4:	9144      	str	r1, [sp, #272]	; 0x110
 80080b6:	9985      	ldr	r1, [sp, #532]	; 0x214
 80080b8:	404a      	eors	r2, r1
 80080ba:	4022      	ands	r2, r4
 80080bc:	4053      	eors	r3, r2
 80080be:	9335      	str	r3, [sp, #212]	; 0xd4
 80080c0:	9b76      	ldr	r3, [sp, #472]	; 0x1d8
 80080c2:	4051      	eors	r1, r2
 80080c4:	001a      	movs	r2, r3
 80080c6:	9145      	str	r1, [sp, #276]	; 0x114
 80080c8:	9986      	ldr	r1, [sp, #536]	; 0x218
 80080ca:	404a      	eors	r2, r1
 80080cc:	4022      	ands	r2, r4
 80080ce:	4053      	eors	r3, r2
 80080d0:	9336      	str	r3, [sp, #216]	; 0xd8
 80080d2:	9b77      	ldr	r3, [sp, #476]	; 0x1dc
 80080d4:	4051      	eors	r1, r2
 80080d6:	001a      	movs	r2, r3
 80080d8:	9146      	str	r1, [sp, #280]	; 0x118
 80080da:	9987      	ldr	r1, [sp, #540]	; 0x21c
 80080dc:	404a      	eors	r2, r1
 80080de:	4022      	ands	r2, r4
 80080e0:	4053      	eors	r3, r2
 80080e2:	9337      	str	r3, [sp, #220]	; 0xdc
 80080e4:	9b78      	ldr	r3, [sp, #480]	; 0x1e0
 80080e6:	4051      	eors	r1, r2
 80080e8:	001a      	movs	r2, r3
 80080ea:	9147      	str	r1, [sp, #284]	; 0x11c
 80080ec:	9988      	ldr	r1, [sp, #544]	; 0x220
 80080ee:	404a      	eors	r2, r1
 80080f0:	4022      	ands	r2, r4
 80080f2:	4053      	eors	r3, r2
 80080f4:	9338      	str	r3, [sp, #224]	; 0xe0
 80080f6:	9b79      	ldr	r3, [sp, #484]	; 0x1e4
 80080f8:	4051      	eors	r1, r2
 80080fa:	001a      	movs	r2, r3
 80080fc:	9148      	str	r1, [sp, #288]	; 0x120
 80080fe:	9989      	ldr	r1, [sp, #548]	; 0x224
 8008100:	404a      	eors	r2, r1
 8008102:	4022      	ands	r2, r4
 8008104:	4053      	eors	r3, r2
 8008106:	9339      	str	r3, [sp, #228]	; 0xe4
 8008108:	9b7a      	ldr	r3, [sp, #488]	; 0x1e8
 800810a:	4051      	eors	r1, r2
 800810c:	001a      	movs	r2, r3
 800810e:	9149      	str	r1, [sp, #292]	; 0x124
 8008110:	998a      	ldr	r1, [sp, #552]	; 0x228
 8008112:	404a      	eors	r2, r1
 8008114:	4022      	ands	r2, r4
 8008116:	4053      	eors	r3, r2
 8008118:	933a      	str	r3, [sp, #232]	; 0xe8
 800811a:	9b7b      	ldr	r3, [sp, #492]	; 0x1ec
 800811c:	4051      	eors	r1, r2
 800811e:	914a      	str	r1, [sp, #296]	; 0x128
 8008120:	0019      	movs	r1, r3
 8008122:	9a8b      	ldr	r2, [sp, #556]	; 0x22c
 8008124:	4051      	eors	r1, r2
 8008126:	400c      	ands	r4, r1
 8008128:	4062      	eors	r2, r4
 800812a:	405c      	eors	r4, r3
 800812c:	924b      	str	r2, [sp, #300]	; 0x12c
 800812e:	943b      	str	r4, [sp, #236]	; 0xec
 8008130:	3d01      	subs	r5, #1
 8008132:	d300      	bcc.n	8008136 <C25519keyExchange.part.50+0x72e>
 8008134:	e624      	b.n	8007d80 <C25519keyExchange.part.50+0x378>
 8008136:	a93c      	add	r1, sp, #240	; 0xf0
 8008138:	a8dc      	add	r0, sp, #880	; 0x370
 800813a:	f7fe fda7 	bl	8006c8c <fe25519_copy>
 800813e:	a944      	add	r1, sp, #272	; 0x110
 8008140:	a8e4      	add	r0, sp, #912	; 0x390
 8008142:	f7fe fda3 	bl	8006c8c <fe25519_copy>
 8008146:	a9e4      	add	r1, sp, #912	; 0x390
 8008148:	0008      	movs	r0, r1
 800814a:	f7ff f9ed 	bl	8007528 <fe25519_invert>
 800814e:	aae4      	add	r2, sp, #912	; 0x390
 8008150:	a9dc      	add	r1, sp, #880	; 0x370
 8008152:	a8ec      	add	r0, sp, #944	; 0x3b0
 8008154:	f7ff f82e 	bl	80071b4 <fe25519_mul>
 8008158:	4648      	mov	r0, r9
 800815a:	a9ec      	add	r1, sp, #944	; 0x3b0
 800815c:	f7fe ffda 	bl	8007114 <fe25519_pack>
 8008160:	2000      	movs	r0, #0
 8008162:	23f5      	movs	r3, #245	; 0xf5
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	449d      	add	sp, r3
 8008168:	bc0c      	pop	{r2, r3}
 800816a:	4690      	mov	r8, r2
 800816c:	4699      	mov	r9, r3
 800816e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008170 <C25519keyGen>:
 8008170:	b530      	push	{r4, r5, lr}
 8008172:	b089      	sub	sp, #36	; 0x24
 8008174:	2220      	movs	r2, #32
 8008176:	0004      	movs	r4, r0
 8008178:	000d      	movs	r5, r1
 800817a:	4668      	mov	r0, sp
 800817c:	2100      	movs	r1, #0
 800817e:	f000 f8a0 	bl	80082c2 <memset>
 8008182:	2309      	movs	r3, #9
 8008184:	466a      	mov	r2, sp
 8008186:	7013      	strb	r3, [r2, #0]
 8008188:	2c00      	cmp	r4, #0
 800818a:	d013      	beq.n	80081b4 <C25519keyGen+0x44>
 800818c:	2d00      	cmp	r5, #0
 800818e:	d011      	beq.n	80081b4 <C25519keyGen+0x44>
 8008190:	2207      	movs	r2, #7
 8008192:	7823      	ldrb	r3, [r4, #0]
 8008194:	0021      	movs	r1, r4
 8008196:	4393      	bics	r3, r2
 8008198:	7023      	strb	r3, [r4, #0]
 800819a:	237f      	movs	r3, #127	; 0x7f
 800819c:	7fe2      	ldrb	r2, [r4, #31]
 800819e:	0028      	movs	r0, r5
 80081a0:	4013      	ands	r3, r2
 80081a2:	2240      	movs	r2, #64	; 0x40
 80081a4:	4313      	orrs	r3, r2
 80081a6:	77e3      	strb	r3, [r4, #31]
 80081a8:	466a      	mov	r2, sp
 80081aa:	f7ff fc2d 	bl	8007a08 <C25519keyExchange.part.50>
 80081ae:	2000      	movs	r0, #0
 80081b0:	b009      	add	sp, #36	; 0x24
 80081b2:	bd30      	pop	{r4, r5, pc}
 80081b4:	4800      	ldr	r0, [pc, #0]	; (80081b8 <C25519keyGen+0x48>)
 80081b6:	e7fb      	b.n	80081b0 <C25519keyGen+0x40>
 80081b8:	000015e4 	.word	0x000015e4

080081bc <C25519keyExchange>:
 80081bc:	b510      	push	{r4, lr}
 80081be:	2900      	cmp	r1, #0
 80081c0:	d006      	beq.n	80081d0 <C25519keyExchange+0x14>
 80081c2:	2a00      	cmp	r2, #0
 80081c4:	d004      	beq.n	80081d0 <C25519keyExchange+0x14>
 80081c6:	2800      	cmp	r0, #0
 80081c8:	d002      	beq.n	80081d0 <C25519keyExchange+0x14>
 80081ca:	f7ff fc1d 	bl	8007a08 <C25519keyExchange.part.50>
 80081ce:	bd10      	pop	{r4, pc}
 80081d0:	4800      	ldr	r0, [pc, #0]	; (80081d4 <C25519keyExchange+0x18>)
 80081d2:	e7fc      	b.n	80081ce <C25519keyExchange+0x12>
 80081d4:	000015e4 	.word	0x000015e4

080081d8 <__assert_func>:
 80081d8:	b530      	push	{r4, r5, lr}
 80081da:	001c      	movs	r4, r3
 80081dc:	4b09      	ldr	r3, [pc, #36]	; (8008204 <__assert_func+0x2c>)
 80081de:	0005      	movs	r5, r0
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	b085      	sub	sp, #20
 80081e4:	68d8      	ldr	r0, [r3, #12]
 80081e6:	4b08      	ldr	r3, [pc, #32]	; (8008208 <__assert_func+0x30>)
 80081e8:	2a00      	cmp	r2, #0
 80081ea:	d101      	bne.n	80081f0 <__assert_func+0x18>
 80081ec:	4b07      	ldr	r3, [pc, #28]	; (800820c <__assert_func+0x34>)
 80081ee:	001a      	movs	r2, r3
 80081f0:	9202      	str	r2, [sp, #8]
 80081f2:	9301      	str	r3, [sp, #4]
 80081f4:	9100      	str	r1, [sp, #0]
 80081f6:	002b      	movs	r3, r5
 80081f8:	0022      	movs	r2, r4
 80081fa:	4905      	ldr	r1, [pc, #20]	; (8008210 <__assert_func+0x38>)
 80081fc:	f000 f81a 	bl	8008234 <fiprintf>
 8008200:	f000 fcb0 	bl	8008b64 <abort>
 8008204:	2000000c 	.word	0x2000000c
 8008208:	080093c8 	.word	0x080093c8
 800820c:	08009403 	.word	0x08009403
 8008210:	080093d5 	.word	0x080093d5

08008214 <calloc>:
 8008214:	b510      	push	{r4, lr}
 8008216:	4b03      	ldr	r3, [pc, #12]	; (8008224 <calloc+0x10>)
 8008218:	000a      	movs	r2, r1
 800821a:	0001      	movs	r1, r0
 800821c:	6818      	ldr	r0, [r3, #0]
 800821e:	f000 f858 	bl	80082d2 <_calloc_r>
 8008222:	bd10      	pop	{r4, pc}
 8008224:	2000000c 	.word	0x2000000c

08008228 <__errno>:
 8008228:	4b01      	ldr	r3, [pc, #4]	; (8008230 <__errno+0x8>)
 800822a:	6818      	ldr	r0, [r3, #0]
 800822c:	4770      	bx	lr
 800822e:	46c0      	nop			; (mov r8, r8)
 8008230:	2000000c 	.word	0x2000000c

08008234 <fiprintf>:
 8008234:	b40e      	push	{r1, r2, r3}
 8008236:	b503      	push	{r0, r1, lr}
 8008238:	0001      	movs	r1, r0
 800823a:	ab03      	add	r3, sp, #12
 800823c:	4804      	ldr	r0, [pc, #16]	; (8008250 <fiprintf+0x1c>)
 800823e:	cb04      	ldmia	r3!, {r2}
 8008240:	6800      	ldr	r0, [r0, #0]
 8008242:	9301      	str	r3, [sp, #4]
 8008244:	f000 f924 	bl	8008490 <_vfiprintf_r>
 8008248:	b002      	add	sp, #8
 800824a:	bc08      	pop	{r3}
 800824c:	b003      	add	sp, #12
 800824e:	4718      	bx	r3
 8008250:	2000000c 	.word	0x2000000c

08008254 <__libc_init_array>:
 8008254:	b570      	push	{r4, r5, r6, lr}
 8008256:	2600      	movs	r6, #0
 8008258:	4d0c      	ldr	r5, [pc, #48]	; (800828c <__libc_init_array+0x38>)
 800825a:	4c0d      	ldr	r4, [pc, #52]	; (8008290 <__libc_init_array+0x3c>)
 800825c:	1b64      	subs	r4, r4, r5
 800825e:	10a4      	asrs	r4, r4, #2
 8008260:	42a6      	cmp	r6, r4
 8008262:	d109      	bne.n	8008278 <__libc_init_array+0x24>
 8008264:	2600      	movs	r6, #0
 8008266:	f000 ff93 	bl	8009190 <_init>
 800826a:	4d0a      	ldr	r5, [pc, #40]	; (8008294 <__libc_init_array+0x40>)
 800826c:	4c0a      	ldr	r4, [pc, #40]	; (8008298 <__libc_init_array+0x44>)
 800826e:	1b64      	subs	r4, r4, r5
 8008270:	10a4      	asrs	r4, r4, #2
 8008272:	42a6      	cmp	r6, r4
 8008274:	d105      	bne.n	8008282 <__libc_init_array+0x2e>
 8008276:	bd70      	pop	{r4, r5, r6, pc}
 8008278:	00b3      	lsls	r3, r6, #2
 800827a:	58eb      	ldr	r3, [r5, r3]
 800827c:	4798      	blx	r3
 800827e:	3601      	adds	r6, #1
 8008280:	e7ee      	b.n	8008260 <__libc_init_array+0xc>
 8008282:	00b3      	lsls	r3, r6, #2
 8008284:	58eb      	ldr	r3, [r5, r3]
 8008286:	4798      	blx	r3
 8008288:	3601      	adds	r6, #1
 800828a:	e7f2      	b.n	8008272 <__libc_init_array+0x1e>
 800828c:	0800949c 	.word	0x0800949c
 8008290:	0800949c 	.word	0x0800949c
 8008294:	0800949c 	.word	0x0800949c
 8008298:	080094a0 	.word	0x080094a0

0800829c <free>:
 800829c:	b510      	push	{r4, lr}
 800829e:	4b03      	ldr	r3, [pc, #12]	; (80082ac <free+0x10>)
 80082a0:	0001      	movs	r1, r0
 80082a2:	6818      	ldr	r0, [r3, #0]
 80082a4:	f000 f824 	bl	80082f0 <_free_r>
 80082a8:	bd10      	pop	{r4, pc}
 80082aa:	46c0      	nop			; (mov r8, r8)
 80082ac:	2000000c 	.word	0x2000000c

080082b0 <memcpy>:
 80082b0:	2300      	movs	r3, #0
 80082b2:	b510      	push	{r4, lr}
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d100      	bne.n	80082ba <memcpy+0xa>
 80082b8:	bd10      	pop	{r4, pc}
 80082ba:	5ccc      	ldrb	r4, [r1, r3]
 80082bc:	54c4      	strb	r4, [r0, r3]
 80082be:	3301      	adds	r3, #1
 80082c0:	e7f8      	b.n	80082b4 <memcpy+0x4>

080082c2 <memset>:
 80082c2:	0003      	movs	r3, r0
 80082c4:	1812      	adds	r2, r2, r0
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d100      	bne.n	80082cc <memset+0xa>
 80082ca:	4770      	bx	lr
 80082cc:	7019      	strb	r1, [r3, #0]
 80082ce:	3301      	adds	r3, #1
 80082d0:	e7f9      	b.n	80082c6 <memset+0x4>

080082d2 <_calloc_r>:
 80082d2:	434a      	muls	r2, r1
 80082d4:	b570      	push	{r4, r5, r6, lr}
 80082d6:	0011      	movs	r1, r2
 80082d8:	0014      	movs	r4, r2
 80082da:	f000 f853 	bl	8008384 <_malloc_r>
 80082de:	1e05      	subs	r5, r0, #0
 80082e0:	d003      	beq.n	80082ea <_calloc_r+0x18>
 80082e2:	0022      	movs	r2, r4
 80082e4:	2100      	movs	r1, #0
 80082e6:	f7ff ffec 	bl	80082c2 <memset>
 80082ea:	0028      	movs	r0, r5
 80082ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080082f0 <_free_r>:
 80082f0:	b570      	push	{r4, r5, r6, lr}
 80082f2:	0005      	movs	r5, r0
 80082f4:	2900      	cmp	r1, #0
 80082f6:	d010      	beq.n	800831a <_free_r+0x2a>
 80082f8:	1f0c      	subs	r4, r1, #4
 80082fa:	6823      	ldr	r3, [r4, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	da00      	bge.n	8008302 <_free_r+0x12>
 8008300:	18e4      	adds	r4, r4, r3
 8008302:	0028      	movs	r0, r5
 8008304:	f000 fe39 	bl	8008f7a <__malloc_lock>
 8008308:	4a1d      	ldr	r2, [pc, #116]	; (8008380 <_free_r+0x90>)
 800830a:	6813      	ldr	r3, [r2, #0]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d105      	bne.n	800831c <_free_r+0x2c>
 8008310:	6063      	str	r3, [r4, #4]
 8008312:	6014      	str	r4, [r2, #0]
 8008314:	0028      	movs	r0, r5
 8008316:	f000 fe31 	bl	8008f7c <__malloc_unlock>
 800831a:	bd70      	pop	{r4, r5, r6, pc}
 800831c:	42a3      	cmp	r3, r4
 800831e:	d909      	bls.n	8008334 <_free_r+0x44>
 8008320:	6821      	ldr	r1, [r4, #0]
 8008322:	1860      	adds	r0, r4, r1
 8008324:	4283      	cmp	r3, r0
 8008326:	d1f3      	bne.n	8008310 <_free_r+0x20>
 8008328:	6818      	ldr	r0, [r3, #0]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	1841      	adds	r1, r0, r1
 800832e:	6021      	str	r1, [r4, #0]
 8008330:	e7ee      	b.n	8008310 <_free_r+0x20>
 8008332:	0013      	movs	r3, r2
 8008334:	685a      	ldr	r2, [r3, #4]
 8008336:	2a00      	cmp	r2, #0
 8008338:	d001      	beq.n	800833e <_free_r+0x4e>
 800833a:	42a2      	cmp	r2, r4
 800833c:	d9f9      	bls.n	8008332 <_free_r+0x42>
 800833e:	6819      	ldr	r1, [r3, #0]
 8008340:	1858      	adds	r0, r3, r1
 8008342:	42a0      	cmp	r0, r4
 8008344:	d10b      	bne.n	800835e <_free_r+0x6e>
 8008346:	6820      	ldr	r0, [r4, #0]
 8008348:	1809      	adds	r1, r1, r0
 800834a:	1858      	adds	r0, r3, r1
 800834c:	6019      	str	r1, [r3, #0]
 800834e:	4282      	cmp	r2, r0
 8008350:	d1e0      	bne.n	8008314 <_free_r+0x24>
 8008352:	6810      	ldr	r0, [r2, #0]
 8008354:	6852      	ldr	r2, [r2, #4]
 8008356:	1841      	adds	r1, r0, r1
 8008358:	6019      	str	r1, [r3, #0]
 800835a:	605a      	str	r2, [r3, #4]
 800835c:	e7da      	b.n	8008314 <_free_r+0x24>
 800835e:	42a0      	cmp	r0, r4
 8008360:	d902      	bls.n	8008368 <_free_r+0x78>
 8008362:	230c      	movs	r3, #12
 8008364:	602b      	str	r3, [r5, #0]
 8008366:	e7d5      	b.n	8008314 <_free_r+0x24>
 8008368:	6821      	ldr	r1, [r4, #0]
 800836a:	1860      	adds	r0, r4, r1
 800836c:	4282      	cmp	r2, r0
 800836e:	d103      	bne.n	8008378 <_free_r+0x88>
 8008370:	6810      	ldr	r0, [r2, #0]
 8008372:	6852      	ldr	r2, [r2, #4]
 8008374:	1841      	adds	r1, r0, r1
 8008376:	6021      	str	r1, [r4, #0]
 8008378:	6062      	str	r2, [r4, #4]
 800837a:	605c      	str	r4, [r3, #4]
 800837c:	e7ca      	b.n	8008314 <_free_r+0x24>
 800837e:	46c0      	nop			; (mov r8, r8)
 8008380:	20000544 	.word	0x20000544

08008384 <_malloc_r>:
 8008384:	2303      	movs	r3, #3
 8008386:	b570      	push	{r4, r5, r6, lr}
 8008388:	1ccd      	adds	r5, r1, #3
 800838a:	439d      	bics	r5, r3
 800838c:	3508      	adds	r5, #8
 800838e:	0006      	movs	r6, r0
 8008390:	2d0c      	cmp	r5, #12
 8008392:	d21e      	bcs.n	80083d2 <_malloc_r+0x4e>
 8008394:	250c      	movs	r5, #12
 8008396:	42a9      	cmp	r1, r5
 8008398:	d81d      	bhi.n	80083d6 <_malloc_r+0x52>
 800839a:	0030      	movs	r0, r6
 800839c:	f000 fded 	bl	8008f7a <__malloc_lock>
 80083a0:	4a25      	ldr	r2, [pc, #148]	; (8008438 <_malloc_r+0xb4>)
 80083a2:	6814      	ldr	r4, [r2, #0]
 80083a4:	0021      	movs	r1, r4
 80083a6:	2900      	cmp	r1, #0
 80083a8:	d119      	bne.n	80083de <_malloc_r+0x5a>
 80083aa:	4c24      	ldr	r4, [pc, #144]	; (800843c <_malloc_r+0xb8>)
 80083ac:	6823      	ldr	r3, [r4, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d103      	bne.n	80083ba <_malloc_r+0x36>
 80083b2:	0030      	movs	r0, r6
 80083b4:	f000 faf8 	bl	80089a8 <_sbrk_r>
 80083b8:	6020      	str	r0, [r4, #0]
 80083ba:	0029      	movs	r1, r5
 80083bc:	0030      	movs	r0, r6
 80083be:	f000 faf3 	bl	80089a8 <_sbrk_r>
 80083c2:	1c43      	adds	r3, r0, #1
 80083c4:	d12b      	bne.n	800841e <_malloc_r+0x9a>
 80083c6:	230c      	movs	r3, #12
 80083c8:	0030      	movs	r0, r6
 80083ca:	6033      	str	r3, [r6, #0]
 80083cc:	f000 fdd6 	bl	8008f7c <__malloc_unlock>
 80083d0:	e003      	b.n	80083da <_malloc_r+0x56>
 80083d2:	2d00      	cmp	r5, #0
 80083d4:	dadf      	bge.n	8008396 <_malloc_r+0x12>
 80083d6:	230c      	movs	r3, #12
 80083d8:	6033      	str	r3, [r6, #0]
 80083da:	2000      	movs	r0, #0
 80083dc:	bd70      	pop	{r4, r5, r6, pc}
 80083de:	680b      	ldr	r3, [r1, #0]
 80083e0:	1b5b      	subs	r3, r3, r5
 80083e2:	d419      	bmi.n	8008418 <_malloc_r+0x94>
 80083e4:	2b0b      	cmp	r3, #11
 80083e6:	d903      	bls.n	80083f0 <_malloc_r+0x6c>
 80083e8:	600b      	str	r3, [r1, #0]
 80083ea:	18cc      	adds	r4, r1, r3
 80083ec:	6025      	str	r5, [r4, #0]
 80083ee:	e003      	b.n	80083f8 <_malloc_r+0x74>
 80083f0:	684b      	ldr	r3, [r1, #4]
 80083f2:	428c      	cmp	r4, r1
 80083f4:	d10d      	bne.n	8008412 <_malloc_r+0x8e>
 80083f6:	6013      	str	r3, [r2, #0]
 80083f8:	0030      	movs	r0, r6
 80083fa:	f000 fdbf 	bl	8008f7c <__malloc_unlock>
 80083fe:	0020      	movs	r0, r4
 8008400:	2207      	movs	r2, #7
 8008402:	300b      	adds	r0, #11
 8008404:	1d23      	adds	r3, r4, #4
 8008406:	4390      	bics	r0, r2
 8008408:	1ac3      	subs	r3, r0, r3
 800840a:	d0e7      	beq.n	80083dc <_malloc_r+0x58>
 800840c:	425a      	negs	r2, r3
 800840e:	50e2      	str	r2, [r4, r3]
 8008410:	e7e4      	b.n	80083dc <_malloc_r+0x58>
 8008412:	6063      	str	r3, [r4, #4]
 8008414:	000c      	movs	r4, r1
 8008416:	e7ef      	b.n	80083f8 <_malloc_r+0x74>
 8008418:	000c      	movs	r4, r1
 800841a:	6849      	ldr	r1, [r1, #4]
 800841c:	e7c3      	b.n	80083a6 <_malloc_r+0x22>
 800841e:	2303      	movs	r3, #3
 8008420:	1cc4      	adds	r4, r0, #3
 8008422:	439c      	bics	r4, r3
 8008424:	42a0      	cmp	r0, r4
 8008426:	d0e1      	beq.n	80083ec <_malloc_r+0x68>
 8008428:	1a21      	subs	r1, r4, r0
 800842a:	0030      	movs	r0, r6
 800842c:	f000 fabc 	bl	80089a8 <_sbrk_r>
 8008430:	1c43      	adds	r3, r0, #1
 8008432:	d1db      	bne.n	80083ec <_malloc_r+0x68>
 8008434:	e7c7      	b.n	80083c6 <_malloc_r+0x42>
 8008436:	46c0      	nop			; (mov r8, r8)
 8008438:	20000544 	.word	0x20000544
 800843c:	20000548 	.word	0x20000548

08008440 <__sfputc_r>:
 8008440:	6893      	ldr	r3, [r2, #8]
 8008442:	b510      	push	{r4, lr}
 8008444:	3b01      	subs	r3, #1
 8008446:	6093      	str	r3, [r2, #8]
 8008448:	2b00      	cmp	r3, #0
 800844a:	da04      	bge.n	8008456 <__sfputc_r+0x16>
 800844c:	6994      	ldr	r4, [r2, #24]
 800844e:	42a3      	cmp	r3, r4
 8008450:	db07      	blt.n	8008462 <__sfputc_r+0x22>
 8008452:	290a      	cmp	r1, #10
 8008454:	d005      	beq.n	8008462 <__sfputc_r+0x22>
 8008456:	6813      	ldr	r3, [r2, #0]
 8008458:	1c58      	adds	r0, r3, #1
 800845a:	6010      	str	r0, [r2, #0]
 800845c:	7019      	strb	r1, [r3, #0]
 800845e:	0008      	movs	r0, r1
 8008460:	bd10      	pop	{r4, pc}
 8008462:	f000 fab3 	bl	80089cc <__swbuf_r>
 8008466:	0001      	movs	r1, r0
 8008468:	e7f9      	b.n	800845e <__sfputc_r+0x1e>

0800846a <__sfputs_r>:
 800846a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846c:	0006      	movs	r6, r0
 800846e:	000f      	movs	r7, r1
 8008470:	0014      	movs	r4, r2
 8008472:	18d5      	adds	r5, r2, r3
 8008474:	42ac      	cmp	r4, r5
 8008476:	d101      	bne.n	800847c <__sfputs_r+0x12>
 8008478:	2000      	movs	r0, #0
 800847a:	e007      	b.n	800848c <__sfputs_r+0x22>
 800847c:	7821      	ldrb	r1, [r4, #0]
 800847e:	003a      	movs	r2, r7
 8008480:	0030      	movs	r0, r6
 8008482:	f7ff ffdd 	bl	8008440 <__sfputc_r>
 8008486:	3401      	adds	r4, #1
 8008488:	1c43      	adds	r3, r0, #1
 800848a:	d1f3      	bne.n	8008474 <__sfputs_r+0xa>
 800848c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008490 <_vfiprintf_r>:
 8008490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008492:	b0a1      	sub	sp, #132	; 0x84
 8008494:	9003      	str	r0, [sp, #12]
 8008496:	000f      	movs	r7, r1
 8008498:	0016      	movs	r6, r2
 800849a:	001d      	movs	r5, r3
 800849c:	2800      	cmp	r0, #0
 800849e:	d005      	beq.n	80084ac <_vfiprintf_r+0x1c>
 80084a0:	6983      	ldr	r3, [r0, #24]
 80084a2:	9305      	str	r3, [sp, #20]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d101      	bne.n	80084ac <_vfiprintf_r+0x1c>
 80084a8:	f000 fc5c 	bl	8008d64 <__sinit>
 80084ac:	4b7b      	ldr	r3, [pc, #492]	; (800869c <_vfiprintf_r+0x20c>)
 80084ae:	429f      	cmp	r7, r3
 80084b0:	d15c      	bne.n	800856c <_vfiprintf_r+0xdc>
 80084b2:	9b03      	ldr	r3, [sp, #12]
 80084b4:	685f      	ldr	r7, [r3, #4]
 80084b6:	89bb      	ldrh	r3, [r7, #12]
 80084b8:	071b      	lsls	r3, r3, #28
 80084ba:	d563      	bpl.n	8008584 <_vfiprintf_r+0xf4>
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d060      	beq.n	8008584 <_vfiprintf_r+0xf4>
 80084c2:	2300      	movs	r3, #0
 80084c4:	ac08      	add	r4, sp, #32
 80084c6:	6163      	str	r3, [r4, #20]
 80084c8:	3320      	adds	r3, #32
 80084ca:	7663      	strb	r3, [r4, #25]
 80084cc:	3310      	adds	r3, #16
 80084ce:	76a3      	strb	r3, [r4, #26]
 80084d0:	9507      	str	r5, [sp, #28]
 80084d2:	0035      	movs	r5, r6
 80084d4:	782b      	ldrb	r3, [r5, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d001      	beq.n	80084de <_vfiprintf_r+0x4e>
 80084da:	2b25      	cmp	r3, #37	; 0x25
 80084dc:	d15c      	bne.n	8008598 <_vfiprintf_r+0x108>
 80084de:	1bab      	subs	r3, r5, r6
 80084e0:	9305      	str	r3, [sp, #20]
 80084e2:	d00c      	beq.n	80084fe <_vfiprintf_r+0x6e>
 80084e4:	0032      	movs	r2, r6
 80084e6:	0039      	movs	r1, r7
 80084e8:	9803      	ldr	r0, [sp, #12]
 80084ea:	f7ff ffbe 	bl	800846a <__sfputs_r>
 80084ee:	1c43      	adds	r3, r0, #1
 80084f0:	d100      	bne.n	80084f4 <_vfiprintf_r+0x64>
 80084f2:	e0c4      	b.n	800867e <_vfiprintf_r+0x1ee>
 80084f4:	6962      	ldr	r2, [r4, #20]
 80084f6:	9b05      	ldr	r3, [sp, #20]
 80084f8:	4694      	mov	ip, r2
 80084fa:	4463      	add	r3, ip
 80084fc:	6163      	str	r3, [r4, #20]
 80084fe:	782b      	ldrb	r3, [r5, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d100      	bne.n	8008506 <_vfiprintf_r+0x76>
 8008504:	e0bb      	b.n	800867e <_vfiprintf_r+0x1ee>
 8008506:	2201      	movs	r2, #1
 8008508:	2300      	movs	r3, #0
 800850a:	4252      	negs	r2, r2
 800850c:	6062      	str	r2, [r4, #4]
 800850e:	a904      	add	r1, sp, #16
 8008510:	3254      	adds	r2, #84	; 0x54
 8008512:	1852      	adds	r2, r2, r1
 8008514:	1c6e      	adds	r6, r5, #1
 8008516:	6023      	str	r3, [r4, #0]
 8008518:	60e3      	str	r3, [r4, #12]
 800851a:	60a3      	str	r3, [r4, #8]
 800851c:	7013      	strb	r3, [r2, #0]
 800851e:	65a3      	str	r3, [r4, #88]	; 0x58
 8008520:	7831      	ldrb	r1, [r6, #0]
 8008522:	2205      	movs	r2, #5
 8008524:	485e      	ldr	r0, [pc, #376]	; (80086a0 <_vfiprintf_r+0x210>)
 8008526:	f000 fd1d 	bl	8008f64 <memchr>
 800852a:	1c75      	adds	r5, r6, #1
 800852c:	2800      	cmp	r0, #0
 800852e:	d135      	bne.n	800859c <_vfiprintf_r+0x10c>
 8008530:	6822      	ldr	r2, [r4, #0]
 8008532:	06d3      	lsls	r3, r2, #27
 8008534:	d504      	bpl.n	8008540 <_vfiprintf_r+0xb0>
 8008536:	2353      	movs	r3, #83	; 0x53
 8008538:	a904      	add	r1, sp, #16
 800853a:	185b      	adds	r3, r3, r1
 800853c:	2120      	movs	r1, #32
 800853e:	7019      	strb	r1, [r3, #0]
 8008540:	0713      	lsls	r3, r2, #28
 8008542:	d504      	bpl.n	800854e <_vfiprintf_r+0xbe>
 8008544:	2353      	movs	r3, #83	; 0x53
 8008546:	a904      	add	r1, sp, #16
 8008548:	185b      	adds	r3, r3, r1
 800854a:	212b      	movs	r1, #43	; 0x2b
 800854c:	7019      	strb	r1, [r3, #0]
 800854e:	7833      	ldrb	r3, [r6, #0]
 8008550:	2b2a      	cmp	r3, #42	; 0x2a
 8008552:	d02c      	beq.n	80085ae <_vfiprintf_r+0x11e>
 8008554:	0035      	movs	r5, r6
 8008556:	2100      	movs	r1, #0
 8008558:	200a      	movs	r0, #10
 800855a:	68e3      	ldr	r3, [r4, #12]
 800855c:	782a      	ldrb	r2, [r5, #0]
 800855e:	1c6e      	adds	r6, r5, #1
 8008560:	3a30      	subs	r2, #48	; 0x30
 8008562:	2a09      	cmp	r2, #9
 8008564:	d964      	bls.n	8008630 <_vfiprintf_r+0x1a0>
 8008566:	2900      	cmp	r1, #0
 8008568:	d02e      	beq.n	80085c8 <_vfiprintf_r+0x138>
 800856a:	e026      	b.n	80085ba <_vfiprintf_r+0x12a>
 800856c:	4b4d      	ldr	r3, [pc, #308]	; (80086a4 <_vfiprintf_r+0x214>)
 800856e:	429f      	cmp	r7, r3
 8008570:	d102      	bne.n	8008578 <_vfiprintf_r+0xe8>
 8008572:	9b03      	ldr	r3, [sp, #12]
 8008574:	689f      	ldr	r7, [r3, #8]
 8008576:	e79e      	b.n	80084b6 <_vfiprintf_r+0x26>
 8008578:	4b4b      	ldr	r3, [pc, #300]	; (80086a8 <_vfiprintf_r+0x218>)
 800857a:	429f      	cmp	r7, r3
 800857c:	d19b      	bne.n	80084b6 <_vfiprintf_r+0x26>
 800857e:	9b03      	ldr	r3, [sp, #12]
 8008580:	68df      	ldr	r7, [r3, #12]
 8008582:	e798      	b.n	80084b6 <_vfiprintf_r+0x26>
 8008584:	0039      	movs	r1, r7
 8008586:	9803      	ldr	r0, [sp, #12]
 8008588:	f000 fa76 	bl	8008a78 <__swsetup_r>
 800858c:	2800      	cmp	r0, #0
 800858e:	d098      	beq.n	80084c2 <_vfiprintf_r+0x32>
 8008590:	2001      	movs	r0, #1
 8008592:	4240      	negs	r0, r0
 8008594:	b021      	add	sp, #132	; 0x84
 8008596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008598:	3501      	adds	r5, #1
 800859a:	e79b      	b.n	80084d4 <_vfiprintf_r+0x44>
 800859c:	4b40      	ldr	r3, [pc, #256]	; (80086a0 <_vfiprintf_r+0x210>)
 800859e:	6822      	ldr	r2, [r4, #0]
 80085a0:	1ac0      	subs	r0, r0, r3
 80085a2:	2301      	movs	r3, #1
 80085a4:	4083      	lsls	r3, r0
 80085a6:	4313      	orrs	r3, r2
 80085a8:	6023      	str	r3, [r4, #0]
 80085aa:	002e      	movs	r6, r5
 80085ac:	e7b8      	b.n	8008520 <_vfiprintf_r+0x90>
 80085ae:	9b07      	ldr	r3, [sp, #28]
 80085b0:	1d19      	adds	r1, r3, #4
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	9107      	str	r1, [sp, #28]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	db01      	blt.n	80085be <_vfiprintf_r+0x12e>
 80085ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80085bc:	e004      	b.n	80085c8 <_vfiprintf_r+0x138>
 80085be:	425b      	negs	r3, r3
 80085c0:	60e3      	str	r3, [r4, #12]
 80085c2:	2302      	movs	r3, #2
 80085c4:	4313      	orrs	r3, r2
 80085c6:	6023      	str	r3, [r4, #0]
 80085c8:	782b      	ldrb	r3, [r5, #0]
 80085ca:	2b2e      	cmp	r3, #46	; 0x2e
 80085cc:	d10a      	bne.n	80085e4 <_vfiprintf_r+0x154>
 80085ce:	786b      	ldrb	r3, [r5, #1]
 80085d0:	2b2a      	cmp	r3, #42	; 0x2a
 80085d2:	d135      	bne.n	8008640 <_vfiprintf_r+0x1b0>
 80085d4:	9b07      	ldr	r3, [sp, #28]
 80085d6:	3502      	adds	r5, #2
 80085d8:	1d1a      	adds	r2, r3, #4
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	9207      	str	r2, [sp, #28]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	db2b      	blt.n	800863a <_vfiprintf_r+0x1aa>
 80085e2:	9309      	str	r3, [sp, #36]	; 0x24
 80085e4:	4e31      	ldr	r6, [pc, #196]	; (80086ac <_vfiprintf_r+0x21c>)
 80085e6:	7829      	ldrb	r1, [r5, #0]
 80085e8:	2203      	movs	r2, #3
 80085ea:	0030      	movs	r0, r6
 80085ec:	f000 fcba 	bl	8008f64 <memchr>
 80085f0:	2800      	cmp	r0, #0
 80085f2:	d006      	beq.n	8008602 <_vfiprintf_r+0x172>
 80085f4:	2340      	movs	r3, #64	; 0x40
 80085f6:	1b80      	subs	r0, r0, r6
 80085f8:	4083      	lsls	r3, r0
 80085fa:	6822      	ldr	r2, [r4, #0]
 80085fc:	3501      	adds	r5, #1
 80085fe:	4313      	orrs	r3, r2
 8008600:	6023      	str	r3, [r4, #0]
 8008602:	7829      	ldrb	r1, [r5, #0]
 8008604:	2206      	movs	r2, #6
 8008606:	482a      	ldr	r0, [pc, #168]	; (80086b0 <_vfiprintf_r+0x220>)
 8008608:	1c6e      	adds	r6, r5, #1
 800860a:	7621      	strb	r1, [r4, #24]
 800860c:	f000 fcaa 	bl	8008f64 <memchr>
 8008610:	2800      	cmp	r0, #0
 8008612:	d03a      	beq.n	800868a <_vfiprintf_r+0x1fa>
 8008614:	4b27      	ldr	r3, [pc, #156]	; (80086b4 <_vfiprintf_r+0x224>)
 8008616:	2b00      	cmp	r3, #0
 8008618:	d125      	bne.n	8008666 <_vfiprintf_r+0x1d6>
 800861a:	2207      	movs	r2, #7
 800861c:	9b07      	ldr	r3, [sp, #28]
 800861e:	3307      	adds	r3, #7
 8008620:	4393      	bics	r3, r2
 8008622:	3308      	adds	r3, #8
 8008624:	9307      	str	r3, [sp, #28]
 8008626:	6963      	ldr	r3, [r4, #20]
 8008628:	9a04      	ldr	r2, [sp, #16]
 800862a:	189b      	adds	r3, r3, r2
 800862c:	6163      	str	r3, [r4, #20]
 800862e:	e750      	b.n	80084d2 <_vfiprintf_r+0x42>
 8008630:	4343      	muls	r3, r0
 8008632:	2101      	movs	r1, #1
 8008634:	189b      	adds	r3, r3, r2
 8008636:	0035      	movs	r5, r6
 8008638:	e790      	b.n	800855c <_vfiprintf_r+0xcc>
 800863a:	2301      	movs	r3, #1
 800863c:	425b      	negs	r3, r3
 800863e:	e7d0      	b.n	80085e2 <_vfiprintf_r+0x152>
 8008640:	2300      	movs	r3, #0
 8008642:	200a      	movs	r0, #10
 8008644:	001a      	movs	r2, r3
 8008646:	3501      	adds	r5, #1
 8008648:	6063      	str	r3, [r4, #4]
 800864a:	7829      	ldrb	r1, [r5, #0]
 800864c:	1c6e      	adds	r6, r5, #1
 800864e:	3930      	subs	r1, #48	; 0x30
 8008650:	2909      	cmp	r1, #9
 8008652:	d903      	bls.n	800865c <_vfiprintf_r+0x1cc>
 8008654:	2b00      	cmp	r3, #0
 8008656:	d0c5      	beq.n	80085e4 <_vfiprintf_r+0x154>
 8008658:	9209      	str	r2, [sp, #36]	; 0x24
 800865a:	e7c3      	b.n	80085e4 <_vfiprintf_r+0x154>
 800865c:	4342      	muls	r2, r0
 800865e:	2301      	movs	r3, #1
 8008660:	1852      	adds	r2, r2, r1
 8008662:	0035      	movs	r5, r6
 8008664:	e7f1      	b.n	800864a <_vfiprintf_r+0x1ba>
 8008666:	ab07      	add	r3, sp, #28
 8008668:	9300      	str	r3, [sp, #0]
 800866a:	003a      	movs	r2, r7
 800866c:	4b12      	ldr	r3, [pc, #72]	; (80086b8 <_vfiprintf_r+0x228>)
 800866e:	0021      	movs	r1, r4
 8008670:	9803      	ldr	r0, [sp, #12]
 8008672:	e000      	b.n	8008676 <_vfiprintf_r+0x1e6>
 8008674:	bf00      	nop
 8008676:	9004      	str	r0, [sp, #16]
 8008678:	9b04      	ldr	r3, [sp, #16]
 800867a:	3301      	adds	r3, #1
 800867c:	d1d3      	bne.n	8008626 <_vfiprintf_r+0x196>
 800867e:	89bb      	ldrh	r3, [r7, #12]
 8008680:	065b      	lsls	r3, r3, #25
 8008682:	d500      	bpl.n	8008686 <_vfiprintf_r+0x1f6>
 8008684:	e784      	b.n	8008590 <_vfiprintf_r+0x100>
 8008686:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008688:	e784      	b.n	8008594 <_vfiprintf_r+0x104>
 800868a:	ab07      	add	r3, sp, #28
 800868c:	9300      	str	r3, [sp, #0]
 800868e:	003a      	movs	r2, r7
 8008690:	4b09      	ldr	r3, [pc, #36]	; (80086b8 <_vfiprintf_r+0x228>)
 8008692:	0021      	movs	r1, r4
 8008694:	9803      	ldr	r0, [sp, #12]
 8008696:	f000 f87f 	bl	8008798 <_printf_i>
 800869a:	e7ec      	b.n	8008676 <_vfiprintf_r+0x1e6>
 800869c:	0800945c 	.word	0x0800945c
 80086a0:	08009408 	.word	0x08009408
 80086a4:	0800947c 	.word	0x0800947c
 80086a8:	0800943c 	.word	0x0800943c
 80086ac:	0800940e 	.word	0x0800940e
 80086b0:	08009412 	.word	0x08009412
 80086b4:	00000000 	.word	0x00000000
 80086b8:	0800846b 	.word	0x0800846b

080086bc <_printf_common>:
 80086bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086be:	0015      	movs	r5, r2
 80086c0:	9301      	str	r3, [sp, #4]
 80086c2:	688a      	ldr	r2, [r1, #8]
 80086c4:	690b      	ldr	r3, [r1, #16]
 80086c6:	9000      	str	r0, [sp, #0]
 80086c8:	000c      	movs	r4, r1
 80086ca:	4293      	cmp	r3, r2
 80086cc:	da00      	bge.n	80086d0 <_printf_common+0x14>
 80086ce:	0013      	movs	r3, r2
 80086d0:	0022      	movs	r2, r4
 80086d2:	602b      	str	r3, [r5, #0]
 80086d4:	3243      	adds	r2, #67	; 0x43
 80086d6:	7812      	ldrb	r2, [r2, #0]
 80086d8:	2a00      	cmp	r2, #0
 80086da:	d001      	beq.n	80086e0 <_printf_common+0x24>
 80086dc:	3301      	adds	r3, #1
 80086de:	602b      	str	r3, [r5, #0]
 80086e0:	6823      	ldr	r3, [r4, #0]
 80086e2:	069b      	lsls	r3, r3, #26
 80086e4:	d502      	bpl.n	80086ec <_printf_common+0x30>
 80086e6:	682b      	ldr	r3, [r5, #0]
 80086e8:	3302      	adds	r3, #2
 80086ea:	602b      	str	r3, [r5, #0]
 80086ec:	2706      	movs	r7, #6
 80086ee:	6823      	ldr	r3, [r4, #0]
 80086f0:	401f      	ands	r7, r3
 80086f2:	d027      	beq.n	8008744 <_printf_common+0x88>
 80086f4:	0023      	movs	r3, r4
 80086f6:	3343      	adds	r3, #67	; 0x43
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	1e5a      	subs	r2, r3, #1
 80086fc:	4193      	sbcs	r3, r2
 80086fe:	6822      	ldr	r2, [r4, #0]
 8008700:	0692      	lsls	r2, r2, #26
 8008702:	d430      	bmi.n	8008766 <_printf_common+0xaa>
 8008704:	0022      	movs	r2, r4
 8008706:	9901      	ldr	r1, [sp, #4]
 8008708:	3243      	adds	r2, #67	; 0x43
 800870a:	9800      	ldr	r0, [sp, #0]
 800870c:	9e08      	ldr	r6, [sp, #32]
 800870e:	47b0      	blx	r6
 8008710:	1c43      	adds	r3, r0, #1
 8008712:	d025      	beq.n	8008760 <_printf_common+0xa4>
 8008714:	2306      	movs	r3, #6
 8008716:	6820      	ldr	r0, [r4, #0]
 8008718:	682a      	ldr	r2, [r5, #0]
 800871a:	68e1      	ldr	r1, [r4, #12]
 800871c:	4003      	ands	r3, r0
 800871e:	2500      	movs	r5, #0
 8008720:	2b04      	cmp	r3, #4
 8008722:	d103      	bne.n	800872c <_printf_common+0x70>
 8008724:	1a8d      	subs	r5, r1, r2
 8008726:	43eb      	mvns	r3, r5
 8008728:	17db      	asrs	r3, r3, #31
 800872a:	401d      	ands	r5, r3
 800872c:	68a3      	ldr	r3, [r4, #8]
 800872e:	6922      	ldr	r2, [r4, #16]
 8008730:	4293      	cmp	r3, r2
 8008732:	dd01      	ble.n	8008738 <_printf_common+0x7c>
 8008734:	1a9b      	subs	r3, r3, r2
 8008736:	18ed      	adds	r5, r5, r3
 8008738:	2700      	movs	r7, #0
 800873a:	42bd      	cmp	r5, r7
 800873c:	d120      	bne.n	8008780 <_printf_common+0xc4>
 800873e:	2000      	movs	r0, #0
 8008740:	e010      	b.n	8008764 <_printf_common+0xa8>
 8008742:	3701      	adds	r7, #1
 8008744:	68e3      	ldr	r3, [r4, #12]
 8008746:	682a      	ldr	r2, [r5, #0]
 8008748:	1a9b      	subs	r3, r3, r2
 800874a:	42bb      	cmp	r3, r7
 800874c:	ddd2      	ble.n	80086f4 <_printf_common+0x38>
 800874e:	0022      	movs	r2, r4
 8008750:	2301      	movs	r3, #1
 8008752:	3219      	adds	r2, #25
 8008754:	9901      	ldr	r1, [sp, #4]
 8008756:	9800      	ldr	r0, [sp, #0]
 8008758:	9e08      	ldr	r6, [sp, #32]
 800875a:	47b0      	blx	r6
 800875c:	1c43      	adds	r3, r0, #1
 800875e:	d1f0      	bne.n	8008742 <_printf_common+0x86>
 8008760:	2001      	movs	r0, #1
 8008762:	4240      	negs	r0, r0
 8008764:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008766:	2030      	movs	r0, #48	; 0x30
 8008768:	18e1      	adds	r1, r4, r3
 800876a:	3143      	adds	r1, #67	; 0x43
 800876c:	7008      	strb	r0, [r1, #0]
 800876e:	0021      	movs	r1, r4
 8008770:	1c5a      	adds	r2, r3, #1
 8008772:	3145      	adds	r1, #69	; 0x45
 8008774:	7809      	ldrb	r1, [r1, #0]
 8008776:	18a2      	adds	r2, r4, r2
 8008778:	3243      	adds	r2, #67	; 0x43
 800877a:	3302      	adds	r3, #2
 800877c:	7011      	strb	r1, [r2, #0]
 800877e:	e7c1      	b.n	8008704 <_printf_common+0x48>
 8008780:	0022      	movs	r2, r4
 8008782:	2301      	movs	r3, #1
 8008784:	321a      	adds	r2, #26
 8008786:	9901      	ldr	r1, [sp, #4]
 8008788:	9800      	ldr	r0, [sp, #0]
 800878a:	9e08      	ldr	r6, [sp, #32]
 800878c:	47b0      	blx	r6
 800878e:	1c43      	adds	r3, r0, #1
 8008790:	d0e6      	beq.n	8008760 <_printf_common+0xa4>
 8008792:	3701      	adds	r7, #1
 8008794:	e7d1      	b.n	800873a <_printf_common+0x7e>
	...

08008798 <_printf_i>:
 8008798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800879a:	b089      	sub	sp, #36	; 0x24
 800879c:	9204      	str	r2, [sp, #16]
 800879e:	000a      	movs	r2, r1
 80087a0:	3243      	adds	r2, #67	; 0x43
 80087a2:	9305      	str	r3, [sp, #20]
 80087a4:	9003      	str	r0, [sp, #12]
 80087a6:	9202      	str	r2, [sp, #8]
 80087a8:	7e0a      	ldrb	r2, [r1, #24]
 80087aa:	000c      	movs	r4, r1
 80087ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087ae:	2a6e      	cmp	r2, #110	; 0x6e
 80087b0:	d100      	bne.n	80087b4 <_printf_i+0x1c>
 80087b2:	e086      	b.n	80088c2 <_printf_i+0x12a>
 80087b4:	d81f      	bhi.n	80087f6 <_printf_i+0x5e>
 80087b6:	2a63      	cmp	r2, #99	; 0x63
 80087b8:	d033      	beq.n	8008822 <_printf_i+0x8a>
 80087ba:	d808      	bhi.n	80087ce <_printf_i+0x36>
 80087bc:	2a00      	cmp	r2, #0
 80087be:	d100      	bne.n	80087c2 <_printf_i+0x2a>
 80087c0:	e08c      	b.n	80088dc <_printf_i+0x144>
 80087c2:	2a58      	cmp	r2, #88	; 0x58
 80087c4:	d04d      	beq.n	8008862 <_printf_i+0xca>
 80087c6:	0025      	movs	r5, r4
 80087c8:	3542      	adds	r5, #66	; 0x42
 80087ca:	702a      	strb	r2, [r5, #0]
 80087cc:	e030      	b.n	8008830 <_printf_i+0x98>
 80087ce:	2a64      	cmp	r2, #100	; 0x64
 80087d0:	d001      	beq.n	80087d6 <_printf_i+0x3e>
 80087d2:	2a69      	cmp	r2, #105	; 0x69
 80087d4:	d1f7      	bne.n	80087c6 <_printf_i+0x2e>
 80087d6:	6819      	ldr	r1, [r3, #0]
 80087d8:	6825      	ldr	r5, [r4, #0]
 80087da:	1d0a      	adds	r2, r1, #4
 80087dc:	0628      	lsls	r0, r5, #24
 80087de:	d529      	bpl.n	8008834 <_printf_i+0x9c>
 80087e0:	6808      	ldr	r0, [r1, #0]
 80087e2:	601a      	str	r2, [r3, #0]
 80087e4:	2800      	cmp	r0, #0
 80087e6:	da03      	bge.n	80087f0 <_printf_i+0x58>
 80087e8:	232d      	movs	r3, #45	; 0x2d
 80087ea:	9a02      	ldr	r2, [sp, #8]
 80087ec:	4240      	negs	r0, r0
 80087ee:	7013      	strb	r3, [r2, #0]
 80087f0:	4e6b      	ldr	r6, [pc, #428]	; (80089a0 <_printf_i+0x208>)
 80087f2:	270a      	movs	r7, #10
 80087f4:	e04f      	b.n	8008896 <_printf_i+0xfe>
 80087f6:	2a73      	cmp	r2, #115	; 0x73
 80087f8:	d074      	beq.n	80088e4 <_printf_i+0x14c>
 80087fa:	d808      	bhi.n	800880e <_printf_i+0x76>
 80087fc:	2a6f      	cmp	r2, #111	; 0x6f
 80087fe:	d01f      	beq.n	8008840 <_printf_i+0xa8>
 8008800:	2a70      	cmp	r2, #112	; 0x70
 8008802:	d1e0      	bne.n	80087c6 <_printf_i+0x2e>
 8008804:	2220      	movs	r2, #32
 8008806:	6809      	ldr	r1, [r1, #0]
 8008808:	430a      	orrs	r2, r1
 800880a:	6022      	str	r2, [r4, #0]
 800880c:	e003      	b.n	8008816 <_printf_i+0x7e>
 800880e:	2a75      	cmp	r2, #117	; 0x75
 8008810:	d016      	beq.n	8008840 <_printf_i+0xa8>
 8008812:	2a78      	cmp	r2, #120	; 0x78
 8008814:	d1d7      	bne.n	80087c6 <_printf_i+0x2e>
 8008816:	0022      	movs	r2, r4
 8008818:	2178      	movs	r1, #120	; 0x78
 800881a:	3245      	adds	r2, #69	; 0x45
 800881c:	7011      	strb	r1, [r2, #0]
 800881e:	4e61      	ldr	r6, [pc, #388]	; (80089a4 <_printf_i+0x20c>)
 8008820:	e022      	b.n	8008868 <_printf_i+0xd0>
 8008822:	0025      	movs	r5, r4
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	3542      	adds	r5, #66	; 0x42
 8008828:	1d11      	adds	r1, r2, #4
 800882a:	6019      	str	r1, [r3, #0]
 800882c:	6813      	ldr	r3, [r2, #0]
 800882e:	702b      	strb	r3, [r5, #0]
 8008830:	2301      	movs	r3, #1
 8008832:	e065      	b.n	8008900 <_printf_i+0x168>
 8008834:	6808      	ldr	r0, [r1, #0]
 8008836:	601a      	str	r2, [r3, #0]
 8008838:	0669      	lsls	r1, r5, #25
 800883a:	d5d3      	bpl.n	80087e4 <_printf_i+0x4c>
 800883c:	b200      	sxth	r0, r0
 800883e:	e7d1      	b.n	80087e4 <_printf_i+0x4c>
 8008840:	6819      	ldr	r1, [r3, #0]
 8008842:	6825      	ldr	r5, [r4, #0]
 8008844:	1d08      	adds	r0, r1, #4
 8008846:	6018      	str	r0, [r3, #0]
 8008848:	6808      	ldr	r0, [r1, #0]
 800884a:	062e      	lsls	r6, r5, #24
 800884c:	d505      	bpl.n	800885a <_printf_i+0xc2>
 800884e:	4e54      	ldr	r6, [pc, #336]	; (80089a0 <_printf_i+0x208>)
 8008850:	2708      	movs	r7, #8
 8008852:	2a6f      	cmp	r2, #111	; 0x6f
 8008854:	d01b      	beq.n	800888e <_printf_i+0xf6>
 8008856:	270a      	movs	r7, #10
 8008858:	e019      	b.n	800888e <_printf_i+0xf6>
 800885a:	066d      	lsls	r5, r5, #25
 800885c:	d5f7      	bpl.n	800884e <_printf_i+0xb6>
 800885e:	b280      	uxth	r0, r0
 8008860:	e7f5      	b.n	800884e <_printf_i+0xb6>
 8008862:	3145      	adds	r1, #69	; 0x45
 8008864:	4e4e      	ldr	r6, [pc, #312]	; (80089a0 <_printf_i+0x208>)
 8008866:	700a      	strb	r2, [r1, #0]
 8008868:	6818      	ldr	r0, [r3, #0]
 800886a:	6822      	ldr	r2, [r4, #0]
 800886c:	1d01      	adds	r1, r0, #4
 800886e:	6800      	ldr	r0, [r0, #0]
 8008870:	6019      	str	r1, [r3, #0]
 8008872:	0615      	lsls	r5, r2, #24
 8008874:	d521      	bpl.n	80088ba <_printf_i+0x122>
 8008876:	07d3      	lsls	r3, r2, #31
 8008878:	d502      	bpl.n	8008880 <_printf_i+0xe8>
 800887a:	2320      	movs	r3, #32
 800887c:	431a      	orrs	r2, r3
 800887e:	6022      	str	r2, [r4, #0]
 8008880:	2710      	movs	r7, #16
 8008882:	2800      	cmp	r0, #0
 8008884:	d103      	bne.n	800888e <_printf_i+0xf6>
 8008886:	2320      	movs	r3, #32
 8008888:	6822      	ldr	r2, [r4, #0]
 800888a:	439a      	bics	r2, r3
 800888c:	6022      	str	r2, [r4, #0]
 800888e:	0023      	movs	r3, r4
 8008890:	2200      	movs	r2, #0
 8008892:	3343      	adds	r3, #67	; 0x43
 8008894:	701a      	strb	r2, [r3, #0]
 8008896:	6863      	ldr	r3, [r4, #4]
 8008898:	60a3      	str	r3, [r4, #8]
 800889a:	2b00      	cmp	r3, #0
 800889c:	db58      	blt.n	8008950 <_printf_i+0x1b8>
 800889e:	2204      	movs	r2, #4
 80088a0:	6821      	ldr	r1, [r4, #0]
 80088a2:	4391      	bics	r1, r2
 80088a4:	6021      	str	r1, [r4, #0]
 80088a6:	2800      	cmp	r0, #0
 80088a8:	d154      	bne.n	8008954 <_printf_i+0x1bc>
 80088aa:	9d02      	ldr	r5, [sp, #8]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d05a      	beq.n	8008966 <_printf_i+0x1ce>
 80088b0:	0025      	movs	r5, r4
 80088b2:	7833      	ldrb	r3, [r6, #0]
 80088b4:	3542      	adds	r5, #66	; 0x42
 80088b6:	702b      	strb	r3, [r5, #0]
 80088b8:	e055      	b.n	8008966 <_printf_i+0x1ce>
 80088ba:	0655      	lsls	r5, r2, #25
 80088bc:	d5db      	bpl.n	8008876 <_printf_i+0xde>
 80088be:	b280      	uxth	r0, r0
 80088c0:	e7d9      	b.n	8008876 <_printf_i+0xde>
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	680d      	ldr	r5, [r1, #0]
 80088c6:	1d10      	adds	r0, r2, #4
 80088c8:	6949      	ldr	r1, [r1, #20]
 80088ca:	6018      	str	r0, [r3, #0]
 80088cc:	6813      	ldr	r3, [r2, #0]
 80088ce:	062e      	lsls	r6, r5, #24
 80088d0:	d501      	bpl.n	80088d6 <_printf_i+0x13e>
 80088d2:	6019      	str	r1, [r3, #0]
 80088d4:	e002      	b.n	80088dc <_printf_i+0x144>
 80088d6:	066d      	lsls	r5, r5, #25
 80088d8:	d5fb      	bpl.n	80088d2 <_printf_i+0x13a>
 80088da:	8019      	strh	r1, [r3, #0]
 80088dc:	2300      	movs	r3, #0
 80088de:	9d02      	ldr	r5, [sp, #8]
 80088e0:	6123      	str	r3, [r4, #16]
 80088e2:	e04f      	b.n	8008984 <_printf_i+0x1ec>
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	1d11      	adds	r1, r2, #4
 80088e8:	6019      	str	r1, [r3, #0]
 80088ea:	6815      	ldr	r5, [r2, #0]
 80088ec:	2100      	movs	r1, #0
 80088ee:	6862      	ldr	r2, [r4, #4]
 80088f0:	0028      	movs	r0, r5
 80088f2:	f000 fb37 	bl	8008f64 <memchr>
 80088f6:	2800      	cmp	r0, #0
 80088f8:	d001      	beq.n	80088fe <_printf_i+0x166>
 80088fa:	1b40      	subs	r0, r0, r5
 80088fc:	6060      	str	r0, [r4, #4]
 80088fe:	6863      	ldr	r3, [r4, #4]
 8008900:	6123      	str	r3, [r4, #16]
 8008902:	2300      	movs	r3, #0
 8008904:	9a02      	ldr	r2, [sp, #8]
 8008906:	7013      	strb	r3, [r2, #0]
 8008908:	e03c      	b.n	8008984 <_printf_i+0x1ec>
 800890a:	6923      	ldr	r3, [r4, #16]
 800890c:	002a      	movs	r2, r5
 800890e:	9904      	ldr	r1, [sp, #16]
 8008910:	9803      	ldr	r0, [sp, #12]
 8008912:	9d05      	ldr	r5, [sp, #20]
 8008914:	47a8      	blx	r5
 8008916:	1c43      	adds	r3, r0, #1
 8008918:	d03e      	beq.n	8008998 <_printf_i+0x200>
 800891a:	6823      	ldr	r3, [r4, #0]
 800891c:	079b      	lsls	r3, r3, #30
 800891e:	d415      	bmi.n	800894c <_printf_i+0x1b4>
 8008920:	9b07      	ldr	r3, [sp, #28]
 8008922:	68e0      	ldr	r0, [r4, #12]
 8008924:	4298      	cmp	r0, r3
 8008926:	da39      	bge.n	800899c <_printf_i+0x204>
 8008928:	0018      	movs	r0, r3
 800892a:	e037      	b.n	800899c <_printf_i+0x204>
 800892c:	0022      	movs	r2, r4
 800892e:	2301      	movs	r3, #1
 8008930:	3219      	adds	r2, #25
 8008932:	9904      	ldr	r1, [sp, #16]
 8008934:	9803      	ldr	r0, [sp, #12]
 8008936:	9e05      	ldr	r6, [sp, #20]
 8008938:	47b0      	blx	r6
 800893a:	1c43      	adds	r3, r0, #1
 800893c:	d02c      	beq.n	8008998 <_printf_i+0x200>
 800893e:	3501      	adds	r5, #1
 8008940:	68e3      	ldr	r3, [r4, #12]
 8008942:	9a07      	ldr	r2, [sp, #28]
 8008944:	1a9b      	subs	r3, r3, r2
 8008946:	42ab      	cmp	r3, r5
 8008948:	dcf0      	bgt.n	800892c <_printf_i+0x194>
 800894a:	e7e9      	b.n	8008920 <_printf_i+0x188>
 800894c:	2500      	movs	r5, #0
 800894e:	e7f7      	b.n	8008940 <_printf_i+0x1a8>
 8008950:	2800      	cmp	r0, #0
 8008952:	d0ad      	beq.n	80088b0 <_printf_i+0x118>
 8008954:	9d02      	ldr	r5, [sp, #8]
 8008956:	0039      	movs	r1, r7
 8008958:	f7f7 fc5c 	bl	8000214 <__aeabi_uidivmod>
 800895c:	5c73      	ldrb	r3, [r6, r1]
 800895e:	3d01      	subs	r5, #1
 8008960:	702b      	strb	r3, [r5, #0]
 8008962:	2800      	cmp	r0, #0
 8008964:	d1f7      	bne.n	8008956 <_printf_i+0x1be>
 8008966:	2f08      	cmp	r7, #8
 8008968:	d109      	bne.n	800897e <_printf_i+0x1e6>
 800896a:	6823      	ldr	r3, [r4, #0]
 800896c:	07db      	lsls	r3, r3, #31
 800896e:	d506      	bpl.n	800897e <_printf_i+0x1e6>
 8008970:	6863      	ldr	r3, [r4, #4]
 8008972:	6922      	ldr	r2, [r4, #16]
 8008974:	4293      	cmp	r3, r2
 8008976:	dc02      	bgt.n	800897e <_printf_i+0x1e6>
 8008978:	2330      	movs	r3, #48	; 0x30
 800897a:	3d01      	subs	r5, #1
 800897c:	702b      	strb	r3, [r5, #0]
 800897e:	9b02      	ldr	r3, [sp, #8]
 8008980:	1b5b      	subs	r3, r3, r5
 8008982:	6123      	str	r3, [r4, #16]
 8008984:	9b05      	ldr	r3, [sp, #20]
 8008986:	aa07      	add	r2, sp, #28
 8008988:	9300      	str	r3, [sp, #0]
 800898a:	0021      	movs	r1, r4
 800898c:	9b04      	ldr	r3, [sp, #16]
 800898e:	9803      	ldr	r0, [sp, #12]
 8008990:	f7ff fe94 	bl	80086bc <_printf_common>
 8008994:	1c43      	adds	r3, r0, #1
 8008996:	d1b8      	bne.n	800890a <_printf_i+0x172>
 8008998:	2001      	movs	r0, #1
 800899a:	4240      	negs	r0, r0
 800899c:	b009      	add	sp, #36	; 0x24
 800899e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089a0:	08009419 	.word	0x08009419
 80089a4:	0800942a 	.word	0x0800942a

080089a8 <_sbrk_r>:
 80089a8:	2300      	movs	r3, #0
 80089aa:	b570      	push	{r4, r5, r6, lr}
 80089ac:	4c06      	ldr	r4, [pc, #24]	; (80089c8 <_sbrk_r+0x20>)
 80089ae:	0005      	movs	r5, r0
 80089b0:	0008      	movs	r0, r1
 80089b2:	6023      	str	r3, [r4, #0]
 80089b4:	f7f9 f9d0 	bl	8001d58 <_sbrk>
 80089b8:	1c43      	adds	r3, r0, #1
 80089ba:	d103      	bne.n	80089c4 <_sbrk_r+0x1c>
 80089bc:	6823      	ldr	r3, [r4, #0]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d000      	beq.n	80089c4 <_sbrk_r+0x1c>
 80089c2:	602b      	str	r3, [r5, #0]
 80089c4:	bd70      	pop	{r4, r5, r6, pc}
 80089c6:	46c0      	nop			; (mov r8, r8)
 80089c8:	20000888 	.word	0x20000888

080089cc <__swbuf_r>:
 80089cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ce:	0005      	movs	r5, r0
 80089d0:	000e      	movs	r6, r1
 80089d2:	0014      	movs	r4, r2
 80089d4:	2800      	cmp	r0, #0
 80089d6:	d004      	beq.n	80089e2 <__swbuf_r+0x16>
 80089d8:	6983      	ldr	r3, [r0, #24]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d101      	bne.n	80089e2 <__swbuf_r+0x16>
 80089de:	f000 f9c1 	bl	8008d64 <__sinit>
 80089e2:	4b22      	ldr	r3, [pc, #136]	; (8008a6c <__swbuf_r+0xa0>)
 80089e4:	429c      	cmp	r4, r3
 80089e6:	d12d      	bne.n	8008a44 <__swbuf_r+0x78>
 80089e8:	686c      	ldr	r4, [r5, #4]
 80089ea:	69a3      	ldr	r3, [r4, #24]
 80089ec:	60a3      	str	r3, [r4, #8]
 80089ee:	89a3      	ldrh	r3, [r4, #12]
 80089f0:	071b      	lsls	r3, r3, #28
 80089f2:	d531      	bpl.n	8008a58 <__swbuf_r+0x8c>
 80089f4:	6923      	ldr	r3, [r4, #16]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d02e      	beq.n	8008a58 <__swbuf_r+0x8c>
 80089fa:	6823      	ldr	r3, [r4, #0]
 80089fc:	6922      	ldr	r2, [r4, #16]
 80089fe:	b2f7      	uxtb	r7, r6
 8008a00:	1a98      	subs	r0, r3, r2
 8008a02:	6963      	ldr	r3, [r4, #20]
 8008a04:	b2f6      	uxtb	r6, r6
 8008a06:	4283      	cmp	r3, r0
 8008a08:	dc05      	bgt.n	8008a16 <__swbuf_r+0x4a>
 8008a0a:	0021      	movs	r1, r4
 8008a0c:	0028      	movs	r0, r5
 8008a0e:	f000 f93b 	bl	8008c88 <_fflush_r>
 8008a12:	2800      	cmp	r0, #0
 8008a14:	d126      	bne.n	8008a64 <__swbuf_r+0x98>
 8008a16:	68a3      	ldr	r3, [r4, #8]
 8008a18:	3001      	adds	r0, #1
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	60a3      	str	r3, [r4, #8]
 8008a1e:	6823      	ldr	r3, [r4, #0]
 8008a20:	1c5a      	adds	r2, r3, #1
 8008a22:	6022      	str	r2, [r4, #0]
 8008a24:	701f      	strb	r7, [r3, #0]
 8008a26:	6963      	ldr	r3, [r4, #20]
 8008a28:	4283      	cmp	r3, r0
 8008a2a:	d004      	beq.n	8008a36 <__swbuf_r+0x6a>
 8008a2c:	89a3      	ldrh	r3, [r4, #12]
 8008a2e:	07db      	lsls	r3, r3, #31
 8008a30:	d51a      	bpl.n	8008a68 <__swbuf_r+0x9c>
 8008a32:	2e0a      	cmp	r6, #10
 8008a34:	d118      	bne.n	8008a68 <__swbuf_r+0x9c>
 8008a36:	0021      	movs	r1, r4
 8008a38:	0028      	movs	r0, r5
 8008a3a:	f000 f925 	bl	8008c88 <_fflush_r>
 8008a3e:	2800      	cmp	r0, #0
 8008a40:	d012      	beq.n	8008a68 <__swbuf_r+0x9c>
 8008a42:	e00f      	b.n	8008a64 <__swbuf_r+0x98>
 8008a44:	4b0a      	ldr	r3, [pc, #40]	; (8008a70 <__swbuf_r+0xa4>)
 8008a46:	429c      	cmp	r4, r3
 8008a48:	d101      	bne.n	8008a4e <__swbuf_r+0x82>
 8008a4a:	68ac      	ldr	r4, [r5, #8]
 8008a4c:	e7cd      	b.n	80089ea <__swbuf_r+0x1e>
 8008a4e:	4b09      	ldr	r3, [pc, #36]	; (8008a74 <__swbuf_r+0xa8>)
 8008a50:	429c      	cmp	r4, r3
 8008a52:	d1ca      	bne.n	80089ea <__swbuf_r+0x1e>
 8008a54:	68ec      	ldr	r4, [r5, #12]
 8008a56:	e7c8      	b.n	80089ea <__swbuf_r+0x1e>
 8008a58:	0021      	movs	r1, r4
 8008a5a:	0028      	movs	r0, r5
 8008a5c:	f000 f80c 	bl	8008a78 <__swsetup_r>
 8008a60:	2800      	cmp	r0, #0
 8008a62:	d0ca      	beq.n	80089fa <__swbuf_r+0x2e>
 8008a64:	2601      	movs	r6, #1
 8008a66:	4276      	negs	r6, r6
 8008a68:	0030      	movs	r0, r6
 8008a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a6c:	0800945c 	.word	0x0800945c
 8008a70:	0800947c 	.word	0x0800947c
 8008a74:	0800943c 	.word	0x0800943c

08008a78 <__swsetup_r>:
 8008a78:	4b36      	ldr	r3, [pc, #216]	; (8008b54 <__swsetup_r+0xdc>)
 8008a7a:	b570      	push	{r4, r5, r6, lr}
 8008a7c:	681d      	ldr	r5, [r3, #0]
 8008a7e:	0006      	movs	r6, r0
 8008a80:	000c      	movs	r4, r1
 8008a82:	2d00      	cmp	r5, #0
 8008a84:	d005      	beq.n	8008a92 <__swsetup_r+0x1a>
 8008a86:	69ab      	ldr	r3, [r5, #24]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d102      	bne.n	8008a92 <__swsetup_r+0x1a>
 8008a8c:	0028      	movs	r0, r5
 8008a8e:	f000 f969 	bl	8008d64 <__sinit>
 8008a92:	4b31      	ldr	r3, [pc, #196]	; (8008b58 <__swsetup_r+0xe0>)
 8008a94:	429c      	cmp	r4, r3
 8008a96:	d10f      	bne.n	8008ab8 <__swsetup_r+0x40>
 8008a98:	686c      	ldr	r4, [r5, #4]
 8008a9a:	230c      	movs	r3, #12
 8008a9c:	5ee2      	ldrsh	r2, [r4, r3]
 8008a9e:	b293      	uxth	r3, r2
 8008aa0:	0719      	lsls	r1, r3, #28
 8008aa2:	d42d      	bmi.n	8008b00 <__swsetup_r+0x88>
 8008aa4:	06d9      	lsls	r1, r3, #27
 8008aa6:	d411      	bmi.n	8008acc <__swsetup_r+0x54>
 8008aa8:	2309      	movs	r3, #9
 8008aaa:	2001      	movs	r0, #1
 8008aac:	6033      	str	r3, [r6, #0]
 8008aae:	3337      	adds	r3, #55	; 0x37
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	81a3      	strh	r3, [r4, #12]
 8008ab4:	4240      	negs	r0, r0
 8008ab6:	bd70      	pop	{r4, r5, r6, pc}
 8008ab8:	4b28      	ldr	r3, [pc, #160]	; (8008b5c <__swsetup_r+0xe4>)
 8008aba:	429c      	cmp	r4, r3
 8008abc:	d101      	bne.n	8008ac2 <__swsetup_r+0x4a>
 8008abe:	68ac      	ldr	r4, [r5, #8]
 8008ac0:	e7eb      	b.n	8008a9a <__swsetup_r+0x22>
 8008ac2:	4b27      	ldr	r3, [pc, #156]	; (8008b60 <__swsetup_r+0xe8>)
 8008ac4:	429c      	cmp	r4, r3
 8008ac6:	d1e8      	bne.n	8008a9a <__swsetup_r+0x22>
 8008ac8:	68ec      	ldr	r4, [r5, #12]
 8008aca:	e7e6      	b.n	8008a9a <__swsetup_r+0x22>
 8008acc:	075b      	lsls	r3, r3, #29
 8008ace:	d513      	bpl.n	8008af8 <__swsetup_r+0x80>
 8008ad0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ad2:	2900      	cmp	r1, #0
 8008ad4:	d008      	beq.n	8008ae8 <__swsetup_r+0x70>
 8008ad6:	0023      	movs	r3, r4
 8008ad8:	3344      	adds	r3, #68	; 0x44
 8008ada:	4299      	cmp	r1, r3
 8008adc:	d002      	beq.n	8008ae4 <__swsetup_r+0x6c>
 8008ade:	0030      	movs	r0, r6
 8008ae0:	f7ff fc06 	bl	80082f0 <_free_r>
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	6363      	str	r3, [r4, #52]	; 0x34
 8008ae8:	2224      	movs	r2, #36	; 0x24
 8008aea:	89a3      	ldrh	r3, [r4, #12]
 8008aec:	4393      	bics	r3, r2
 8008aee:	81a3      	strh	r3, [r4, #12]
 8008af0:	2300      	movs	r3, #0
 8008af2:	6063      	str	r3, [r4, #4]
 8008af4:	6923      	ldr	r3, [r4, #16]
 8008af6:	6023      	str	r3, [r4, #0]
 8008af8:	2308      	movs	r3, #8
 8008afa:	89a2      	ldrh	r2, [r4, #12]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	81a3      	strh	r3, [r4, #12]
 8008b00:	6923      	ldr	r3, [r4, #16]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d10b      	bne.n	8008b1e <__swsetup_r+0xa6>
 8008b06:	21a0      	movs	r1, #160	; 0xa0
 8008b08:	2280      	movs	r2, #128	; 0x80
 8008b0a:	89a3      	ldrh	r3, [r4, #12]
 8008b0c:	0089      	lsls	r1, r1, #2
 8008b0e:	0092      	lsls	r2, r2, #2
 8008b10:	400b      	ands	r3, r1
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d003      	beq.n	8008b1e <__swsetup_r+0xa6>
 8008b16:	0021      	movs	r1, r4
 8008b18:	0030      	movs	r0, r6
 8008b1a:	f000 f9df 	bl	8008edc <__smakebuf_r>
 8008b1e:	2301      	movs	r3, #1
 8008b20:	89a2      	ldrh	r2, [r4, #12]
 8008b22:	4013      	ands	r3, r2
 8008b24:	d011      	beq.n	8008b4a <__swsetup_r+0xd2>
 8008b26:	2300      	movs	r3, #0
 8008b28:	60a3      	str	r3, [r4, #8]
 8008b2a:	6963      	ldr	r3, [r4, #20]
 8008b2c:	425b      	negs	r3, r3
 8008b2e:	61a3      	str	r3, [r4, #24]
 8008b30:	2000      	movs	r0, #0
 8008b32:	6923      	ldr	r3, [r4, #16]
 8008b34:	4283      	cmp	r3, r0
 8008b36:	d1be      	bne.n	8008ab6 <__swsetup_r+0x3e>
 8008b38:	230c      	movs	r3, #12
 8008b3a:	5ee2      	ldrsh	r2, [r4, r3]
 8008b3c:	0613      	lsls	r3, r2, #24
 8008b3e:	d5ba      	bpl.n	8008ab6 <__swsetup_r+0x3e>
 8008b40:	2340      	movs	r3, #64	; 0x40
 8008b42:	4313      	orrs	r3, r2
 8008b44:	81a3      	strh	r3, [r4, #12]
 8008b46:	3801      	subs	r0, #1
 8008b48:	e7b5      	b.n	8008ab6 <__swsetup_r+0x3e>
 8008b4a:	0792      	lsls	r2, r2, #30
 8008b4c:	d400      	bmi.n	8008b50 <__swsetup_r+0xd8>
 8008b4e:	6963      	ldr	r3, [r4, #20]
 8008b50:	60a3      	str	r3, [r4, #8]
 8008b52:	e7ed      	b.n	8008b30 <__swsetup_r+0xb8>
 8008b54:	2000000c 	.word	0x2000000c
 8008b58:	0800945c 	.word	0x0800945c
 8008b5c:	0800947c 	.word	0x0800947c
 8008b60:	0800943c 	.word	0x0800943c

08008b64 <abort>:
 8008b64:	b510      	push	{r4, lr}
 8008b66:	2006      	movs	r0, #6
 8008b68:	f000 fa34 	bl	8008fd4 <raise>
 8008b6c:	2001      	movs	r0, #1
 8008b6e:	f7f9 f881 	bl	8001c74 <_exit>
	...

08008b74 <__sflush_r>:
 8008b74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b76:	898a      	ldrh	r2, [r1, #12]
 8008b78:	0005      	movs	r5, r0
 8008b7a:	000c      	movs	r4, r1
 8008b7c:	0713      	lsls	r3, r2, #28
 8008b7e:	d460      	bmi.n	8008c42 <__sflush_r+0xce>
 8008b80:	684b      	ldr	r3, [r1, #4]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	dc04      	bgt.n	8008b90 <__sflush_r+0x1c>
 8008b86:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	dc01      	bgt.n	8008b90 <__sflush_r+0x1c>
 8008b8c:	2000      	movs	r0, #0
 8008b8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008b90:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008b92:	2f00      	cmp	r7, #0
 8008b94:	d0fa      	beq.n	8008b8c <__sflush_r+0x18>
 8008b96:	2300      	movs	r3, #0
 8008b98:	682e      	ldr	r6, [r5, #0]
 8008b9a:	602b      	str	r3, [r5, #0]
 8008b9c:	2380      	movs	r3, #128	; 0x80
 8008b9e:	015b      	lsls	r3, r3, #5
 8008ba0:	6a21      	ldr	r1, [r4, #32]
 8008ba2:	401a      	ands	r2, r3
 8008ba4:	d034      	beq.n	8008c10 <__sflush_r+0x9c>
 8008ba6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ba8:	89a3      	ldrh	r3, [r4, #12]
 8008baa:	075b      	lsls	r3, r3, #29
 8008bac:	d506      	bpl.n	8008bbc <__sflush_r+0x48>
 8008bae:	6863      	ldr	r3, [r4, #4]
 8008bb0:	1ac0      	subs	r0, r0, r3
 8008bb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d001      	beq.n	8008bbc <__sflush_r+0x48>
 8008bb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008bba:	1ac0      	subs	r0, r0, r3
 8008bbc:	0002      	movs	r2, r0
 8008bbe:	6a21      	ldr	r1, [r4, #32]
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	0028      	movs	r0, r5
 8008bc4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008bc6:	47b8      	blx	r7
 8008bc8:	89a1      	ldrh	r1, [r4, #12]
 8008bca:	1c43      	adds	r3, r0, #1
 8008bcc:	d106      	bne.n	8008bdc <__sflush_r+0x68>
 8008bce:	682b      	ldr	r3, [r5, #0]
 8008bd0:	2b1d      	cmp	r3, #29
 8008bd2:	d830      	bhi.n	8008c36 <__sflush_r+0xc2>
 8008bd4:	4a2b      	ldr	r2, [pc, #172]	; (8008c84 <__sflush_r+0x110>)
 8008bd6:	40da      	lsrs	r2, r3
 8008bd8:	07d3      	lsls	r3, r2, #31
 8008bda:	d52c      	bpl.n	8008c36 <__sflush_r+0xc2>
 8008bdc:	2300      	movs	r3, #0
 8008bde:	6063      	str	r3, [r4, #4]
 8008be0:	6923      	ldr	r3, [r4, #16]
 8008be2:	6023      	str	r3, [r4, #0]
 8008be4:	04cb      	lsls	r3, r1, #19
 8008be6:	d505      	bpl.n	8008bf4 <__sflush_r+0x80>
 8008be8:	1c43      	adds	r3, r0, #1
 8008bea:	d102      	bne.n	8008bf2 <__sflush_r+0x7e>
 8008bec:	682b      	ldr	r3, [r5, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d100      	bne.n	8008bf4 <__sflush_r+0x80>
 8008bf2:	6560      	str	r0, [r4, #84]	; 0x54
 8008bf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bf6:	602e      	str	r6, [r5, #0]
 8008bf8:	2900      	cmp	r1, #0
 8008bfa:	d0c7      	beq.n	8008b8c <__sflush_r+0x18>
 8008bfc:	0023      	movs	r3, r4
 8008bfe:	3344      	adds	r3, #68	; 0x44
 8008c00:	4299      	cmp	r1, r3
 8008c02:	d002      	beq.n	8008c0a <__sflush_r+0x96>
 8008c04:	0028      	movs	r0, r5
 8008c06:	f7ff fb73 	bl	80082f0 <_free_r>
 8008c0a:	2000      	movs	r0, #0
 8008c0c:	6360      	str	r0, [r4, #52]	; 0x34
 8008c0e:	e7be      	b.n	8008b8e <__sflush_r+0x1a>
 8008c10:	2301      	movs	r3, #1
 8008c12:	0028      	movs	r0, r5
 8008c14:	47b8      	blx	r7
 8008c16:	1c43      	adds	r3, r0, #1
 8008c18:	d1c6      	bne.n	8008ba8 <__sflush_r+0x34>
 8008c1a:	682b      	ldr	r3, [r5, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d0c3      	beq.n	8008ba8 <__sflush_r+0x34>
 8008c20:	2b1d      	cmp	r3, #29
 8008c22:	d001      	beq.n	8008c28 <__sflush_r+0xb4>
 8008c24:	2b16      	cmp	r3, #22
 8008c26:	d101      	bne.n	8008c2c <__sflush_r+0xb8>
 8008c28:	602e      	str	r6, [r5, #0]
 8008c2a:	e7af      	b.n	8008b8c <__sflush_r+0x18>
 8008c2c:	2340      	movs	r3, #64	; 0x40
 8008c2e:	89a2      	ldrh	r2, [r4, #12]
 8008c30:	4313      	orrs	r3, r2
 8008c32:	81a3      	strh	r3, [r4, #12]
 8008c34:	e7ab      	b.n	8008b8e <__sflush_r+0x1a>
 8008c36:	2340      	movs	r3, #64	; 0x40
 8008c38:	430b      	orrs	r3, r1
 8008c3a:	2001      	movs	r0, #1
 8008c3c:	81a3      	strh	r3, [r4, #12]
 8008c3e:	4240      	negs	r0, r0
 8008c40:	e7a5      	b.n	8008b8e <__sflush_r+0x1a>
 8008c42:	690f      	ldr	r7, [r1, #16]
 8008c44:	2f00      	cmp	r7, #0
 8008c46:	d0a1      	beq.n	8008b8c <__sflush_r+0x18>
 8008c48:	680b      	ldr	r3, [r1, #0]
 8008c4a:	600f      	str	r7, [r1, #0]
 8008c4c:	1bdb      	subs	r3, r3, r7
 8008c4e:	9301      	str	r3, [sp, #4]
 8008c50:	2300      	movs	r3, #0
 8008c52:	0792      	lsls	r2, r2, #30
 8008c54:	d100      	bne.n	8008c58 <__sflush_r+0xe4>
 8008c56:	694b      	ldr	r3, [r1, #20]
 8008c58:	60a3      	str	r3, [r4, #8]
 8008c5a:	9b01      	ldr	r3, [sp, #4]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	dc00      	bgt.n	8008c62 <__sflush_r+0xee>
 8008c60:	e794      	b.n	8008b8c <__sflush_r+0x18>
 8008c62:	9b01      	ldr	r3, [sp, #4]
 8008c64:	003a      	movs	r2, r7
 8008c66:	6a21      	ldr	r1, [r4, #32]
 8008c68:	0028      	movs	r0, r5
 8008c6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c6c:	47b0      	blx	r6
 8008c6e:	2800      	cmp	r0, #0
 8008c70:	dc03      	bgt.n	8008c7a <__sflush_r+0x106>
 8008c72:	2340      	movs	r3, #64	; 0x40
 8008c74:	89a2      	ldrh	r2, [r4, #12]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	e7df      	b.n	8008c3a <__sflush_r+0xc6>
 8008c7a:	9b01      	ldr	r3, [sp, #4]
 8008c7c:	183f      	adds	r7, r7, r0
 8008c7e:	1a1b      	subs	r3, r3, r0
 8008c80:	9301      	str	r3, [sp, #4]
 8008c82:	e7ea      	b.n	8008c5a <__sflush_r+0xe6>
 8008c84:	20400001 	.word	0x20400001

08008c88 <_fflush_r>:
 8008c88:	690b      	ldr	r3, [r1, #16]
 8008c8a:	b570      	push	{r4, r5, r6, lr}
 8008c8c:	0005      	movs	r5, r0
 8008c8e:	000c      	movs	r4, r1
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d101      	bne.n	8008c98 <_fflush_r+0x10>
 8008c94:	2000      	movs	r0, #0
 8008c96:	bd70      	pop	{r4, r5, r6, pc}
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	d004      	beq.n	8008ca6 <_fflush_r+0x1e>
 8008c9c:	6983      	ldr	r3, [r0, #24]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d101      	bne.n	8008ca6 <_fflush_r+0x1e>
 8008ca2:	f000 f85f 	bl	8008d64 <__sinit>
 8008ca6:	4b0b      	ldr	r3, [pc, #44]	; (8008cd4 <_fflush_r+0x4c>)
 8008ca8:	429c      	cmp	r4, r3
 8008caa:	d109      	bne.n	8008cc0 <_fflush_r+0x38>
 8008cac:	686c      	ldr	r4, [r5, #4]
 8008cae:	220c      	movs	r2, #12
 8008cb0:	5ea3      	ldrsh	r3, [r4, r2]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d0ee      	beq.n	8008c94 <_fflush_r+0xc>
 8008cb6:	0021      	movs	r1, r4
 8008cb8:	0028      	movs	r0, r5
 8008cba:	f7ff ff5b 	bl	8008b74 <__sflush_r>
 8008cbe:	e7ea      	b.n	8008c96 <_fflush_r+0xe>
 8008cc0:	4b05      	ldr	r3, [pc, #20]	; (8008cd8 <_fflush_r+0x50>)
 8008cc2:	429c      	cmp	r4, r3
 8008cc4:	d101      	bne.n	8008cca <_fflush_r+0x42>
 8008cc6:	68ac      	ldr	r4, [r5, #8]
 8008cc8:	e7f1      	b.n	8008cae <_fflush_r+0x26>
 8008cca:	4b04      	ldr	r3, [pc, #16]	; (8008cdc <_fflush_r+0x54>)
 8008ccc:	429c      	cmp	r4, r3
 8008cce:	d1ee      	bne.n	8008cae <_fflush_r+0x26>
 8008cd0:	68ec      	ldr	r4, [r5, #12]
 8008cd2:	e7ec      	b.n	8008cae <_fflush_r+0x26>
 8008cd4:	0800945c 	.word	0x0800945c
 8008cd8:	0800947c 	.word	0x0800947c
 8008cdc:	0800943c 	.word	0x0800943c

08008ce0 <std>:
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	b510      	push	{r4, lr}
 8008ce4:	0004      	movs	r4, r0
 8008ce6:	6003      	str	r3, [r0, #0]
 8008ce8:	6043      	str	r3, [r0, #4]
 8008cea:	6083      	str	r3, [r0, #8]
 8008cec:	8181      	strh	r1, [r0, #12]
 8008cee:	6643      	str	r3, [r0, #100]	; 0x64
 8008cf0:	81c2      	strh	r2, [r0, #14]
 8008cf2:	6103      	str	r3, [r0, #16]
 8008cf4:	6143      	str	r3, [r0, #20]
 8008cf6:	6183      	str	r3, [r0, #24]
 8008cf8:	0019      	movs	r1, r3
 8008cfa:	2208      	movs	r2, #8
 8008cfc:	305c      	adds	r0, #92	; 0x5c
 8008cfe:	f7ff fae0 	bl	80082c2 <memset>
 8008d02:	4b05      	ldr	r3, [pc, #20]	; (8008d18 <std+0x38>)
 8008d04:	6224      	str	r4, [r4, #32]
 8008d06:	6263      	str	r3, [r4, #36]	; 0x24
 8008d08:	4b04      	ldr	r3, [pc, #16]	; (8008d1c <std+0x3c>)
 8008d0a:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d0c:	4b04      	ldr	r3, [pc, #16]	; (8008d20 <std+0x40>)
 8008d0e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d10:	4b04      	ldr	r3, [pc, #16]	; (8008d24 <std+0x44>)
 8008d12:	6323      	str	r3, [r4, #48]	; 0x30
 8008d14:	bd10      	pop	{r4, pc}
 8008d16:	46c0      	nop			; (mov r8, r8)
 8008d18:	08009015 	.word	0x08009015
 8008d1c:	0800903d 	.word	0x0800903d
 8008d20:	08009075 	.word	0x08009075
 8008d24:	080090a1 	.word	0x080090a1

08008d28 <_cleanup_r>:
 8008d28:	b510      	push	{r4, lr}
 8008d2a:	4902      	ldr	r1, [pc, #8]	; (8008d34 <_cleanup_r+0xc>)
 8008d2c:	f000 f88c 	bl	8008e48 <_fwalk_reent>
 8008d30:	bd10      	pop	{r4, pc}
 8008d32:	46c0      	nop			; (mov r8, r8)
 8008d34:	08008c89 	.word	0x08008c89

08008d38 <__sfmoreglue>:
 8008d38:	b570      	push	{r4, r5, r6, lr}
 8008d3a:	2568      	movs	r5, #104	; 0x68
 8008d3c:	1e4a      	subs	r2, r1, #1
 8008d3e:	4355      	muls	r5, r2
 8008d40:	000e      	movs	r6, r1
 8008d42:	0029      	movs	r1, r5
 8008d44:	3174      	adds	r1, #116	; 0x74
 8008d46:	f7ff fb1d 	bl	8008384 <_malloc_r>
 8008d4a:	1e04      	subs	r4, r0, #0
 8008d4c:	d008      	beq.n	8008d60 <__sfmoreglue+0x28>
 8008d4e:	2100      	movs	r1, #0
 8008d50:	002a      	movs	r2, r5
 8008d52:	6001      	str	r1, [r0, #0]
 8008d54:	6046      	str	r6, [r0, #4]
 8008d56:	300c      	adds	r0, #12
 8008d58:	60a0      	str	r0, [r4, #8]
 8008d5a:	3268      	adds	r2, #104	; 0x68
 8008d5c:	f7ff fab1 	bl	80082c2 <memset>
 8008d60:	0020      	movs	r0, r4
 8008d62:	bd70      	pop	{r4, r5, r6, pc}

08008d64 <__sinit>:
 8008d64:	6983      	ldr	r3, [r0, #24]
 8008d66:	b513      	push	{r0, r1, r4, lr}
 8008d68:	0004      	movs	r4, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d128      	bne.n	8008dc0 <__sinit+0x5c>
 8008d6e:	6483      	str	r3, [r0, #72]	; 0x48
 8008d70:	64c3      	str	r3, [r0, #76]	; 0x4c
 8008d72:	6503      	str	r3, [r0, #80]	; 0x50
 8008d74:	4b13      	ldr	r3, [pc, #76]	; (8008dc4 <__sinit+0x60>)
 8008d76:	4a14      	ldr	r2, [pc, #80]	; (8008dc8 <__sinit+0x64>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	6282      	str	r2, [r0, #40]	; 0x28
 8008d7c:	9301      	str	r3, [sp, #4]
 8008d7e:	4298      	cmp	r0, r3
 8008d80:	d101      	bne.n	8008d86 <__sinit+0x22>
 8008d82:	2301      	movs	r3, #1
 8008d84:	6183      	str	r3, [r0, #24]
 8008d86:	0020      	movs	r0, r4
 8008d88:	f000 f820 	bl	8008dcc <__sfp>
 8008d8c:	6060      	str	r0, [r4, #4]
 8008d8e:	0020      	movs	r0, r4
 8008d90:	f000 f81c 	bl	8008dcc <__sfp>
 8008d94:	60a0      	str	r0, [r4, #8]
 8008d96:	0020      	movs	r0, r4
 8008d98:	f000 f818 	bl	8008dcc <__sfp>
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	60e0      	str	r0, [r4, #12]
 8008da0:	2104      	movs	r1, #4
 8008da2:	6860      	ldr	r0, [r4, #4]
 8008da4:	f7ff ff9c 	bl	8008ce0 <std>
 8008da8:	2201      	movs	r2, #1
 8008daa:	2109      	movs	r1, #9
 8008dac:	68a0      	ldr	r0, [r4, #8]
 8008dae:	f7ff ff97 	bl	8008ce0 <std>
 8008db2:	2202      	movs	r2, #2
 8008db4:	2112      	movs	r1, #18
 8008db6:	68e0      	ldr	r0, [r4, #12]
 8008db8:	f7ff ff92 	bl	8008ce0 <std>
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	61a3      	str	r3, [r4, #24]
 8008dc0:	bd13      	pop	{r0, r1, r4, pc}
 8008dc2:	46c0      	nop			; (mov r8, r8)
 8008dc4:	08009404 	.word	0x08009404
 8008dc8:	08008d29 	.word	0x08008d29

08008dcc <__sfp>:
 8008dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dce:	4b1c      	ldr	r3, [pc, #112]	; (8008e40 <__sfp+0x74>)
 8008dd0:	0007      	movs	r7, r0
 8008dd2:	681e      	ldr	r6, [r3, #0]
 8008dd4:	69b3      	ldr	r3, [r6, #24]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d102      	bne.n	8008de0 <__sfp+0x14>
 8008dda:	0030      	movs	r0, r6
 8008ddc:	f7ff ffc2 	bl	8008d64 <__sinit>
 8008de0:	3648      	adds	r6, #72	; 0x48
 8008de2:	68b4      	ldr	r4, [r6, #8]
 8008de4:	6873      	ldr	r3, [r6, #4]
 8008de6:	3b01      	subs	r3, #1
 8008de8:	d504      	bpl.n	8008df4 <__sfp+0x28>
 8008dea:	6833      	ldr	r3, [r6, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d007      	beq.n	8008e00 <__sfp+0x34>
 8008df0:	6836      	ldr	r6, [r6, #0]
 8008df2:	e7f6      	b.n	8008de2 <__sfp+0x16>
 8008df4:	220c      	movs	r2, #12
 8008df6:	5ea5      	ldrsh	r5, [r4, r2]
 8008df8:	2d00      	cmp	r5, #0
 8008dfa:	d00d      	beq.n	8008e18 <__sfp+0x4c>
 8008dfc:	3468      	adds	r4, #104	; 0x68
 8008dfe:	e7f2      	b.n	8008de6 <__sfp+0x1a>
 8008e00:	2104      	movs	r1, #4
 8008e02:	0038      	movs	r0, r7
 8008e04:	f7ff ff98 	bl	8008d38 <__sfmoreglue>
 8008e08:	6030      	str	r0, [r6, #0]
 8008e0a:	2800      	cmp	r0, #0
 8008e0c:	d1f0      	bne.n	8008df0 <__sfp+0x24>
 8008e0e:	230c      	movs	r3, #12
 8008e10:	0004      	movs	r4, r0
 8008e12:	603b      	str	r3, [r7, #0]
 8008e14:	0020      	movs	r0, r4
 8008e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e18:	0020      	movs	r0, r4
 8008e1a:	4b0a      	ldr	r3, [pc, #40]	; (8008e44 <__sfp+0x78>)
 8008e1c:	6665      	str	r5, [r4, #100]	; 0x64
 8008e1e:	6025      	str	r5, [r4, #0]
 8008e20:	6065      	str	r5, [r4, #4]
 8008e22:	60a5      	str	r5, [r4, #8]
 8008e24:	60e3      	str	r3, [r4, #12]
 8008e26:	6125      	str	r5, [r4, #16]
 8008e28:	6165      	str	r5, [r4, #20]
 8008e2a:	61a5      	str	r5, [r4, #24]
 8008e2c:	2208      	movs	r2, #8
 8008e2e:	0029      	movs	r1, r5
 8008e30:	305c      	adds	r0, #92	; 0x5c
 8008e32:	f7ff fa46 	bl	80082c2 <memset>
 8008e36:	6365      	str	r5, [r4, #52]	; 0x34
 8008e38:	63a5      	str	r5, [r4, #56]	; 0x38
 8008e3a:	64a5      	str	r5, [r4, #72]	; 0x48
 8008e3c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8008e3e:	e7e9      	b.n	8008e14 <__sfp+0x48>
 8008e40:	08009404 	.word	0x08009404
 8008e44:	ffff0001 	.word	0xffff0001

08008e48 <_fwalk_reent>:
 8008e48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e4a:	0004      	movs	r4, r0
 8008e4c:	0007      	movs	r7, r0
 8008e4e:	2600      	movs	r6, #0
 8008e50:	9101      	str	r1, [sp, #4]
 8008e52:	3448      	adds	r4, #72	; 0x48
 8008e54:	2c00      	cmp	r4, #0
 8008e56:	d101      	bne.n	8008e5c <_fwalk_reent+0x14>
 8008e58:	0030      	movs	r0, r6
 8008e5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008e5c:	6863      	ldr	r3, [r4, #4]
 8008e5e:	68a5      	ldr	r5, [r4, #8]
 8008e60:	9300      	str	r3, [sp, #0]
 8008e62:	9b00      	ldr	r3, [sp, #0]
 8008e64:	3b01      	subs	r3, #1
 8008e66:	9300      	str	r3, [sp, #0]
 8008e68:	d501      	bpl.n	8008e6e <_fwalk_reent+0x26>
 8008e6a:	6824      	ldr	r4, [r4, #0]
 8008e6c:	e7f2      	b.n	8008e54 <_fwalk_reent+0xc>
 8008e6e:	89ab      	ldrh	r3, [r5, #12]
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d908      	bls.n	8008e86 <_fwalk_reent+0x3e>
 8008e74:	220e      	movs	r2, #14
 8008e76:	5eab      	ldrsh	r3, [r5, r2]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	d004      	beq.n	8008e86 <_fwalk_reent+0x3e>
 8008e7c:	0029      	movs	r1, r5
 8008e7e:	0038      	movs	r0, r7
 8008e80:	9b01      	ldr	r3, [sp, #4]
 8008e82:	4798      	blx	r3
 8008e84:	4306      	orrs	r6, r0
 8008e86:	3568      	adds	r5, #104	; 0x68
 8008e88:	e7eb      	b.n	8008e62 <_fwalk_reent+0x1a>
	...

08008e8c <__swhatbuf_r>:
 8008e8c:	b570      	push	{r4, r5, r6, lr}
 8008e8e:	000e      	movs	r6, r1
 8008e90:	001d      	movs	r5, r3
 8008e92:	230e      	movs	r3, #14
 8008e94:	5ec9      	ldrsh	r1, [r1, r3]
 8008e96:	b096      	sub	sp, #88	; 0x58
 8008e98:	0014      	movs	r4, r2
 8008e9a:	2900      	cmp	r1, #0
 8008e9c:	da07      	bge.n	8008eae <__swhatbuf_r+0x22>
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	602b      	str	r3, [r5, #0]
 8008ea2:	89b3      	ldrh	r3, [r6, #12]
 8008ea4:	061b      	lsls	r3, r3, #24
 8008ea6:	d411      	bmi.n	8008ecc <__swhatbuf_r+0x40>
 8008ea8:	2380      	movs	r3, #128	; 0x80
 8008eaa:	00db      	lsls	r3, r3, #3
 8008eac:	e00f      	b.n	8008ece <__swhatbuf_r+0x42>
 8008eae:	466a      	mov	r2, sp
 8008eb0:	f000 f922 	bl	80090f8 <_fstat_r>
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	dbf2      	blt.n	8008e9e <__swhatbuf_r+0x12>
 8008eb8:	22f0      	movs	r2, #240	; 0xf0
 8008eba:	9b01      	ldr	r3, [sp, #4]
 8008ebc:	0212      	lsls	r2, r2, #8
 8008ebe:	4013      	ands	r3, r2
 8008ec0:	4a05      	ldr	r2, [pc, #20]	; (8008ed8 <__swhatbuf_r+0x4c>)
 8008ec2:	189b      	adds	r3, r3, r2
 8008ec4:	425a      	negs	r2, r3
 8008ec6:	4153      	adcs	r3, r2
 8008ec8:	602b      	str	r3, [r5, #0]
 8008eca:	e7ed      	b.n	8008ea8 <__swhatbuf_r+0x1c>
 8008ecc:	2340      	movs	r3, #64	; 0x40
 8008ece:	2000      	movs	r0, #0
 8008ed0:	6023      	str	r3, [r4, #0]
 8008ed2:	b016      	add	sp, #88	; 0x58
 8008ed4:	bd70      	pop	{r4, r5, r6, pc}
 8008ed6:	46c0      	nop			; (mov r8, r8)
 8008ed8:	ffffe000 	.word	0xffffe000

08008edc <__smakebuf_r>:
 8008edc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ede:	2602      	movs	r6, #2
 8008ee0:	898b      	ldrh	r3, [r1, #12]
 8008ee2:	0005      	movs	r5, r0
 8008ee4:	000c      	movs	r4, r1
 8008ee6:	4233      	tst	r3, r6
 8008ee8:	d006      	beq.n	8008ef8 <__smakebuf_r+0x1c>
 8008eea:	0023      	movs	r3, r4
 8008eec:	3347      	adds	r3, #71	; 0x47
 8008eee:	6023      	str	r3, [r4, #0]
 8008ef0:	6123      	str	r3, [r4, #16]
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	6163      	str	r3, [r4, #20]
 8008ef6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008ef8:	ab01      	add	r3, sp, #4
 8008efa:	466a      	mov	r2, sp
 8008efc:	f7ff ffc6 	bl	8008e8c <__swhatbuf_r>
 8008f00:	9900      	ldr	r1, [sp, #0]
 8008f02:	0007      	movs	r7, r0
 8008f04:	0028      	movs	r0, r5
 8008f06:	f7ff fa3d 	bl	8008384 <_malloc_r>
 8008f0a:	2800      	cmp	r0, #0
 8008f0c:	d108      	bne.n	8008f20 <__smakebuf_r+0x44>
 8008f0e:	220c      	movs	r2, #12
 8008f10:	5ea3      	ldrsh	r3, [r4, r2]
 8008f12:	059a      	lsls	r2, r3, #22
 8008f14:	d4ef      	bmi.n	8008ef6 <__smakebuf_r+0x1a>
 8008f16:	2203      	movs	r2, #3
 8008f18:	4393      	bics	r3, r2
 8008f1a:	431e      	orrs	r6, r3
 8008f1c:	81a6      	strh	r6, [r4, #12]
 8008f1e:	e7e4      	b.n	8008eea <__smakebuf_r+0xe>
 8008f20:	4b0f      	ldr	r3, [pc, #60]	; (8008f60 <__smakebuf_r+0x84>)
 8008f22:	62ab      	str	r3, [r5, #40]	; 0x28
 8008f24:	2380      	movs	r3, #128	; 0x80
 8008f26:	89a2      	ldrh	r2, [r4, #12]
 8008f28:	6020      	str	r0, [r4, #0]
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	81a3      	strh	r3, [r4, #12]
 8008f2e:	9b00      	ldr	r3, [sp, #0]
 8008f30:	6120      	str	r0, [r4, #16]
 8008f32:	6163      	str	r3, [r4, #20]
 8008f34:	9b01      	ldr	r3, [sp, #4]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d00d      	beq.n	8008f56 <__smakebuf_r+0x7a>
 8008f3a:	230e      	movs	r3, #14
 8008f3c:	5ee1      	ldrsh	r1, [r4, r3]
 8008f3e:	0028      	movs	r0, r5
 8008f40:	f000 f8ec 	bl	800911c <_isatty_r>
 8008f44:	2800      	cmp	r0, #0
 8008f46:	d006      	beq.n	8008f56 <__smakebuf_r+0x7a>
 8008f48:	2203      	movs	r2, #3
 8008f4a:	89a3      	ldrh	r3, [r4, #12]
 8008f4c:	4393      	bics	r3, r2
 8008f4e:	001a      	movs	r2, r3
 8008f50:	2301      	movs	r3, #1
 8008f52:	4313      	orrs	r3, r2
 8008f54:	81a3      	strh	r3, [r4, #12]
 8008f56:	89a0      	ldrh	r0, [r4, #12]
 8008f58:	4338      	orrs	r0, r7
 8008f5a:	81a0      	strh	r0, [r4, #12]
 8008f5c:	e7cb      	b.n	8008ef6 <__smakebuf_r+0x1a>
 8008f5e:	46c0      	nop			; (mov r8, r8)
 8008f60:	08008d29 	.word	0x08008d29

08008f64 <memchr>:
 8008f64:	b2c9      	uxtb	r1, r1
 8008f66:	1882      	adds	r2, r0, r2
 8008f68:	4290      	cmp	r0, r2
 8008f6a:	d101      	bne.n	8008f70 <memchr+0xc>
 8008f6c:	2000      	movs	r0, #0
 8008f6e:	4770      	bx	lr
 8008f70:	7803      	ldrb	r3, [r0, #0]
 8008f72:	428b      	cmp	r3, r1
 8008f74:	d0fb      	beq.n	8008f6e <memchr+0xa>
 8008f76:	3001      	adds	r0, #1
 8008f78:	e7f6      	b.n	8008f68 <memchr+0x4>

08008f7a <__malloc_lock>:
 8008f7a:	4770      	bx	lr

08008f7c <__malloc_unlock>:
 8008f7c:	4770      	bx	lr

08008f7e <_raise_r>:
 8008f7e:	b570      	push	{r4, r5, r6, lr}
 8008f80:	0004      	movs	r4, r0
 8008f82:	000d      	movs	r5, r1
 8008f84:	291f      	cmp	r1, #31
 8008f86:	d904      	bls.n	8008f92 <_raise_r+0x14>
 8008f88:	2316      	movs	r3, #22
 8008f8a:	6003      	str	r3, [r0, #0]
 8008f8c:	2001      	movs	r0, #1
 8008f8e:	4240      	negs	r0, r0
 8008f90:	bd70      	pop	{r4, r5, r6, pc}
 8008f92:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d004      	beq.n	8008fa2 <_raise_r+0x24>
 8008f98:	008a      	lsls	r2, r1, #2
 8008f9a:	189b      	adds	r3, r3, r2
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	2a00      	cmp	r2, #0
 8008fa0:	d108      	bne.n	8008fb4 <_raise_r+0x36>
 8008fa2:	0020      	movs	r0, r4
 8008fa4:	f000 f832 	bl	800900c <_getpid_r>
 8008fa8:	002a      	movs	r2, r5
 8008faa:	0001      	movs	r1, r0
 8008fac:	0020      	movs	r0, r4
 8008fae:	f000 f81b 	bl	8008fe8 <_kill_r>
 8008fb2:	e7ed      	b.n	8008f90 <_raise_r+0x12>
 8008fb4:	2000      	movs	r0, #0
 8008fb6:	2a01      	cmp	r2, #1
 8008fb8:	d0ea      	beq.n	8008f90 <_raise_r+0x12>
 8008fba:	1c51      	adds	r1, r2, #1
 8008fbc:	d103      	bne.n	8008fc6 <_raise_r+0x48>
 8008fbe:	2316      	movs	r3, #22
 8008fc0:	3001      	adds	r0, #1
 8008fc2:	6023      	str	r3, [r4, #0]
 8008fc4:	e7e4      	b.n	8008f90 <_raise_r+0x12>
 8008fc6:	2400      	movs	r4, #0
 8008fc8:	0028      	movs	r0, r5
 8008fca:	601c      	str	r4, [r3, #0]
 8008fcc:	4790      	blx	r2
 8008fce:	0020      	movs	r0, r4
 8008fd0:	e7de      	b.n	8008f90 <_raise_r+0x12>
	...

08008fd4 <raise>:
 8008fd4:	b510      	push	{r4, lr}
 8008fd6:	4b03      	ldr	r3, [pc, #12]	; (8008fe4 <raise+0x10>)
 8008fd8:	0001      	movs	r1, r0
 8008fda:	6818      	ldr	r0, [r3, #0]
 8008fdc:	f7ff ffcf 	bl	8008f7e <_raise_r>
 8008fe0:	bd10      	pop	{r4, pc}
 8008fe2:	46c0      	nop			; (mov r8, r8)
 8008fe4:	2000000c 	.word	0x2000000c

08008fe8 <_kill_r>:
 8008fe8:	2300      	movs	r3, #0
 8008fea:	b570      	push	{r4, r5, r6, lr}
 8008fec:	4c06      	ldr	r4, [pc, #24]	; (8009008 <_kill_r+0x20>)
 8008fee:	0005      	movs	r5, r0
 8008ff0:	0008      	movs	r0, r1
 8008ff2:	0011      	movs	r1, r2
 8008ff4:	6023      	str	r3, [r4, #0]
 8008ff6:	f7f8 fe2d 	bl	8001c54 <_kill>
 8008ffa:	1c43      	adds	r3, r0, #1
 8008ffc:	d103      	bne.n	8009006 <_kill_r+0x1e>
 8008ffe:	6823      	ldr	r3, [r4, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d000      	beq.n	8009006 <_kill_r+0x1e>
 8009004:	602b      	str	r3, [r5, #0]
 8009006:	bd70      	pop	{r4, r5, r6, pc}
 8009008:	20000888 	.word	0x20000888

0800900c <_getpid_r>:
 800900c:	b510      	push	{r4, lr}
 800900e:	f7f8 fe1b 	bl	8001c48 <_getpid>
 8009012:	bd10      	pop	{r4, pc}

08009014 <__sread>:
 8009014:	b570      	push	{r4, r5, r6, lr}
 8009016:	000c      	movs	r4, r1
 8009018:	250e      	movs	r5, #14
 800901a:	5f49      	ldrsh	r1, [r1, r5]
 800901c:	f000 f8a4 	bl	8009168 <_read_r>
 8009020:	2800      	cmp	r0, #0
 8009022:	db03      	blt.n	800902c <__sread+0x18>
 8009024:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009026:	181b      	adds	r3, r3, r0
 8009028:	6563      	str	r3, [r4, #84]	; 0x54
 800902a:	bd70      	pop	{r4, r5, r6, pc}
 800902c:	89a3      	ldrh	r3, [r4, #12]
 800902e:	4a02      	ldr	r2, [pc, #8]	; (8009038 <__sread+0x24>)
 8009030:	4013      	ands	r3, r2
 8009032:	81a3      	strh	r3, [r4, #12]
 8009034:	e7f9      	b.n	800902a <__sread+0x16>
 8009036:	46c0      	nop			; (mov r8, r8)
 8009038:	ffffefff 	.word	0xffffefff

0800903c <__swrite>:
 800903c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800903e:	001f      	movs	r7, r3
 8009040:	898b      	ldrh	r3, [r1, #12]
 8009042:	0005      	movs	r5, r0
 8009044:	000c      	movs	r4, r1
 8009046:	0016      	movs	r6, r2
 8009048:	05db      	lsls	r3, r3, #23
 800904a:	d505      	bpl.n	8009058 <__swrite+0x1c>
 800904c:	230e      	movs	r3, #14
 800904e:	5ec9      	ldrsh	r1, [r1, r3]
 8009050:	2200      	movs	r2, #0
 8009052:	2302      	movs	r3, #2
 8009054:	f000 f874 	bl	8009140 <_lseek_r>
 8009058:	89a3      	ldrh	r3, [r4, #12]
 800905a:	4a05      	ldr	r2, [pc, #20]	; (8009070 <__swrite+0x34>)
 800905c:	0028      	movs	r0, r5
 800905e:	4013      	ands	r3, r2
 8009060:	81a3      	strh	r3, [r4, #12]
 8009062:	0032      	movs	r2, r6
 8009064:	230e      	movs	r3, #14
 8009066:	5ee1      	ldrsh	r1, [r4, r3]
 8009068:	003b      	movs	r3, r7
 800906a:	f000 f81f 	bl	80090ac <_write_r>
 800906e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009070:	ffffefff 	.word	0xffffefff

08009074 <__sseek>:
 8009074:	b570      	push	{r4, r5, r6, lr}
 8009076:	000c      	movs	r4, r1
 8009078:	250e      	movs	r5, #14
 800907a:	5f49      	ldrsh	r1, [r1, r5]
 800907c:	f000 f860 	bl	8009140 <_lseek_r>
 8009080:	89a3      	ldrh	r3, [r4, #12]
 8009082:	1c42      	adds	r2, r0, #1
 8009084:	d103      	bne.n	800908e <__sseek+0x1a>
 8009086:	4a05      	ldr	r2, [pc, #20]	; (800909c <__sseek+0x28>)
 8009088:	4013      	ands	r3, r2
 800908a:	81a3      	strh	r3, [r4, #12]
 800908c:	bd70      	pop	{r4, r5, r6, pc}
 800908e:	2280      	movs	r2, #128	; 0x80
 8009090:	0152      	lsls	r2, r2, #5
 8009092:	4313      	orrs	r3, r2
 8009094:	81a3      	strh	r3, [r4, #12]
 8009096:	6560      	str	r0, [r4, #84]	; 0x54
 8009098:	e7f8      	b.n	800908c <__sseek+0x18>
 800909a:	46c0      	nop			; (mov r8, r8)
 800909c:	ffffefff 	.word	0xffffefff

080090a0 <__sclose>:
 80090a0:	b510      	push	{r4, lr}
 80090a2:	230e      	movs	r3, #14
 80090a4:	5ec9      	ldrsh	r1, [r1, r3]
 80090a6:	f000 f815 	bl	80090d4 <_close_r>
 80090aa:	bd10      	pop	{r4, pc}

080090ac <_write_r>:
 80090ac:	b570      	push	{r4, r5, r6, lr}
 80090ae:	0005      	movs	r5, r0
 80090b0:	0008      	movs	r0, r1
 80090b2:	0011      	movs	r1, r2
 80090b4:	2200      	movs	r2, #0
 80090b6:	4c06      	ldr	r4, [pc, #24]	; (80090d0 <_write_r+0x24>)
 80090b8:	6022      	str	r2, [r4, #0]
 80090ba:	001a      	movs	r2, r3
 80090bc:	f7f8 fe03 	bl	8001cc6 <_write>
 80090c0:	1c43      	adds	r3, r0, #1
 80090c2:	d103      	bne.n	80090cc <_write_r+0x20>
 80090c4:	6823      	ldr	r3, [r4, #0]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d000      	beq.n	80090cc <_write_r+0x20>
 80090ca:	602b      	str	r3, [r5, #0]
 80090cc:	bd70      	pop	{r4, r5, r6, pc}
 80090ce:	46c0      	nop			; (mov r8, r8)
 80090d0:	20000888 	.word	0x20000888

080090d4 <_close_r>:
 80090d4:	2300      	movs	r3, #0
 80090d6:	b570      	push	{r4, r5, r6, lr}
 80090d8:	4c06      	ldr	r4, [pc, #24]	; (80090f4 <_close_r+0x20>)
 80090da:	0005      	movs	r5, r0
 80090dc:	0008      	movs	r0, r1
 80090de:	6023      	str	r3, [r4, #0]
 80090e0:	f7f8 fe0d 	bl	8001cfe <_close>
 80090e4:	1c43      	adds	r3, r0, #1
 80090e6:	d103      	bne.n	80090f0 <_close_r+0x1c>
 80090e8:	6823      	ldr	r3, [r4, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d000      	beq.n	80090f0 <_close_r+0x1c>
 80090ee:	602b      	str	r3, [r5, #0]
 80090f0:	bd70      	pop	{r4, r5, r6, pc}
 80090f2:	46c0      	nop			; (mov r8, r8)
 80090f4:	20000888 	.word	0x20000888

080090f8 <_fstat_r>:
 80090f8:	2300      	movs	r3, #0
 80090fa:	b570      	push	{r4, r5, r6, lr}
 80090fc:	4c06      	ldr	r4, [pc, #24]	; (8009118 <_fstat_r+0x20>)
 80090fe:	0005      	movs	r5, r0
 8009100:	0008      	movs	r0, r1
 8009102:	0011      	movs	r1, r2
 8009104:	6023      	str	r3, [r4, #0]
 8009106:	f7f8 fe04 	bl	8001d12 <_fstat>
 800910a:	1c43      	adds	r3, r0, #1
 800910c:	d103      	bne.n	8009116 <_fstat_r+0x1e>
 800910e:	6823      	ldr	r3, [r4, #0]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d000      	beq.n	8009116 <_fstat_r+0x1e>
 8009114:	602b      	str	r3, [r5, #0]
 8009116:	bd70      	pop	{r4, r5, r6, pc}
 8009118:	20000888 	.word	0x20000888

0800911c <_isatty_r>:
 800911c:	2300      	movs	r3, #0
 800911e:	b570      	push	{r4, r5, r6, lr}
 8009120:	4c06      	ldr	r4, [pc, #24]	; (800913c <_isatty_r+0x20>)
 8009122:	0005      	movs	r5, r0
 8009124:	0008      	movs	r0, r1
 8009126:	6023      	str	r3, [r4, #0]
 8009128:	f7f8 fe01 	bl	8001d2e <_isatty>
 800912c:	1c43      	adds	r3, r0, #1
 800912e:	d103      	bne.n	8009138 <_isatty_r+0x1c>
 8009130:	6823      	ldr	r3, [r4, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d000      	beq.n	8009138 <_isatty_r+0x1c>
 8009136:	602b      	str	r3, [r5, #0]
 8009138:	bd70      	pop	{r4, r5, r6, pc}
 800913a:	46c0      	nop			; (mov r8, r8)
 800913c:	20000888 	.word	0x20000888

08009140 <_lseek_r>:
 8009140:	b570      	push	{r4, r5, r6, lr}
 8009142:	0005      	movs	r5, r0
 8009144:	0008      	movs	r0, r1
 8009146:	0011      	movs	r1, r2
 8009148:	2200      	movs	r2, #0
 800914a:	4c06      	ldr	r4, [pc, #24]	; (8009164 <_lseek_r+0x24>)
 800914c:	6022      	str	r2, [r4, #0]
 800914e:	001a      	movs	r2, r3
 8009150:	f7f8 fdf6 	bl	8001d40 <_lseek>
 8009154:	1c43      	adds	r3, r0, #1
 8009156:	d103      	bne.n	8009160 <_lseek_r+0x20>
 8009158:	6823      	ldr	r3, [r4, #0]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d000      	beq.n	8009160 <_lseek_r+0x20>
 800915e:	602b      	str	r3, [r5, #0]
 8009160:	bd70      	pop	{r4, r5, r6, pc}
 8009162:	46c0      	nop			; (mov r8, r8)
 8009164:	20000888 	.word	0x20000888

08009168 <_read_r>:
 8009168:	b570      	push	{r4, r5, r6, lr}
 800916a:	0005      	movs	r5, r0
 800916c:	0008      	movs	r0, r1
 800916e:	0011      	movs	r1, r2
 8009170:	2200      	movs	r2, #0
 8009172:	4c06      	ldr	r4, [pc, #24]	; (800918c <_read_r+0x24>)
 8009174:	6022      	str	r2, [r4, #0]
 8009176:	001a      	movs	r2, r3
 8009178:	f7f8 fd88 	bl	8001c8c <_read>
 800917c:	1c43      	adds	r3, r0, #1
 800917e:	d103      	bne.n	8009188 <_read_r+0x20>
 8009180:	6823      	ldr	r3, [r4, #0]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d000      	beq.n	8009188 <_read_r+0x20>
 8009186:	602b      	str	r3, [r5, #0]
 8009188:	bd70      	pop	{r4, r5, r6, pc}
 800918a:	46c0      	nop			; (mov r8, r8)
 800918c:	20000888 	.word	0x20000888

08009190 <_init>:
 8009190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009192:	46c0      	nop			; (mov r8, r8)
 8009194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009196:	bc08      	pop	{r3}
 8009198:	469e      	mov	lr, r3
 800919a:	4770      	bx	lr

0800919c <_fini>:
 800919c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800919e:	46c0      	nop			; (mov r8, r8)
 80091a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091a2:	bc08      	pop	{r3}
 80091a4:	469e      	mov	lr, r3
 80091a6:	4770      	bx	lr

080091a8 <__FLASH_Program_Fast_veneer>:
 80091a8:	b401      	push	{r0}
 80091aa:	4802      	ldr	r0, [pc, #8]	; (80091b4 <__FLASH_Program_Fast_veneer+0xc>)
 80091ac:	4684      	mov	ip, r0
 80091ae:	bc01      	pop	{r0}
 80091b0:	4760      	bx	ip
 80091b2:	bf00      	nop
 80091b4:	20000071 	.word	0x20000071

Disassembly of section .data:

20000000 <SystemCoreClock>:
20000000:	00f42400                                .$..

20000004 <uwTickPrio>:
20000004:	00000004                                ....

20000008 <uwTickFreq>:
20000008:	00000001                                ....

2000000c <_impure_ptr>:
2000000c:	20000010                                ... 

20000010 <impure_data>:
20000010:	00000000 0800945c 0800947c 0800943c     ....\...|...<...
	...

20000070 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000070:	b580      	push	{r7, lr}
20000072:	b088      	sub	sp, #32
20000074:	af00      	add	r7, sp, #0
20000076:	6078      	str	r0, [r7, #4]
20000078:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
2000007a:	231f      	movs	r3, #31
2000007c:	18fb      	adds	r3, r7, r3
2000007e:	2200      	movs	r2, #0
20000080:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
20000082:	687b      	ldr	r3, [r7, #4]
20000084:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
20000086:	683b      	ldr	r3, [r7, #0]
20000088:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000008a:	4b19      	ldr	r3, [pc, #100]	; (200000f0 <FLASH_Program_Fast+0x80>)
2000008c:	695a      	ldr	r2, [r3, #20]
2000008e:	4b18      	ldr	r3, [pc, #96]	; (200000f0 <FLASH_Program_Fast+0x80>)
20000090:	2180      	movs	r1, #128	; 0x80
20000092:	02c9      	lsls	r1, r1, #11
20000094:	430a      	orrs	r2, r1
20000096:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000098:	f3ef 8310 	mrs	r3, PRIMASK
2000009c:	60fb      	str	r3, [r7, #12]
  return(result);
2000009e:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200000a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200000a2:	b672      	cpsid	i
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
200000a4:	e00f      	b.n	200000c6 <FLASH_Program_Fast+0x56>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200000a6:	697a      	ldr	r2, [r7, #20]
200000a8:	69bb      	ldr	r3, [r7, #24]
200000aa:	6812      	ldr	r2, [r2, #0]
200000ac:	601a      	str	r2, [r3, #0]
    src += 4U;
200000ae:	697b      	ldr	r3, [r7, #20]
200000b0:	3304      	adds	r3, #4
200000b2:	617b      	str	r3, [r7, #20]
    dest += 4U;
200000b4:	69bb      	ldr	r3, [r7, #24]
200000b6:	3304      	adds	r3, #4
200000b8:	61bb      	str	r3, [r7, #24]
    index++;
200000ba:	211f      	movs	r1, #31
200000bc:	187b      	adds	r3, r7, r1
200000be:	781a      	ldrb	r2, [r3, #0]
200000c0:	187b      	adds	r3, r7, r1
200000c2:	3201      	adds	r2, #1
200000c4:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200000c6:	231f      	movs	r3, #31
200000c8:	18fb      	adds	r3, r7, r3
200000ca:	781b      	ldrb	r3, [r3, #0]
200000cc:	2b3f      	cmp	r3, #63	; 0x3f
200000ce:	d9ea      	bls.n	200000a6 <FLASH_Program_Fast+0x36>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
200000d0:	46c0      	nop			; (mov r8, r8)
200000d2:	4b07      	ldr	r3, [pc, #28]	; (200000f0 <FLASH_Program_Fast+0x80>)
200000d4:	691a      	ldr	r2, [r3, #16]
200000d6:	2380      	movs	r3, #128	; 0x80
200000d8:	025b      	lsls	r3, r3, #9
200000da:	4013      	ands	r3, r2
200000dc:	d1f9      	bne.n	200000d2 <FLASH_Program_Fast+0x62>
200000de:	693b      	ldr	r3, [r7, #16]
200000e0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200000e2:	68bb      	ldr	r3, [r7, #8]
200000e4:	f383 8810 	msr	PRIMASK, r3
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200000e8:	46c0      	nop			; (mov r8, r8)
200000ea:	46bd      	mov	sp, r7
200000ec:	b008      	add	sp, #32
200000ee:	bd80      	pop	{r7, pc}
200000f0:	40022000 	.word	0x40022000
